/* tslint:disable */
/* eslint-disable */
/**
 * Feature
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { Configuration } from "./configuration";
import globalAxios, { AxiosInstance, AxiosRequestConfig } from "axios";
// Some imports not used depending on template conditions
// @ts-ignore
import {
  DUMMY_BASE_URL,
  assertParamExists,
  setApiKeyToObject,
  setBasicAuthToObject,
  setBearerAuthToObject,
  setOAuthToObject,
  setSearchParams,
  serializeDataIfNeeded,
  toPathString,
  createRequestFunction,
} from "./common";
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from "./base";

/**
 * 建立部門
 * @export
 * @interface AddMinistryCommand
 */
export interface AddMinistryCommand {
  /**
   * 事工團職分明細
   * @type {Array<CreateMinistryRespCommand>}
   * @memberof AddMinistryCommand
   */
  ministryResps: Array<CreateMinistryRespCommand>;
  /**
   * id
   * @type {number}
   * @memberof AddMinistryCommand
   */
  id: number;
  /**
   * Organization.Id
   * @type {number}
   * @memberof AddMinistryCommand
   */
  organizationId: number;
  /**
   * 組織名稱
   * @type {string}
   * @memberof AddMinistryCommand
   */
  organizationName: string;
  /**
   * 事工團分類id
   * @type {number}
   * @memberof AddMinistryCommand
   */
  ministryDefId: number;
  /**
   * 事工團編號
   * @type {string}
   * @memberof AddMinistryCommand
   */
  ministryNo: string;
  /**
   * 事工團名稱
   * @type {string}
   * @memberof AddMinistryCommand
   */
  name: string;
  /**
   * 是否兒童事工團
   * @type {string}
   * @memberof AddMinistryCommand
   */
  childMinistry: string;
  /**
   * 事工團狀態
   * @type {string}
   * @memberof AddMinistryCommand
   */
  ministryStatus: string;
  /**
   * 性質
   * @type {string}
   * @memberof AddMinistryCommand
   */
  nature: string;
  /**
   * id
   * @type {string}
   * @memberof AddMinistryCommand
   */
  statusCd: string;
  /**
   *
   * @type {string}
   * @memberof AddMinistryCommand
   */
  comment: string;
  /**
   *
   * @type {string}
   * @memberof AddMinistryCommand
   */
  dateCreate?: string | null;
  /**
   *
   * @type {string}
   * @memberof AddMinistryCommand
   */
  userCreate?: string | null;
  /**
   *
   * @type {string}
   * @memberof AddMinistryCommand
   */
  dateUpdate?: string | null;
  /**
   *
   * @type {string}
   * @memberof AddMinistryCommand
   */
  userUpdate?: string | null;
}
/**
 * 尋找帳號結果
 * @export
 * @interface AddMinistryCommandResponse
 */
export interface AddMinistryCommandResponse {
  /**
   * 帳號
   * @type {string}
   * @memberof AddMinistryCommandResponse
   */
  name: string;
}
/**
 * 建立部門
 * @export
 * @interface AddMinistryDefCommand
 */
export interface AddMinistryDefCommand {
  /**
   * id
   * @type {number}
   * @memberof AddMinistryDefCommand
   */
  id: number;
  /**
   * 事工團分類代碼
   * @type {string}
   * @memberof AddMinistryDefCommand
   */
  ministryDefNo: string;
  /**
   * 事工團分類名稱
   * @type {string}
   * @memberof AddMinistryDefCommand
   */
  name: string;
  /**
   * 事工團類別狀態
   * @type {string}
   * @memberof AddMinistryDefCommand
   */
  ministryDefStatus: string;
  /**
   * 事工團類別  MinistryDefType 0一般事工團   1小組
   * @type {string}
   * @memberof AddMinistryDefCommand
   */
  ministryDefType: string;
  /**
   * id
   * @type {string}
   * @memberof AddMinistryDefCommand
   */
  statusCd: string;
  /**
   *
   * @type {string}
   * @memberof AddMinistryDefCommand
   */
  comment: string;
  /**
   *
   * @type {string}
   * @memberof AddMinistryDefCommand
   */
  dateCreate?: string | null;
  /**
   *
   * @type {string}
   * @memberof AddMinistryDefCommand
   */
  userCreate?: string | null;
  /**
   *
   * @type {string}
   * @memberof AddMinistryDefCommand
   */
  dateUpdate?: string | null;
  /**
   *
   * @type {string}
   * @memberof AddMinistryDefCommand
   */
  userUpdate?: string | null;
  /**
   *
   * @type {number}
   * @memberof AddMinistryDefCommand
   */
  isActivated: number;
}
/**
 * 建立部門
 * @export
 * @interface AddPastoralCommand
 */
export interface AddPastoralCommand {
  /**
   * 組織部門Id
   * @type {number}
   * @memberof AddPastoralCommand
   */
  deptId: number;
  /**
   * id
   * @type {number}
   * @memberof AddPastoralCommand
   */
  id: number;
  /**
   * 組織上層Id (分多階層)        堂點       牧區 督區 區 小組
   * @type {number}
   * @memberof AddPastoralCommand
   */
  upperPastoralId: number;
  /**
   * 分組區域名稱
   * @type {string}
   * @memberof AddPastoralCommand
   */
  name: string;
  /**
   * 分組區域職稱
   * @type {string}
   * @memberof AddPastoralCommand
   */
  title: string;
  /**
   * 小組編號//八碼數字 系統自動產生(為小組時才需填入)
   * @type {string}
   * @memberof AddPastoralCommand
   */
  groupNo: string;
  /**
   * 領導人 UserId
   * @type {number}
   * @memberof AddPastoralCommand
   */
  leaderId: number;
  /**
   * 領導人身分證
   * @type {string}
   * @memberof AddPastoralCommand
   */
  leaderIdnumber: string;
  /**
   * 領導人2 UserId
   * @type {number}
   * @memberof AddPastoralCommand
   */
  leader2Id: number;
  /**
   * 領導人2身分證
   * @type {string}
   * @memberof AddPastoralCommand
   */
  leader2Idnumber: string;
  /**
   * 領導人3 UserId
   * @type {number}
   * @memberof AddPastoralCommand
   */
  leader3Id: number;
  /**
   * 領導人3身分證
   * @type {string}
   * @memberof AddPastoralCommand
   */
  leader3Idnumber: string;
  /**
   * 最大權限人UserId
   * @type {number}
   * @memberof AddPastoralCommand
   */
  supervisorId: number;
  /**
   * LineToken
   * @type {string}
   * @memberof AddPastoralCommand
   */
  lineToken: string;
  /**
   *
   * @type {number}
   * @memberof AddPastoralCommand
   */
  upperOrganizationId: number;
  /**
   *
   * @type {number}
   * @memberof AddPastoralCommand
   */
  orgId: number;
  /**
   *
   * @type {string}
   * @memberof AddPastoralCommand
   */
  typeId: string;
  /**
   *
   * @type {string}
   * @memberof AddPastoralCommand
   */
  statusCd: string;
  /**
   *
   * @type {string}
   * @memberof AddPastoralCommand
   */
  comment: string;
  /**
   *
   * @type {string}
   * @memberof AddPastoralCommand
   */
  dateCreate?: string | null;
  /**
   *
   * @type {string}
   * @memberof AddPastoralCommand
   */
  userCreate?: string | null;
  /**
   *
   * @type {string}
   * @memberof AddPastoralCommand
   */
  dateUpdate?: string | null;
  /**
   *
   * @type {string}
   * @memberof AddPastoralCommand
   */
  userUpdate?: string | null;
  /**
   *
   * @type {number}
   * @memberof AddPastoralCommand
   */
  isActivated: number;
}
/**
 * API 系統操作紀錄
 * @export
 * @interface ApiAuditLog
 */
export interface ApiAuditLog {
  /**
   * Id
   * @type {number}
   * @memberof ApiAuditLog
   */
  id: number;
  /**
   * 操作人員帳號
   * @type {string}
   * @memberof ApiAuditLog
   */
  account: string;
  /**
   * 操作人員姓名
   * @type {string}
   * @memberof ApiAuditLog
   */
  name: string;
  /**
   * 來源 IP
   * @type {string}
   * @memberof ApiAuditLog
   */
  sourceIp: string;
  /**
   * 請求 Method
   * @type {string}
   * @memberof ApiAuditLog
   */
  httpMethod: string;
  /**
   * 請求網址路徑
   * @type {string}
   * @memberof ApiAuditLog
   */
  requestPath: string;
  /**
   * 請求網址參數
   * @type {string}
   * @memberof ApiAuditLog
   */
  requestQueryString: string;
  /**
   * 請求網址 headers
   * @type {string}
   * @memberof ApiAuditLog
   */
  requestHeaders: string;
  /**
   * 回傳 http 狀態碼
   * @type {number}
   * @memberof ApiAuditLog
   */
  responseStatusCode: number;
  /**
   * 請求資料
   * @type {string}
   * @memberof ApiAuditLog
   */
  requestBody: string;
  /**
   * 回應資料
   * @type {string}
   * @memberof ApiAuditLog
   */
  responseBody: string;
  /**
   * 執行時間(ms)
   * @type {number}
   * @memberof ApiAuditLog
   */
  timeElapsed: number;
  /**
   * ApiLog HandledId
   * @type {string}
   * @memberof ApiAuditLog
   */
  handledId?: string | null;
  /**
   * 建立日期
   * @type {string}
   * @memberof ApiAuditLog
   */
  dateCreate?: string;
  /**
   * 建立人員
   * @type {string}
   * @memberof ApiAuditLog
   */
  userCreate?: string | null;
  /**
   * 最後修改日期
   * @type {string}
   * @memberof ApiAuditLog
   */
  dateUpdate?: string | null;
  /**
   * 最後修改人員
   * @type {string}
   * @memberof ApiAuditLog
   */
  userUpdate?: string | null;
  /**
   *
   * @type {string}
   * @memberof ApiAuditLog
   */
  rowVersion?: string | null;
}
/**
 * 登入
 * @export
 * @interface ChildSignUpCommand
 */
export interface ChildSignUpCommand {
  /**
   * 所屬牧區id =>對應牧區身分類別
   * @type {number}
   * @memberof ChildSignUpCommand
   */
  pastoralId: number;
  /**
   * 姓名
   * @type {string}
   * @memberof ChildSignUpCommand
   */
  name: string;
  /**
   * 聚會點Id
   * @type {number}
   * @memberof ChildSignUpCommand
   */
  meetingPointId: number;
  /**
   * 帳號
   * @type {string}
   * @memberof ChildSignUpCommand
   */
  userNo: string;
  /**
   * 密碼
   * @type {string}
   * @memberof ChildSignUpCommand
   */
  password: string;
  /**
   * 令牌
   * @type {string}
   * @memberof ChildSignUpCommand
   */
  passwordSalt: string;
  /**
   * 手機類型 對應SystemConfig type=PhoneType 顯示 name value存此欄位 0：家長手機 1：小孩手機
   * @type {string}
   * @memberof ChildSignUpCommand
   */
  phoneType: string;
  /**
   * 姓
   * @type {string}
   * @memberof ChildSignUpCommand
   */
  firstName: string;
  /**
   * 名
   * @type {string}
   * @memberof ChildSignUpCommand
   */
  lastName: string;
  /**
   * 性別 對應SystemConfig type=GenderType 顯示 name value存此欄位0：女姓 1：男性\"
   * @type {string}
   * @memberof ChildSignUpCommand
   */
  genderType: string;
  /**
   * 居住國家
   * @type {string}
   * @memberof ChildSignUpCommand
   */
  liveCountry: string;
  /**
   * 生日
   * @type {string}
   * @memberof ChildSignUpCommand
   */
  birthday: string;
  /**
   * 身分證字號
   * @type {string}
   * @memberof ChildSignUpCommand
   */
  idNumber: string;
  /**
   * 手機國碼
   * @type {string}
   * @memberof ChildSignUpCommand
   */
  cellAreaCode: string;
  /**
   * 手機門號
   * @type {string}
   * @memberof ChildSignUpCommand
   */
  cellPhone: string;
  /**
   * 城市
   * @type {string}
   * @memberof ChildSignUpCommand
   */
  liveCity: string;
  /**
   * 郵遞區號
   * @type {string}
   * @memberof ChildSignUpCommand
   */
  liveZipCode: string;
  /**
   * 地區
   * @type {string}
   * @memberof ChildSignUpCommand
   */
  liveZipArea: string;
  /**
   * 詳細地址
   * @type {string}
   * @memberof ChildSignUpCommand
   */
  liveAddress: string;
  /**
   * 地址2
   * @type {string}
   * @memberof ChildSignUpCommand
   */
  liveAddress2: string;
  /**
   * 受洗 對應SystemConfig type=BaptizedType顯示 namevalue存此欄位0：未受洗1：已受洗2：其它
   * @type {string}
   * @memberof ChildSignUpCommand
   */
  baptizedType: string;
  /**
   * 受洗時間
   * @type {string}
   * @memberof ChildSignUpCommand
   */
  baptizedTime: string;
  /**
   * 教會施洗者 (若為旌旗教會者)
   * @type {string}
   * @memberof ChildSignUpCommand
   */
  baptizedPerson: string;
  /**
   * 教會類別 對應SystemConfigtype=ChurchType顯示 namevalue存此欄位0：其他1：旌旗教會
   * @type {string}
   * @memberof ChildSignUpCommand
   */
  churchType: string;
  /**
   * 會友所屬堂點 DDL對應Organization.Name
   * @type {string}
   * @memberof ChildSignUpCommand
   */
  churchName: string;
  /**
   * 過去在哪個教會名稱
   * @type {string}
   * @memberof ChildSignUpCommand
   */
  anotherChurchName: string;
  /**
   * 電話(市話)
   * @type {string}
   * @memberof ChildSignUpCommand
   */
  phone: string;
  /**
   * 手機國碼1
   * @type {string}
   * @memberof ChildSignUpCommand
   */
  cellAreaCode1: string;
  /**
   * 電話(手機)
   * @type {string}
   * @memberof ChildSignUpCommand
   */
  cellPhone1: string;
  /**
   * 手機國碼2
   * @type {string}
   * @memberof ChildSignUpCommand
   */
  cellAreaCode2: string;
  /**
   * 電話(手機2)
   * @type {string}
   * @memberof ChildSignUpCommand
   */
  cellPhone2: string;
  /**
   * Email(主要)
   * @type {string}
   * @memberof ChildSignUpCommand
   */
  email1: string;
  /**
   * Email(次要)
   * @type {string}
   * @memberof ChildSignUpCommand
   */
  email2: string;
  /**
   * InstagramId
   * @type {string}
   * @memberof ChildSignUpCommand
   */
  instagramId: string;
  /**
   * LineId
   * @type {string}
   * @memberof ChildSignUpCommand
   */
  lineId: string;
  /**
   * WeChatId
   * @type {string}
   * @memberof ChildSignUpCommand
   */
  weChatId: string;
  /**
   * 其他APPID
   * @type {string}
   * @memberof ChildSignUpCommand
   */
  otherSocialId: string;
  /**
   * 是否在旌旗小組對應SystemConfigtype = isYN顯示 namevalue存此欄位0：N1：Y\"
   * @type {string}
   * @memberof ChildSignUpCommand
   */
  isChurchGroup: string;
  /**
   * Id
   * @type {string}
   * @memberof ChildSignUpCommand
   */
  churchGroupNo: string;
  /**
   * 是否願意加入旌旗小組對應SystemConfigtype = isYN顯示 namevalue存此欄位0：N1：Y\"
   * @type {string}
   * @memberof ChildSignUpCommand
   */
  isJoinChurchGroup: string;
  /**
   * 志願序1 實體 星期對應SystemConfigtype = JoinSequenceType0顯示 namevalue存此欄位1：星期一2：星期二3：星期三4：星期四5：星期五6：星期六7：星期日
   * @type {string}
   * @memberof ChildSignUpCommand
   */
  joinInPersonDate1: string;
  /**
   * 志願序1 實體 時間type=JoinSequenceType1顯示 namevalue存此欄位1：上午2：下午
   * @type {string}
   * @memberof ChildSignUpCommand
   */
  joinInPersonTime1: string;
  /**
   * 志願序1 實體 時間type=JoinSequenceType2顯示 namevalue存此欄位1：堂點
   * @type {string}
   * @memberof ChildSignUpCommand
   */
  joinInPersonLocation1: string;
  /**
   * 志願序2 實體 星期對應SystemConfigtype = JoinSequenceType0顯示 namevalue存此欄位1：星期一2：星期二3：星期三4：星期四5：星期五6：星期六7：星期日
   * @type {string}
   * @memberof ChildSignUpCommand
   */
  joinInPersonDate2: string;
  /**
   * 志願序2 實體 時間type=JoinSequenceType1顯示 namevalue存此欄位1：上午2：下午
   * @type {string}
   * @memberof ChildSignUpCommand
   */
  joinInPersonTime2: string;
  /**
   * 志願序2 實體 時間type=JoinSequenceType2顯示 namevalue存此欄位1：堂點
   * @type {string}
   * @memberof ChildSignUpCommand
   */
  joinInPersonLocation2: string;
  /**
   * 志願序3 實體 星期對應SystemConfigtype = JoinSequenceType0顯示 namevalue存此欄位1：星期一2：星期二3：星期三4：星期四5：星期五6：星期六7：星期日
   * @type {string}
   * @memberof ChildSignUpCommand
   */
  joinInPersonDate3: string;
  /**
   * 志願序3 實體 時間type=JoinSequenceType1顯示 namevalue存此欄位1：上午2：下午
   * @type {string}
   * @memberof ChildSignUpCommand
   */
  joinInPersonTime3: string;
  /**
   * 志願序3 實體 時間type=JoinSequenceType2顯示 namevalue存此欄位1：堂點
   * @type {string}
   * @memberof ChildSignUpCommand
   */
  joinInPersonLocation3: string;
  /**
   * 志願序1 線上 星期
   * @type {string}
   * @memberof ChildSignUpCommand
   */
  joinOnlineDate1: string;
  /**
   * 志願序1 線上 時間
   * @type {string}
   * @memberof ChildSignUpCommand
   */
  joinOnlineTime1: string;
  /**
   * 志願序2 線上 星期
   * @type {string}
   * @memberof ChildSignUpCommand
   */
  joinOnlineDate2: string;
  /**
   * 志願序2 線上 時間
   * @type {string}
   * @memberof ChildSignUpCommand
   */
  joinOnlineTime2: string;
  /**
   * 志願序3 線上 星期
   * @type {string}
   * @memberof ChildSignUpCommand
   */
  joinOnlineDate3: string;
  /**
   * 志願序3 線上 時間
   * @type {string}
   * @memberof ChildSignUpCommand
   */
  joinOnlineTime3: string;
  /**
   * Id
   * @type {string}
   * @memberof ChildSignUpCommand
   */
  memberType: string;
  /**
   * 教育程度type=EduType顯示 namevalue存此欄位0：小學1：國中…
   * @type {string}
   * @memberof ChildSignUpCommand
   */
  eduType: string;
  /**
   * 職業type=EduType顯示 namevalue存此欄位0：老師1：家管…
   * @type {string}
   * @memberof ChildSignUpCommand
   */
  professionType: string;
  /**
   * 是否結婚對應SystemConfigtype = IsMarried顯示 namevalue存此欄位0：未婚1：已婚
   * @type {string}
   * @memberof ChildSignUpCommand
   */
  isMarried: string;
  /**
   * 國碼
   * @type {string}
   * @memberof ChildSignUpCommand
   */
  countryCode: string;
  /**
   * 是否舊會員 Y是N否
   * @type {string}
   * @memberof ChildSignUpCommand
   */
  isOldMember: string;
  /**
   * 勾選合約
   * @type {string}
   * @memberof ChildSignUpCommand
   */
  isTerm: string;
  /**
   * 是否受洗
   * @type {string}
   * @memberof ChildSignUpCommand
   */
  isBaptize: string;
  /**
   * 受洗類別 0:未知 1: 本教會受洗 2: 其他教會受洗 3: 未受洗
   * @type {string}
   * @memberof ChildSignUpCommand
   */
  baptizeTypeId: string;
  /**
   * 受洗日期
   * @type {string}
   * @memberof ChildSignUpCommand
   */
  baptizeday: string;
  /**
   * 受洗教會
   * @type {string}
   * @memberof ChildSignUpCommand
   */
  baptizeOrgName: string;
  /**
   * 受洗教會
   * @type {string}
   * @memberof ChildSignUpCommand
   */
  baptizeGroup: string;
  /**
   * 施洗人
   * @type {string}
   * @memberof ChildSignUpCommand
   */
  baptizer: string;
  /**
   * 使用者家長Id
   * @type {number}
   * @memberof ChildSignUpCommand
   */
  parentUserId: number;
  /**
   * 是否會員
   * @type {string}
   * @memberof ChildSignUpCommand
   */
  isMember: string;
  /**
   * 同工角色類別 對應SystemConfig type=GroupMemberType 顯示 name value存此欄位 0：無 1：核心同工 2：儲備同工
   * @type {string}
   * @memberof ChildSignUpCommand
   */
  groupMemberType: string;
  /**
   * 中低收入戶 IsYN 0:否 1:是
   * @type {string}
   * @memberof ChildSignUpCommand
   */
  lowIncome: string;
  /**
   * 備註欄位
   * @type {string}
   * @memberof ChildSignUpCommand
   */
  remark: string;
  /**
   * 狀態
   * @type {string}
   * @memberof ChildSignUpCommand
   */
  statusCd: string;
}
/**
 * 尋找帳號結果
 * @export
 * @interface ChildSignUpCommandResponse
 */
export interface ChildSignUpCommandResponse {
  /**
   * 帳號
   * @type {string}
   * @memberof ChildSignUpCommandResponse
   */
  account: string;
}
/**
 *
 * @export
 * @interface ChildSignUpCommandResponseApiResponse
 */
export interface ChildSignUpCommandResponseApiResponse {
  /**
   *
   * @type {string}
   * @memberof ChildSignUpCommandResponseApiResponse
   */
  handledId?: string | null;
  /**
   * http-200  0000: 代表處理成功，其餘一律為失敗  http-4xx  Vxxxx: 資料驗證  Bxxxx: 詳見 message 欄位說明
   * @type {string}
   * @memberof ChildSignUpCommandResponseApiResponse
   */
  code: string;
  /**
   * 回傳訊息
   * @type {string}
   * @memberof ChildSignUpCommandResponseApiResponse
   */
  message: string;
  /**
   * 錯誤詳細資訊
   * @type {any}
   * @memberof ChildSignUpCommandResponseApiResponse
   */
  detailMessage: any;
  /**
   *
   * @type {ChildSignUpCommandResponse}
   * @memberof ChildSignUpCommandResponseApiResponse
   */
  data: ChildSignUpCommandResponse;
  /**
   * 交易時間
   * @type {string}
   * @memberof ChildSignUpCommandResponseApiResponse
   */
  txnTime: string;
}
/**
 *
 * @export
 * @interface Course
 */
export interface Course {
  /**
   * id
   * @type {number}
   * @memberof Course
   */
  id: number;
  /**
   * 課程類別CourseManagement.Id
   * @type {number}
   * @memberof Course
   */
  courseManagementId: number;
  /**
   * Organization.Id
   * @type {number}
   * @memberof Course
   */
  organizationId: number;
  /**
   * Questionnaire.Id 問卷Id
   * @type {number}
   * @memberof Course
   */
  questionnaireId: number;
  /**
   * 年度 屆別
   * @type {string}
   * @memberof Course
   */
  year: string;
  /**
   * 名稱
   * @type {string}
   * @memberof Course
   */
  name: string;
  /**
   * 梯次
   * @type {string}
   * @memberof Course
   */
  classNum: string;
  /**
   * 季
   * @type {string}
   * @memberof Course
   */
  season: string;
  /**
   * 開課日起
   * @type {string}
   * @memberof Course
   */
  openDateS: string;
  /**
   * 開課日迄
   * @type {string}
   * @memberof Course
   */
  openDateE: string;
  /**
   * 報名日期(線上)
   * @type {string}
   * @memberof Course
   */
  signUpDateS: string;
  /**
   * 報名截止日(線上)
   * @type {string}
   * @memberof Course
   */
  signUpDateE: string;
  /**
   * 報名日期(臨櫃)
   * @type {string}
   * @memberof Course
   */
  counterSignUpDateS: string;
  /**
   * 報名截止日(臨櫃)
   * @type {string}
   * @memberof Course
   */
  counterSignUpDateE: string;
  /**
   * 優惠報名截止日
   * @type {string}
   * @memberof Course
   */
  discountSignUpDate: string;
  /**
   * 報名方式對應type=CourseSignUpType顯示 namevalue存此欄位0：一般臨櫃1：網路報名
   * @type {string}
   * @memberof Course
   */
  courseSignUpType: string;
  /**
   * 最少志願數
   * @type {number}
   * @memberof Course
   */
  wishCount: number;
  /**
   * 是否需要推薦對應type=IsYN顯示 namevalue存此欄位0：N1：Y
   * @type {string}
   * @memberof Course
   */
  needRecommend: string;
  /**
   * 新朋友可報名對應type=IsYN顯示 namevalue存此欄位0：N1：Y
   * @type {string}
   * @memberof Course
   */
  acceptNewMember: string;
  /**
   * 課程說明/資格
   * @type {string}
   * @memberof Course
   */
  description: string;
  /**
   * 上課堂數
   * @type {number}
   * @memberof Course
   */
  courseCount: number;
  /**
   * 報名名額
   * @type {number}
   * @memberof Course
   */
  quota: number;
  /**
   * 結業狀態對應type=GraduationType顯示 namevalue存此欄位0：未結業1：已結業 2:-
   * @type {string}
   * @memberof Course
   */
  graduationType: string;
  /**
   * 前台特殊需求
   * @type {string}
   * @memberof Course
   */
  specialRequirement: string;
  /**
   * 對象資格說明
   * @type {string}
   * @memberof Course
   */
  basicQualification: string;
  /**
   * 結業資格說明
   * @type {string}
   * @memberof Course
   */
  graduationQualification: string;
  /**
   * 課程內容
   * @type {string}
   * @memberof Course
   */
  courseContext: string;
  /**
   * 注意事項
   * @type {string}
   * @memberof Course
   */
  courseNoticeDesc: string;
  /**
   * 退費原則
   * @type {string}
   * @memberof Course
   */
  courseRefundDesc: string;
  /**
   * 作業繳交日期
   * @type {string}
   * @memberof Course
   */
  homeworkDate: string;
  /**
   *
   * @type {string}
   * @memberof Course
   */
  statusCd: string;
  /**
   * 課程過濾主檔Id CourseManagementFilter.Id
   * @type {number}
   * @memberof Course
   */
  courseManagementFilterId: number;
  /**
   * ApiLog HandledId
   * @type {string}
   * @memberof Course
   */
  handledId?: string | null;
  /**
   * 建立日期
   * @type {string}
   * @memberof Course
   */
  dateCreate?: string;
  /**
   * 建立人員
   * @type {string}
   * @memberof Course
   */
  userCreate?: string | null;
  /**
   * 最後修改日期
   * @type {string}
   * @memberof Course
   */
  dateUpdate?: string | null;
  /**
   * 最後修改人員
   * @type {string}
   * @memberof Course
   */
  userUpdate?: string | null;
  /**
   *
   * @type {string}
   * @memberof Course
   */
  rowVersion?: string | null;
}
/**
 *
 * @export
 * @interface CourseAppendix
 */
export interface CourseAppendix {
  /**
   * id
   * @type {number}
   * @memberof CourseAppendix
   */
  id: number;
  /**
   * 課程類別CourseManagement.Id
   * @type {number}
   * @memberof CourseAppendix
   */
  courseId: number;
  /**
   * 附件類別對應type=AppendixType顯示 namevalue存此欄位0：文件1：影音
   * @type {string}
   * @memberof CourseAppendix
   */
  appendixType: string;
  /**
   * 存放網路路徑
   * @type {string}
   * @memberof CourseAppendix
   */
  path: string;
  /**
   *
   * @type {string}
   * @memberof CourseAppendix
   */
  statusCd: string;
  /**
   * ApiLog HandledId
   * @type {string}
   * @memberof CourseAppendix
   */
  handledId?: string | null;
  /**
   * 建立日期
   * @type {string}
   * @memberof CourseAppendix
   */
  dateCreate?: string;
  /**
   * 建立人員
   * @type {string}
   * @memberof CourseAppendix
   */
  userCreate?: string | null;
  /**
   * 最後修改日期
   * @type {string}
   * @memberof CourseAppendix
   */
  dateUpdate?: string | null;
  /**
   * 最後修改人員
   * @type {string}
   * @memberof CourseAppendix
   */
  userUpdate?: string | null;
  /**
   *
   * @type {string}
   * @memberof CourseAppendix
   */
  rowVersion?: string | null;
}
/**
 * 課程附件主檔
 * @export
 * @interface CourseAppendixBase
 */
export interface CourseAppendixBase {
  /**
   * id
   * @type {number}
   * @memberof CourseAppendixBase
   */
  id: number;
  /**
   * 課程類別CourseManagement.Id
   * @type {number}
   * @memberof CourseAppendixBase
   */
  courseId: number;
  /**
   * 附件類別對應type=AppendixType顯示 namevalue存此欄位 0：文件 1：影音 2：表單 3：圖片 4：Title圖片
   * @type {string}
   * @memberof CourseAppendixBase
   */
  appendixType: string;
  /**
   * 存放網路路徑  UploadFile.FileKey
   * @type {string}
   * @memberof CourseAppendixBase
   */
  path: string;
}
/**
 * CourseAppendix
 * @export
 * @interface CourseAppendixView
 */
export interface CourseAppendixView {
  /**
   *
   * @type {string}
   * @memberof CourseAppendixView
   */
  handledId?: string | null;
  /**
   *
   * @type {string}
   * @memberof CourseAppendixView
   */
  dateCreate?: string;
  /**
   *
   * @type {string}
   * @memberof CourseAppendixView
   */
  userCreate?: string | null;
  /**
   *
   * @type {string}
   * @memberof CourseAppendixView
   */
  dateUpdate?: string | null;
  /**
   *
   * @type {string}
   * @memberof CourseAppendixView
   */
  userUpdate?: string | null;
  /**
   * id
   * @type {number}
   * @memberof CourseAppendixView
   */
  id: number;
  /**
   * 課程類別CourseManagement.Id
   * @type {number}
   * @memberof CourseAppendixView
   */
  courseId: number;
  /**
   * 附件類別對應type=AppendixType顯示 namevalue存此欄位 0：文件 1：影音 2：表單 3：圖片 4：Title圖片
   * @type {string}
   * @memberof CourseAppendixView
   */
  appendixType: string;
  /**
   * 存放網路路徑  UploadFile.FileKey
   * @type {string}
   * @memberof CourseAppendixView
   */
  path: string;
}
/**
 *
 * @export
 * @interface CourseAppendixViewApiResponse
 */
export interface CourseAppendixViewApiResponse {
  /**
   *
   * @type {string}
   * @memberof CourseAppendixViewApiResponse
   */
  handledId?: string | null;
  /**
   * http-200  0000: 代表處理成功，其餘一律為失敗  http-4xx  Vxxxx: 資料驗證  Bxxxx: 詳見 message 欄位說明
   * @type {string}
   * @memberof CourseAppendixViewApiResponse
   */
  code: string;
  /**
   * 回傳訊息
   * @type {string}
   * @memberof CourseAppendixViewApiResponse
   */
  message: string;
  /**
   * 錯誤詳細資訊
   * @type {any}
   * @memberof CourseAppendixViewApiResponse
   */
  detailMessage: any;
  /**
   *
   * @type {CourseAppendixView}
   * @memberof CourseAppendixViewApiResponse
   */
  data: CourseAppendixView;
  /**
   * 交易時間
   * @type {string}
   * @memberof CourseAppendixViewApiResponse
   */
  txnTime: string;
}
/**
 *
 * @export
 * @interface CourseAppendixViewListApiResponse
 */
export interface CourseAppendixViewListApiResponse {
  /**
   *
   * @type {string}
   * @memberof CourseAppendixViewListApiResponse
   */
  handledId?: string | null;
  /**
   * http-200  0000: 代表處理成功，其餘一律為失敗  http-4xx  Vxxxx: 資料驗證  Bxxxx: 詳見 message 欄位說明
   * @type {string}
   * @memberof CourseAppendixViewListApiResponse
   */
  code: string;
  /**
   * 回傳訊息
   * @type {string}
   * @memberof CourseAppendixViewListApiResponse
   */
  message: string;
  /**
   * 錯誤詳細資訊
   * @type {any}
   * @memberof CourseAppendixViewListApiResponse
   */
  detailMessage: any;
  /**
   * 回傳資料
   * @type {Array<CourseAppendixView>}
   * @memberof CourseAppendixViewListApiResponse
   */
  data: Array<CourseAppendixView>;
  /**
   * 交易時間
   * @type {string}
   * @memberof CourseAppendixViewListApiResponse
   */
  txnTime: string;
}
/**
 *
 * @export
 * @interface CourseAppendixViewPage
 */
export interface CourseAppendixViewPage {
  /**
   *
   * @type {number}
   * @memberof CourseAppendixViewPage
   */
  totalCount: number;
  /**
   *
   * @type {number}
   * @memberof CourseAppendixViewPage
   */
  pageCount: number;
  /**
   *
   * @type {number}
   * @memberof CourseAppendixViewPage
   */
  currentPage: number;
  /**
   *
   * @type {number}
   * @memberof CourseAppendixViewPage
   */
  size: number;
  /**
   *
   * @type {Array<CourseAppendixView>}
   * @memberof CourseAppendixViewPage
   */
  records: Array<CourseAppendixView>;
  /**
   *
   * @type {number}
   * @memberof CourseAppendixViewPage
   */
  pageSize: number;
  /**
   *
   * @type {boolean}
   * @memberof CourseAppendixViewPage
   */
  hasPreviousPages: boolean;
  /**
   *
   * @type {boolean}
   * @memberof CourseAppendixViewPage
   */
  hasNextPages: boolean;
  /**
   *
   * @type {number}
   * @memberof CourseAppendixViewPage
   */
  previousLastPageNo: number;
  /**
   *
   * @type {number}
   * @memberof CourseAppendixViewPage
   */
  nextStartPageNo: number;
  /**
   *
   * @type {Array<number>}
   * @memberof CourseAppendixViewPage
   */
  navigationPages: Array<number>;
}
/**
 *
 * @export
 * @interface CourseAppendixViewPageApiResponse
 */
export interface CourseAppendixViewPageApiResponse {
  /**
   *
   * @type {string}
   * @memberof CourseAppendixViewPageApiResponse
   */
  handledId?: string | null;
  /**
   * http-200  0000: 代表處理成功，其餘一律為失敗  http-4xx  Vxxxx: 資料驗證  Bxxxx: 詳見 message 欄位說明
   * @type {string}
   * @memberof CourseAppendixViewPageApiResponse
   */
  code: string;
  /**
   * 回傳訊息
   * @type {string}
   * @memberof CourseAppendixViewPageApiResponse
   */
  message: string;
  /**
   * 錯誤詳細資訊
   * @type {any}
   * @memberof CourseAppendixViewPageApiResponse
   */
  detailMessage: any;
  /**
   *
   * @type {CourseAppendixViewPage}
   * @memberof CourseAppendixViewPageApiResponse
   */
  data: CourseAppendixViewPage;
  /**
   * 交易時間
   * @type {string}
   * @memberof CourseAppendixViewPageApiResponse
   */
  txnTime: string;
}
/**
 * 課程主檔
 * @export
 * @interface CourseBase
 */
export interface CourseBase {
  /**
   * id
   * @type {number}
   * @memberof CourseBase
   */
  id: number;
  /**
   * 課程類別CourseManagement.Id
   * @type {number}
   * @memberof CourseBase
   */
  courseManagementId: number;
  /**
   * Organization.Id
   * @type {number}
   * @memberof CourseBase
   */
  organizationId: number;
  /**
   * Questionnaire.Id 問卷Id
   * @type {number}
   * @memberof CourseBase
   */
  questionnaireId: number;
  /**
   * 年度 屆別
   * @type {string}
   * @memberof CourseBase
   */
  year: string;
  /**
   * 名稱
   * @type {string}
   * @memberof CourseBase
   */
  name: string;
  /**
   * 梯次
   * @type {string}
   * @memberof CourseBase
   */
  classNum: string;
  /**
   * 季
   * @type {string}
   * @memberof CourseBase
   */
  season: string;
  /**
   * 開課日
   * @type {string}
   * @memberof CourseBase
   */
  openDateS: string;
  /**
   * 開課日
   * @type {string}
   * @memberof CourseBase
   */
  openDateE: string;
  /**
   * 開課日
   * @type {string}
   * @memberof CourseBase
   */
  openDate: string;
  /**
   * 報名日期(線上)
   * @type {string}
   * @memberof CourseBase
   */
  signUpDateS: string;
  /**
   * 報名截止日(線上)
   * @type {string}
   * @memberof CourseBase
   */
  signUpDateE: string;
  /**
   * 報名日期(臨櫃)
   * @type {string}
   * @memberof CourseBase
   */
  counterSignUpDateS: string;
  /**
   * 報名截止日(臨櫃)
   * @type {string}
   * @memberof CourseBase
   */
  counterSignUpDateE: string;
  /**
   * 優惠報名截止日
   * @type {string}
   * @memberof CourseBase
   */
  discountSignUpDate: string;
  /**
   * 報名方式對應type=CourseSignUpType顯示 namevalue存此欄位0：一般臨櫃1：網路報名
   * @type {string}
   * @memberof CourseBase
   */
  courseSignUpType: string;
  /**
   * 最少志願數
   * @type {number}
   * @memberof CourseBase
   */
  wishCount: number;
  /**
   * 是否需要推薦對應type=IsYN顯示 namevalue存此欄位0：N1：Y
   * @type {string}
   * @memberof CourseBase
   */
  needRecommend: string;
  /**
   * 新朋友可報名對應type=IsYN顯示 namevalue存此欄位0：N1：Y
   * @type {string}
   * @memberof CourseBase
   */
  acceptNewMember: string;
  /**
   * 課程說明/資格
   * @type {string}
   * @memberof CourseBase
   */
  description: string;
  /**
   * 上課堂數
   * @type {number}
   * @memberof CourseBase
   */
  classCount: number;
  /**
   * 報名名額
   * @type {number}
   * @memberof CourseBase
   */
  quota: number;
  /**
   * 結業狀態對應type=GraduationType顯示 namevalue存此欄位0：未結業1：已結業 2:-
   * @type {string}
   * @memberof CourseBase
   */
  graduationType: string;
  /**
   * 前台特殊需求
   * @type {string}
   * @memberof CourseBase
   */
  specialRequirement: string;
  /**
   * 對象資格說明
   * @type {string}
   * @memberof CourseBase
   */
  basicQualification: string;
  /**
   * 結業資格說明
   * @type {string}
   * @memberof CourseBase
   */
  graduationQualification: string;
  /**
   * 課程內容
   * @type {string}
   * @memberof CourseBase
   */
  courseContext: string;
  /**
   * 注意事項
   * @type {string}
   * @memberof CourseBase
   */
  courseNoticeDesc: string;
  /**
   * 退費原則
   * @type {string}
   * @memberof CourseBase
   */
  courseRefundDesc: string;
  /**
   * 作業繳交日期
   * @type {string}
   * @memberof CourseBase
   */
  homeworkDate: string;
  /**
   * 狀態
   * @type {string}
   * @memberof CourseBase
   */
  statusCd: string;
  /**
   * 課程過濾主檔Id CourseManagementFilter.Id
   * @type {number}
   * @memberof CourseBase
   */
  courseManagementFilterId: number;
  /**
   * 課程圖片上傳
   * @type {Array<CourseAppendixBase | CourseAppendixView | UpdateCourseAppendixCommand | CreateCourseAppendixCommand>}
   * @memberof CourseBase
   */
  courseAppendices: Array<
    CourseAppendixBase | CourseAppendixView | UpdateCourseAppendixCommand | CreateCourseAppendixCommand
  >;
  /**
   * 課程過濾主檔
   * @type {CourseManagementFilterBase | CourseManagementFilterView | UpdateCourseManagementFilterCommand | CreateCourseManagementFilterCommand}
   * @memberof CourseBase
   */
  courseManagementFilter:
    | CourseManagementFilterBase
    | CourseManagementFilterView
    | UpdateCourseManagementFilterCommand
    | CreateCourseManagementFilterCommand;
}
/**
 *
 * @export
 * @interface CourseManagement
 */
export interface CourseManagement {
  /**
   * id
   * @type {number}
   * @memberof CourseManagement
   */
  id: number;
  /**
   * 課程類別CourseManagementType.Id
   * @type {number}
   * @memberof CourseManagement
   */
  courseManagementTypeId: number;
  /**
   * 堂點Id Organization.Id
   * @type {number}
   * @memberof CourseManagement
   */
  organizationId: number;
  /**
   * 課程代碼
   * @type {string}
   * @memberof CourseManagement
   */
  courseManagementNo: string;
  /**
   * 課程作業繳交日期
   * @type {string}
   * @memberof CourseManagement
   */
  homeworkDate: string;
  /**
   * 課程標題
   * @type {string}
   * @memberof CourseManagement
   */
  title: string;
  /**
   * 課程內容描述
   * @type {string}
   * @memberof CourseManagement
   */
  description: string;
  /**
   * 對象資格說明
   * @type {string}
   * @memberof CourseManagement
   */
  basicQualification: string;
  /**
   * 結業資格說明
   * @type {string}
   * @memberof CourseManagement
   */
  graduationQualification: string;
  /**
   * 課程類別 0實體 1線上 2網路學校
   * @type {string}
   * @memberof CourseManagement
   */
  courseType: string;
  /**
   * 課程狀態對應type=CourseManagementStatus顯示 namevalue存此欄位0：關閉1：開啟
   * @type {string}
   * @memberof CourseManagement
   */
  courseManagementStatus: string;
  /**
   *
   * @type {string}
   * @memberof CourseManagement
   */
  statusCd: string;
  /**
   * ApiLog HandledId
   * @type {string}
   * @memberof CourseManagement
   */
  handledId?: string | null;
  /**
   * 建立日期
   * @type {string}
   * @memberof CourseManagement
   */
  dateCreate?: string;
  /**
   * 建立人員
   * @type {string}
   * @memberof CourseManagement
   */
  userCreate?: string | null;
  /**
   * 最後修改日期
   * @type {string}
   * @memberof CourseManagement
   */
  dateUpdate?: string | null;
  /**
   * 最後修改人員
   * @type {string}
   * @memberof CourseManagement
   */
  userUpdate?: string | null;
  /**
   *
   * @type {string}
   * @memberof CourseManagement
   */
  rowVersion?: string | null;
}
/**
 *
 * @export
 * @interface CourseManagementAppendix
 */
export interface CourseManagementAppendix {
  /**
   * id
   * @type {number}
   * @memberof CourseManagementAppendix
   */
  id: number;
  /**
   * 課程類別CourseManagement.Id
   * @type {number}
   * @memberof CourseManagementAppendix
   */
  courseManagementId: number;
  /**
   * 附件類別對應type=AppendixType顯示 namevalue存此欄位0：文件1：影音
   * @type {string}
   * @memberof CourseManagementAppendix
   */
  appendixType: string;
  /**
   * 存放網路路徑
   * @type {string}
   * @memberof CourseManagementAppendix
   */
  path: string;
  /**
   *
   * @type {string}
   * @memberof CourseManagementAppendix
   */
  statusCd: string;
  /**
   * ApiLog HandledId
   * @type {string}
   * @memberof CourseManagementAppendix
   */
  handledId?: string | null;
  /**
   * 建立日期
   * @type {string}
   * @memberof CourseManagementAppendix
   */
  dateCreate?: string;
  /**
   * 建立人員
   * @type {string}
   * @memberof CourseManagementAppendix
   */
  userCreate?: string | null;
  /**
   * 最後修改日期
   * @type {string}
   * @memberof CourseManagementAppendix
   */
  dateUpdate?: string | null;
  /**
   * 最後修改人員
   * @type {string}
   * @memberof CourseManagementAppendix
   */
  userUpdate?: string | null;
  /**
   *
   * @type {string}
   * @memberof CourseManagementAppendix
   */
  rowVersion?: string | null;
}
/**
 * 課程樣版附件檔
 * @export
 * @interface CourseManagementAppendixBase
 */
export interface CourseManagementAppendixBase {
  /**
   * id
   * @type {number}
   * @memberof CourseManagementAppendixBase
   */
  id: number;
  /**
   * 課程類別CourseManagement.Id
   * @type {number}
   * @memberof CourseManagementAppendixBase
   */
  courseManagementId: number;
  /**
   * 附件類別對應type=AppendixType顯示 namevalue存此欄位0：文件1：影音
   * @type {string}
   * @memberof CourseManagementAppendixBase
   */
  appendixType: string;
  /**
   * 存放網路路徑
   * @type {string}
   * @memberof CourseManagementAppendixBase
   */
  path: string;
}
/**
 * CourseManagementAppendix
 * @export
 * @interface CourseManagementAppendixView
 */
export interface CourseManagementAppendixView {
  /**
   *
   * @type {string}
   * @memberof CourseManagementAppendixView
   */
  handledId?: string | null;
  /**
   *
   * @type {string}
   * @memberof CourseManagementAppendixView
   */
  dateCreate?: string;
  /**
   *
   * @type {string}
   * @memberof CourseManagementAppendixView
   */
  userCreate?: string | null;
  /**
   *
   * @type {string}
   * @memberof CourseManagementAppendixView
   */
  dateUpdate?: string | null;
  /**
   *
   * @type {string}
   * @memberof CourseManagementAppendixView
   */
  userUpdate?: string | null;
  /**
   * id
   * @type {number}
   * @memberof CourseManagementAppendixView
   */
  id: number;
  /**
   * 課程類別CourseManagement.Id
   * @type {number}
   * @memberof CourseManagementAppendixView
   */
  courseManagementId: number;
  /**
   * 附件類別對應type=AppendixType顯示 namevalue存此欄位0：文件1：影音
   * @type {string}
   * @memberof CourseManagementAppendixView
   */
  appendixType: string;
  /**
   * 存放網路路徑
   * @type {string}
   * @memberof CourseManagementAppendixView
   */
  path: string;
}
/**
 *
 * @export
 * @interface CourseManagementAppendixViewApiResponse
 */
export interface CourseManagementAppendixViewApiResponse {
  /**
   *
   * @type {string}
   * @memberof CourseManagementAppendixViewApiResponse
   */
  handledId?: string | null;
  /**
   * http-200  0000: 代表處理成功，其餘一律為失敗  http-4xx  Vxxxx: 資料驗證  Bxxxx: 詳見 message 欄位說明
   * @type {string}
   * @memberof CourseManagementAppendixViewApiResponse
   */
  code: string;
  /**
   * 回傳訊息
   * @type {string}
   * @memberof CourseManagementAppendixViewApiResponse
   */
  message: string;
  /**
   * 錯誤詳細資訊
   * @type {any}
   * @memberof CourseManagementAppendixViewApiResponse
   */
  detailMessage: any;
  /**
   *
   * @type {CourseManagementAppendixView}
   * @memberof CourseManagementAppendixViewApiResponse
   */
  data: CourseManagementAppendixView;
  /**
   * 交易時間
   * @type {string}
   * @memberof CourseManagementAppendixViewApiResponse
   */
  txnTime: string;
}
/**
 *
 * @export
 * @interface CourseManagementAppendixViewPage
 */
export interface CourseManagementAppendixViewPage {
  /**
   *
   * @type {number}
   * @memberof CourseManagementAppendixViewPage
   */
  totalCount: number;
  /**
   *
   * @type {number}
   * @memberof CourseManagementAppendixViewPage
   */
  pageCount: number;
  /**
   *
   * @type {number}
   * @memberof CourseManagementAppendixViewPage
   */
  currentPage: number;
  /**
   *
   * @type {number}
   * @memberof CourseManagementAppendixViewPage
   */
  size: number;
  /**
   *
   * @type {Array<CourseManagementAppendixView>}
   * @memberof CourseManagementAppendixViewPage
   */
  records: Array<CourseManagementAppendixView>;
  /**
   *
   * @type {number}
   * @memberof CourseManagementAppendixViewPage
   */
  pageSize: number;
  /**
   *
   * @type {boolean}
   * @memberof CourseManagementAppendixViewPage
   */
  hasPreviousPages: boolean;
  /**
   *
   * @type {boolean}
   * @memberof CourseManagementAppendixViewPage
   */
  hasNextPages: boolean;
  /**
   *
   * @type {number}
   * @memberof CourseManagementAppendixViewPage
   */
  previousLastPageNo: number;
  /**
   *
   * @type {number}
   * @memberof CourseManagementAppendixViewPage
   */
  nextStartPageNo: number;
  /**
   *
   * @type {Array<number>}
   * @memberof CourseManagementAppendixViewPage
   */
  navigationPages: Array<number>;
}
/**
 *
 * @export
 * @interface CourseManagementAppendixViewPageApiResponse
 */
export interface CourseManagementAppendixViewPageApiResponse {
  /**
   *
   * @type {string}
   * @memberof CourseManagementAppendixViewPageApiResponse
   */
  handledId?: string | null;
  /**
   * http-200  0000: 代表處理成功，其餘一律為失敗  http-4xx  Vxxxx: 資料驗證  Bxxxx: 詳見 message 欄位說明
   * @type {string}
   * @memberof CourseManagementAppendixViewPageApiResponse
   */
  code: string;
  /**
   * 回傳訊息
   * @type {string}
   * @memberof CourseManagementAppendixViewPageApiResponse
   */
  message: string;
  /**
   * 錯誤詳細資訊
   * @type {any}
   * @memberof CourseManagementAppendixViewPageApiResponse
   */
  detailMessage: any;
  /**
   *
   * @type {CourseManagementAppendixViewPage}
   * @memberof CourseManagementAppendixViewPageApiResponse
   */
  data: CourseManagementAppendixViewPage;
  /**
   * 交易時間
   * @type {string}
   * @memberof CourseManagementAppendixViewPageApiResponse
   */
  txnTime: string;
}
/**
 * 課程樣版主檔
 * @export
 * @interface CourseManagementBase
 */
export interface CourseManagementBase {
  /**
   * id
   * @type {number}
   * @memberof CourseManagementBase
   */
  id: number;
  /**
   * 課程類別CourseManagementType.Id
   * @type {number}
   * @memberof CourseManagementBase
   */
  courseManagementTypeId: number;
  /**
   * 堂點Id Organization.Id
   * @type {number}
   * @memberof CourseManagementBase
   */
  organizationId: number;
  /**
   * 課程代碼
   * @type {string}
   * @memberof CourseManagementBase
   */
  courseManagementNo: string;
  /**
   * 課程標題
   * @type {string}
   * @memberof CourseManagementBase
   */
  title: string;
  /**
   * 課程內容描述
   * @type {string}
   * @memberof CourseManagementBase
   */
  description: string;
  /**
   * 課程狀態對應type=CourseManagementStatus顯示 namevalue存此欄位0：關閉1：開啟
   * @type {string}
   * @memberof CourseManagementBase
   */
  courseManagementStatus: string;
  /**
   * 對象資格說明
   * @type {string}
   * @memberof CourseManagementBase
   */
  basicQualification: string;
  /**
   * 結業資格說明
   * @type {string}
   * @memberof CourseManagementBase
   */
  graduationQualification: string;
  /**
   * 課程類別 0實體 1線上 2網路學校
   * @type {string}
   * @memberof CourseManagementBase
   */
  courseType: string;
  /**
   * 狀態
   * @type {string}
   * @memberof CourseManagementBase
   */
  statusCd: string;
  /**
   * 課程過濾主檔
   * @type {Array<CourseManagementFilterBase | CourseManagementFilterView | UpdateCourseManagementFilterCommand | CreateCourseManagementFilterCommand>}
   * @memberof CourseManagementBase
   */
  courseManagementFilters: Array<
    | CourseManagementFilterBase
    | CourseManagementFilterView
    | UpdateCourseManagementFilterCommand
    | CreateCourseManagementFilterCommand
  >;
  /**
   * 課程過濾主檔_課程必修
   * @type {Array<CourseManagementFilterCourseBase | CourseManagementFilterCourseView | UpdateCourseManagementFilterCourseCommand | CreateCourseManagementFilterCourseCommand>}
   * @memberof CourseManagementBase
   */
  courseManagementFilterCourses: Array<
    | CourseManagementFilterCourseBase
    | CourseManagementFilterCourseView
    | UpdateCourseManagementFilterCourseCommand
    | CreateCourseManagementFilterCourseCommand
  >;
  /**
   * 課程樣版過濾牧場主檔
   * @type {Array<CourseManagementFilterPastoralBase | CourseManagementFilterPastoralView | UpdateCourseManagementFilterPastoralCommand | CreateCourseManagementFilterPastoralCommand>}
   * @memberof CourseManagementBase
   */
  courseManagementFilterPastorals: Array<
    | CourseManagementFilterPastoralBase
    | CourseManagementFilterPastoralView
    | UpdateCourseManagementFilterPastoralCommand
    | CreateCourseManagementFilterPastoralCommand
  >;
  /**
   * 課程樣版過濾職份主檔
   * @type {Array<CourseManagementFilterRespBase | CourseManagementFilterRespView | UpdateCourseManagementFilterRespCommand | CreateCourseManagementFilterRespCommand>}
   * @memberof CourseManagementBase
   */
  courseManagementFilterResps: Array<
    | CourseManagementFilterRespBase
    | CourseManagementFilterRespView
    | UpdateCourseManagementFilterRespCommand
    | CreateCourseManagementFilterRespCommand
  >;
  /**
   * 課程樣版過濾會員
   * @type {Array<CourseManagementFilterUserBase | CourseManagementFilterUserView | UpdateCourseManagementFilterUserCommand | CreateCourseManagementFilterUserCommand>}
   * @memberof CourseManagementBase
   */
  courseManagementFilterUsers: Array<
    | CourseManagementFilterUserBase
    | CourseManagementFilterUserView
    | UpdateCourseManagementFilterUserCommand
    | CreateCourseManagementFilterUserCommand
  >;
}
/**
 *
 * @export
 * @interface CourseManagementFilter
 */
export interface CourseManagementFilter {
  /**
   * id
   * @type {number}
   * @memberof CourseManagementFilter
   */
  id: number;
  /**
   * 課程樣板CourseManagement.Id
   * @type {number}
   * @memberof CourseManagementFilter
   */
  courseManagementId: number;
  /**
   * 堂點Id Organization.Id
   * @type {number}
   * @memberof CourseManagementFilter
   */
  organizationId: number;
  /**
   * 課程性別限制
   * @type {string}
   * @memberof CourseManagementFilter
   */
  courseSex: string;
  /**
   * 年齡門檻上
   * @type {number}
   * @memberof CourseManagementFilter
   */
  ageUp: number;
  /**
   * 年齡門檻下
   * @type {number}
   * @memberof CourseManagementFilter
   */
  ageDown: number;
  /**
   *
   * @type {string}
   * @memberof CourseManagementFilter
   */
  statusCd: string;
  /**
   * ApiLog HandledId
   * @type {string}
   * @memberof CourseManagementFilter
   */
  handledId?: string | null;
  /**
   * 建立日期
   * @type {string}
   * @memberof CourseManagementFilter
   */
  dateCreate?: string;
  /**
   * 建立人員
   * @type {string}
   * @memberof CourseManagementFilter
   */
  userCreate?: string | null;
  /**
   * 最後修改日期
   * @type {string}
   * @memberof CourseManagementFilter
   */
  dateUpdate?: string | null;
  /**
   * 最後修改人員
   * @type {string}
   * @memberof CourseManagementFilter
   */
  userUpdate?: string | null;
  /**
   *
   * @type {string}
   * @memberof CourseManagementFilter
   */
  rowVersion?: string | null;
}
/**
 *
 * @export
 * @interface CourseManagementFilterBase
 */
export interface CourseManagementFilterBase {
  /**
   * id
   * @type {number}
   * @memberof CourseManagementFilterBase
   */
  id: number;
  /**
   * 課程樣板CourseManagement.Id
   * @type {number}
   * @memberof CourseManagementFilterBase
   */
  courseManagementId: number;
  /**
   * 堂點Id Organization.Id
   * @type {number}
   * @memberof CourseManagementFilterBase
   */
  organizationId: number;
  /**
   * 課程性別限制
   * @type {string}
   * @memberof CourseManagementFilterBase
   */
  courseSex: string;
  /**
   * 年齡門檻上
   * @type {number}
   * @memberof CourseManagementFilterBase
   */
  ageUp: number;
  /**
   * 年齡門檻下
   * @type {number}
   * @memberof CourseManagementFilterBase
   */
  ageDown: number;
}
/**
 *
 * @export
 * @interface CourseManagementFilterCourse
 */
export interface CourseManagementFilterCourse {
  /**
   * id
   * @type {number}
   * @memberof CourseManagementFilterCourse
   */
  id: number;
  /**
   * 課程樣板過濾CourseManagementFilter.Id
   * @type {number}
   * @memberof CourseManagementFilterCourse
   */
  courseManagementFilterId: number;
  /**
   * CourseManagement.Id
   * @type {number}
   * @memberof CourseManagementFilterCourse
   */
  courseManagementId: number;
  /**
   *
   * @type {string}
   * @memberof CourseManagementFilterCourse
   */
  statusCd: string;
  /**
   * ApiLog HandledId
   * @type {string}
   * @memberof CourseManagementFilterCourse
   */
  handledId?: string | null;
  /**
   * 建立日期
   * @type {string}
   * @memberof CourseManagementFilterCourse
   */
  dateCreate?: string;
  /**
   * 建立人員
   * @type {string}
   * @memberof CourseManagementFilterCourse
   */
  userCreate?: string | null;
  /**
   * 最後修改日期
   * @type {string}
   * @memberof CourseManagementFilterCourse
   */
  dateUpdate?: string | null;
  /**
   * 最後修改人員
   * @type {string}
   * @memberof CourseManagementFilterCourse
   */
  userUpdate?: string | null;
  /**
   *
   * @type {string}
   * @memberof CourseManagementFilterCourse
   */
  rowVersion?: string | null;
}
/**
 *
 * @export
 * @interface CourseManagementFilterCourseBase
 */
export interface CourseManagementFilterCourseBase {
  /**
   * id
   * @type {number}
   * @memberof CourseManagementFilterCourseBase
   */
  id: number;
  /**
   * 課程樣板過濾CourseManagementFilter.Id
   * @type {number}
   * @memberof CourseManagementFilterCourseBase
   */
  courseManagementFilterId: number;
  /**
   * CourseManagement.Id
   * @type {number}
   * @memberof CourseManagementFilterCourseBase
   */
  courseManagementId: number;
}
/**
 * CourseManagementFilterCourse
 * @export
 * @interface CourseManagementFilterCourseView
 */
export interface CourseManagementFilterCourseView {
  /**
   *
   * @type {string}
   * @memberof CourseManagementFilterCourseView
   */
  handledId?: string | null;
  /**
   *
   * @type {string}
   * @memberof CourseManagementFilterCourseView
   */
  dateCreate?: string;
  /**
   *
   * @type {string}
   * @memberof CourseManagementFilterCourseView
   */
  userCreate?: string | null;
  /**
   *
   * @type {string}
   * @memberof CourseManagementFilterCourseView
   */
  dateUpdate?: string | null;
  /**
   *
   * @type {string}
   * @memberof CourseManagementFilterCourseView
   */
  userUpdate?: string | null;
  /**
   * id
   * @type {number}
   * @memberof CourseManagementFilterCourseView
   */
  id: number;
  /**
   * 課程樣板過濾CourseManagementFilter.Id
   * @type {number}
   * @memberof CourseManagementFilterCourseView
   */
  courseManagementFilterId: number;
  /**
   * CourseManagement.Id
   * @type {number}
   * @memberof CourseManagementFilterCourseView
   */
  courseManagementId: number;
}
/**
 *
 * @export
 * @interface CourseManagementFilterCourseViewApiResponse
 */
export interface CourseManagementFilterCourseViewApiResponse {
  /**
   *
   * @type {string}
   * @memberof CourseManagementFilterCourseViewApiResponse
   */
  handledId?: string | null;
  /**
   * http-200  0000: 代表處理成功，其餘一律為失敗  http-4xx  Vxxxx: 資料驗證  Bxxxx: 詳見 message 欄位說明
   * @type {string}
   * @memberof CourseManagementFilterCourseViewApiResponse
   */
  code: string;
  /**
   * 回傳訊息
   * @type {string}
   * @memberof CourseManagementFilterCourseViewApiResponse
   */
  message: string;
  /**
   * 錯誤詳細資訊
   * @type {any}
   * @memberof CourseManagementFilterCourseViewApiResponse
   */
  detailMessage: any;
  /**
   *
   * @type {CourseManagementFilterCourseView}
   * @memberof CourseManagementFilterCourseViewApiResponse
   */
  data: CourseManagementFilterCourseView;
  /**
   * 交易時間
   * @type {string}
   * @memberof CourseManagementFilterCourseViewApiResponse
   */
  txnTime: string;
}
/**
 *
 * @export
 * @interface CourseManagementFilterCourseViewListApiResponse
 */
export interface CourseManagementFilterCourseViewListApiResponse {
  /**
   *
   * @type {string}
   * @memberof CourseManagementFilterCourseViewListApiResponse
   */
  handledId?: string | null;
  /**
   * http-200  0000: 代表處理成功，其餘一律為失敗  http-4xx  Vxxxx: 資料驗證  Bxxxx: 詳見 message 欄位說明
   * @type {string}
   * @memberof CourseManagementFilterCourseViewListApiResponse
   */
  code: string;
  /**
   * 回傳訊息
   * @type {string}
   * @memberof CourseManagementFilterCourseViewListApiResponse
   */
  message: string;
  /**
   * 錯誤詳細資訊
   * @type {any}
   * @memberof CourseManagementFilterCourseViewListApiResponse
   */
  detailMessage: any;
  /**
   * 回傳資料
   * @type {Array<CourseManagementFilterCourseView>}
   * @memberof CourseManagementFilterCourseViewListApiResponse
   */
  data: Array<CourseManagementFilterCourseView>;
  /**
   * 交易時間
   * @type {string}
   * @memberof CourseManagementFilterCourseViewListApiResponse
   */
  txnTime: string;
}
/**
 *
 * @export
 * @interface CourseManagementFilterCourseViewPage
 */
export interface CourseManagementFilterCourseViewPage {
  /**
   *
   * @type {number}
   * @memberof CourseManagementFilterCourseViewPage
   */
  totalCount: number;
  /**
   *
   * @type {number}
   * @memberof CourseManagementFilterCourseViewPage
   */
  pageCount: number;
  /**
   *
   * @type {number}
   * @memberof CourseManagementFilterCourseViewPage
   */
  currentPage: number;
  /**
   *
   * @type {number}
   * @memberof CourseManagementFilterCourseViewPage
   */
  size: number;
  /**
   *
   * @type {Array<CourseManagementFilterCourseView>}
   * @memberof CourseManagementFilterCourseViewPage
   */
  records: Array<CourseManagementFilterCourseView>;
  /**
   *
   * @type {number}
   * @memberof CourseManagementFilterCourseViewPage
   */
  pageSize: number;
  /**
   *
   * @type {boolean}
   * @memberof CourseManagementFilterCourseViewPage
   */
  hasPreviousPages: boolean;
  /**
   *
   * @type {boolean}
   * @memberof CourseManagementFilterCourseViewPage
   */
  hasNextPages: boolean;
  /**
   *
   * @type {number}
   * @memberof CourseManagementFilterCourseViewPage
   */
  previousLastPageNo: number;
  /**
   *
   * @type {number}
   * @memberof CourseManagementFilterCourseViewPage
   */
  nextStartPageNo: number;
  /**
   *
   * @type {Array<number>}
   * @memberof CourseManagementFilterCourseViewPage
   */
  navigationPages: Array<number>;
}
/**
 *
 * @export
 * @interface CourseManagementFilterCourseViewPageApiResponse
 */
export interface CourseManagementFilterCourseViewPageApiResponse {
  /**
   *
   * @type {string}
   * @memberof CourseManagementFilterCourseViewPageApiResponse
   */
  handledId?: string | null;
  /**
   * http-200  0000: 代表處理成功，其餘一律為失敗  http-4xx  Vxxxx: 資料驗證  Bxxxx: 詳見 message 欄位說明
   * @type {string}
   * @memberof CourseManagementFilterCourseViewPageApiResponse
   */
  code: string;
  /**
   * 回傳訊息
   * @type {string}
   * @memberof CourseManagementFilterCourseViewPageApiResponse
   */
  message: string;
  /**
   * 錯誤詳細資訊
   * @type {any}
   * @memberof CourseManagementFilterCourseViewPageApiResponse
   */
  detailMessage: any;
  /**
   *
   * @type {CourseManagementFilterCourseViewPage}
   * @memberof CourseManagementFilterCourseViewPageApiResponse
   */
  data: CourseManagementFilterCourseViewPage;
  /**
   * 交易時間
   * @type {string}
   * @memberof CourseManagementFilterCourseViewPageApiResponse
   */
  txnTime: string;
}
/**
 *
 * @export
 * @interface CourseManagementFilterPastoral
 */
export interface CourseManagementFilterPastoral {
  /**
   * id
   * @type {number}
   * @memberof CourseManagementFilterPastoral
   */
  id: number;
  /**
   * 課程樣板過濾CourseManagementFilter.Id
   * @type {number}
   * @memberof CourseManagementFilterPastoral
   */
  courseManagementFilterId: number;
  /**
   * Pastoral.Id
   * @type {number}
   * @memberof CourseManagementFilterPastoral
   */
  pastoralId: number;
  /**
   *
   * @type {string}
   * @memberof CourseManagementFilterPastoral
   */
  statusCd: string;
  /**
   * ApiLog HandledId
   * @type {string}
   * @memberof CourseManagementFilterPastoral
   */
  handledId?: string | null;
  /**
   * 建立日期
   * @type {string}
   * @memberof CourseManagementFilterPastoral
   */
  dateCreate?: string;
  /**
   * 建立人員
   * @type {string}
   * @memberof CourseManagementFilterPastoral
   */
  userCreate?: string | null;
  /**
   * 最後修改日期
   * @type {string}
   * @memberof CourseManagementFilterPastoral
   */
  dateUpdate?: string | null;
  /**
   * 最後修改人員
   * @type {string}
   * @memberof CourseManagementFilterPastoral
   */
  userUpdate?: string | null;
  /**
   *
   * @type {string}
   * @memberof CourseManagementFilterPastoral
   */
  rowVersion?: string | null;
}
/**
 *
 * @export
 * @interface CourseManagementFilterPastoralBase
 */
export interface CourseManagementFilterPastoralBase {
  /**
   * id
   * @type {number}
   * @memberof CourseManagementFilterPastoralBase
   */
  id: number;
  /**
   * 課程樣板過濾CourseManagementFilter.Id
   * @type {number}
   * @memberof CourseManagementFilterPastoralBase
   */
  courseManagementFilterId: number;
  /**
   * Pastoral.Id
   * @type {number}
   * @memberof CourseManagementFilterPastoralBase
   */
  pastoralId: number;
}
/**
 * CourseManagementFilterPastoral
 * @export
 * @interface CourseManagementFilterPastoralView
 */
export interface CourseManagementFilterPastoralView {
  /**
   *
   * @type {string}
   * @memberof CourseManagementFilterPastoralView
   */
  handledId?: string | null;
  /**
   *
   * @type {string}
   * @memberof CourseManagementFilterPastoralView
   */
  dateCreate?: string;
  /**
   *
   * @type {string}
   * @memberof CourseManagementFilterPastoralView
   */
  userCreate?: string | null;
  /**
   *
   * @type {string}
   * @memberof CourseManagementFilterPastoralView
   */
  dateUpdate?: string | null;
  /**
   *
   * @type {string}
   * @memberof CourseManagementFilterPastoralView
   */
  userUpdate?: string | null;
  /**
   * id
   * @type {number}
   * @memberof CourseManagementFilterPastoralView
   */
  id: number;
  /**
   * 課程樣板過濾CourseManagementFilter.Id
   * @type {number}
   * @memberof CourseManagementFilterPastoralView
   */
  courseManagementFilterId: number;
  /**
   * Pastoral.Id
   * @type {number}
   * @memberof CourseManagementFilterPastoralView
   */
  pastoralId: number;
}
/**
 *
 * @export
 * @interface CourseManagementFilterPastoralViewApiResponse
 */
export interface CourseManagementFilterPastoralViewApiResponse {
  /**
   *
   * @type {string}
   * @memberof CourseManagementFilterPastoralViewApiResponse
   */
  handledId?: string | null;
  /**
   * http-200  0000: 代表處理成功，其餘一律為失敗  http-4xx  Vxxxx: 資料驗證  Bxxxx: 詳見 message 欄位說明
   * @type {string}
   * @memberof CourseManagementFilterPastoralViewApiResponse
   */
  code: string;
  /**
   * 回傳訊息
   * @type {string}
   * @memberof CourseManagementFilterPastoralViewApiResponse
   */
  message: string;
  /**
   * 錯誤詳細資訊
   * @type {any}
   * @memberof CourseManagementFilterPastoralViewApiResponse
   */
  detailMessage: any;
  /**
   *
   * @type {CourseManagementFilterPastoralView}
   * @memberof CourseManagementFilterPastoralViewApiResponse
   */
  data: CourseManagementFilterPastoralView;
  /**
   * 交易時間
   * @type {string}
   * @memberof CourseManagementFilterPastoralViewApiResponse
   */
  txnTime: string;
}
/**
 *
 * @export
 * @interface CourseManagementFilterPastoralViewListApiResponse
 */
export interface CourseManagementFilterPastoralViewListApiResponse {
  /**
   *
   * @type {string}
   * @memberof CourseManagementFilterPastoralViewListApiResponse
   */
  handledId?: string | null;
  /**
   * http-200  0000: 代表處理成功，其餘一律為失敗  http-4xx  Vxxxx: 資料驗證  Bxxxx: 詳見 message 欄位說明
   * @type {string}
   * @memberof CourseManagementFilterPastoralViewListApiResponse
   */
  code: string;
  /**
   * 回傳訊息
   * @type {string}
   * @memberof CourseManagementFilterPastoralViewListApiResponse
   */
  message: string;
  /**
   * 錯誤詳細資訊
   * @type {any}
   * @memberof CourseManagementFilterPastoralViewListApiResponse
   */
  detailMessage: any;
  /**
   * 回傳資料
   * @type {Array<CourseManagementFilterPastoralView>}
   * @memberof CourseManagementFilterPastoralViewListApiResponse
   */
  data: Array<CourseManagementFilterPastoralView>;
  /**
   * 交易時間
   * @type {string}
   * @memberof CourseManagementFilterPastoralViewListApiResponse
   */
  txnTime: string;
}
/**
 *
 * @export
 * @interface CourseManagementFilterPastoralViewPage
 */
export interface CourseManagementFilterPastoralViewPage {
  /**
   *
   * @type {number}
   * @memberof CourseManagementFilterPastoralViewPage
   */
  totalCount: number;
  /**
   *
   * @type {number}
   * @memberof CourseManagementFilterPastoralViewPage
   */
  pageCount: number;
  /**
   *
   * @type {number}
   * @memberof CourseManagementFilterPastoralViewPage
   */
  currentPage: number;
  /**
   *
   * @type {number}
   * @memberof CourseManagementFilterPastoralViewPage
   */
  size: number;
  /**
   *
   * @type {Array<CourseManagementFilterPastoralView>}
   * @memberof CourseManagementFilterPastoralViewPage
   */
  records: Array<CourseManagementFilterPastoralView>;
  /**
   *
   * @type {number}
   * @memberof CourseManagementFilterPastoralViewPage
   */
  pageSize: number;
  /**
   *
   * @type {boolean}
   * @memberof CourseManagementFilterPastoralViewPage
   */
  hasPreviousPages: boolean;
  /**
   *
   * @type {boolean}
   * @memberof CourseManagementFilterPastoralViewPage
   */
  hasNextPages: boolean;
  /**
   *
   * @type {number}
   * @memberof CourseManagementFilterPastoralViewPage
   */
  previousLastPageNo: number;
  /**
   *
   * @type {number}
   * @memberof CourseManagementFilterPastoralViewPage
   */
  nextStartPageNo: number;
  /**
   *
   * @type {Array<number>}
   * @memberof CourseManagementFilterPastoralViewPage
   */
  navigationPages: Array<number>;
}
/**
 *
 * @export
 * @interface CourseManagementFilterPastoralViewPageApiResponse
 */
export interface CourseManagementFilterPastoralViewPageApiResponse {
  /**
   *
   * @type {string}
   * @memberof CourseManagementFilterPastoralViewPageApiResponse
   */
  handledId?: string | null;
  /**
   * http-200  0000: 代表處理成功，其餘一律為失敗  http-4xx  Vxxxx: 資料驗證  Bxxxx: 詳見 message 欄位說明
   * @type {string}
   * @memberof CourseManagementFilterPastoralViewPageApiResponse
   */
  code: string;
  /**
   * 回傳訊息
   * @type {string}
   * @memberof CourseManagementFilterPastoralViewPageApiResponse
   */
  message: string;
  /**
   * 錯誤詳細資訊
   * @type {any}
   * @memberof CourseManagementFilterPastoralViewPageApiResponse
   */
  detailMessage: any;
  /**
   *
   * @type {CourseManagementFilterPastoralViewPage}
   * @memberof CourseManagementFilterPastoralViewPageApiResponse
   */
  data: CourseManagementFilterPastoralViewPage;
  /**
   * 交易時間
   * @type {string}
   * @memberof CourseManagementFilterPastoralViewPageApiResponse
   */
  txnTime: string;
}
/**
 *
 * @export
 * @interface CourseManagementFilterResp
 */
export interface CourseManagementFilterResp {
  /**
   * id
   * @type {number}
   * @memberof CourseManagementFilterResp
   */
  id: number;
  /**
   * 課程樣板過濾CourseManagementFilter.Id
   * @type {number}
   * @memberof CourseManagementFilterResp
   */
  courseManagementFilterId: number;
  /**
   * MinistryResp.Id
   * @type {number}
   * @memberof CourseManagementFilterResp
   */
  ministryRespId: number;
  /**
   *
   * @type {string}
   * @memberof CourseManagementFilterResp
   */
  statusCd: string;
  /**
   * ApiLog HandledId
   * @type {string}
   * @memberof CourseManagementFilterResp
   */
  handledId?: string | null;
  /**
   * 建立日期
   * @type {string}
   * @memberof CourseManagementFilterResp
   */
  dateCreate?: string;
  /**
   * 建立人員
   * @type {string}
   * @memberof CourseManagementFilterResp
   */
  userCreate?: string | null;
  /**
   * 最後修改日期
   * @type {string}
   * @memberof CourseManagementFilterResp
   */
  dateUpdate?: string | null;
  /**
   * 最後修改人員
   * @type {string}
   * @memberof CourseManagementFilterResp
   */
  userUpdate?: string | null;
  /**
   *
   * @type {string}
   * @memberof CourseManagementFilterResp
   */
  rowVersion?: string | null;
}
/**
 *
 * @export
 * @interface CourseManagementFilterRespBase
 */
export interface CourseManagementFilterRespBase {
  /**
   * id
   * @type {number}
   * @memberof CourseManagementFilterRespBase
   */
  id: number;
  /**
   * 課程樣板過濾CourseManagementFilter.Id
   * @type {number}
   * @memberof CourseManagementFilterRespBase
   */
  courseManagementFilterId: number;
  /**
   * MinistryResp.Id
   * @type {number}
   * @memberof CourseManagementFilterRespBase
   */
  ministryRespId: number;
}
/**
 * CourseManagementFilterResp
 * @export
 * @interface CourseManagementFilterRespView
 */
export interface CourseManagementFilterRespView {
  /**
   *
   * @type {string}
   * @memberof CourseManagementFilterRespView
   */
  handledId?: string | null;
  /**
   *
   * @type {string}
   * @memberof CourseManagementFilterRespView
   */
  dateCreate?: string;
  /**
   *
   * @type {string}
   * @memberof CourseManagementFilterRespView
   */
  userCreate?: string | null;
  /**
   *
   * @type {string}
   * @memberof CourseManagementFilterRespView
   */
  dateUpdate?: string | null;
  /**
   *
   * @type {string}
   * @memberof CourseManagementFilterRespView
   */
  userUpdate?: string | null;
  /**
   * id
   * @type {number}
   * @memberof CourseManagementFilterRespView
   */
  id: number;
  /**
   * 課程樣板過濾CourseManagementFilter.Id
   * @type {number}
   * @memberof CourseManagementFilterRespView
   */
  courseManagementFilterId: number;
  /**
   * MinistryResp.Id
   * @type {number}
   * @memberof CourseManagementFilterRespView
   */
  ministryRespId: number;
}
/**
 *
 * @export
 * @interface CourseManagementFilterRespViewApiResponse
 */
export interface CourseManagementFilterRespViewApiResponse {
  /**
   *
   * @type {string}
   * @memberof CourseManagementFilterRespViewApiResponse
   */
  handledId?: string | null;
  /**
   * http-200  0000: 代表處理成功，其餘一律為失敗  http-4xx  Vxxxx: 資料驗證  Bxxxx: 詳見 message 欄位說明
   * @type {string}
   * @memberof CourseManagementFilterRespViewApiResponse
   */
  code: string;
  /**
   * 回傳訊息
   * @type {string}
   * @memberof CourseManagementFilterRespViewApiResponse
   */
  message: string;
  /**
   * 錯誤詳細資訊
   * @type {any}
   * @memberof CourseManagementFilterRespViewApiResponse
   */
  detailMessage: any;
  /**
   *
   * @type {CourseManagementFilterRespView}
   * @memberof CourseManagementFilterRespViewApiResponse
   */
  data: CourseManagementFilterRespView;
  /**
   * 交易時間
   * @type {string}
   * @memberof CourseManagementFilterRespViewApiResponse
   */
  txnTime: string;
}
/**
 *
 * @export
 * @interface CourseManagementFilterRespViewListApiResponse
 */
export interface CourseManagementFilterRespViewListApiResponse {
  /**
   *
   * @type {string}
   * @memberof CourseManagementFilterRespViewListApiResponse
   */
  handledId?: string | null;
  /**
   * http-200  0000: 代表處理成功，其餘一律為失敗  http-4xx  Vxxxx: 資料驗證  Bxxxx: 詳見 message 欄位說明
   * @type {string}
   * @memberof CourseManagementFilterRespViewListApiResponse
   */
  code: string;
  /**
   * 回傳訊息
   * @type {string}
   * @memberof CourseManagementFilterRespViewListApiResponse
   */
  message: string;
  /**
   * 錯誤詳細資訊
   * @type {any}
   * @memberof CourseManagementFilterRespViewListApiResponse
   */
  detailMessage: any;
  /**
   * 回傳資料
   * @type {Array<CourseManagementFilterRespView>}
   * @memberof CourseManagementFilterRespViewListApiResponse
   */
  data: Array<CourseManagementFilterRespView>;
  /**
   * 交易時間
   * @type {string}
   * @memberof CourseManagementFilterRespViewListApiResponse
   */
  txnTime: string;
}
/**
 *
 * @export
 * @interface CourseManagementFilterRespViewPage
 */
export interface CourseManagementFilterRespViewPage {
  /**
   *
   * @type {number}
   * @memberof CourseManagementFilterRespViewPage
   */
  totalCount: number;
  /**
   *
   * @type {number}
   * @memberof CourseManagementFilterRespViewPage
   */
  pageCount: number;
  /**
   *
   * @type {number}
   * @memberof CourseManagementFilterRespViewPage
   */
  currentPage: number;
  /**
   *
   * @type {number}
   * @memberof CourseManagementFilterRespViewPage
   */
  size: number;
  /**
   *
   * @type {Array<CourseManagementFilterRespView>}
   * @memberof CourseManagementFilterRespViewPage
   */
  records: Array<CourseManagementFilterRespView>;
  /**
   *
   * @type {number}
   * @memberof CourseManagementFilterRespViewPage
   */
  pageSize: number;
  /**
   *
   * @type {boolean}
   * @memberof CourseManagementFilterRespViewPage
   */
  hasPreviousPages: boolean;
  /**
   *
   * @type {boolean}
   * @memberof CourseManagementFilterRespViewPage
   */
  hasNextPages: boolean;
  /**
   *
   * @type {number}
   * @memberof CourseManagementFilterRespViewPage
   */
  previousLastPageNo: number;
  /**
   *
   * @type {number}
   * @memberof CourseManagementFilterRespViewPage
   */
  nextStartPageNo: number;
  /**
   *
   * @type {Array<number>}
   * @memberof CourseManagementFilterRespViewPage
   */
  navigationPages: Array<number>;
}
/**
 *
 * @export
 * @interface CourseManagementFilterRespViewPageApiResponse
 */
export interface CourseManagementFilterRespViewPageApiResponse {
  /**
   *
   * @type {string}
   * @memberof CourseManagementFilterRespViewPageApiResponse
   */
  handledId?: string | null;
  /**
   * http-200  0000: 代表處理成功，其餘一律為失敗  http-4xx  Vxxxx: 資料驗證  Bxxxx: 詳見 message 欄位說明
   * @type {string}
   * @memberof CourseManagementFilterRespViewPageApiResponse
   */
  code: string;
  /**
   * 回傳訊息
   * @type {string}
   * @memberof CourseManagementFilterRespViewPageApiResponse
   */
  message: string;
  /**
   * 錯誤詳細資訊
   * @type {any}
   * @memberof CourseManagementFilterRespViewPageApiResponse
   */
  detailMessage: any;
  /**
   *
   * @type {CourseManagementFilterRespViewPage}
   * @memberof CourseManagementFilterRespViewPageApiResponse
   */
  data: CourseManagementFilterRespViewPage;
  /**
   * 交易時間
   * @type {string}
   * @memberof CourseManagementFilterRespViewPageApiResponse
   */
  txnTime: string;
}
/**
 *
 * @export
 * @interface CourseManagementFilterUser
 */
export interface CourseManagementFilterUser {
  /**
   * id
   * @type {number}
   * @memberof CourseManagementFilterUser
   */
  id: number;
  /**
   * 課程樣板過濾CourseManagementFilter.Id
   * @type {number}
   * @memberof CourseManagementFilterUser
   */
  courseManagementFilterId: number;
  /**
   * User.Id
   * @type {number}
   * @memberof CourseManagementFilterUser
   */
  userId: number;
  /**
   *
   * @type {string}
   * @memberof CourseManagementFilterUser
   */
  statusCd: string;
  /**
   * ApiLog HandledId
   * @type {string}
   * @memberof CourseManagementFilterUser
   */
  handledId?: string | null;
  /**
   * 建立日期
   * @type {string}
   * @memberof CourseManagementFilterUser
   */
  dateCreate?: string;
  /**
   * 建立人員
   * @type {string}
   * @memberof CourseManagementFilterUser
   */
  userCreate?: string | null;
  /**
   * 最後修改日期
   * @type {string}
   * @memberof CourseManagementFilterUser
   */
  dateUpdate?: string | null;
  /**
   * 最後修改人員
   * @type {string}
   * @memberof CourseManagementFilterUser
   */
  userUpdate?: string | null;
  /**
   *
   * @type {string}
   * @memberof CourseManagementFilterUser
   */
  rowVersion?: string | null;
}
/**
 *
 * @export
 * @interface CourseManagementFilterUserBase
 */
export interface CourseManagementFilterUserBase {
  /**
   * id
   * @type {number}
   * @memberof CourseManagementFilterUserBase
   */
  id: number;
  /**
   * 課程樣板過濾CourseManagementFilter.Id
   * @type {number}
   * @memberof CourseManagementFilterUserBase
   */
  courseManagementFilterId: number;
  /**
   * User.Id
   * @type {number}
   * @memberof CourseManagementFilterUserBase
   */
  userId: number;
}
/**
 * CourseManagementFilterUser
 * @export
 * @interface CourseManagementFilterUserView
 */
export interface CourseManagementFilterUserView {
  /**
   *
   * @type {string}
   * @memberof CourseManagementFilterUserView
   */
  handledId?: string | null;
  /**
   *
   * @type {string}
   * @memberof CourseManagementFilterUserView
   */
  dateCreate?: string;
  /**
   *
   * @type {string}
   * @memberof CourseManagementFilterUserView
   */
  userCreate?: string | null;
  /**
   *
   * @type {string}
   * @memberof CourseManagementFilterUserView
   */
  dateUpdate?: string | null;
  /**
   *
   * @type {string}
   * @memberof CourseManagementFilterUserView
   */
  userUpdate?: string | null;
  /**
   * id
   * @type {number}
   * @memberof CourseManagementFilterUserView
   */
  id: number;
  /**
   * 課程樣板過濾CourseManagementFilter.Id
   * @type {number}
   * @memberof CourseManagementFilterUserView
   */
  courseManagementFilterId: number;
  /**
   * User.Id
   * @type {number}
   * @memberof CourseManagementFilterUserView
   */
  userId: number;
}
/**
 *
 * @export
 * @interface CourseManagementFilterUserViewApiResponse
 */
export interface CourseManagementFilterUserViewApiResponse {
  /**
   *
   * @type {string}
   * @memberof CourseManagementFilterUserViewApiResponse
   */
  handledId?: string | null;
  /**
   * http-200  0000: 代表處理成功，其餘一律為失敗  http-4xx  Vxxxx: 資料驗證  Bxxxx: 詳見 message 欄位說明
   * @type {string}
   * @memberof CourseManagementFilterUserViewApiResponse
   */
  code: string;
  /**
   * 回傳訊息
   * @type {string}
   * @memberof CourseManagementFilterUserViewApiResponse
   */
  message: string;
  /**
   * 錯誤詳細資訊
   * @type {any}
   * @memberof CourseManagementFilterUserViewApiResponse
   */
  detailMessage: any;
  /**
   *
   * @type {CourseManagementFilterUserView}
   * @memberof CourseManagementFilterUserViewApiResponse
   */
  data: CourseManagementFilterUserView;
  /**
   * 交易時間
   * @type {string}
   * @memberof CourseManagementFilterUserViewApiResponse
   */
  txnTime: string;
}
/**
 *
 * @export
 * @interface CourseManagementFilterUserViewListApiResponse
 */
export interface CourseManagementFilterUserViewListApiResponse {
  /**
   *
   * @type {string}
   * @memberof CourseManagementFilterUserViewListApiResponse
   */
  handledId?: string | null;
  /**
   * http-200  0000: 代表處理成功，其餘一律為失敗  http-4xx  Vxxxx: 資料驗證  Bxxxx: 詳見 message 欄位說明
   * @type {string}
   * @memberof CourseManagementFilterUserViewListApiResponse
   */
  code: string;
  /**
   * 回傳訊息
   * @type {string}
   * @memberof CourseManagementFilterUserViewListApiResponse
   */
  message: string;
  /**
   * 錯誤詳細資訊
   * @type {any}
   * @memberof CourseManagementFilterUserViewListApiResponse
   */
  detailMessage: any;
  /**
   * 回傳資料
   * @type {Array<CourseManagementFilterUserView>}
   * @memberof CourseManagementFilterUserViewListApiResponse
   */
  data: Array<CourseManagementFilterUserView>;
  /**
   * 交易時間
   * @type {string}
   * @memberof CourseManagementFilterUserViewListApiResponse
   */
  txnTime: string;
}
/**
 *
 * @export
 * @interface CourseManagementFilterUserViewPage
 */
export interface CourseManagementFilterUserViewPage {
  /**
   *
   * @type {number}
   * @memberof CourseManagementFilterUserViewPage
   */
  totalCount: number;
  /**
   *
   * @type {number}
   * @memberof CourseManagementFilterUserViewPage
   */
  pageCount: number;
  /**
   *
   * @type {number}
   * @memberof CourseManagementFilterUserViewPage
   */
  currentPage: number;
  /**
   *
   * @type {number}
   * @memberof CourseManagementFilterUserViewPage
   */
  size: number;
  /**
   *
   * @type {Array<CourseManagementFilterUserView>}
   * @memberof CourseManagementFilterUserViewPage
   */
  records: Array<CourseManagementFilterUserView>;
  /**
   *
   * @type {number}
   * @memberof CourseManagementFilterUserViewPage
   */
  pageSize: number;
  /**
   *
   * @type {boolean}
   * @memberof CourseManagementFilterUserViewPage
   */
  hasPreviousPages: boolean;
  /**
   *
   * @type {boolean}
   * @memberof CourseManagementFilterUserViewPage
   */
  hasNextPages: boolean;
  /**
   *
   * @type {number}
   * @memberof CourseManagementFilterUserViewPage
   */
  previousLastPageNo: number;
  /**
   *
   * @type {number}
   * @memberof CourseManagementFilterUserViewPage
   */
  nextStartPageNo: number;
  /**
   *
   * @type {Array<number>}
   * @memberof CourseManagementFilterUserViewPage
   */
  navigationPages: Array<number>;
}
/**
 *
 * @export
 * @interface CourseManagementFilterUserViewPageApiResponse
 */
export interface CourseManagementFilterUserViewPageApiResponse {
  /**
   *
   * @type {string}
   * @memberof CourseManagementFilterUserViewPageApiResponse
   */
  handledId?: string | null;
  /**
   * http-200  0000: 代表處理成功，其餘一律為失敗  http-4xx  Vxxxx: 資料驗證  Bxxxx: 詳見 message 欄位說明
   * @type {string}
   * @memberof CourseManagementFilterUserViewPageApiResponse
   */
  code: string;
  /**
   * 回傳訊息
   * @type {string}
   * @memberof CourseManagementFilterUserViewPageApiResponse
   */
  message: string;
  /**
   * 錯誤詳細資訊
   * @type {any}
   * @memberof CourseManagementFilterUserViewPageApiResponse
   */
  detailMessage: any;
  /**
   *
   * @type {CourseManagementFilterUserViewPage}
   * @memberof CourseManagementFilterUserViewPageApiResponse
   */
  data: CourseManagementFilterUserViewPage;
  /**
   * 交易時間
   * @type {string}
   * @memberof CourseManagementFilterUserViewPageApiResponse
   */
  txnTime: string;
}
/**
 * CourseManagementFilter
 * @export
 * @interface CourseManagementFilterView
 */
export interface CourseManagementFilterView {
  /**
   * 課程代碼
   * @type {string}
   * @memberof CourseManagementFilterView
   */
  courseManagementNo: string;
  /**
   *
   * @type {string}
   * @memberof CourseManagementFilterView
   */
  handledId?: string | null;
  /**
   *
   * @type {string}
   * @memberof CourseManagementFilterView
   */
  dateCreate?: string;
  /**
   *
   * @type {string}
   * @memberof CourseManagementFilterView
   */
  userCreate?: string | null;
  /**
   *
   * @type {string}
   * @memberof CourseManagementFilterView
   */
  dateUpdate?: string | null;
  /**
   *
   * @type {string}
   * @memberof CourseManagementFilterView
   */
  userUpdate?: string | null;
  /**
   * 課程過濾主檔_課程必修
   * @type {Array<CourseManagementFilterCourseView>}
   * @memberof CourseManagementFilterView
   */
  courseManagementFilterCourses: Array<CourseManagementFilterCourseView>;
  /**
   * 課程樣版過濾牧場主檔
   * @type {Array<CourseManagementFilterPastoralView>}
   * @memberof CourseManagementFilterView
   */
  courseManagementFilterPastorals: Array<CourseManagementFilterPastoralView>;
  /**
   * 課程樣版過濾職份主檔
   * @type {Array<CourseManagementFilterRespView>}
   * @memberof CourseManagementFilterView
   */
  courseManagementFilterResps: Array<CourseManagementFilterRespView>;
  /**
   * 課程樣版過濾會員
   * @type {Array<CourseManagementFilterUserView>}
   * @memberof CourseManagementFilterView
   */
  courseManagementFilterUsers: Array<CourseManagementFilterUserView>;
  /**
   * id
   * @type {number}
   * @memberof CourseManagementFilterView
   */
  id: number;
  /**
   * 課程樣板CourseManagement.Id
   * @type {number}
   * @memberof CourseManagementFilterView
   */
  courseManagementId: number;
  /**
   * 堂點Id Organization.Id
   * @type {number}
   * @memberof CourseManagementFilterView
   */
  organizationId: number;
  /**
   * 課程性別限制
   * @type {string}
   * @memberof CourseManagementFilterView
   */
  courseSex: string;
  /**
   * 年齡門檻上
   * @type {number}
   * @memberof CourseManagementFilterView
   */
  ageUp: number;
  /**
   * 年齡門檻下
   * @type {number}
   * @memberof CourseManagementFilterView
   */
  ageDown: number;
}
/**
 *
 * @export
 * @interface CourseManagementFilterViewApiResponse
 */
export interface CourseManagementFilterViewApiResponse {
  /**
   *
   * @type {string}
   * @memberof CourseManagementFilterViewApiResponse
   */
  handledId?: string | null;
  /**
   * http-200  0000: 代表處理成功，其餘一律為失敗  http-4xx  Vxxxx: 資料驗證  Bxxxx: 詳見 message 欄位說明
   * @type {string}
   * @memberof CourseManagementFilterViewApiResponse
   */
  code: string;
  /**
   * 回傳訊息
   * @type {string}
   * @memberof CourseManagementFilterViewApiResponse
   */
  message: string;
  /**
   * 錯誤詳細資訊
   * @type {any}
   * @memberof CourseManagementFilterViewApiResponse
   */
  detailMessage: any;
  /**
   *
   * @type {CourseManagementFilterView}
   * @memberof CourseManagementFilterViewApiResponse
   */
  data: CourseManagementFilterView;
  /**
   * 交易時間
   * @type {string}
   * @memberof CourseManagementFilterViewApiResponse
   */
  txnTime: string;
}
/**
 *
 * @export
 * @interface CourseManagementFilterViewListApiResponse
 */
export interface CourseManagementFilterViewListApiResponse {
  /**
   *
   * @type {string}
   * @memberof CourseManagementFilterViewListApiResponse
   */
  handledId?: string | null;
  /**
   * http-200  0000: 代表處理成功，其餘一律為失敗  http-4xx  Vxxxx: 資料驗證  Bxxxx: 詳見 message 欄位說明
   * @type {string}
   * @memberof CourseManagementFilterViewListApiResponse
   */
  code: string;
  /**
   * 回傳訊息
   * @type {string}
   * @memberof CourseManagementFilterViewListApiResponse
   */
  message: string;
  /**
   * 錯誤詳細資訊
   * @type {any}
   * @memberof CourseManagementFilterViewListApiResponse
   */
  detailMessage: any;
  /**
   * 回傳資料
   * @type {Array<CourseManagementFilterView>}
   * @memberof CourseManagementFilterViewListApiResponse
   */
  data: Array<CourseManagementFilterView>;
  /**
   * 交易時間
   * @type {string}
   * @memberof CourseManagementFilterViewListApiResponse
   */
  txnTime: string;
}
/**
 *
 * @export
 * @interface CourseManagementFilterViewPage
 */
export interface CourseManagementFilterViewPage {
  /**
   *
   * @type {number}
   * @memberof CourseManagementFilterViewPage
   */
  totalCount: number;
  /**
   *
   * @type {number}
   * @memberof CourseManagementFilterViewPage
   */
  pageCount: number;
  /**
   *
   * @type {number}
   * @memberof CourseManagementFilterViewPage
   */
  currentPage: number;
  /**
   *
   * @type {number}
   * @memberof CourseManagementFilterViewPage
   */
  size: number;
  /**
   *
   * @type {Array<CourseManagementFilterView>}
   * @memberof CourseManagementFilterViewPage
   */
  records: Array<CourseManagementFilterView>;
  /**
   *
   * @type {number}
   * @memberof CourseManagementFilterViewPage
   */
  pageSize: number;
  /**
   *
   * @type {boolean}
   * @memberof CourseManagementFilterViewPage
   */
  hasPreviousPages: boolean;
  /**
   *
   * @type {boolean}
   * @memberof CourseManagementFilterViewPage
   */
  hasNextPages: boolean;
  /**
   *
   * @type {number}
   * @memberof CourseManagementFilterViewPage
   */
  previousLastPageNo: number;
  /**
   *
   * @type {number}
   * @memberof CourseManagementFilterViewPage
   */
  nextStartPageNo: number;
  /**
   *
   * @type {Array<number>}
   * @memberof CourseManagementFilterViewPage
   */
  navigationPages: Array<number>;
}
/**
 *
 * @export
 * @interface CourseManagementFilterViewPageApiResponse
 */
export interface CourseManagementFilterViewPageApiResponse {
  /**
   *
   * @type {string}
   * @memberof CourseManagementFilterViewPageApiResponse
   */
  handledId?: string | null;
  /**
   * http-200  0000: 代表處理成功，其餘一律為失敗  http-4xx  Vxxxx: 資料驗證  Bxxxx: 詳見 message 欄位說明
   * @type {string}
   * @memberof CourseManagementFilterViewPageApiResponse
   */
  code: string;
  /**
   * 回傳訊息
   * @type {string}
   * @memberof CourseManagementFilterViewPageApiResponse
   */
  message: string;
  /**
   * 錯誤詳細資訊
   * @type {any}
   * @memberof CourseManagementFilterViewPageApiResponse
   */
  detailMessage: any;
  /**
   *
   * @type {CourseManagementFilterViewPage}
   * @memberof CourseManagementFilterViewPageApiResponse
   */
  data: CourseManagementFilterViewPage;
  /**
   * 交易時間
   * @type {string}
   * @memberof CourseManagementFilterViewPageApiResponse
   */
  txnTime: string;
}
/**
 *
 * @export
 * @interface CourseManagementType
 */
export interface CourseManagementType {
  /**
   * id
   * @type {number}
   * @memberof CourseManagementType
   */
  id: number;
  /**
   * 課程類別編號
   * @type {string}
   * @memberof CourseManagementType
   */
  courseManagementTypeNo: string;
  /**
   * 課程類別名稱
   * @type {string}
   * @memberof CourseManagementType
   */
  name: string;
  /**
   * 備註
   * @type {string}
   * @memberof CourseManagementType
   */
  remark: string;
  /**
   *
   * @type {string}
   * @memberof CourseManagementType
   */
  statusCd: string;
  /**
   * ApiLog HandledId
   * @type {string}
   * @memberof CourseManagementType
   */
  handledId?: string | null;
  /**
   * 建立日期
   * @type {string}
   * @memberof CourseManagementType
   */
  dateCreate?: string;
  /**
   * 建立人員
   * @type {string}
   * @memberof CourseManagementType
   */
  userCreate?: string | null;
  /**
   * 最後修改日期
   * @type {string}
   * @memberof CourseManagementType
   */
  dateUpdate?: string | null;
  /**
   * 最後修改人員
   * @type {string}
   * @memberof CourseManagementType
   */
  userUpdate?: string | null;
  /**
   *
   * @type {string}
   * @memberof CourseManagementType
   */
  rowVersion?: string | null;
}
/**
 * 課程樣版類別
 * @export
 * @interface CourseManagementTypeBase
 */
export interface CourseManagementTypeBase {
  /**
   * id
   * @type {number}
   * @memberof CourseManagementTypeBase
   */
  id: number;
  /**
   * 課程類別編號
   * @type {string}
   * @memberof CourseManagementTypeBase
   */
  courseManagementTypeNo: string;
  /**
   * 課程類別名稱
   * @type {string}
   * @memberof CourseManagementTypeBase
   */
  name: string;
  /**
   * 備註
   * @type {string}
   * @memberof CourseManagementTypeBase
   */
  remark: string;
  /**
   * 狀態
   * @type {string}
   * @memberof CourseManagementTypeBase
   */
  statusCd: string;
}
/**
 * CourseManagementType
 * @export
 * @interface CourseManagementTypeView
 */
export interface CourseManagementTypeView {
  /**
   *
   * @type {string}
   * @memberof CourseManagementTypeView
   */
  handledId?: string | null;
  /**
   *
   * @type {string}
   * @memberof CourseManagementTypeView
   */
  dateCreate?: string;
  /**
   *
   * @type {string}
   * @memberof CourseManagementTypeView
   */
  userCreate?: string | null;
  /**
   *
   * @type {string}
   * @memberof CourseManagementTypeView
   */
  dateUpdate?: string | null;
  /**
   *
   * @type {string}
   * @memberof CourseManagementTypeView
   */
  userUpdate?: string | null;
  /**
   * id
   * @type {number}
   * @memberof CourseManagementTypeView
   */
  id: number;
  /**
   * 課程類別編號
   * @type {string}
   * @memberof CourseManagementTypeView
   */
  courseManagementTypeNo: string;
  /**
   * 課程類別名稱
   * @type {string}
   * @memberof CourseManagementTypeView
   */
  name: string;
  /**
   * 備註
   * @type {string}
   * @memberof CourseManagementTypeView
   */
  remark: string;
  /**
   * 狀態
   * @type {string}
   * @memberof CourseManagementTypeView
   */
  statusCd: string;
}
/**
 *
 * @export
 * @interface CourseManagementTypeViewApiResponse
 */
export interface CourseManagementTypeViewApiResponse {
  /**
   *
   * @type {string}
   * @memberof CourseManagementTypeViewApiResponse
   */
  handledId?: string | null;
  /**
   * http-200  0000: 代表處理成功，其餘一律為失敗  http-4xx  Vxxxx: 資料驗證  Bxxxx: 詳見 message 欄位說明
   * @type {string}
   * @memberof CourseManagementTypeViewApiResponse
   */
  code: string;
  /**
   * 回傳訊息
   * @type {string}
   * @memberof CourseManagementTypeViewApiResponse
   */
  message: string;
  /**
   * 錯誤詳細資訊
   * @type {any}
   * @memberof CourseManagementTypeViewApiResponse
   */
  detailMessage: any;
  /**
   *
   * @type {CourseManagementTypeView}
   * @memberof CourseManagementTypeViewApiResponse
   */
  data: CourseManagementTypeView;
  /**
   * 交易時間
   * @type {string}
   * @memberof CourseManagementTypeViewApiResponse
   */
  txnTime: string;
}
/**
 *
 * @export
 * @interface CourseManagementTypeViewListApiResponse
 */
export interface CourseManagementTypeViewListApiResponse {
  /**
   *
   * @type {string}
   * @memberof CourseManagementTypeViewListApiResponse
   */
  handledId?: string | null;
  /**
   * http-200  0000: 代表處理成功，其餘一律為失敗  http-4xx  Vxxxx: 資料驗證  Bxxxx: 詳見 message 欄位說明
   * @type {string}
   * @memberof CourseManagementTypeViewListApiResponse
   */
  code: string;
  /**
   * 回傳訊息
   * @type {string}
   * @memberof CourseManagementTypeViewListApiResponse
   */
  message: string;
  /**
   * 錯誤詳細資訊
   * @type {any}
   * @memberof CourseManagementTypeViewListApiResponse
   */
  detailMessage: any;
  /**
   * 回傳資料
   * @type {Array<CourseManagementTypeView>}
   * @memberof CourseManagementTypeViewListApiResponse
   */
  data: Array<CourseManagementTypeView>;
  /**
   * 交易時間
   * @type {string}
   * @memberof CourseManagementTypeViewListApiResponse
   */
  txnTime: string;
}
/**
 *
 * @export
 * @interface CourseManagementTypeViewPage
 */
export interface CourseManagementTypeViewPage {
  /**
   *
   * @type {number}
   * @memberof CourseManagementTypeViewPage
   */
  totalCount: number;
  /**
   *
   * @type {number}
   * @memberof CourseManagementTypeViewPage
   */
  pageCount: number;
  /**
   *
   * @type {number}
   * @memberof CourseManagementTypeViewPage
   */
  currentPage: number;
  /**
   *
   * @type {number}
   * @memberof CourseManagementTypeViewPage
   */
  size: number;
  /**
   *
   * @type {Array<CourseManagementTypeView>}
   * @memberof CourseManagementTypeViewPage
   */
  records: Array<CourseManagementTypeView>;
  /**
   *
   * @type {number}
   * @memberof CourseManagementTypeViewPage
   */
  pageSize: number;
  /**
   *
   * @type {boolean}
   * @memberof CourseManagementTypeViewPage
   */
  hasPreviousPages: boolean;
  /**
   *
   * @type {boolean}
   * @memberof CourseManagementTypeViewPage
   */
  hasNextPages: boolean;
  /**
   *
   * @type {number}
   * @memberof CourseManagementTypeViewPage
   */
  previousLastPageNo: number;
  /**
   *
   * @type {number}
   * @memberof CourseManagementTypeViewPage
   */
  nextStartPageNo: number;
  /**
   *
   * @type {Array<number>}
   * @memberof CourseManagementTypeViewPage
   */
  navigationPages: Array<number>;
}
/**
 *
 * @export
 * @interface CourseManagementTypeViewPageApiResponse
 */
export interface CourseManagementTypeViewPageApiResponse {
  /**
   *
   * @type {string}
   * @memberof CourseManagementTypeViewPageApiResponse
   */
  handledId?: string | null;
  /**
   * http-200  0000: 代表處理成功，其餘一律為失敗  http-4xx  Vxxxx: 資料驗證  Bxxxx: 詳見 message 欄位說明
   * @type {string}
   * @memberof CourseManagementTypeViewPageApiResponse
   */
  code: string;
  /**
   * 回傳訊息
   * @type {string}
   * @memberof CourseManagementTypeViewPageApiResponse
   */
  message: string;
  /**
   * 錯誤詳細資訊
   * @type {any}
   * @memberof CourseManagementTypeViewPageApiResponse
   */
  detailMessage: any;
  /**
   *
   * @type {CourseManagementTypeViewPage}
   * @memberof CourseManagementTypeViewPageApiResponse
   */
  data: CourseManagementTypeViewPage;
  /**
   * 交易時間
   * @type {string}
   * @memberof CourseManagementTypeViewPageApiResponse
   */
  txnTime: string;
}
/**
 * CourseManagement
 * @export
 * @interface CourseManagementView
 */
export interface CourseManagementView {
  /**
   *
   * @type {string}
   * @memberof CourseManagementView
   */
  handledId?: string | null;
  /**
   *
   * @type {string}
   * @memberof CourseManagementView
   */
  dateCreate?: string;
  /**
   *
   * @type {string}
   * @memberof CourseManagementView
   */
  userCreate?: string | null;
  /**
   *
   * @type {string}
   * @memberof CourseManagementView
   */
  dateUpdate?: string | null;
  /**
   *
   * @type {string}
   * @memberof CourseManagementView
   */
  userUpdate?: string | null;
  /**
   *
   * @type {CourseManagementType}
   * @memberof CourseManagementView
   */
  courseManagement: CourseManagementType;
  /**
   * id
   * @type {number}
   * @memberof CourseManagementView
   */
  id: number;
  /**
   * 課程類別CourseManagementType.Id
   * @type {number}
   * @memberof CourseManagementView
   */
  courseManagementTypeId: number;
  /**
   * 堂點Id Organization.Id
   * @type {number}
   * @memberof CourseManagementView
   */
  organizationId: number;
  /**
   * 課程代碼
   * @type {string}
   * @memberof CourseManagementView
   */
  courseManagementNo: string;
  /**
   * 課程標題
   * @type {string}
   * @memberof CourseManagementView
   */
  title: string;
  /**
   * 課程內容描述
   * @type {string}
   * @memberof CourseManagementView
   */
  description: string;
  /**
   * 課程狀態對應type=CourseManagementStatus顯示 namevalue存此欄位0：關閉1：開啟
   * @type {string}
   * @memberof CourseManagementView
   */
  courseManagementStatus: string;
  /**
   * 對象資格說明
   * @type {string}
   * @memberof CourseManagementView
   */
  basicQualification: string;
  /**
   * 結業資格說明
   * @type {string}
   * @memberof CourseManagementView
   */
  graduationQualification: string;
  /**
   * 課程類別 0實體 1線上 2網路學校
   * @type {string}
   * @memberof CourseManagementView
   */
  courseType: string;
  /**
   * 狀態
   * @type {string}
   * @memberof CourseManagementView
   */
  statusCd: string;
  /**
   * 課程過濾主檔
   * @type {Array<CourseManagementFilterBase | CourseManagementFilterView | UpdateCourseManagementFilterCommand | CreateCourseManagementFilterCommand>}
   * @memberof CourseManagementView
   */
  courseManagementFilters: Array<
    | CourseManagementFilterBase
    | CourseManagementFilterView
    | UpdateCourseManagementFilterCommand
    | CreateCourseManagementFilterCommand
  >;
  /**
   * 課程過濾主檔_課程必修
   * @type {Array<CourseManagementFilterCourseBase | CourseManagementFilterCourseView | UpdateCourseManagementFilterCourseCommand | CreateCourseManagementFilterCourseCommand>}
   * @memberof CourseManagementView
   */
  courseManagementFilterCourses: Array<
    | CourseManagementFilterCourseBase
    | CourseManagementFilterCourseView
    | UpdateCourseManagementFilterCourseCommand
    | CreateCourseManagementFilterCourseCommand
  >;
  /**
   * 課程樣版過濾牧場主檔
   * @type {Array<CourseManagementFilterPastoralBase | CourseManagementFilterPastoralView | UpdateCourseManagementFilterPastoralCommand | CreateCourseManagementFilterPastoralCommand>}
   * @memberof CourseManagementView
   */
  courseManagementFilterPastorals: Array<
    | CourseManagementFilterPastoralBase
    | CourseManagementFilterPastoralView
    | UpdateCourseManagementFilterPastoralCommand
    | CreateCourseManagementFilterPastoralCommand
  >;
  /**
   * 課程樣版過濾職份主檔
   * @type {Array<CourseManagementFilterRespBase | CourseManagementFilterRespView | UpdateCourseManagementFilterRespCommand | CreateCourseManagementFilterRespCommand>}
   * @memberof CourseManagementView
   */
  courseManagementFilterResps: Array<
    | CourseManagementFilterRespBase
    | CourseManagementFilterRespView
    | UpdateCourseManagementFilterRespCommand
    | CreateCourseManagementFilterRespCommand
  >;
  /**
   * 課程樣版過濾會員
   * @type {Array<CourseManagementFilterUserBase | CourseManagementFilterUserView | UpdateCourseManagementFilterUserCommand | CreateCourseManagementFilterUserCommand>}
   * @memberof CourseManagementView
   */
  courseManagementFilterUsers: Array<
    | CourseManagementFilterUserBase
    | CourseManagementFilterUserView
    | UpdateCourseManagementFilterUserCommand
    | CreateCourseManagementFilterUserCommand
  >;
}
/**
 *
 * @export
 * @interface CourseManagementViewApiResponse
 */
export interface CourseManagementViewApiResponse {
  /**
   *
   * @type {string}
   * @memberof CourseManagementViewApiResponse
   */
  handledId?: string | null;
  /**
   * http-200  0000: 代表處理成功，其餘一律為失敗  http-4xx  Vxxxx: 資料驗證  Bxxxx: 詳見 message 欄位說明
   * @type {string}
   * @memberof CourseManagementViewApiResponse
   */
  code: string;
  /**
   * 回傳訊息
   * @type {string}
   * @memberof CourseManagementViewApiResponse
   */
  message: string;
  /**
   * 錯誤詳細資訊
   * @type {any}
   * @memberof CourseManagementViewApiResponse
   */
  detailMessage: any;
  /**
   *
   * @type {CourseManagementView}
   * @memberof CourseManagementViewApiResponse
   */
  data: CourseManagementView;
  /**
   * 交易時間
   * @type {string}
   * @memberof CourseManagementViewApiResponse
   */
  txnTime: string;
}
/**
 *
 * @export
 * @interface CourseManagementViewListApiResponse
 */
export interface CourseManagementViewListApiResponse {
  /**
   *
   * @type {string}
   * @memberof CourseManagementViewListApiResponse
   */
  handledId?: string | null;
  /**
   * http-200  0000: 代表處理成功，其餘一律為失敗  http-4xx  Vxxxx: 資料驗證  Bxxxx: 詳見 message 欄位說明
   * @type {string}
   * @memberof CourseManagementViewListApiResponse
   */
  code: string;
  /**
   * 回傳訊息
   * @type {string}
   * @memberof CourseManagementViewListApiResponse
   */
  message: string;
  /**
   * 錯誤詳細資訊
   * @type {any}
   * @memberof CourseManagementViewListApiResponse
   */
  detailMessage: any;
  /**
   * 回傳資料
   * @type {Array<CourseManagementView>}
   * @memberof CourseManagementViewListApiResponse
   */
  data: Array<CourseManagementView>;
  /**
   * 交易時間
   * @type {string}
   * @memberof CourseManagementViewListApiResponse
   */
  txnTime: string;
}
/**
 *
 * @export
 * @interface CourseManagementViewPage
 */
export interface CourseManagementViewPage {
  /**
   *
   * @type {number}
   * @memberof CourseManagementViewPage
   */
  totalCount: number;
  /**
   *
   * @type {number}
   * @memberof CourseManagementViewPage
   */
  pageCount: number;
  /**
   *
   * @type {number}
   * @memberof CourseManagementViewPage
   */
  currentPage: number;
  /**
   *
   * @type {number}
   * @memberof CourseManagementViewPage
   */
  size: number;
  /**
   *
   * @type {Array<CourseManagementView>}
   * @memberof CourseManagementViewPage
   */
  records: Array<CourseManagementView>;
  /**
   *
   * @type {number}
   * @memberof CourseManagementViewPage
   */
  pageSize: number;
  /**
   *
   * @type {boolean}
   * @memberof CourseManagementViewPage
   */
  hasPreviousPages: boolean;
  /**
   *
   * @type {boolean}
   * @memberof CourseManagementViewPage
   */
  hasNextPages: boolean;
  /**
   *
   * @type {number}
   * @memberof CourseManagementViewPage
   */
  previousLastPageNo: number;
  /**
   *
   * @type {number}
   * @memberof CourseManagementViewPage
   */
  nextStartPageNo: number;
  /**
   *
   * @type {Array<number>}
   * @memberof CourseManagementViewPage
   */
  navigationPages: Array<number>;
}
/**
 *
 * @export
 * @interface CourseManagementViewPageApiResponse
 */
export interface CourseManagementViewPageApiResponse {
  /**
   *
   * @type {string}
   * @memberof CourseManagementViewPageApiResponse
   */
  handledId?: string | null;
  /**
   * http-200  0000: 代表處理成功，其餘一律為失敗  http-4xx  Vxxxx: 資料驗證  Bxxxx: 詳見 message 欄位說明
   * @type {string}
   * @memberof CourseManagementViewPageApiResponse
   */
  code: string;
  /**
   * 回傳訊息
   * @type {string}
   * @memberof CourseManagementViewPageApiResponse
   */
  message: string;
  /**
   * 錯誤詳細資訊
   * @type {any}
   * @memberof CourseManagementViewPageApiResponse
   */
  detailMessage: any;
  /**
   *
   * @type {CourseManagementViewPage}
   * @memberof CourseManagementViewPageApiResponse
   */
  data: CourseManagementViewPage;
  /**
   * 交易時間
   * @type {string}
   * @memberof CourseManagementViewPageApiResponse
   */
  txnTime: string;
}
/**
 *
 * @export
 * @interface CourseOrganization
 */
export interface CourseOrganization {
  /**
   * id
   * @type {number}
   * @memberof CourseOrganization
   */
  id: number;
  /**
   * 課程類別Course.Id
   * @type {number}
   * @memberof CourseOrganization
   */
  courseId: number;
  /**
   * Organization.Id
   * @type {number}
   * @memberof CourseOrganization
   */
  organizationId: number;
  /**
   *
   * @type {string}
   * @memberof CourseOrganization
   */
  statusCd: string;
  /**
   * ApiLog HandledId
   * @type {string}
   * @memberof CourseOrganization
   */
  handledId?: string | null;
  /**
   * 建立日期
   * @type {string}
   * @memberof CourseOrganization
   */
  dateCreate?: string;
  /**
   * 建立人員
   * @type {string}
   * @memberof CourseOrganization
   */
  userCreate?: string | null;
  /**
   * 最後修改日期
   * @type {string}
   * @memberof CourseOrganization
   */
  dateUpdate?: string | null;
  /**
   * 最後修改人員
   * @type {string}
   * @memberof CourseOrganization
   */
  userUpdate?: string | null;
  /**
   *
   * @type {string}
   * @memberof CourseOrganization
   */
  rowVersion?: string | null;
}
/**
 * 課程價格主檔
 * @export
 * @interface CourseOrganizationBase
 */
export interface CourseOrganizationBase {
  /**
   * id
   * @type {number}
   * @memberof CourseOrganizationBase
   */
  id: number;
  /**
   * 課程類別Course.Id
   * @type {number}
   * @memberof CourseOrganizationBase
   */
  courseId: number;
  /**
   * Organization.Id
   * @type {number}
   * @memberof CourseOrganizationBase
   */
  organizationId: number;
}
/**
 * CourseOrganization
 * @export
 * @interface CourseOrganizationView
 */
export interface CourseOrganizationView {
  /**
   *
   * @type {OrganizationView}
   * @memberof CourseOrganizationView
   */
  organization: OrganizationView;
  /**
   *
   * @type {string}
   * @memberof CourseOrganizationView
   */
  handledId?: string | null;
  /**
   *
   * @type {string}
   * @memberof CourseOrganizationView
   */
  dateCreate?: string;
  /**
   *
   * @type {string}
   * @memberof CourseOrganizationView
   */
  userCreate?: string | null;
  /**
   *
   * @type {string}
   * @memberof CourseOrganizationView
   */
  dateUpdate?: string | null;
  /**
   *
   * @type {string}
   * @memberof CourseOrganizationView
   */
  userUpdate?: string | null;
  /**
   * id
   * @type {number}
   * @memberof CourseOrganizationView
   */
  id: number;
  /**
   * 課程類別Course.Id
   * @type {number}
   * @memberof CourseOrganizationView
   */
  courseId: number;
  /**
   * Organization.Id
   * @type {number}
   * @memberof CourseOrganizationView
   */
  organizationId: number;
}
/**
 *
 * @export
 * @interface CourseOrganizationViewApiResponse
 */
export interface CourseOrganizationViewApiResponse {
  /**
   *
   * @type {string}
   * @memberof CourseOrganizationViewApiResponse
   */
  handledId?: string | null;
  /**
   * http-200  0000: 代表處理成功，其餘一律為失敗  http-4xx  Vxxxx: 資料驗證  Bxxxx: 詳見 message 欄位說明
   * @type {string}
   * @memberof CourseOrganizationViewApiResponse
   */
  code: string;
  /**
   * 回傳訊息
   * @type {string}
   * @memberof CourseOrganizationViewApiResponse
   */
  message: string;
  /**
   * 錯誤詳細資訊
   * @type {any}
   * @memberof CourseOrganizationViewApiResponse
   */
  detailMessage: any;
  /**
   *
   * @type {CourseOrganizationView}
   * @memberof CourseOrganizationViewApiResponse
   */
  data: CourseOrganizationView;
  /**
   * 交易時間
   * @type {string}
   * @memberof CourseOrganizationViewApiResponse
   */
  txnTime: string;
}
/**
 *
 * @export
 * @interface CourseOrganizationViewListApiResponse
 */
export interface CourseOrganizationViewListApiResponse {
  /**
   *
   * @type {string}
   * @memberof CourseOrganizationViewListApiResponse
   */
  handledId?: string | null;
  /**
   * http-200  0000: 代表處理成功，其餘一律為失敗  http-4xx  Vxxxx: 資料驗證  Bxxxx: 詳見 message 欄位說明
   * @type {string}
   * @memberof CourseOrganizationViewListApiResponse
   */
  code: string;
  /**
   * 回傳訊息
   * @type {string}
   * @memberof CourseOrganizationViewListApiResponse
   */
  message: string;
  /**
   * 錯誤詳細資訊
   * @type {any}
   * @memberof CourseOrganizationViewListApiResponse
   */
  detailMessage: any;
  /**
   * 回傳資料
   * @type {Array<CourseOrganizationView>}
   * @memberof CourseOrganizationViewListApiResponse
   */
  data: Array<CourseOrganizationView>;
  /**
   * 交易時間
   * @type {string}
   * @memberof CourseOrganizationViewListApiResponse
   */
  txnTime: string;
}
/**
 *
 * @export
 * @interface CourseOrganizationViewPage
 */
export interface CourseOrganizationViewPage {
  /**
   *
   * @type {number}
   * @memberof CourseOrganizationViewPage
   */
  totalCount: number;
  /**
   *
   * @type {number}
   * @memberof CourseOrganizationViewPage
   */
  pageCount: number;
  /**
   *
   * @type {number}
   * @memberof CourseOrganizationViewPage
   */
  currentPage: number;
  /**
   *
   * @type {number}
   * @memberof CourseOrganizationViewPage
   */
  size: number;
  /**
   *
   * @type {Array<CourseOrganizationView>}
   * @memberof CourseOrganizationViewPage
   */
  records: Array<CourseOrganizationView>;
  /**
   *
   * @type {number}
   * @memberof CourseOrganizationViewPage
   */
  pageSize: number;
  /**
   *
   * @type {boolean}
   * @memberof CourseOrganizationViewPage
   */
  hasPreviousPages: boolean;
  /**
   *
   * @type {boolean}
   * @memberof CourseOrganizationViewPage
   */
  hasNextPages: boolean;
  /**
   *
   * @type {number}
   * @memberof CourseOrganizationViewPage
   */
  previousLastPageNo: number;
  /**
   *
   * @type {number}
   * @memberof CourseOrganizationViewPage
   */
  nextStartPageNo: number;
  /**
   *
   * @type {Array<number>}
   * @memberof CourseOrganizationViewPage
   */
  navigationPages: Array<number>;
}
/**
 *
 * @export
 * @interface CourseOrganizationViewPageApiResponse
 */
export interface CourseOrganizationViewPageApiResponse {
  /**
   *
   * @type {string}
   * @memberof CourseOrganizationViewPageApiResponse
   */
  handledId?: string | null;
  /**
   * http-200  0000: 代表處理成功，其餘一律為失敗  http-4xx  Vxxxx: 資料驗證  Bxxxx: 詳見 message 欄位說明
   * @type {string}
   * @memberof CourseOrganizationViewPageApiResponse
   */
  code: string;
  /**
   * 回傳訊息
   * @type {string}
   * @memberof CourseOrganizationViewPageApiResponse
   */
  message: string;
  /**
   * 錯誤詳細資訊
   * @type {any}
   * @memberof CourseOrganizationViewPageApiResponse
   */
  detailMessage: any;
  /**
   *
   * @type {CourseOrganizationViewPage}
   * @memberof CourseOrganizationViewPageApiResponse
   */
  data: CourseOrganizationViewPage;
  /**
   * 交易時間
   * @type {string}
   * @memberof CourseOrganizationViewPageApiResponse
   */
  txnTime: string;
}
/**
 *
 * @export
 * @interface CoursePrice
 */
export interface CoursePrice {
  /**
   * id
   * @type {number}
   * @memberof CoursePrice
   */
  id: number;
  /**
   * 課程類別Course.Id
   * @type {number}
   * @memberof CoursePrice
   */
  courseId: number;
  /**
   * 價格名稱
   * @type {string}
   * @memberof CoursePrice
   */
  priceName: string;
  /**
   * 價格
   * @type {number}
   * @memberof CoursePrice
   */
  price: number;
  /**
   * 是否公開對應type=IsYN顯示 namevalue存此欄位0：N1：Y
   * @type {string}
   * @memberof CoursePrice
   */
  isPublic: string;
  /**
   * 是否超過優惠日期後關閉對應type=IsYN顯示 namevalue存此欄0N1Yif1ThendataTimeCourse.DiscountSignUpDate關閉此選項
   * @type {string}
   * @memberof CoursePrice
   */
  isDueDate: string;
  /**
   *
   * @type {string}
   * @memberof CoursePrice
   */
  statusCd: string;
  /**
   * ApiLog HandledId
   * @type {string}
   * @memberof CoursePrice
   */
  handledId?: string | null;
  /**
   * 建立日期
   * @type {string}
   * @memberof CoursePrice
   */
  dateCreate?: string;
  /**
   * 建立人員
   * @type {string}
   * @memberof CoursePrice
   */
  userCreate?: string | null;
  /**
   * 最後修改日期
   * @type {string}
   * @memberof CoursePrice
   */
  dateUpdate?: string | null;
  /**
   * 最後修改人員
   * @type {string}
   * @memberof CoursePrice
   */
  userUpdate?: string | null;
  /**
   *
   * @type {string}
   * @memberof CoursePrice
   */
  rowVersion?: string | null;
}
/**
 * 課程價格主檔
 * @export
 * @interface CoursePriceBase
 */
export interface CoursePriceBase {
  /**
   * id
   * @type {number}
   * @memberof CoursePriceBase
   */
  id: number;
  /**
   * 課程類別Course.Id
   * @type {number}
   * @memberof CoursePriceBase
   */
  courseId: number;
  /**
   * 價格名稱
   * @type {string}
   * @memberof CoursePriceBase
   */
  priceName: string;
  /**
   * 價格
   * @type {number}
   * @memberof CoursePriceBase
   */
  price: number;
  /**
   * 是否公開對應type=IsYN顯示 namevalue存此欄位0：N1：Y
   * @type {string}
   * @memberof CoursePriceBase
   */
  isPublic: string;
  /**
   * 是否超過優惠日期後關閉對應type=IsYN顯示 namevalue存此欄0N1Yif1ThendataTimeCourse.DiscountSignUpDate關閉此選項
   * @type {string}
   * @memberof CoursePriceBase
   */
  isDueDate: string;
}
/**
 * CoursePrice
 * @export
 * @interface CoursePriceView
 */
export interface CoursePriceView {
  /**
   *
   * @type {string}
   * @memberof CoursePriceView
   */
  handledId?: string | null;
  /**
   *
   * @type {string}
   * @memberof CoursePriceView
   */
  dateCreate?: string;
  /**
   *
   * @type {string}
   * @memberof CoursePriceView
   */
  userCreate?: string | null;
  /**
   *
   * @type {string}
   * @memberof CoursePriceView
   */
  dateUpdate?: string | null;
  /**
   *
   * @type {string}
   * @memberof CoursePriceView
   */
  userUpdate?: string | null;
  /**
   * id
   * @type {number}
   * @memberof CoursePriceView
   */
  id: number;
  /**
   * 課程類別Course.Id
   * @type {number}
   * @memberof CoursePriceView
   */
  courseId: number;
  /**
   * 價格名稱
   * @type {string}
   * @memberof CoursePriceView
   */
  priceName: string;
  /**
   * 價格
   * @type {number}
   * @memberof CoursePriceView
   */
  price: number;
  /**
   * 是否公開對應type=IsYN顯示 namevalue存此欄位0：N1：Y
   * @type {string}
   * @memberof CoursePriceView
   */
  isPublic: string;
  /**
   * 是否超過優惠日期後關閉對應type=IsYN顯示 namevalue存此欄0N1Yif1ThendataTimeCourse.DiscountSignUpDate關閉此選項
   * @type {string}
   * @memberof CoursePriceView
   */
  isDueDate: string;
}
/**
 *
 * @export
 * @interface CoursePriceViewApiResponse
 */
export interface CoursePriceViewApiResponse {
  /**
   *
   * @type {string}
   * @memberof CoursePriceViewApiResponse
   */
  handledId?: string | null;
  /**
   * http-200  0000: 代表處理成功，其餘一律為失敗  http-4xx  Vxxxx: 資料驗證  Bxxxx: 詳見 message 欄位說明
   * @type {string}
   * @memberof CoursePriceViewApiResponse
   */
  code: string;
  /**
   * 回傳訊息
   * @type {string}
   * @memberof CoursePriceViewApiResponse
   */
  message: string;
  /**
   * 錯誤詳細資訊
   * @type {any}
   * @memberof CoursePriceViewApiResponse
   */
  detailMessage: any;
  /**
   *
   * @type {CoursePriceView}
   * @memberof CoursePriceViewApiResponse
   */
  data: CoursePriceView;
  /**
   * 交易時間
   * @type {string}
   * @memberof CoursePriceViewApiResponse
   */
  txnTime: string;
}
/**
 *
 * @export
 * @interface CoursePriceViewListApiResponse
 */
export interface CoursePriceViewListApiResponse {
  /**
   *
   * @type {string}
   * @memberof CoursePriceViewListApiResponse
   */
  handledId?: string | null;
  /**
   * http-200  0000: 代表處理成功，其餘一律為失敗  http-4xx  Vxxxx: 資料驗證  Bxxxx: 詳見 message 欄位說明
   * @type {string}
   * @memberof CoursePriceViewListApiResponse
   */
  code: string;
  /**
   * 回傳訊息
   * @type {string}
   * @memberof CoursePriceViewListApiResponse
   */
  message: string;
  /**
   * 錯誤詳細資訊
   * @type {any}
   * @memberof CoursePriceViewListApiResponse
   */
  detailMessage: any;
  /**
   * 回傳資料
   * @type {Array<CoursePriceView>}
   * @memberof CoursePriceViewListApiResponse
   */
  data: Array<CoursePriceView>;
  /**
   * 交易時間
   * @type {string}
   * @memberof CoursePriceViewListApiResponse
   */
  txnTime: string;
}
/**
 *
 * @export
 * @interface CoursePriceViewPage
 */
export interface CoursePriceViewPage {
  /**
   *
   * @type {number}
   * @memberof CoursePriceViewPage
   */
  totalCount: number;
  /**
   *
   * @type {number}
   * @memberof CoursePriceViewPage
   */
  pageCount: number;
  /**
   *
   * @type {number}
   * @memberof CoursePriceViewPage
   */
  currentPage: number;
  /**
   *
   * @type {number}
   * @memberof CoursePriceViewPage
   */
  size: number;
  /**
   *
   * @type {Array<CoursePriceView>}
   * @memberof CoursePriceViewPage
   */
  records: Array<CoursePriceView>;
  /**
   *
   * @type {number}
   * @memberof CoursePriceViewPage
   */
  pageSize: number;
  /**
   *
   * @type {boolean}
   * @memberof CoursePriceViewPage
   */
  hasPreviousPages: boolean;
  /**
   *
   * @type {boolean}
   * @memberof CoursePriceViewPage
   */
  hasNextPages: boolean;
  /**
   *
   * @type {number}
   * @memberof CoursePriceViewPage
   */
  previousLastPageNo: number;
  /**
   *
   * @type {number}
   * @memberof CoursePriceViewPage
   */
  nextStartPageNo: number;
  /**
   *
   * @type {Array<number>}
   * @memberof CoursePriceViewPage
   */
  navigationPages: Array<number>;
}
/**
 *
 * @export
 * @interface CoursePriceViewPageApiResponse
 */
export interface CoursePriceViewPageApiResponse {
  /**
   *
   * @type {string}
   * @memberof CoursePriceViewPageApiResponse
   */
  handledId?: string | null;
  /**
   * http-200  0000: 代表處理成功，其餘一律為失敗  http-4xx  Vxxxx: 資料驗證  Bxxxx: 詳見 message 欄位說明
   * @type {string}
   * @memberof CoursePriceViewPageApiResponse
   */
  code: string;
  /**
   * 回傳訊息
   * @type {string}
   * @memberof CoursePriceViewPageApiResponse
   */
  message: string;
  /**
   * 錯誤詳細資訊
   * @type {any}
   * @memberof CoursePriceViewPageApiResponse
   */
  detailMessage: any;
  /**
   *
   * @type {CoursePriceViewPage}
   * @memberof CoursePriceViewPageApiResponse
   */
  data: CoursePriceViewPage;
  /**
   * 交易時間
   * @type {string}
   * @memberof CoursePriceViewPageApiResponse
   */
  txnTime: string;
}
/**
 *
 * @export
 * @interface CourseTimeSchedule
 */
export interface CourseTimeSchedule {
  /**
   * id
   * @type {number}
   * @memberof CourseTimeSchedule
   */
  id: number;
  /**
   * 課程類別CourseManagement.Id
   * @type {number}
   * @memberof CourseTimeSchedule
   */
  courseId: number;
  /**
   * 代號/梯次
   * @type {string}
   * @memberof CourseTimeSchedule
   */
  scheduleNo: string;
  /**
   * 附件類別對應type=ClassDay顯示 namevalue存此欄位1：一2：二….
   * @type {string}
   * @memberof CourseTimeSchedule
   */
  classDay: string;
  /**
   * 開始時間
   * @type {string}
   * @memberof CourseTimeSchedule
   */
  classTimeS: string;
  /**
   * 結束時間
   * @type {string}
   * @memberof CourseTimeSchedule
   */
  classTimeE: string;
  /**
   * 地點
   * @type {string}
   * @memberof CourseTimeSchedule
   */
  place: string;
  /**
   *
   * @type {string}
   * @memberof CourseTimeSchedule
   */
  statusCd: string;
  /**
   * ApiLog HandledId
   * @type {string}
   * @memberof CourseTimeSchedule
   */
  handledId?: string | null;
  /**
   * 建立日期
   * @type {string}
   * @memberof CourseTimeSchedule
   */
  dateCreate?: string;
  /**
   * 建立人員
   * @type {string}
   * @memberof CourseTimeSchedule
   */
  userCreate?: string | null;
  /**
   * 最後修改日期
   * @type {string}
   * @memberof CourseTimeSchedule
   */
  dateUpdate?: string | null;
  /**
   * 最後修改人員
   * @type {string}
   * @memberof CourseTimeSchedule
   */
  userUpdate?: string | null;
  /**
   *
   * @type {string}
   * @memberof CourseTimeSchedule
   */
  rowVersion?: string | null;
}
/**
 * 課程時段檔
 * @export
 * @interface CourseTimeScheduleBase
 */
export interface CourseTimeScheduleBase {
  /**
   * id
   * @type {number}
   * @memberof CourseTimeScheduleBase
   */
  id: number;
  /**
   * 課程類別Course.Id
   * @type {number}
   * @memberof CourseTimeScheduleBase
   */
  courseId: number;
  /**
   * 代號/梯次
   * @type {string}
   * @memberof CourseTimeScheduleBase
   */
  scheduleNo: string;
  /**
   * 附件類別對應type=ClassDay顯示 namevalue存此欄位1：一2：二….
   * @type {string}
   * @memberof CourseTimeScheduleBase
   */
  classDay: string;
  /**
   * 開始時間
   * @type {string}
   * @memberof CourseTimeScheduleBase
   */
  classTimeS: string;
  /**
   * 結束時間
   * @type {string}
   * @memberof CourseTimeScheduleBase
   */
  classTimeE: string;
  /**
   * 地點
   * @type {string}
   * @memberof CourseTimeScheduleBase
   */
  place: string;
}
/**
 *
 * @export
 * @interface CourseTimeScheduleTeacher
 */
export interface CourseTimeScheduleTeacher {
  /**
   * id
   * @type {number}
   * @memberof CourseTimeScheduleTeacher
   */
  id: number;
  /**
   * 課程時段CourseTimeSchedule.Id
   * @type {number}
   * @memberof CourseTimeScheduleTeacher
   */
  courseTimeScheduleId: number;
  /**
   * 代號/梯次
   * @type {string}
   * @memberof CourseTimeScheduleTeacher
   */
  scheduleNo: string;
  /**
   * Teacher.Id
   * @type {number}
   * @memberof CourseTimeScheduleTeacher
   */
  teacherId: number;
  /**
   * 出席狀態
   * @type {string}
   * @memberof CourseTimeScheduleTeacher
   */
  attendanceType: string;
  /**
   *
   * @type {string}
   * @memberof CourseTimeScheduleTeacher
   */
  statusCd: string;
  /**
   * ApiLog HandledId
   * @type {string}
   * @memberof CourseTimeScheduleTeacher
   */
  handledId?: string | null;
  /**
   * 建立日期
   * @type {string}
   * @memberof CourseTimeScheduleTeacher
   */
  dateCreate?: string;
  /**
   * 建立人員
   * @type {string}
   * @memberof CourseTimeScheduleTeacher
   */
  userCreate?: string | null;
  /**
   * 最後修改日期
   * @type {string}
   * @memberof CourseTimeScheduleTeacher
   */
  dateUpdate?: string | null;
  /**
   * 最後修改人員
   * @type {string}
   * @memberof CourseTimeScheduleTeacher
   */
  userUpdate?: string | null;
  /**
   *
   * @type {string}
   * @memberof CourseTimeScheduleTeacher
   */
  rowVersion?: string | null;
}
/**
 * 課程時段講師檔
 * @export
 * @interface CourseTimeScheduleTeacherBase
 */
export interface CourseTimeScheduleTeacherBase {
  /**
   * id
   * @type {number}
   * @memberof CourseTimeScheduleTeacherBase
   */
  id: number;
  /**
   * 課程時段CourseTimeSchedule.Id
   * @type {number}
   * @memberof CourseTimeScheduleTeacherBase
   */
  courseTimeScheduleId: number;
  /**
   * 代號/梯次
   * @type {string}
   * @memberof CourseTimeScheduleTeacherBase
   */
  scheduleNo: string;
  /**
   * Teacher.Id
   * @type {number}
   * @memberof CourseTimeScheduleTeacherBase
   */
  teacherId: number;
  /**
   * 實際上課日
   * @type {string}
   * @memberof CourseTimeScheduleTeacherBase
   */
  realClassDate: string;
}
/**
 * CourseTimeScheduleTeacher
 * @export
 * @interface CourseTimeScheduleTeacherView
 */
export interface CourseTimeScheduleTeacherView {
  /**
   *
   * @type {string}
   * @memberof CourseTimeScheduleTeacherView
   */
  handledId?: string | null;
  /**
   *
   * @type {string}
   * @memberof CourseTimeScheduleTeacherView
   */
  dateCreate?: string;
  /**
   *
   * @type {string}
   * @memberof CourseTimeScheduleTeacherView
   */
  userCreate?: string | null;
  /**
   *
   * @type {string}
   * @memberof CourseTimeScheduleTeacherView
   */
  dateUpdate?: string | null;
  /**
   *
   * @type {string}
   * @memberof CourseTimeScheduleTeacherView
   */
  userUpdate?: string | null;
  /**
   * id
   * @type {number}
   * @memberof CourseTimeScheduleTeacherView
   */
  id: number;
  /**
   * 課程時段CourseTimeSchedule.Id
   * @type {number}
   * @memberof CourseTimeScheduleTeacherView
   */
  courseTimeScheduleId: number;
  /**
   * 代號/梯次
   * @type {string}
   * @memberof CourseTimeScheduleTeacherView
   */
  scheduleNo: string;
  /**
   * Teacher.Id
   * @type {number}
   * @memberof CourseTimeScheduleTeacherView
   */
  teacherId: number;
  /**
   * 實際上課日
   * @type {string}
   * @memberof CourseTimeScheduleTeacherView
   */
  realClassDate: string;
}
/**
 *
 * @export
 * @interface CourseTimeScheduleTeacherViewApiResponse
 */
export interface CourseTimeScheduleTeacherViewApiResponse {
  /**
   *
   * @type {string}
   * @memberof CourseTimeScheduleTeacherViewApiResponse
   */
  handledId?: string | null;
  /**
   * http-200  0000: 代表處理成功，其餘一律為失敗  http-4xx  Vxxxx: 資料驗證  Bxxxx: 詳見 message 欄位說明
   * @type {string}
   * @memberof CourseTimeScheduleTeacherViewApiResponse
   */
  code: string;
  /**
   * 回傳訊息
   * @type {string}
   * @memberof CourseTimeScheduleTeacherViewApiResponse
   */
  message: string;
  /**
   * 錯誤詳細資訊
   * @type {any}
   * @memberof CourseTimeScheduleTeacherViewApiResponse
   */
  detailMessage: any;
  /**
   *
   * @type {CourseTimeScheduleTeacherView}
   * @memberof CourseTimeScheduleTeacherViewApiResponse
   */
  data: CourseTimeScheduleTeacherView;
  /**
   * 交易時間
   * @type {string}
   * @memberof CourseTimeScheduleTeacherViewApiResponse
   */
  txnTime: string;
}
/**
 *
 * @export
 * @interface CourseTimeScheduleTeacherViewListApiResponse
 */
export interface CourseTimeScheduleTeacherViewListApiResponse {
  /**
   *
   * @type {string}
   * @memberof CourseTimeScheduleTeacherViewListApiResponse
   */
  handledId?: string | null;
  /**
   * http-200  0000: 代表處理成功，其餘一律為失敗  http-4xx  Vxxxx: 資料驗證  Bxxxx: 詳見 message 欄位說明
   * @type {string}
   * @memberof CourseTimeScheduleTeacherViewListApiResponse
   */
  code: string;
  /**
   * 回傳訊息
   * @type {string}
   * @memberof CourseTimeScheduleTeacherViewListApiResponse
   */
  message: string;
  /**
   * 錯誤詳細資訊
   * @type {any}
   * @memberof CourseTimeScheduleTeacherViewListApiResponse
   */
  detailMessage: any;
  /**
   * 回傳資料
   * @type {Array<CourseTimeScheduleTeacherView>}
   * @memberof CourseTimeScheduleTeacherViewListApiResponse
   */
  data: Array<CourseTimeScheduleTeacherView>;
  /**
   * 交易時間
   * @type {string}
   * @memberof CourseTimeScheduleTeacherViewListApiResponse
   */
  txnTime: string;
}
/**
 *
 * @export
 * @interface CourseTimeScheduleTeacherViewPage
 */
export interface CourseTimeScheduleTeacherViewPage {
  /**
   *
   * @type {number}
   * @memberof CourseTimeScheduleTeacherViewPage
   */
  totalCount: number;
  /**
   *
   * @type {number}
   * @memberof CourseTimeScheduleTeacherViewPage
   */
  pageCount: number;
  /**
   *
   * @type {number}
   * @memberof CourseTimeScheduleTeacherViewPage
   */
  currentPage: number;
  /**
   *
   * @type {number}
   * @memberof CourseTimeScheduleTeacherViewPage
   */
  size: number;
  /**
   *
   * @type {Array<CourseTimeScheduleTeacherView>}
   * @memberof CourseTimeScheduleTeacherViewPage
   */
  records: Array<CourseTimeScheduleTeacherView>;
  /**
   *
   * @type {number}
   * @memberof CourseTimeScheduleTeacherViewPage
   */
  pageSize: number;
  /**
   *
   * @type {boolean}
   * @memberof CourseTimeScheduleTeacherViewPage
   */
  hasPreviousPages: boolean;
  /**
   *
   * @type {boolean}
   * @memberof CourseTimeScheduleTeacherViewPage
   */
  hasNextPages: boolean;
  /**
   *
   * @type {number}
   * @memberof CourseTimeScheduleTeacherViewPage
   */
  previousLastPageNo: number;
  /**
   *
   * @type {number}
   * @memberof CourseTimeScheduleTeacherViewPage
   */
  nextStartPageNo: number;
  /**
   *
   * @type {Array<number>}
   * @memberof CourseTimeScheduleTeacherViewPage
   */
  navigationPages: Array<number>;
}
/**
 *
 * @export
 * @interface CourseTimeScheduleTeacherViewPageApiResponse
 */
export interface CourseTimeScheduleTeacherViewPageApiResponse {
  /**
   *
   * @type {string}
   * @memberof CourseTimeScheduleTeacherViewPageApiResponse
   */
  handledId?: string | null;
  /**
   * http-200  0000: 代表處理成功，其餘一律為失敗  http-4xx  Vxxxx: 資料驗證  Bxxxx: 詳見 message 欄位說明
   * @type {string}
   * @memberof CourseTimeScheduleTeacherViewPageApiResponse
   */
  code: string;
  /**
   * 回傳訊息
   * @type {string}
   * @memberof CourseTimeScheduleTeacherViewPageApiResponse
   */
  message: string;
  /**
   * 錯誤詳細資訊
   * @type {any}
   * @memberof CourseTimeScheduleTeacherViewPageApiResponse
   */
  detailMessage: any;
  /**
   *
   * @type {CourseTimeScheduleTeacherViewPage}
   * @memberof CourseTimeScheduleTeacherViewPageApiResponse
   */
  data: CourseTimeScheduleTeacherViewPage;
  /**
   * 交易時間
   * @type {string}
   * @memberof CourseTimeScheduleTeacherViewPageApiResponse
   */
  txnTime: string;
}
/**
 *
 * @export
 * @interface CourseTimeScheduleUser
 */
export interface CourseTimeScheduleUser {
  /**
   * id
   * @type {number}
   * @memberof CourseTimeScheduleUser
   */
  id: number;
  /**
   * User.Id
   * @type {number}
   * @memberof CourseTimeScheduleUser
   */
  userId: number;
  /**
   * 課程時段CourseTimeSchedule.Id
   * @type {number}
   * @memberof CourseTimeScheduleUser
   */
  courseTimeScheduleId: number;
  /**
   * 代號/梯次
   * @type {string}
   * @memberof CourseTimeScheduleUser
   */
  scheduleNo: string;
  /**
   * 出席狀態
   * @type {string}
   * @memberof CourseTimeScheduleUser
   */
  attendanceType: string;
  /**
   *
   * @type {string}
   * @memberof CourseTimeScheduleUser
   */
  statusCd: string;
  /**
   * ApiLog HandledId
   * @type {string}
   * @memberof CourseTimeScheduleUser
   */
  handledId?: string | null;
  /**
   * 建立日期
   * @type {string}
   * @memberof CourseTimeScheduleUser
   */
  dateCreate?: string;
  /**
   * 建立人員
   * @type {string}
   * @memberof CourseTimeScheduleUser
   */
  userCreate?: string | null;
  /**
   * 最後修改日期
   * @type {string}
   * @memberof CourseTimeScheduleUser
   */
  dateUpdate?: string | null;
  /**
   * 最後修改人員
   * @type {string}
   * @memberof CourseTimeScheduleUser
   */
  userUpdate?: string | null;
  /**
   *
   * @type {string}
   * @memberof CourseTimeScheduleUser
   */
  rowVersion?: string | null;
}
/**
 *
 * @export
 * @interface CourseTimeScheduleUserBase
 */
export interface CourseTimeScheduleUserBase {
  /**
   * id
   * @type {number}
   * @memberof CourseTimeScheduleUserBase
   */
  id: number;
  /**
   * 課程時段CourseTimeSchedule.Id
   * @type {number}
   * @memberof CourseTimeScheduleUserBase
   */
  courseTimeScheduleId: number;
  /**
   * 代號/梯次
   * @type {string}
   * @memberof CourseTimeScheduleUserBase
   */
  scheduleNo: string;
  /**
   * User.Id
   * @type {number}
   * @memberof CourseTimeScheduleUserBase
   */
  userId: number;
  /**
   * 出席狀態
   * @type {string}
   * @memberof CourseTimeScheduleUserBase
   */
  attendanceType: string;
}
/**
 * CourseTimeScheduleUser
 * @export
 * @interface CourseTimeScheduleUserView
 */
export interface CourseTimeScheduleUserView {
  /**
   *
   * @type {string}
   * @memberof CourseTimeScheduleUserView
   */
  handledId?: string | null;
  /**
   *
   * @type {string}
   * @memberof CourseTimeScheduleUserView
   */
  dateCreate?: string;
  /**
   *
   * @type {string}
   * @memberof CourseTimeScheduleUserView
   */
  userCreate?: string | null;
  /**
   *
   * @type {string}
   * @memberof CourseTimeScheduleUserView
   */
  dateUpdate?: string | null;
  /**
   *
   * @type {string}
   * @memberof CourseTimeScheduleUserView
   */
  userUpdate?: string | null;
  /**
   * id
   * @type {number}
   * @memberof CourseTimeScheduleUserView
   */
  id: number;
  /**
   * 課程時段CourseTimeSchedule.Id
   * @type {number}
   * @memberof CourseTimeScheduleUserView
   */
  courseTimeScheduleId: number;
  /**
   * 代號/梯次
   * @type {string}
   * @memberof CourseTimeScheduleUserView
   */
  scheduleNo: string;
  /**
   * User.Id
   * @type {number}
   * @memberof CourseTimeScheduleUserView
   */
  userId: number;
  /**
   * 出席狀態
   * @type {string}
   * @memberof CourseTimeScheduleUserView
   */
  attendanceType: string;
}
/**
 *
 * @export
 * @interface CourseTimeScheduleUserViewApiResponse
 */
export interface CourseTimeScheduleUserViewApiResponse {
  /**
   *
   * @type {string}
   * @memberof CourseTimeScheduleUserViewApiResponse
   */
  handledId?: string | null;
  /**
   * http-200  0000: 代表處理成功，其餘一律為失敗  http-4xx  Vxxxx: 資料驗證  Bxxxx: 詳見 message 欄位說明
   * @type {string}
   * @memberof CourseTimeScheduleUserViewApiResponse
   */
  code: string;
  /**
   * 回傳訊息
   * @type {string}
   * @memberof CourseTimeScheduleUserViewApiResponse
   */
  message: string;
  /**
   * 錯誤詳細資訊
   * @type {any}
   * @memberof CourseTimeScheduleUserViewApiResponse
   */
  detailMessage: any;
  /**
   *
   * @type {CourseTimeScheduleUserView}
   * @memberof CourseTimeScheduleUserViewApiResponse
   */
  data: CourseTimeScheduleUserView;
  /**
   * 交易時間
   * @type {string}
   * @memberof CourseTimeScheduleUserViewApiResponse
   */
  txnTime: string;
}
/**
 *
 * @export
 * @interface CourseTimeScheduleUserViewListApiResponse
 */
export interface CourseTimeScheduleUserViewListApiResponse {
  /**
   *
   * @type {string}
   * @memberof CourseTimeScheduleUserViewListApiResponse
   */
  handledId?: string | null;
  /**
   * http-200  0000: 代表處理成功，其餘一律為失敗  http-4xx  Vxxxx: 資料驗證  Bxxxx: 詳見 message 欄位說明
   * @type {string}
   * @memberof CourseTimeScheduleUserViewListApiResponse
   */
  code: string;
  /**
   * 回傳訊息
   * @type {string}
   * @memberof CourseTimeScheduleUserViewListApiResponse
   */
  message: string;
  /**
   * 錯誤詳細資訊
   * @type {any}
   * @memberof CourseTimeScheduleUserViewListApiResponse
   */
  detailMessage: any;
  /**
   * 回傳資料
   * @type {Array<CourseTimeScheduleUserView>}
   * @memberof CourseTimeScheduleUserViewListApiResponse
   */
  data: Array<CourseTimeScheduleUserView>;
  /**
   * 交易時間
   * @type {string}
   * @memberof CourseTimeScheduleUserViewListApiResponse
   */
  txnTime: string;
}
/**
 *
 * @export
 * @interface CourseTimeScheduleUserViewPage
 */
export interface CourseTimeScheduleUserViewPage {
  /**
   *
   * @type {number}
   * @memberof CourseTimeScheduleUserViewPage
   */
  totalCount: number;
  /**
   *
   * @type {number}
   * @memberof CourseTimeScheduleUserViewPage
   */
  pageCount: number;
  /**
   *
   * @type {number}
   * @memberof CourseTimeScheduleUserViewPage
   */
  currentPage: number;
  /**
   *
   * @type {number}
   * @memberof CourseTimeScheduleUserViewPage
   */
  size: number;
  /**
   *
   * @type {Array<CourseTimeScheduleUserView>}
   * @memberof CourseTimeScheduleUserViewPage
   */
  records: Array<CourseTimeScheduleUserView>;
  /**
   *
   * @type {number}
   * @memberof CourseTimeScheduleUserViewPage
   */
  pageSize: number;
  /**
   *
   * @type {boolean}
   * @memberof CourseTimeScheduleUserViewPage
   */
  hasPreviousPages: boolean;
  /**
   *
   * @type {boolean}
   * @memberof CourseTimeScheduleUserViewPage
   */
  hasNextPages: boolean;
  /**
   *
   * @type {number}
   * @memberof CourseTimeScheduleUserViewPage
   */
  previousLastPageNo: number;
  /**
   *
   * @type {number}
   * @memberof CourseTimeScheduleUserViewPage
   */
  nextStartPageNo: number;
  /**
   *
   * @type {Array<number>}
   * @memberof CourseTimeScheduleUserViewPage
   */
  navigationPages: Array<number>;
}
/**
 *
 * @export
 * @interface CourseTimeScheduleUserViewPageApiResponse
 */
export interface CourseTimeScheduleUserViewPageApiResponse {
  /**
   *
   * @type {string}
   * @memberof CourseTimeScheduleUserViewPageApiResponse
   */
  handledId?: string | null;
  /**
   * http-200  0000: 代表處理成功，其餘一律為失敗  http-4xx  Vxxxx: 資料驗證  Bxxxx: 詳見 message 欄位說明
   * @type {string}
   * @memberof CourseTimeScheduleUserViewPageApiResponse
   */
  code: string;
  /**
   * 回傳訊息
   * @type {string}
   * @memberof CourseTimeScheduleUserViewPageApiResponse
   */
  message: string;
  /**
   * 錯誤詳細資訊
   * @type {any}
   * @memberof CourseTimeScheduleUserViewPageApiResponse
   */
  detailMessage: any;
  /**
   *
   * @type {CourseTimeScheduleUserViewPage}
   * @memberof CourseTimeScheduleUserViewPageApiResponse
   */
  data: CourseTimeScheduleUserViewPage;
  /**
   * 交易時間
   * @type {string}
   * @memberof CourseTimeScheduleUserViewPageApiResponse
   */
  txnTime: string;
}
/**
 * CourseTimeSchedule
 * @export
 * @interface CourseTimeScheduleView
 */
export interface CourseTimeScheduleView {
  /**
   *
   * @type {string}
   * @memberof CourseTimeScheduleView
   */
  handledId?: string | null;
  /**
   *
   * @type {string}
   * @memberof CourseTimeScheduleView
   */
  dateCreate?: string;
  /**
   *
   * @type {string}
   * @memberof CourseTimeScheduleView
   */
  userCreate?: string | null;
  /**
   *
   * @type {string}
   * @memberof CourseTimeScheduleView
   */
  dateUpdate?: string | null;
  /**
   *
   * @type {string}
   * @memberof CourseTimeScheduleView
   */
  userUpdate?: string | null;
  /**
   *
   * @type {Array<CourseTimeScheduleTeacherView>}
   * @memberof CourseTimeScheduleView
   */
  courseTimeScheduleTeachers: Array<CourseTimeScheduleTeacherView>;
  /**
   * id
   * @type {number}
   * @memberof CourseTimeScheduleView
   */
  id: number;
  /**
   * 課程類別Course.Id
   * @type {number}
   * @memberof CourseTimeScheduleView
   */
  courseId: number;
  /**
   * 代號/梯次
   * @type {string}
   * @memberof CourseTimeScheduleView
   */
  scheduleNo: string;
  /**
   * 附件類別對應type=ClassDay顯示 namevalue存此欄位1：一2：二….
   * @type {string}
   * @memberof CourseTimeScheduleView
   */
  classDay: string;
  /**
   * 開始時間
   * @type {string}
   * @memberof CourseTimeScheduleView
   */
  classTimeS: string;
  /**
   * 結束時間
   * @type {string}
   * @memberof CourseTimeScheduleView
   */
  classTimeE: string;
  /**
   * 地點
   * @type {string}
   * @memberof CourseTimeScheduleView
   */
  place: string;
}
/**
 *
 * @export
 * @interface CourseTimeScheduleViewApiResponse
 */
export interface CourseTimeScheduleViewApiResponse {
  /**
   *
   * @type {string}
   * @memberof CourseTimeScheduleViewApiResponse
   */
  handledId?: string | null;
  /**
   * http-200  0000: 代表處理成功，其餘一律為失敗  http-4xx  Vxxxx: 資料驗證  Bxxxx: 詳見 message 欄位說明
   * @type {string}
   * @memberof CourseTimeScheduleViewApiResponse
   */
  code: string;
  /**
   * 回傳訊息
   * @type {string}
   * @memberof CourseTimeScheduleViewApiResponse
   */
  message: string;
  /**
   * 錯誤詳細資訊
   * @type {any}
   * @memberof CourseTimeScheduleViewApiResponse
   */
  detailMessage: any;
  /**
   *
   * @type {CourseTimeScheduleView}
   * @memberof CourseTimeScheduleViewApiResponse
   */
  data: CourseTimeScheduleView;
  /**
   * 交易時間
   * @type {string}
   * @memberof CourseTimeScheduleViewApiResponse
   */
  txnTime: string;
}
/**
 *
 * @export
 * @interface CourseTimeScheduleViewListApiResponse
 */
export interface CourseTimeScheduleViewListApiResponse {
  /**
   *
   * @type {string}
   * @memberof CourseTimeScheduleViewListApiResponse
   */
  handledId?: string | null;
  /**
   * http-200  0000: 代表處理成功，其餘一律為失敗  http-4xx  Vxxxx: 資料驗證  Bxxxx: 詳見 message 欄位說明
   * @type {string}
   * @memberof CourseTimeScheduleViewListApiResponse
   */
  code: string;
  /**
   * 回傳訊息
   * @type {string}
   * @memberof CourseTimeScheduleViewListApiResponse
   */
  message: string;
  /**
   * 錯誤詳細資訊
   * @type {any}
   * @memberof CourseTimeScheduleViewListApiResponse
   */
  detailMessage: any;
  /**
   * 回傳資料
   * @type {Array<CourseTimeScheduleView>}
   * @memberof CourseTimeScheduleViewListApiResponse
   */
  data: Array<CourseTimeScheduleView>;
  /**
   * 交易時間
   * @type {string}
   * @memberof CourseTimeScheduleViewListApiResponse
   */
  txnTime: string;
}
/**
 *
 * @export
 * @interface CourseTimeScheduleViewPage
 */
export interface CourseTimeScheduleViewPage {
  /**
   *
   * @type {number}
   * @memberof CourseTimeScheduleViewPage
   */
  totalCount: number;
  /**
   *
   * @type {number}
   * @memberof CourseTimeScheduleViewPage
   */
  pageCount: number;
  /**
   *
   * @type {number}
   * @memberof CourseTimeScheduleViewPage
   */
  currentPage: number;
  /**
   *
   * @type {number}
   * @memberof CourseTimeScheduleViewPage
   */
  size: number;
  /**
   *
   * @type {Array<CourseTimeScheduleView>}
   * @memberof CourseTimeScheduleViewPage
   */
  records: Array<CourseTimeScheduleView>;
  /**
   *
   * @type {number}
   * @memberof CourseTimeScheduleViewPage
   */
  pageSize: number;
  /**
   *
   * @type {boolean}
   * @memberof CourseTimeScheduleViewPage
   */
  hasPreviousPages: boolean;
  /**
   *
   * @type {boolean}
   * @memberof CourseTimeScheduleViewPage
   */
  hasNextPages: boolean;
  /**
   *
   * @type {number}
   * @memberof CourseTimeScheduleViewPage
   */
  previousLastPageNo: number;
  /**
   *
   * @type {number}
   * @memberof CourseTimeScheduleViewPage
   */
  nextStartPageNo: number;
  /**
   *
   * @type {Array<number>}
   * @memberof CourseTimeScheduleViewPage
   */
  navigationPages: Array<number>;
}
/**
 *
 * @export
 * @interface CourseTimeScheduleViewPageApiResponse
 */
export interface CourseTimeScheduleViewPageApiResponse {
  /**
   *
   * @type {string}
   * @memberof CourseTimeScheduleViewPageApiResponse
   */
  handledId?: string | null;
  /**
   * http-200  0000: 代表處理成功，其餘一律為失敗  http-4xx  Vxxxx: 資料驗證  Bxxxx: 詳見 message 欄位說明
   * @type {string}
   * @memberof CourseTimeScheduleViewPageApiResponse
   */
  code: string;
  /**
   * 回傳訊息
   * @type {string}
   * @memberof CourseTimeScheduleViewPageApiResponse
   */
  message: string;
  /**
   * 錯誤詳細資訊
   * @type {any}
   * @memberof CourseTimeScheduleViewPageApiResponse
   */
  detailMessage: any;
  /**
   *
   * @type {CourseTimeScheduleViewPage}
   * @memberof CourseTimeScheduleViewPageApiResponse
   */
  data: CourseTimeScheduleViewPage;
  /**
   * 交易時間
   * @type {string}
   * @memberof CourseTimeScheduleViewPageApiResponse
   */
  txnTime: string;
}
/**
 * Course
 * @export
 * @interface CourseView
 */
export interface CourseView {
  /**
   * 課程類別名稱
   * @type {string}
   * @memberof CourseView
   */
  courseManagementTitle: string;
  /**
   * 已報名人數
   * @type {number}
   * @memberof CourseView
   */
  signUpCount: number;
  /**
   * 已繳費人數
   * @type {number}
   * @memberof CourseView
   */
  paymentCount: number;
  /**
   * 班級人數
   * @type {number}
   * @memberof CourseView
   */
  studentCount: number;
  /**
   * 開課班級與時段
   * @type {string}
   * @memberof CourseView
   */
  courseInformations: string;
  /**
   * 永久課程代碼
   * @type {string}
   * @memberof CourseView
   */
  courseManagementNo: string;
  /**
   * 課程說明
   * @type {string}
   * @memberof CourseView
   */
  courseManagementDescription: string;
  /**
   * 課程類別名稱
   * @type {string}
   * @memberof CourseView
   */
  courseManagementTypeName: string;
  /**
   * CourseIsFilter：是否有擋修 0否 1是
   * @type {string}
   * @memberof CourseView
   */
  courseIsFilter: string;
  /**
   *
   * @type {string}
   * @memberof CourseView
   */
  handledId?: string | null;
  /**
   *
   * @type {string}
   * @memberof CourseView
   */
  dateCreate?: string;
  /**
   *
   * @type {string}
   * @memberof CourseView
   */
  userCreate?: string | null;
  /**
   *
   * @type {string}
   * @memberof CourseView
   */
  dateUpdate?: string | null;
  /**
   *
   * @type {string}
   * @memberof CourseView
   */
  userUpdate?: string | null;
  /**
   * 價格
   * @type {Array<CoursePriceView>}
   * @memberof CourseView
   */
  coursePrices: Array<CoursePriceView>;
  /**
   * 堂點
   * @type {Array<CourseOrganizationView>}
   * @memberof CourseView
   */
  courseOrganizations: Array<CourseOrganizationView>;
  /**
   * 課程時間
   * @type {Array<CourseTimeScheduleView>}
   * @memberof CourseView
   */
  courseTimeSchedules: Array<CourseTimeScheduleView>;
  /**
   *
   * @type {CourseManagementView}
   * @memberof CourseView
   */
  courseManagement: CourseManagementView;
  /**
   *
   * @type {CourseManagementFilterView}
   * @memberof CourseView
   */
  courseManagementFilter: CourseManagementFilterView;
  /**
   * id
   * @type {number}
   * @memberof CourseView
   */
  id: number;
  /**
   * 課程類別CourseManagement.Id
   * @type {number}
   * @memberof CourseView
   */
  courseManagementId: number;
  /**
   * Organization.Id
   * @type {number}
   * @memberof CourseView
   */
  organizationId: number;
  /**
   * Questionnaire.Id 問卷Id
   * @type {number}
   * @memberof CourseView
   */
  questionnaireId: number;
  /**
   * 年度 屆別
   * @type {string}
   * @memberof CourseView
   */
  year: string;
  /**
   * 名稱
   * @type {string}
   * @memberof CourseView
   */
  name: string;
  /**
   * 梯次
   * @type {string}
   * @memberof CourseView
   */
  classNum: string;
  /**
   * 季
   * @type {string}
   * @memberof CourseView
   */
  season: string;
  /**
   * 開課日
   * @type {string}
   * @memberof CourseView
   */
  openDateS: string;
  /**
   * 開課日
   * @type {string}
   * @memberof CourseView
   */
  openDateE: string;
  /**
   * 開課日
   * @type {string}
   * @memberof CourseView
   */
  openDate: string;
  /**
   * 報名日期(線上)
   * @type {string}
   * @memberof CourseView
   */
  signUpDateS: string;
  /**
   * 報名截止日(線上)
   * @type {string}
   * @memberof CourseView
   */
  signUpDateE: string;
  /**
   * 報名日期(臨櫃)
   * @type {string}
   * @memberof CourseView
   */
  counterSignUpDateS: string;
  /**
   * 報名截止日(臨櫃)
   * @type {string}
   * @memberof CourseView
   */
  counterSignUpDateE: string;
  /**
   * 優惠報名截止日
   * @type {string}
   * @memberof CourseView
   */
  discountSignUpDate: string;
  /**
   * 報名方式對應type=CourseSignUpType顯示 namevalue存此欄位0：一般臨櫃1：網路報名
   * @type {string}
   * @memberof CourseView
   */
  courseSignUpType: string;
  /**
   * 最少志願數
   * @type {number}
   * @memberof CourseView
   */
  wishCount: number;
  /**
   * 是否需要推薦對應type=IsYN顯示 namevalue存此欄位0：N1：Y
   * @type {string}
   * @memberof CourseView
   */
  needRecommend: string;
  /**
   * 新朋友可報名對應type=IsYN顯示 namevalue存此欄位0：N1：Y
   * @type {string}
   * @memberof CourseView
   */
  acceptNewMember: string;
  /**
   * 課程說明/資格
   * @type {string}
   * @memberof CourseView
   */
  description: string;
  /**
   * 上課堂數
   * @type {number}
   * @memberof CourseView
   */
  classCount: number;
  /**
   * 報名名額
   * @type {number}
   * @memberof CourseView
   */
  quota: number;
  /**
   * 結業狀態對應type=GraduationType顯示 namevalue存此欄位0：未結業1：已結業 2:-
   * @type {string}
   * @memberof CourseView
   */
  graduationType: string;
  /**
   * 前台特殊需求
   * @type {string}
   * @memberof CourseView
   */
  specialRequirement: string;
  /**
   * 對象資格說明
   * @type {string}
   * @memberof CourseView
   */
  basicQualification: string;
  /**
   * 結業資格說明
   * @type {string}
   * @memberof CourseView
   */
  graduationQualification: string;
  /**
   * 課程內容
   * @type {string}
   * @memberof CourseView
   */
  courseContext: string;
  /**
   * 注意事項
   * @type {string}
   * @memberof CourseView
   */
  courseNoticeDesc: string;
  /**
   * 退費原則
   * @type {string}
   * @memberof CourseView
   */
  courseRefundDesc: string;
  /**
   * 作業繳交日期
   * @type {string}
   * @memberof CourseView
   */
  homeworkDate: string;
  /**
   * 狀態
   * @type {string}
   * @memberof CourseView
   */
  statusCd: string;
  /**
   * 課程過濾主檔Id CourseManagementFilter.Id
   * @type {number}
   * @memberof CourseView
   */
  courseManagementFilterId: number;
  /**
   * 課程圖片上傳
   * @type {Array<CourseAppendixBase | CourseAppendixView | UpdateCourseAppendixCommand | CreateCourseAppendixCommand>}
   * @memberof CourseView
   */
  courseAppendices: Array<
    CourseAppendixBase | CourseAppendixView | UpdateCourseAppendixCommand | CreateCourseAppendixCommand
  >;
}
/**
 *
 * @export
 * @interface CourseViewApiResponse
 */
export interface CourseViewApiResponse {
  /**
   *
   * @type {string}
   * @memberof CourseViewApiResponse
   */
  handledId?: string | null;
  /**
   * http-200  0000: 代表處理成功，其餘一律為失敗  http-4xx  Vxxxx: 資料驗證  Bxxxx: 詳見 message 欄位說明
   * @type {string}
   * @memberof CourseViewApiResponse
   */
  code: string;
  /**
   * 回傳訊息
   * @type {string}
   * @memberof CourseViewApiResponse
   */
  message: string;
  /**
   * 錯誤詳細資訊
   * @type {any}
   * @memberof CourseViewApiResponse
   */
  detailMessage: any;
  /**
   *
   * @type {CourseView}
   * @memberof CourseViewApiResponse
   */
  data: CourseView;
  /**
   * 交易時間
   * @type {string}
   * @memberof CourseViewApiResponse
   */
  txnTime: string;
}
/**
 *
 * @export
 * @interface CourseViewListApiResponse
 */
export interface CourseViewListApiResponse {
  /**
   *
   * @type {string}
   * @memberof CourseViewListApiResponse
   */
  handledId?: string | null;
  /**
   * http-200  0000: 代表處理成功，其餘一律為失敗  http-4xx  Vxxxx: 資料驗證  Bxxxx: 詳見 message 欄位說明
   * @type {string}
   * @memberof CourseViewListApiResponse
   */
  code: string;
  /**
   * 回傳訊息
   * @type {string}
   * @memberof CourseViewListApiResponse
   */
  message: string;
  /**
   * 錯誤詳細資訊
   * @type {any}
   * @memberof CourseViewListApiResponse
   */
  detailMessage: any;
  /**
   * 回傳資料
   * @type {Array<CourseView>}
   * @memberof CourseViewListApiResponse
   */
  data: Array<CourseView>;
  /**
   * 交易時間
   * @type {string}
   * @memberof CourseViewListApiResponse
   */
  txnTime: string;
}
/**
 *
 * @export
 * @interface CourseViewPage
 */
export interface CourseViewPage {
  /**
   *
   * @type {number}
   * @memberof CourseViewPage
   */
  totalCount: number;
  /**
   *
   * @type {number}
   * @memberof CourseViewPage
   */
  pageCount: number;
  /**
   *
   * @type {number}
   * @memberof CourseViewPage
   */
  currentPage: number;
  /**
   *
   * @type {number}
   * @memberof CourseViewPage
   */
  size: number;
  /**
   *
   * @type {Array<CourseView>}
   * @memberof CourseViewPage
   */
  records: Array<CourseView>;
  /**
   *
   * @type {number}
   * @memberof CourseViewPage
   */
  pageSize: number;
  /**
   *
   * @type {boolean}
   * @memberof CourseViewPage
   */
  hasPreviousPages: boolean;
  /**
   *
   * @type {boolean}
   * @memberof CourseViewPage
   */
  hasNextPages: boolean;
  /**
   *
   * @type {number}
   * @memberof CourseViewPage
   */
  previousLastPageNo: number;
  /**
   *
   * @type {number}
   * @memberof CourseViewPage
   */
  nextStartPageNo: number;
  /**
   *
   * @type {Array<number>}
   * @memberof CourseViewPage
   */
  navigationPages: Array<number>;
}
/**
 *
 * @export
 * @interface CourseViewPageApiResponse
 */
export interface CourseViewPageApiResponse {
  /**
   *
   * @type {string}
   * @memberof CourseViewPageApiResponse
   */
  handledId?: string | null;
  /**
   * http-200  0000: 代表處理成功，其餘一律為失敗  http-4xx  Vxxxx: 資料驗證  Bxxxx: 詳見 message 欄位說明
   * @type {string}
   * @memberof CourseViewPageApiResponse
   */
  code: string;
  /**
   * 回傳訊息
   * @type {string}
   * @memberof CourseViewPageApiResponse
   */
  message: string;
  /**
   * 錯誤詳細資訊
   * @type {any}
   * @memberof CourseViewPageApiResponse
   */
  detailMessage: any;
  /**
   *
   * @type {CourseViewPage}
   * @memberof CourseViewPageApiResponse
   */
  data: CourseViewPage;
  /**
   * 交易時間
   * @type {string}
   * @memberof CourseViewPageApiResponse
   */
  txnTime: string;
}
/**
 * 建立 CourseAppendix
 * @export
 * @interface CreateCourseAppendixCommand
 */
export interface CreateCourseAppendixCommand {
  /**
   * id
   * @type {number}
   * @memberof CreateCourseAppendixCommand
   */
  id: number;
  /**
   * 課程類別CourseManagement.Id
   * @type {number}
   * @memberof CreateCourseAppendixCommand
   */
  courseId: number;
  /**
   * 附件類別對應type=AppendixType顯示 namevalue存此欄位 0：文件 1：影音 2：表單 3：圖片 4：Title圖片
   * @type {string}
   * @memberof CreateCourseAppendixCommand
   */
  appendixType: string;
  /**
   * 存放網路路徑  UploadFile.FileKey
   * @type {string}
   * @memberof CreateCourseAppendixCommand
   */
  path: string;
}
/**
 * 建立 Course
 * @export
 * @interface CreateCourseCommand
 */
export interface CreateCourseCommand {
  /**
   * 課程堂點主檔
   * @type {Array<CreateCourseOrganizationCommand>}
   * @memberof CreateCourseCommand
   */
  courseOrganizations: Array<CreateCourseOrganizationCommand>;
  /**
   * 課程價格主檔
   * @type {Array<CreateCoursePriceCommand>}
   * @memberof CreateCourseCommand
   */
  coursePrices: Array<CreateCoursePriceCommand>;
  /**
   *
   * @type {CreateCourseManagementFilterCommand}
   * @memberof CreateCourseCommand
   */
  courseManagementFilter: CreateCourseManagementFilterCommand;
  /**
   * 課程時段檔
   * @type {Array<CreateCourseTimeScheduleCommand>}
   * @memberof CreateCourseCommand
   */
  courseTimeSchedules: Array<CreateCourseTimeScheduleCommand>;
  /**
   * 課程過濾樣板事工團
   * @type {Array<CreateCourseManagementFilterRespCommand>}
   * @memberof CreateCourseCommand
   */
  courseManagementFilterResps: Array<CreateCourseManagementFilterRespCommand>;
  /**
   * 課程過濾樣板特殊會員
   * @type {Array<CreateCourseManagementFilterUserCommand>}
   * @memberof CreateCourseCommand
   */
  courseManagementFilterUsers: Array<CreateCourseManagementFilterUserCommand>;
  /**
   * 課程過濾樣板牧場
   * @type {Array<CreateCourseManagementFilterPastoralCommand>}
   * @memberof CreateCourseCommand
   */
  courseManagementFilterPastorals: Array<CreateCourseManagementFilterPastoralCommand>;
  /**
   * 課程過濾樣板課程
   * @type {Array<CreateCourseManagementFilterCourseCommand>}
   * @memberof CreateCourseCommand
   */
  courseManagementFilterCourses: Array<CreateCourseManagementFilterCourseCommand>;
  /**
   * id
   * @type {number}
   * @memberof CreateCourseCommand
   */
  id: number;
  /**
   * 課程類別CourseManagement.Id
   * @type {number}
   * @memberof CreateCourseCommand
   */
  courseManagementId: number;
  /**
   * Organization.Id
   * @type {number}
   * @memberof CreateCourseCommand
   */
  organizationId: number;
  /**
   * Questionnaire.Id 問卷Id
   * @type {number}
   * @memberof CreateCourseCommand
   */
  questionnaireId: number;
  /**
   * 年度 屆別
   * @type {string}
   * @memberof CreateCourseCommand
   */
  year: string;
  /**
   * 名稱
   * @type {string}
   * @memberof CreateCourseCommand
   */
  name: string;
  /**
   * 梯次
   * @type {string}
   * @memberof CreateCourseCommand
   */
  classNum: string;
  /**
   * 季
   * @type {string}
   * @memberof CreateCourseCommand
   */
  season: string;
  /**
   * 開課日
   * @type {string}
   * @memberof CreateCourseCommand
   */
  openDateS: string;
  /**
   * 開課日
   * @type {string}
   * @memberof CreateCourseCommand
   */
  openDateE: string;
  /**
   * 開課日
   * @type {string}
   * @memberof CreateCourseCommand
   */
  openDate: string;
  /**
   * 報名日期(線上)
   * @type {string}
   * @memberof CreateCourseCommand
   */
  signUpDateS: string;
  /**
   * 報名截止日(線上)
   * @type {string}
   * @memberof CreateCourseCommand
   */
  signUpDateE: string;
  /**
   * 報名日期(臨櫃)
   * @type {string}
   * @memberof CreateCourseCommand
   */
  counterSignUpDateS: string;
  /**
   * 報名截止日(臨櫃)
   * @type {string}
   * @memberof CreateCourseCommand
   */
  counterSignUpDateE: string;
  /**
   * 優惠報名截止日
   * @type {string}
   * @memberof CreateCourseCommand
   */
  discountSignUpDate: string;
  /**
   * 報名方式對應type=CourseSignUpType顯示 namevalue存此欄位0：一般臨櫃1：網路報名
   * @type {string}
   * @memberof CreateCourseCommand
   */
  courseSignUpType: string;
  /**
   * 最少志願數
   * @type {number}
   * @memberof CreateCourseCommand
   */
  wishCount: number;
  /**
   * 是否需要推薦對應type=IsYN顯示 namevalue存此欄位0：N1：Y
   * @type {string}
   * @memberof CreateCourseCommand
   */
  needRecommend: string;
  /**
   * 新朋友可報名對應type=IsYN顯示 namevalue存此欄位0：N1：Y
   * @type {string}
   * @memberof CreateCourseCommand
   */
  acceptNewMember: string;
  /**
   * 課程說明/資格
   * @type {string}
   * @memberof CreateCourseCommand
   */
  description: string;
  /**
   * 上課堂數
   * @type {number}
   * @memberof CreateCourseCommand
   */
  classCount: number;
  /**
   * 報名名額
   * @type {number}
   * @memberof CreateCourseCommand
   */
  quota: number;
  /**
   * 結業狀態對應type=GraduationType顯示 namevalue存此欄位0：未結業1：已結業 2:-
   * @type {string}
   * @memberof CreateCourseCommand
   */
  graduationType: string;
  /**
   * 前台特殊需求
   * @type {string}
   * @memberof CreateCourseCommand
   */
  specialRequirement: string;
  /**
   * 對象資格說明
   * @type {string}
   * @memberof CreateCourseCommand
   */
  basicQualification: string;
  /**
   * 結業資格說明
   * @type {string}
   * @memberof CreateCourseCommand
   */
  graduationQualification: string;
  /**
   * 課程內容
   * @type {string}
   * @memberof CreateCourseCommand
   */
  courseContext: string;
  /**
   * 注意事項
   * @type {string}
   * @memberof CreateCourseCommand
   */
  courseNoticeDesc: string;
  /**
   * 退費原則
   * @type {string}
   * @memberof CreateCourseCommand
   */
  courseRefundDesc: string;
  /**
   * 作業繳交日期
   * @type {string}
   * @memberof CreateCourseCommand
   */
  homeworkDate: string;
  /**
   * 狀態
   * @type {string}
   * @memberof CreateCourseCommand
   */
  statusCd: string;
  /**
   * 課程過濾主檔Id CourseManagementFilter.Id
   * @type {number}
   * @memberof CreateCourseCommand
   */
  courseManagementFilterId: number;
  /**
   * 課程圖片上傳
   * @type {Array<CourseAppendixBase | CourseAppendixView | UpdateCourseAppendixCommand | CreateCourseAppendixCommand>}
   * @memberof CreateCourseCommand
   */
  courseAppendices: Array<
    CourseAppendixBase | CourseAppendixView | UpdateCourseAppendixCommand | CreateCourseAppendixCommand
  >;
}
/**
 * 建立 CourseManagementAppendix
 * @export
 * @interface CreateCourseManagementAppendixCommand
 */
export interface CreateCourseManagementAppendixCommand {
  /**
   * id
   * @type {number}
   * @memberof CreateCourseManagementAppendixCommand
   */
  id: number;
  /**
   * 課程類別CourseManagement.Id
   * @type {number}
   * @memberof CreateCourseManagementAppendixCommand
   */
  courseManagementId: number;
  /**
   * 附件類別對應type=AppendixType顯示 namevalue存此欄位0：文件1：影音
   * @type {string}
   * @memberof CreateCourseManagementAppendixCommand
   */
  appendixType: string;
  /**
   * 存放網路路徑
   * @type {string}
   * @memberof CreateCourseManagementAppendixCommand
   */
  path: string;
}
/**
 * 建立 CourseManagement
 * @export
 * @interface CreateCourseManagementCommand
 */
export interface CreateCourseManagementCommand {
  /**
   * 課程過濾主檔
   * @type {Array<CreateCourseManagementFilterCommand>}
   * @memberof CreateCourseManagementCommand
   */
  courseManagementFilters: Array<CreateCourseManagementFilterCommand>;
  /**
   * 課程過濾主檔_課程必修
   * @type {Array<CreateCourseManagementFilterCourseCommand>}
   * @memberof CreateCourseManagementCommand
   */
  courseManagementFilterCourses: Array<CreateCourseManagementFilterCourseCommand>;
  /**
   * 課程樣版過濾牧場主檔
   * @type {Array<CreateCourseManagementFilterPastoralCommand>}
   * @memberof CreateCourseManagementCommand
   */
  courseManagementFilterPastorals: Array<CreateCourseManagementFilterPastoralCommand>;
  /**
   * 課程樣版過濾職份主檔
   * @type {Array<CreateCourseManagementFilterRespCommand>}
   * @memberof CreateCourseManagementCommand
   */
  courseManagementFilterResps: Array<CreateCourseManagementFilterRespCommand>;
  /**
   * 課程樣版過濾會員
   * @type {Array<CreateCourseManagementFilterUserCommand>}
   * @memberof CreateCourseManagementCommand
   */
  courseManagementFilterUsers: Array<CreateCourseManagementFilterUserCommand>;
  /**
   * id
   * @type {number}
   * @memberof CreateCourseManagementCommand
   */
  id: number;
  /**
   * 課程類別CourseManagementType.Id
   * @type {number}
   * @memberof CreateCourseManagementCommand
   */
  courseManagementTypeId: number;
  /**
   * 堂點Id Organization.Id
   * @type {number}
   * @memberof CreateCourseManagementCommand
   */
  organizationId: number;
  /**
   * 課程代碼
   * @type {string}
   * @memberof CreateCourseManagementCommand
   */
  courseManagementNo: string;
  /**
   * 課程標題
   * @type {string}
   * @memberof CreateCourseManagementCommand
   */
  title: string;
  /**
   * 課程內容描述
   * @type {string}
   * @memberof CreateCourseManagementCommand
   */
  description: string;
  /**
   * 課程狀態對應type=CourseManagementStatus顯示 namevalue存此欄位0：關閉1：開啟
   * @type {string}
   * @memberof CreateCourseManagementCommand
   */
  courseManagementStatus: string;
  /**
   * 對象資格說明
   * @type {string}
   * @memberof CreateCourseManagementCommand
   */
  basicQualification: string;
  /**
   * 結業資格說明
   * @type {string}
   * @memberof CreateCourseManagementCommand
   */
  graduationQualification: string;
  /**
   * 課程類別 0實體 1線上 2網路學校
   * @type {string}
   * @memberof CreateCourseManagementCommand
   */
  courseType: string;
  /**
   * 狀態
   * @type {string}
   * @memberof CreateCourseManagementCommand
   */
  statusCd: string;
}
/**
 * 建立 CourseManagementFilter
 * @export
 * @interface CreateCourseManagementFilterCommand
 */
export interface CreateCourseManagementFilterCommand {
  /**
   * 課程過濾主檔_課程必修
   * @type {Array<CreateCourseManagementFilterCourseCommand>}
   * @memberof CreateCourseManagementFilterCommand
   */
  courseManagementFilterCourses: Array<CreateCourseManagementFilterCourseCommand>;
  /**
   * 課程樣版過濾牧場主檔
   * @type {Array<CreateCourseManagementFilterPastoralCommand>}
   * @memberof CreateCourseManagementFilterCommand
   */
  courseManagementFilterPastorals: Array<CreateCourseManagementFilterPastoralCommand>;
  /**
   * 課程樣版過濾職份主檔
   * @type {Array<CreateCourseManagementFilterRespCommand>}
   * @memberof CreateCourseManagementFilterCommand
   */
  courseManagementFilterResps: Array<CreateCourseManagementFilterRespCommand>;
  /**
   * 課程樣版過濾會員
   * @type {Array<CreateCourseManagementFilterUserCommand>}
   * @memberof CreateCourseManagementFilterCommand
   */
  courseManagementFilterUsers: Array<CreateCourseManagementFilterUserCommand>;
  /**
   * id
   * @type {number}
   * @memberof CreateCourseManagementFilterCommand
   */
  id: number;
  /**
   * 課程樣板CourseManagement.Id
   * @type {number}
   * @memberof CreateCourseManagementFilterCommand
   */
  courseManagementId: number;
  /**
   * 堂點Id Organization.Id
   * @type {number}
   * @memberof CreateCourseManagementFilterCommand
   */
  organizationId: number;
  /**
   * 課程性別限制
   * @type {string}
   * @memberof CreateCourseManagementFilterCommand
   */
  courseSex: string;
  /**
   * 年齡門檻上
   * @type {number}
   * @memberof CreateCourseManagementFilterCommand
   */
  ageUp: number;
  /**
   * 年齡門檻下
   * @type {number}
   * @memberof CreateCourseManagementFilterCommand
   */
  ageDown: number;
}
/**
 * 建立 CourseManagementFilterCourse
 * @export
 * @interface CreateCourseManagementFilterCourseCommand
 */
export interface CreateCourseManagementFilterCourseCommand {
  /**
   * id
   * @type {number}
   * @memberof CreateCourseManagementFilterCourseCommand
   */
  id: number;
  /**
   * 課程樣板過濾CourseManagementFilter.Id
   * @type {number}
   * @memberof CreateCourseManagementFilterCourseCommand
   */
  courseManagementFilterId: number;
  /**
   * CourseManagement.Id
   * @type {number}
   * @memberof CreateCourseManagementFilterCourseCommand
   */
  courseManagementId: number;
}
/**
 * 建立 CourseManagementFilterPastoral
 * @export
 * @interface CreateCourseManagementFilterPastoralCommand
 */
export interface CreateCourseManagementFilterPastoralCommand {
  /**
   * id
   * @type {number}
   * @memberof CreateCourseManagementFilterPastoralCommand
   */
  id: number;
  /**
   * 課程樣板過濾CourseManagementFilter.Id
   * @type {number}
   * @memberof CreateCourseManagementFilterPastoralCommand
   */
  courseManagementFilterId: number;
  /**
   * Pastoral.Id
   * @type {number}
   * @memberof CreateCourseManagementFilterPastoralCommand
   */
  pastoralId: number;
}
/**
 * 建立 CourseManagementFilterResp
 * @export
 * @interface CreateCourseManagementFilterRespCommand
 */
export interface CreateCourseManagementFilterRespCommand {
  /**
   * id
   * @type {number}
   * @memberof CreateCourseManagementFilterRespCommand
   */
  id: number;
  /**
   * 課程樣板過濾CourseManagementFilter.Id
   * @type {number}
   * @memberof CreateCourseManagementFilterRespCommand
   */
  courseManagementFilterId: number;
  /**
   * MinistryResp.Id
   * @type {number}
   * @memberof CreateCourseManagementFilterRespCommand
   */
  ministryRespId: number;
}
/**
 * 建立 CourseManagementFilterUser
 * @export
 * @interface CreateCourseManagementFilterUserCommand
 */
export interface CreateCourseManagementFilterUserCommand {
  /**
   * id
   * @type {number}
   * @memberof CreateCourseManagementFilterUserCommand
   */
  id: number;
  /**
   * 課程樣板過濾CourseManagementFilter.Id
   * @type {number}
   * @memberof CreateCourseManagementFilterUserCommand
   */
  courseManagementFilterId: number;
  /**
   * User.Id
   * @type {number}
   * @memberof CreateCourseManagementFilterUserCommand
   */
  userId: number;
}
/**
 * 建立 CourseManagementType
 * @export
 * @interface CreateCourseManagementTypeCommand
 */
export interface CreateCourseManagementTypeCommand {
  /**
   * id
   * @type {number}
   * @memberof CreateCourseManagementTypeCommand
   */
  id: number;
  /**
   * 課程類別編號
   * @type {string}
   * @memberof CreateCourseManagementTypeCommand
   */
  courseManagementTypeNo: string;
  /**
   * 課程類別名稱
   * @type {string}
   * @memberof CreateCourseManagementTypeCommand
   */
  name: string;
  /**
   * 備註
   * @type {string}
   * @memberof CreateCourseManagementTypeCommand
   */
  remark: string;
  /**
   * 狀態
   * @type {string}
   * @memberof CreateCourseManagementTypeCommand
   */
  statusCd: string;
}
/**
 * 建立 CourseOrganization
 * @export
 * @interface CreateCourseOrganizationCommand
 */
export interface CreateCourseOrganizationCommand {
  /**
   * id
   * @type {number}
   * @memberof CreateCourseOrganizationCommand
   */
  id: number;
  /**
   * 課程類別Course.Id
   * @type {number}
   * @memberof CreateCourseOrganizationCommand
   */
  courseId: number;
  /**
   * Organization.Id
   * @type {number}
   * @memberof CreateCourseOrganizationCommand
   */
  organizationId: number;
}
/**
 * 建立 CoursePrice
 * @export
 * @interface CreateCoursePriceCommand
 */
export interface CreateCoursePriceCommand {
  /**
   * id
   * @type {number}
   * @memberof CreateCoursePriceCommand
   */
  id: number;
  /**
   * 課程類別Course.Id
   * @type {number}
   * @memberof CreateCoursePriceCommand
   */
  courseId: number;
  /**
   * 價格名稱
   * @type {string}
   * @memberof CreateCoursePriceCommand
   */
  priceName: string;
  /**
   * 價格
   * @type {number}
   * @memberof CreateCoursePriceCommand
   */
  price: number;
  /**
   * 是否公開對應type=IsYN顯示 namevalue存此欄位0：N1：Y
   * @type {string}
   * @memberof CreateCoursePriceCommand
   */
  isPublic: string;
  /**
   * 是否超過優惠日期後關閉對應type=IsYN顯示 namevalue存此欄0N1Yif1ThendataTimeCourse.DiscountSignUpDate關閉此選項
   * @type {string}
   * @memberof CreateCoursePriceCommand
   */
  isDueDate: string;
}
/**
 * 建立 CourseTimeSchedule
 * @export
 * @interface CreateCourseTimeScheduleCommand
 */
export interface CreateCourseTimeScheduleCommand {
  /**
   * 課程時段講師檔
   * @type {Array<CreateCourseTimeScheduleTeacherCommand>}
   * @memberof CreateCourseTimeScheduleCommand
   */
  courseTimeScheduleTeachers: Array<CreateCourseTimeScheduleTeacherCommand>;
  /**
   * id
   * @type {number}
   * @memberof CreateCourseTimeScheduleCommand
   */
  id: number;
  /**
   * 課程類別Course.Id
   * @type {number}
   * @memberof CreateCourseTimeScheduleCommand
   */
  courseId: number;
  /**
   * 代號/梯次
   * @type {string}
   * @memberof CreateCourseTimeScheduleCommand
   */
  scheduleNo: string;
  /**
   * 附件類別對應type=ClassDay顯示 namevalue存此欄位1：一2：二….
   * @type {string}
   * @memberof CreateCourseTimeScheduleCommand
   */
  classDay: string;
  /**
   * 開始時間
   * @type {string}
   * @memberof CreateCourseTimeScheduleCommand
   */
  classTimeS: string;
  /**
   * 結束時間
   * @type {string}
   * @memberof CreateCourseTimeScheduleCommand
   */
  classTimeE: string;
  /**
   * 地點
   * @type {string}
   * @memberof CreateCourseTimeScheduleCommand
   */
  place: string;
}
/**
 * 建立 CourseTimeScheduleTeacher
 * @export
 * @interface CreateCourseTimeScheduleTeacherCommand
 */
export interface CreateCourseTimeScheduleTeacherCommand {
  /**
   * id
   * @type {number}
   * @memberof CreateCourseTimeScheduleTeacherCommand
   */
  id: number;
  /**
   * 課程時段CourseTimeSchedule.Id
   * @type {number}
   * @memberof CreateCourseTimeScheduleTeacherCommand
   */
  courseTimeScheduleId: number;
  /**
   * 代號/梯次
   * @type {string}
   * @memberof CreateCourseTimeScheduleTeacherCommand
   */
  scheduleNo: string;
  /**
   * Teacher.Id
   * @type {number}
   * @memberof CreateCourseTimeScheduleTeacherCommand
   */
  teacherId: number;
  /**
   * 實際上課日
   * @type {string}
   * @memberof CreateCourseTimeScheduleTeacherCommand
   */
  realClassDate: string;
}
/**
 * 建立 CourseTimeScheduleUser
 * @export
 * @interface CreateCourseTimeScheduleUserCommand
 */
export interface CreateCourseTimeScheduleUserCommand {
  /**
   * id
   * @type {number}
   * @memberof CreateCourseTimeScheduleUserCommand
   */
  id: number;
  /**
   * 課程時段CourseTimeSchedule.Id
   * @type {number}
   * @memberof CreateCourseTimeScheduleUserCommand
   */
  courseTimeScheduleId: number;
  /**
   * 代號/梯次
   * @type {string}
   * @memberof CreateCourseTimeScheduleUserCommand
   */
  scheduleNo: string;
  /**
   * User.Id
   * @type {number}
   * @memberof CreateCourseTimeScheduleUserCommand
   */
  userId: number;
  /**
   * 出席狀態
   * @type {string}
   * @memberof CreateCourseTimeScheduleUserCommand
   */
  attendanceType: string;
}
/**
 * 建立 Dept
 * @export
 * @interface CreateDeptCommand
 */
export interface CreateDeptCommand {
  /**
   * Id
   * @type {number}
   * @memberof CreateDeptCommand
   */
  id: number;
  /**
   * 舊的Id
   * @type {number}
   * @memberof CreateDeptCommand
   */
  upperDeptId: number;
  /**
   * 部門名稱
   * @type {string}
   * @memberof CreateDeptCommand
   */
  name: string;
  /**
   * 部門主管職稱
   * @type {string}
   * @memberof CreateDeptCommand
   */
  title: string;
  /**
   *
   * @type {string}
   * @memberof CreateDeptCommand
   */
  comment: string;
  /**
   *
   * @type {string}
   * @memberof CreateDeptCommand
   */
  dateCreate?: string | null;
  /**
   *
   * @type {string}
   * @memberof CreateDeptCommand
   */
  userCreate?: string | null;
  /**
   *
   * @type {string}
   * @memberof CreateDeptCommand
   */
  dateUpdate?: string | null;
  /**
   *
   * @type {string}
   * @memberof CreateDeptCommand
   */
  userUpdate?: string | null;
}
/**
 * 建立 MeetingPoint
 * @export
 * @interface CreateMeetingPointCommand
 */
export interface CreateMeetingPointCommand {
  /**
   * id
   * @type {number}
   * @memberof CreateMeetingPointCommand
   */
  id: number;
  /**
   * 聚會點名稱
   * @type {string}
   * @memberof CreateMeetingPointCommand
   */
  name: string;
  /**
   * id
   * @type {string}
   * @memberof CreateMeetingPointCommand
   */
  statusCd: string;
  /**
   *
   * @type {string}
   * @memberof CreateMeetingPointCommand
   */
  comment: string;
  /**
   *
   * @type {string}
   * @memberof CreateMeetingPointCommand
   */
  dateCreate?: string | null;
  /**
   *
   * @type {string}
   * @memberof CreateMeetingPointCommand
   */
  userCreate?: string | null;
  /**
   *
   * @type {string}
   * @memberof CreateMeetingPointCommand
   */
  dateUpdate?: string | null;
  /**
   *
   * @type {string}
   * @memberof CreateMeetingPointCommand
   */
  userUpdate?: string | null;
  /**
   *
   * @type {number}
   * @memberof CreateMeetingPointCommand
   */
  isActivated: number;
}
/**
 * 建立 MessageInformation
 * @export
 * @interface CreateMessageInformationCommand
 */
export interface CreateMessageInformationCommand {
  /**
   * id
   * @type {number}
   * @memberof CreateMessageInformationCommand
   */
  id: number;
  /**
   * Organization.Id 旌旗id
   * @type {number}
   * @memberof CreateMessageInformationCommand
   */
  organizationId: number;
  /**
   * MeetingPoint.Id 聚會點id
   * @type {number}
   * @memberof CreateMessageInformationCommand
   */
  meetingPointId: number;
  /**
   * Pastoral.Id 牧養組織id
   * @type {number}
   * @memberof CreateMessageInformationCommand
   */
  pastoralId: number;
  /**
   * MinistryResp.Id 牧養身分
   * @type {number}
   * @memberof CreateMessageInformationCommand
   */
  ministryRespId: number;
  /**
   * Ministry.Id 事工團
   * @type {number}
   * @memberof CreateMessageInformationCommand
   */
  ministryId: number;
  /**
   * CourseId 課程名稱 課程代碼
   * @type {number}
   * @memberof CreateMessageInformationCommand
   */
  courseId: number;
  /**
   * 性別 對應SystemConfigtype=GenderType顯示 namevalue存此欄位0：女姓1：男性
   * @type {string}
   * @memberof CreateMessageInformationCommand
   */
  genderType: string;
  /**
   * 性別 對應SystemConfigtype=BirthdayYearRange顯示 namevalue存此欄位0：1920   1：1930  2:1940  3:1950  4:1960  5:1970   6:1980  7:1990  8:2000   9:2010   10:2020
   * @type {string}
   * @memberof CreateMessageInformationCommand
   */
  birthdayYearRange: string;
  /**
   * 職業type=EduType顯示 namevalue存此欄位0：老師1：家管…
   * @type {string}
   * @memberof CreateMessageInformationCommand
   */
  professionType: string;
  /**
   * 推播訊息描述
   * @type {string}
   * @memberof CreateMessageInformationCommand
   */
  title: string;
  /**
   * 推播訊息內容
   * @type {string}
   * @memberof CreateMessageInformationCommand
   */
  descriptions: string;
  /**
   * 職業type=MessageSendType namevalue存此欄位0：尚未推播    1：已推播
   * @type {string}
   * @memberof CreateMessageInformationCommand
   */
  messageSendType: string;
  /**
   * 發送數量Line
   * @type {number}
   * @memberof CreateMessageInformationCommand
   */
  sendLineCounter: number;
  /**
   * 發送數量Email
   * @type {number}
   * @memberof CreateMessageInformationCommand
   */
  sendEmailCounter: number;
  /**
   * 發送數量SMS
   * @type {number}
   * @memberof CreateMessageInformationCommand
   */
  sendSMSCounter: number;
  /**
   * 備註
   * @type {string}
   * @memberof CreateMessageInformationCommand
   */
  remark: string;
  /**
   * 狀態
   * @type {string}
   * @memberof CreateMessageInformationCommand
   */
  statusCd: string;
}
/**
 * 建立 MessageInformationUser
 * @export
 * @interface CreateMessageInformationUserCommand
 */
export interface CreateMessageInformationUserCommand {
  /**
   * id
   * @type {number}
   * @memberof CreateMessageInformationUserCommand
   */
  id: number;
  /**
   * MessageInformation.Id MessageInformationid
   * @type {number}
   * @memberof CreateMessageInformationUserCommand
   */
  messageInformationId: number;
  /**
   * User.Id Userid
   * @type {number}
   * @memberof CreateMessageInformationUserCommand
   */
  userId: number;
  /**
   * User.LineId
   * @type {string}
   * @memberof CreateMessageInformationUserCommand
   */
  lineId: string;
  /**
   * User.Email1
   * @type {string}
   * @memberof CreateMessageInformationUserCommand
   */
  email: string;
  /**
   * User.CellPhone
   * @type {string}
   * @memberof CreateMessageInformationUserCommand
   */
  sms: string;
  /**
   * 狀態
   * @type {string}
   * @memberof CreateMessageInformationUserCommand
   */
  statusCd: string;
}
/**
 * 建立 Ministry
 * @export
 * @interface CreateMinistryCommand
 */
export interface CreateMinistryCommand {
  /**
   * id
   * @type {number}
   * @memberof CreateMinistryCommand
   */
  id: number;
  /**
   * Organization.Id
   * @type {number}
   * @memberof CreateMinistryCommand
   */
  organizationId: number;
  /**
   * 組織名稱
   * @type {string}
   * @memberof CreateMinistryCommand
   */
  organizationName: string;
  /**
   * 事工團分類id
   * @type {number}
   * @memberof CreateMinistryCommand
   */
  ministryDefId: number;
  /**
   * 事工團編號
   * @type {string}
   * @memberof CreateMinistryCommand
   */
  ministryNo: string;
  /**
   * 事工團名稱
   * @type {string}
   * @memberof CreateMinistryCommand
   */
  name: string;
  /**
   * 是否兒童事工團
   * @type {string}
   * @memberof CreateMinistryCommand
   */
  childMinistry: string;
  /**
   * 事工團狀態
   * @type {string}
   * @memberof CreateMinistryCommand
   */
  ministryStatus: string;
  /**
   * 性質
   * @type {string}
   * @memberof CreateMinistryCommand
   */
  nature: string;
  /**
   * id
   * @type {string}
   * @memberof CreateMinistryCommand
   */
  statusCd: string;
  /**
   *
   * @type {string}
   * @memberof CreateMinistryCommand
   */
  comment: string;
  /**
   *
   * @type {string}
   * @memberof CreateMinistryCommand
   */
  dateCreate?: string | null;
  /**
   *
   * @type {string}
   * @memberof CreateMinistryCommand
   */
  userCreate?: string | null;
  /**
   *
   * @type {string}
   * @memberof CreateMinistryCommand
   */
  dateUpdate?: string | null;
  /**
   *
   * @type {string}
   * @memberof CreateMinistryCommand
   */
  userUpdate?: string | null;
}
/**
 * 建立 MinistryDef
 * @export
 * @interface CreateMinistryDefCommand
 */
export interface CreateMinistryDefCommand {
  /**
   * id
   * @type {number}
   * @memberof CreateMinistryDefCommand
   */
  id: number;
  /**
   * 事工團分類代碼
   * @type {string}
   * @memberof CreateMinistryDefCommand
   */
  ministryDefNo: string;
  /**
   * 事工團分類名稱
   * @type {string}
   * @memberof CreateMinistryDefCommand
   */
  name: string;
  /**
   * 事工團類別狀態
   * @type {string}
   * @memberof CreateMinistryDefCommand
   */
  ministryDefStatus: string;
  /**
   * 事工團類別  MinistryDefType 0一般事工團   1小組
   * @type {string}
   * @memberof CreateMinistryDefCommand
   */
  ministryDefType: string;
  /**
   * id
   * @type {string}
   * @memberof CreateMinistryDefCommand
   */
  statusCd: string;
  /**
   *
   * @type {string}
   * @memberof CreateMinistryDefCommand
   */
  comment: string;
  /**
   *
   * @type {string}
   * @memberof CreateMinistryDefCommand
   */
  dateCreate?: string | null;
  /**
   *
   * @type {string}
   * @memberof CreateMinistryDefCommand
   */
  userCreate?: string | null;
  /**
   *
   * @type {string}
   * @memberof CreateMinistryDefCommand
   */
  dateUpdate?: string | null;
  /**
   *
   * @type {string}
   * @memberof CreateMinistryDefCommand
   */
  userUpdate?: string | null;
  /**
   *
   * @type {number}
   * @memberof CreateMinistryDefCommand
   */
  isActivated: number;
}
/**
 * 建立 MinistryMeeting
 * @export
 * @interface CreateMinistryMeetingCommand
 */
export interface CreateMinistryMeetingCommand {
  /**
   * id
   * @type {number}
   * @memberof CreateMinistryMeetingCommand
   */
  id: number;
  /**
   * Ministry.Id
   * @type {number}
   * @memberof CreateMinistryMeetingCommand
   */
  ministryId: number;
  /**
   * 小組聚會每周哪一天
   * @type {string}
   * @memberof CreateMinistryMeetingCommand
   */
  meetingDayOfWeek: string;
  /**
   * 聚會時間
   * @type {string}
   * @memberof CreateMinistryMeetingCommand
   */
  meetingTime: string;
  /**
   * 聚會地點
   * @type {string}
   * @memberof CreateMinistryMeetingCommand
   */
  meetingAddress: string;
  /**
   * 聚會日期
   * @type {string}
   * @memberof CreateMinistryMeetingCommand
   */
  meetingDay: string;
  /**
   * 是否為外展對應SystemConfigtype=IsNY顯示 namevalue存此欄位0：N1：Y
   * @type {string}
   * @memberof CreateMinistryMeetingCommand
   */
  isExp: string;
  /**
   * 是否可查詢，否表示隱藏小組
   * @type {string}
   * @memberof CreateMinistryMeetingCommand
   */
  isSearchable: string;
  /**
   * 聚會狀態對應SystemConfigtype=MeetType顯示 namevalue存此欄位0：尚未開始1：正常舉行2：停辦
   * @type {string}
   * @memberof CreateMinistryMeetingCommand
   */
  meetType: string;
}
/**
 * 建立 MinistryMeetingUser
 * @export
 * @interface CreateMinistryMeetingUserCommand
 */
export interface CreateMinistryMeetingUserCommand {
  /**
   * id
   * @type {number}
   * @memberof CreateMinistryMeetingUserCommand
   */
  id: number;
  /**
   * MinistryMeeting.Id
   * @type {number}
   * @memberof CreateMinistryMeetingUserCommand
   */
  ministryMeetingId: number;
  /**
   * User.Id
   * @type {number}
   * @memberof CreateMinistryMeetingUserCommand
   */
  userId: number;
  /**
   * 是否聚會出席狀態        對應SystemConfig        type = MeetAttendanceType顯示 namevalue存此欄位0：尚未開課1：已出席2:未出席
   * @type {number}
   * @memberof CreateMinistryMeetingUserCommand
   */
  meetAttendanceType: number;
  /**
   * MinistryDef.Name
   * @type {string}
   * @memberof CreateMinistryMeetingUserCommand
   */
  ministryDefName: string;
  /**
   * Ministry.Name
   * @type {string}
   * @memberof CreateMinistryMeetingUserCommand
   */
  ministryName: string;
  /**
   * MinistryResp.Name
   * @type {string}
   * @memberof CreateMinistryMeetingUserCommand
   */
  ministryRespName: string;
}
/**
 * 建立 MinistryResp
 * @export
 * @interface CreateMinistryRespCommand
 */
export interface CreateMinistryRespCommand {
  /**
   * 事工團職分明細
   * @type {Array<CreateMinistryRespUserCommand>}
   * @memberof CreateMinistryRespCommand
   */
  ministryRespUsers: Array<CreateMinistryRespUserCommand>;
  /**
   * id
   * @type {number}
   * @memberof CreateMinistryRespCommand
   */
  id: number;
  /**
   * 事工團.Id
   * @type {number}
   * @memberof CreateMinistryRespCommand
   */
  ministryId: number;
  /**
   * 順序
   * @type {number}
   * @memberof CreateMinistryRespCommand
   */
  seq: number;
  /**
   * 事工團職份名稱
   * @type {string}
   * @memberof CreateMinistryRespCommand
   */
  name: string;
  /**
   * 是否管理職是否管理職        對應type=IsYN        顯示 name        value存此欄位 0：N 1：Y
   * @type {string}
   * @memberof CreateMinistryRespCommand
   */
  manageType: string;
  /**
   * id
   * @type {string}
   * @memberof CreateMinistryRespCommand
   */
  statusCd: string;
  /**
   *
   * @type {string}
   * @memberof CreateMinistryRespCommand
   */
  comment: string;
  /**
   *
   * @type {number}
   * @memberof CreateMinistryRespCommand
   */
  isActivated: number;
}
/**
 * 建立 MinistryRespUser
 * @export
 * @interface CreateMinistryRespUserCommand
 */
export interface CreateMinistryRespUserCommand {
  /**
   * id
   * @type {number}
   * @memberof CreateMinistryRespUserCommand
   */
  id: number;
  /**
   * 事工團職分明細主檔id
   * @type {number}
   * @memberof CreateMinistryRespUserCommand
   */
  ministryRespId: number;
  /**
   * User.Id
   * @type {number}
   * @memberof CreateMinistryRespUserCommand
   */
  userId: number;
  /**
   * 異動記錄
   * @type {number}
   * @memberof CreateMinistryRespUserCommand
   */
  ministryRespUserStatus: number;
  /**
   *
   * @type {string}
   * @memberof CreateMinistryRespUserCommand
   */
  statusCd: string;
  /**
   *
   * @type {string}
   * @memberof CreateMinistryRespUserCommand
   */
  comment: string;
  /**
   *
   * @type {number}
   * @memberof CreateMinistryRespUserCommand
   */
  isActivated: number;
}
/**
 * 建立 MinistrySchedule
 * @export
 * @interface CreateMinistryScheduleCommand
 */
export interface CreateMinistryScheduleCommand {
  /**
   *
   * @type {Array<CreateMinistryScheduleDetailCommand>}
   * @memberof CreateMinistryScheduleCommand
   */
  ministryScheduleDetails: Array<CreateMinistryScheduleDetailCommand>;
  /**
   * Id
   * @type {number}
   * @memberof CreateMinistryScheduleCommand
   */
  id: number;
  /**
   * Ministry.Id
   * @type {number}
   * @memberof CreateMinistryScheduleCommand
   */
  ministryId: number;
  /**
   * 排程名稱
   * @type {string}
   * @memberof CreateMinistryScheduleCommand
   */
  name: string;
  /**
   * 週期類別        對應type=CycleType        顯示 name         value存此欄位 0：固定週期 1：非固定週期(偶發類型)
   * @type {string}
   * @memberof CreateMinistryScheduleCommand
   */
  cycleType: string;
  /**
   * 重複間隔
   * @type {string}
   * @memberof CreateMinistryScheduleCommand
   */
  repeatTime: string;
  /**
   * 重複間隔單位        對應type=RepeatTimeUnit        顯示 name        value存此欄位 0：日 1：週 2：月 3：年
   * @type {string}
   * @memberof CreateMinistryScheduleCommand
   */
  repeatTimeUnit: string;
  /**
   * 結束時間類別        對應type=EndDateType        顯示 name        value存此欄位 0：持續不停 1：於 2：重複
   * @type {string}
   * @memberof CreateMinistryScheduleCommand
   */
  endDateType: string;
  /**
   * 結束時間日期
   * @type {string}
   * @memberof CreateMinistryScheduleCommand
   */
  endDate: string;
  /**
   * 結束時間日期
   * @type {string}
   * @memberof CreateMinistryScheduleCommand
   */
  repeaTimes: string;
}
/**
 * 建立 MinistryScheduleDetail
 * @export
 * @interface CreateMinistryScheduleDetailCommand
 */
export interface CreateMinistryScheduleDetailCommand {
  /**
   * 排程明細id
   * @type {number}
   * @memberof CreateMinistryScheduleDetailCommand
   */
  id: number;
  /**
   * MinistrySchedule.Id
   * @type {number}
   * @memberof CreateMinistryScheduleDetailCommand
   */
  ministryScheduleId: number;
  /**
   * 堂表名稱 例如：第一堂
   * @type {string}
   * @memberof CreateMinistryScheduleDetailCommand
   */
  name: string;
  /**
   * 描述  例如 09:00~10:00
   * @type {string}
   * @memberof CreateMinistryScheduleDetailCommand
   */
  description: string;
}
/**
 * 建立 ModMember
 * @export
 * @interface CreateModMemberCommand
 */
export interface CreateModMemberCommand {
  /**
   *
   * @type {number}
   * @memberof CreateModMemberCommand
   */
  id: number;
  /**
   *
   * @type {string}
   * @memberof CreateModMemberCommand
   */
  portalId: string;
  /**
   *
   * @type {string}
   * @memberof CreateModMemberCommand
   */
  name: string;
  /**
   *
   * @type {string}
   * @memberof CreateModMemberCommand
   */
  engName: string;
  /**
   *
   * @type {string}
   * @memberof CreateModMemberCommand
   */
  userId: string;
  /**
   *
   * @type {number}
   * @memberof CreateModMemberCommand
   */
  categoryId: number;
  /**
   *
   * @type {string}
   * @memberof CreateModMemberCommand
   */
  identifier: string;
  /**
   *
   * @type {string}
   * @memberof CreateModMemberCommand
   */
  idnumber: string;
  /**
   *
   * @type {string}
   * @memberof CreateModMemberCommand
   */
  email: string;
  /**
   *
   * @type {string}
   * @memberof CreateModMemberCommand
   */
  contactPhone: string;
  /**
   *
   * @type {string}
   * @memberof CreateModMemberCommand
   */
  contactCellPhone: string;
  /**
   *
   * @type {string}
   * @memberof CreateModMemberCommand
   */
  contactCellPhone2: string;
  /**
   *
   * @type {string}
   * @memberof CreateModMemberCommand
   */
  contactCity: string;
  /**
   *
   * @type {string}
   * @memberof CreateModMemberCommand
   */
  contactZipCode: string;
  /**
   *
   * @type {string}
   * @memberof CreateModMemberCommand
   */
  contactAddress: string;
  /**
   *
   * @type {string}
   * @memberof CreateModMemberCommand
   */
  homeAddress: string;
  /**
   *
   * @type {string}
   * @memberof CreateModMemberCommand
   */
  bizPhone: string;
  /**
   *
   * @type {string}
   * @memberof CreateModMemberCommand
   */
  fax: string;
  /**
   *
   * @type {string}
   * @memberof CreateModMemberCommand
   */
  gender: string;
  /**
   *
   * @type {string}
   * @memberof CreateModMemberCommand
   */
  birthday: string;
  /**
   *
   * @type {string}
   * @memberof CreateModMemberCommand
   */
  introducer: string;
  /**
   *
   * @type {string}
   * @memberof CreateModMemberCommand
   */
  introducerGroup: string;
  /**
   *
   * @type {string}
   * @memberof CreateModMemberCommand
   */
  relativeName: string;
  /**
   *
   * @type {string}
   * @memberof CreateModMemberCommand
   */
  relativeRelation: string;
  /**
   *
   * @type {string}
   * @memberof CreateModMemberCommand
   */
  relativeCellPhone: string;
  /**
   *
   * @type {boolean}
   * @memberof CreateModMemberCommand
   */
  isHasCommitment: boolean;
  /**
   *
   * @type {boolean}
   * @memberof CreateModMemberCommand
   */
  isBaptize: boolean;
  /**
   *
   * @type {number}
   * @memberof CreateModMemberCommand
   */
  baptizeTypeId: number;
  /**
   *
   * @type {string}
   * @memberof CreateModMemberCommand
   */
  baptizeday: string;
  /**
   *
   * @type {string}
   * @memberof CreateModMemberCommand
   */
  baptizeOrgName: string;
  /**
   *
   * @type {string}
   * @memberof CreateModMemberCommand
   */
  baptizeGroup: string;
  /**
   *
   * @type {string}
   * @memberof CreateModMemberCommand
   */
  baptizer: string;
  /**
   *
   * @type {string}
   * @memberof CreateModMemberCommand
   */
  firstSermon: string;
  /**
   *
   * @type {string}
   * @memberof CreateModMemberCommand
   */
  firstGroupMeeting: string;
  /**
   *
   * @type {string}
   * @memberof CreateModMemberCommand
   */
  settleDate: string;
  /**
   *
   * @type {string}
   * @memberof CreateModMemberCommand
   */
  lastMovedDate: string;
  /**
   *
   * @type {boolean}
   * @memberof CreateModMemberCommand
   */
  isContact: boolean;
  /**
   *
   * @type {boolean}
   * @memberof CreateModMemberCommand
   */
  isGranted: boolean;
  /**
   *
   * @type {string}
   * @memberof CreateModMemberCommand
   */
  grantedDate: string;
  /**
   *
   * @type {boolean}
   * @memberof CreateModMemberCommand
   */
  isFromExp: boolean;
  /**
   *
   * @type {string}
   * @memberof CreateModMemberCommand
   */
  sourceCd: string;
  /**
   *
   * @type {string}
   * @memberof CreateModMemberCommand
   */
  groupLeaderDate: string;
  /**
   *
   * @type {boolean}
   * @memberof CreateModMemberCommand
   */
  isAllowLession: boolean;
  /**
   *
   * @type {string}
   * @memberof CreateModMemberCommand
   */
  career: string;
  /**
   *
   * @type {string}
   * @memberof CreateModMemberCommand
   */
  careerComment: string;
  /**
   *
   * @type {string}
   * @memberof CreateModMemberCommand
   */
  interests: string;
  /**
   *
   * @type {string}
   * @memberof CreateModMemberCommand
   */
  minister: string;
  /**
   *
   * @type {boolean}
   * @memberof CreateModMemberCommand
   */
  isEducation: boolean;
  /**
   *
   * @type {string}
   * @memberof CreateModMemberCommand
   */
  levelofEducation: string;
  /**
   *
   * @type {number}
   * @memberof CreateModMemberCommand
   */
  educationGrade: number;
  /**
   *
   * @type {string}
   * @memberof CreateModMemberCommand
   */
  educationSchool: string;
  /**
   *
   * @type {string}
   * @memberof CreateModMemberCommand
   */
  schoolTimeCd: string;
  /**
   *
   * @type {number}
   * @memberof CreateModMemberCommand
   */
  marriageId: number;
  /**
   *
   * @type {string}
   * @memberof CreateModMemberCommand
   */
  spouse: string;
  /**
   *
   * @type {string}
   * @memberof CreateModMemberCommand
   */
  child1: string;
  /**
   *
   * @type {string}
   * @memberof CreateModMemberCommand
   */
  child2: string;
  /**
   *
   * @type {string}
   * @memberof CreateModMemberCommand
   */
  child3: string;
  /**
   *
   * @type {string}
   * @memberof CreateModMemberCommand
   */
  child4: string;
  /**
   *
   * @type {string}
   * @memberof CreateModMemberCommand
   */
  father: string;
  /**
   *
   * @type {string}
   * @memberof CreateModMemberCommand
   */
  mother: string;
  /**
   *
   * @type {string}
   * @memberof CreateModMemberCommand
   */
  contactTimes: string;
  /**
   *
   * @type {string}
   * @memberof CreateModMemberCommand
   */
  orgName: string;
  /**
   *
   * @type {string}
   * @memberof CreateModMemberCommand
   */
  department: string;
  /**
   *
   * @type {string}
   * @memberof CreateModMemberCommand
   */
  area: string;
  /**
   *
   * @type {string}
   * @memberof CreateModMemberCommand
   */
  zone: string;
  /**
   *
   * @type {string}
   * @memberof CreateModMemberCommand
   */
  group: string;
  /**
   *
   * @type {string}
   * @memberof CreateModMemberCommand
   */
  orgPriest: string;
  /**
   *
   * @type {string}
   * @memberof CreateModMemberCommand
   */
  orgTitle: string;
  /**
   *
   * @type {number}
   * @memberof CreateModMemberCommand
   */
  groupId: number;
  /**
   *
   * @type {number}
   * @memberof CreateModMemberCommand
   */
  zoneId: number;
  /**
   *
   * @type {number}
   * @memberof CreateModMemberCommand
   */
  areaId: number;
  /**
   *
   * @type {boolean}
   * @memberof CreateModMemberCommand
   */
  isE1: boolean;
  /**
   *
   * @type {boolean}
   * @memberof CreateModMemberCommand
   */
  isE2: boolean;
  /**
   *
   * @type {boolean}
   * @memberof CreateModMemberCommand
   */
  isE3: boolean;
  /**
   *
   * @type {boolean}
   * @memberof CreateModMemberCommand
   */
  isE4: boolean;
  /**
   *
   * @type {boolean}
   * @memberof CreateModMemberCommand
   */
  isReserved: boolean;
  /**
   *
   * @type {boolean}
   * @memberof CreateModMemberCommand
   */
  isTerm: boolean;
  /**
   *
   * @type {boolean}
   * @memberof CreateModMemberCommand
   */
  isGroupAttendExpected: boolean;
  /**
   *
   * @type {boolean}
   * @memberof CreateModMemberCommand
   */
  isWorshipAttendExpected: boolean;
  /**
   *
   * @type {string}
   * @memberof CreateModMemberCommand
   */
  statusCd: string;
  /**
   *
   * @type {string}
   * @memberof CreateModMemberCommand
   */
  comment: string;
  /**
   *
   * @type {string}
   * @memberof CreateModMemberCommand
   */
  dateCreate?: string | null;
  /**
   *
   * @type {string}
   * @memberof CreateModMemberCommand
   */
  userCreate?: string | null;
  /**
   *
   * @type {string}
   * @memberof CreateModMemberCommand
   */
  dateUpdate?: string | null;
  /**
   *
   * @type {string}
   * @memberof CreateModMemberCommand
   */
  userUpdate?: string | null;
}
/**
 * 建立 Organization
 * @export
 * @interface CreateOrganizationCommand
 */
export interface CreateOrganizationCommand {
  /**
   * Id
   * @type {number}
   * @memberof CreateOrganizationCommand
   */
  id: number;
  /**
   * 組織部門Id
   * @type {number}
   * @memberof CreateOrganizationCommand
   */
  deptId: number;
  /**
   * 上層的Id
   * @type {number}
   * @memberof CreateOrganizationCommand
   */
  upperOrganizationId: number;
  /**
   * 舊欄位對應部門id Portal.Id
   * @type {number}
   * @memberof CreateOrganizationCommand
   */
  portalId: number;
  /**
   * 組織名稱
   * @type {string}
   * @memberof CreateOrganizationCommand
   */
  name: string;
  /**
   * 主任牧師名稱
   * @type {string}
   * @memberof CreateOrganizationCommand
   */
  pastorName: string;
  /**
   * 主任牧師User.Id
   * @type {number}
   * @memberof CreateOrganizationCommand
   */
  pastorId: number;
  /**
   * 主任牧師身分證
   * @type {string}
   * @memberof CreateOrganizationCommand
   */
  pastor: string;
  /**
   * 主任牧師電話
   * @type {string}
   * @memberof CreateOrganizationCommand
   */
  pastorphone: string;
  /**
   *
   * @type {string}
   * @memberof CreateOrganizationCommand
   */
  phone: string;
  /**
   * 教會電話
   * @type {string}
   * @memberof CreateOrganizationCommand
   */
  fax: string;
  /**
   * 教會傳真
   * @type {string}
   * @memberof CreateOrganizationCommand
   */
  email: string;
  /**
   * 教會Email
   * @type {string}
   * @memberof CreateOrganizationCommand
   */
  site: string;
  /**
   * 教會網址
   * @type {string}
   * @memberof CreateOrganizationCommand
   */
  zip: string;
  /**
   * 教會郵遞區號
   * @type {string}
   * @memberof CreateOrganizationCommand
   */
  address: string;
  /**
   * 教會地址
   * @type {string}
   * @memberof CreateOrganizationCommand
   */
  invoiceIdentifier: string;
  /**
   * 教會統一編號抬頭
   * @type {string}
   * @memberof CreateOrganizationCommand
   */
  invoiceTitle: string;
  /**
   * 是否需要發票抬頭        對應SystemConfig        type = IsYN顯示 namevalue存此欄位0：N1：Y
   * @type {string}
   * @memberof CreateOrganizationCommand
   */
  isInvoiceTitle: string;
  /**
   * 組織狀態        對應SystemConfig        type =OrgStatus顯示 namevalue存此欄位0：停用 1：正常
   * @type {string}
   * @memberof CreateOrganizationCommand
   */
  orgStatus: string;
  /**
   * LineToken
   * @type {string}
   * @memberof CreateOrganizationCommand
   */
  lineToken: string;
  /**
   *
   * @type {string}
   * @memberof CreateOrganizationCommand
   */
  comment: string;
  /**
   *
   * @type {string}
   * @memberof CreateOrganizationCommand
   */
  dateCreate?: string | null;
  /**
   *
   * @type {string}
   * @memberof CreateOrganizationCommand
   */
  userCreate?: string | null;
  /**
   *
   * @type {string}
   * @memberof CreateOrganizationCommand
   */
  dateUpdate?: string | null;
  /**
   *
   * @type {string}
   * @memberof CreateOrganizationCommand
   */
  userUpdate?: string | null;
}
/**
 * 建立 Pastoral
 * @export
 * @interface CreatePastoralCommand
 */
export interface CreatePastoralCommand {
  /**
   * 組織部門Id
   * @type {number}
   * @memberof CreatePastoralCommand
   */
  deptId: number;
  /**
   * id
   * @type {number}
   * @memberof CreatePastoralCommand
   */
  id: number;
  /**
   * 組織上層Id (分多階層)        堂點       牧區 督區 區 小組
   * @type {number}
   * @memberof CreatePastoralCommand
   */
  upperPastoralId: number;
  /**
   * 分組區域名稱
   * @type {string}
   * @memberof CreatePastoralCommand
   */
  name: string;
  /**
   * 分組區域職稱
   * @type {string}
   * @memberof CreatePastoralCommand
   */
  title: string;
  /**
   * 小組編號//八碼數字 系統自動產生(為小組時才需填入)
   * @type {string}
   * @memberof CreatePastoralCommand
   */
  groupNo: string;
  /**
   * 領導人 UserId
   * @type {number}
   * @memberof CreatePastoralCommand
   */
  leaderId: number;
  /**
   * 領導人身分證
   * @type {string}
   * @memberof CreatePastoralCommand
   */
  leaderIdnumber: string;
  /**
   * 領導人2 UserId
   * @type {number}
   * @memberof CreatePastoralCommand
   */
  leader2Id: number;
  /**
   * 領導人2身分證
   * @type {string}
   * @memberof CreatePastoralCommand
   */
  leader2Idnumber: string;
  /**
   * 領導人3 UserId
   * @type {number}
   * @memberof CreatePastoralCommand
   */
  leader3Id: number;
  /**
   * 領導人3身分證
   * @type {string}
   * @memberof CreatePastoralCommand
   */
  leader3Idnumber: string;
  /**
   * 最大權限人UserId
   * @type {number}
   * @memberof CreatePastoralCommand
   */
  supervisorId: number;
  /**
   * LineToken
   * @type {string}
   * @memberof CreatePastoralCommand
   */
  lineToken: string;
  /**
   *
   * @type {number}
   * @memberof CreatePastoralCommand
   */
  upperOrganizationId: number;
  /**
   *
   * @type {number}
   * @memberof CreatePastoralCommand
   */
  orgId: number;
  /**
   *
   * @type {string}
   * @memberof CreatePastoralCommand
   */
  typeId: string;
  /**
   *
   * @type {string}
   * @memberof CreatePastoralCommand
   */
  statusCd: string;
  /**
   *
   * @type {string}
   * @memberof CreatePastoralCommand
   */
  comment: string;
  /**
   *
   * @type {string}
   * @memberof CreatePastoralCommand
   */
  dateCreate?: string | null;
  /**
   *
   * @type {string}
   * @memberof CreatePastoralCommand
   */
  userCreate?: string | null;
  /**
   *
   * @type {string}
   * @memberof CreatePastoralCommand
   */
  dateUpdate?: string | null;
  /**
   *
   * @type {string}
   * @memberof CreatePastoralCommand
   */
  userUpdate?: string | null;
  /**
   *
   * @type {number}
   * @memberof CreatePastoralCommand
   */
  isActivated: number;
}
/**
 * 建立 PastoralMeeting
 * @export
 * @interface CreatePastoralMeetingCommand
 */
export interface CreatePastoralMeetingCommand {
  /**
   * id
   * @type {number}
   * @memberof CreatePastoralMeetingCommand
   */
  id: number;
  /**
   * Pastoral.Id
   * @type {number}
   * @memberof CreatePastoralMeetingCommand
   */
  pastoralId: number;
  /**
   * 小組聚會每周哪一天
   * @type {string}
   * @memberof CreatePastoralMeetingCommand
   */
  meetingDayOfWeek: string;
  /**
   * 聚會時間
   * @type {string}
   * @memberof CreatePastoralMeetingCommand
   */
  meetingTime: string;
  /**
   * 聚會地點
   * @type {string}
   * @memberof CreatePastoralMeetingCommand
   */
  meetingAddress: string;
  /**
   * 聚會日期
   * @type {string}
   * @memberof CreatePastoralMeetingCommand
   */
  meetingDay: string;
  /**
   * 是否為外展對應SystemConfigtype=IsNY顯示 namevalue存此欄位0：N1：Y
   * @type {string}
   * @memberof CreatePastoralMeetingCommand
   */
  isExp: string;
  /**
   * 是否可查詢，否表示隱藏小組
   * @type {string}
   * @memberof CreatePastoralMeetingCommand
   */
  isSearchable: string;
  /**
   * 聚會狀態對應SystemConfigtype=MeetType顯示 namevalue存此欄位0：尚未開始1：正常舉行2：停辦
   * @type {string}
   * @memberof CreatePastoralMeetingCommand
   */
  meetType: string;
}
/**
 * 建立 PastoralMeetingUser
 * @export
 * @interface CreatePastoralMeetingUserCommand
 */
export interface CreatePastoralMeetingUserCommand {
  /**
   * id
   * @type {number}
   * @memberof CreatePastoralMeetingUserCommand
   */
  id: number;
  /**
   * PastoralMeeting.Id
   * @type {number}
   * @memberof CreatePastoralMeetingUserCommand
   */
  pastoralMeetingId: number;
  /**
   * User.Id
   * @type {number}
   * @memberof CreatePastoralMeetingUserCommand
   */
  userId: number;
  /**
   * 是否聚會出席狀態        對應SystemConfig        type = MeetAttendanceType顯示 namevalue存此欄位0：尚未開課1：已出席2:未出席
   * @type {number}
   * @memberof CreatePastoralMeetingUserCommand
   */
  meetAttendanceType: number;
}
/**
 * 建立 Privilege
 * @export
 * @interface CreatePrivilegeCommand
 */
export interface CreatePrivilegeCommand {
  /**
   * Id
   * @type {string}
   * @memberof CreatePrivilegeCommand
   */
  id: string;
  /**
   * 6 碼 ABCD1234
   * @type {string}
   * @memberof CreatePrivilegeCommand
   */
  functionId: string;
  /**
   * 父層功能 Id
   * @type {string}
   * @memberof CreatePrivilegeCommand
   */
  parentFunctionId: string;
  /**
   * 功能名稱
   * @type {string}
   * @memberof CreatePrivilegeCommand
   */
  name: string;
  /**
   * 排序
   * @type {number}
   * @memberof CreatePrivilegeCommand
   */
  sort: number;
  /**
   *
   * @type {PrivilegeNodeType}
   * @memberof CreatePrivilegeCommand
   */
  linkType: PrivilegeNodeType;
  /**
   * QueryParams
   * @type {string}
   * @memberof CreatePrivilegeCommand
   */
  queryParams: string;
  /**
   * 圖示
   * @type {string}
   * @memberof CreatePrivilegeCommand
   */
  icon: string;
  /**
   * 檢視
   * @type {boolean}
   * @memberof CreatePrivilegeCommand
   */
  viewGranted: boolean;
  /**
   * 新增/編輯
   * @type {boolean}
   * @memberof CreatePrivilegeCommand
   */
  modifyGranted: boolean;
  /**
   * 刪除
   * @type {boolean}
   * @memberof CreatePrivilegeCommand
   */
  deleteGranted: boolean;
  /**
   * 上傳
   * @type {boolean}
   * @memberof CreatePrivilegeCommand
   */
  uploadGranted: boolean;
  /**
   * 下載
   * @type {boolean}
   * @memberof CreatePrivilegeCommand
   */
  downloadGranted: boolean;
  /**
   *
   * @type {string}
   * @memberof CreatePrivilegeCommand
   */
  comment: string;
}
/**
 * 建立 QrCode
 * @export
 * @interface CreateQrCodeCommand
 */
export interface CreateQrCodeCommand {
  /**
   * QrCodeId
   * @type {number}
   * @memberof CreateQrCodeCommand
   */
  id: number;
  /**
   * 報到類別對應 systemconfig.Type=RefferenceType 0:兒童個人報到專用 1:小組報到 2:主日報到 3:領袖之夜報到 4:課程報到 5:事工團報到 6:問卷填寫
   * @type {number}
   * @memberof CreateQrCodeCommand
   */
  referenceType: number;
  /**
   * 對應報到類別主擋Id
   * @type {number}
   * @memberof CreateQrCodeCommand
   */
  referenceId: number;
  /**
   * 報到使用者Id
   * @type {number}
   * @memberof CreateQrCodeCommand
   */
  userId: number;
  /**
   * Id+RefferenceType+UserId 產生唯一值
   * @type {string}
   * @memberof CreateQrCodeCommand
   */
  generateCode: string;
  /**
   * 付款方式 對應SystemConfig內Type=RegisterStatus 0:尚未報到 1:已報到
   * @type {number}
   * @memberof CreateQrCodeCommand
   */
  registerStatus: number;
  /**
   * 報到時間
   * @type {string}
   * @memberof CreateQrCodeCommand
   */
  registerTime: string;
}
/**
 * 建立 Questionnaire
 * @export
 * @interface CreateQuestionnaireCommand
 */
export interface CreateQuestionnaireCommand {
  /**
   * 問卷Id
   * @type {number}
   * @memberof CreateQuestionnaireCommand
   */
  id: number;
  /**
   * 問卷堂點類別        type=QuestionnaireJoinLocation       顯示 name     value存此欄位0：堂點
   * @type {string}
   * @memberof CreateQuestionnaireCommand
   */
  questionnaireJoinLocation: string;
  /**
   * 問卷類型type=QuestionnaireType顯示 namevalue存此欄位0：課程問卷 1:服事徵召 2:一般問卷
   * @type {string}
   * @memberof CreateQuestionnaireCommand
   */
  questionnaireType: string;
  /**
   * 問卷名稱
   * @type {string}
   * @memberof CreateQuestionnaireCommand
   */
  name: string;
  /**
   * 問卷說明
   * @type {string}
   * @memberof CreateQuestionnaireCommand
   */
  description: string;
  /**
   * 指定堂點
   * @type {number}
   * @memberof CreateQuestionnaireCommand
   */
  organizationId: number;
  /**
   * 指定牧區
   * @type {number}
   * @memberof CreateQuestionnaireCommand
   */
  pastoralId: number;
  /**
   * 指定課程分類
   * @type {number}
   * @memberof CreateQuestionnaireCommand
   */
  courseManagementTypeId: number;
  /**
   * 指定課程名稱
   * @type {string}
   * @memberof CreateQuestionnaireCommand
   */
  courseManagementName: string;
  /**
   * 指定年度
   * @type {string}
   * @memberof CreateQuestionnaireCommand
   */
  courseYear: string;
  /**
   * 指定季
   * @type {string}
   * @memberof CreateQuestionnaireCommand
   */
  courseSeason: string;
  /**
   * 指定梯次
   * @type {string}
   * @memberof CreateQuestionnaireCommand
   */
  courseClassNum: string;
  /**
   * 指定課程代碼
   * @type {string}
   * @memberof CreateQuestionnaireCommand
   */
  courseManagementNo: string;
  /**
   * 作業繳交日期
   * @type {string}
   * @memberof CreateQuestionnaireCommand
   */
  courseHomeworkDate: string;
  /**
   * Organization List When Query OrganizationId Condition
   * @type {Array<OrganizationView>}
   * @memberof CreateQuestionnaireCommand
   */
  organizationViews: Array<OrganizationView>;
  /**
   * Pastoral List When Query PastoralId Condition
   * @type {Array<PastoralView>}
   * @memberof CreateQuestionnaireCommand
   */
  pastoralViews: Array<PastoralView>;
  /**
   * QuestionnaireDetail List
   * @type {Array<QuestionnaireDetailView>}
   * @memberof CreateQuestionnaireCommand
   */
  questionnaireDetailsViews: Array<QuestionnaireDetailView>;
}
/**
 * 建立 QuestionnaireDetail
 * @export
 * @interface CreateQuestionnaireDetailCommand
 */
export interface CreateQuestionnaireDetailCommand {
  /**
   * 問卷明細Id
   * @type {number}
   * @memberof CreateQuestionnaireDetailCommand
   */
  id: number;
  /**
   * 問卷Id
   * @type {number}
   * @memberof CreateQuestionnaireDetailCommand
   */
  questionnaireId: number;
  /**
   * 上層問卷DetailId
   * @type {number}
   * @memberof CreateQuestionnaireDetailCommand
   */
  upperQuestionnaireDetailId: number;
  /**
   * 問卷內容類型type=QuestionnaireDetailType namevalue存此欄位0：區段標題1：題目2：選項
   * @type {string}
   * @memberof CreateQuestionnaireDetailCommand
   */
  questionnaireDetailType: string;
  /**
   * QuestionnaireType=1才可選問卷內容類型type=ComponentType顯示 namevalue存此欄位0：選擇(單選)1：選擇(多選)2：是非3：簡答
   * @type {string}
   * @memberof CreateQuestionnaireDetailCommand
   */
  componentType: string;
  /**
   * 顯示排序
   * @type {number}
   * @memberof CreateQuestionnaireDetailCommand
   */
  sequence: number;
  /**
   * 元件描述假設QuestionnaireType=0此顯示區段標題假設QuestionnaireType=1此顯示該UpperQuestionnaireId.區段之Sequence題目名稱假設QuestionnaireType=2此顯示該UpperQuestionnaireId.區段之ComponentType選項之內容說明
   * @type {string}
   * @memberof CreateQuestionnaireDetailCommand
   */
  name: string;
  /**
   * 描述
   * @type {string}
   * @memberof CreateQuestionnaireDetailCommand
   */
  description: string;
  /**
   *
   * @type {Array<QuestionnaireDetailView>}
   * @memberof CreateQuestionnaireDetailCommand
   */
  questionnaireDetailViews: Array<QuestionnaireDetailView>;
}
/**
 * 建立 Role
 * @export
 * @interface CreateRoleCommand
 */
export interface CreateRoleCommand {
  /**
   * 角色與功能Menu列表
   * @type {Array<CreateRolePrivilegeMappingCommand>}
   * @memberof CreateRoleCommand
   */
  rolePrivilegeList: Array<CreateRolePrivilegeMappingCommand>;
  /**
   * Id
   * @type {string}
   * @memberof CreateRoleCommand
   */
  id: string;
  /**
   * 角色名稱
   * @type {string}
   * @memberof CreateRoleCommand
   */
  name: string;
  /**
   * 角色說明
   * @type {string}
   * @memberof CreateRoleCommand
   */
  roleDescriptions: string;
  /**
   * 角色資料階層
   * @type {number}
   * @memberof CreateRoleCommand
   */
  dataLevel: number;
  /**
   * HandledId
   * @type {string}
   * @memberof CreateRoleCommand
   */
  handledId?: string | null;
}
/**
 * 建立 RolePrivilegeMapping
 * @export
 * @interface CreateRolePrivilegeMappingCommand
 */
export interface CreateRolePrivilegeMappingCommand {
  /**
   * Id
   * @type {string}
   * @memberof CreateRolePrivilegeMappingCommand
   */
  id: string;
  /**
   * RoleId
   * @type {string}
   * @memberof CreateRolePrivilegeMappingCommand
   */
  roleId: string;
  /**
   * PrivilegeId
   * @type {string}
   * @memberof CreateRolePrivilegeMappingCommand
   */
  privilegeId: string;
  /**
   * PrivilegeId
   * @type {boolean}
   * @memberof CreateRolePrivilegeMappingCommand
   */
  enable: boolean;
  /**
   * 檢視
   * @type {boolean}
   * @memberof CreateRolePrivilegeMappingCommand
   */
  viewGranted: boolean;
  /**
   * 新增/編輯
   * @type {boolean}
   * @memberof CreateRolePrivilegeMappingCommand
   */
  modifyGranted: boolean;
  /**
   * 刪除
   * @type {boolean}
   * @memberof CreateRolePrivilegeMappingCommand
   */
  deleteGranted: boolean;
  /**
   * 上傳
   * @type {boolean}
   * @memberof CreateRolePrivilegeMappingCommand
   */
  uploadGranted: boolean;
  /**
   * 下載
   * @type {boolean}
   * @memberof CreateRolePrivilegeMappingCommand
   */
  downloadGranted: boolean;
}
/**
 * 建立 RoleUserMapping
 * @export
 * @interface CreateRoleUserMappingCommand
 */
export interface CreateRoleUserMappingCommand {
  /**
   *
   * @type {string}
   * @memberof CreateRoleUserMappingCommand
   */
  id: string;
  /**
   *
   * @type {number}
   * @memberof CreateRoleUserMappingCommand
   */
  userId: number;
  /**
   *
   * @type {string}
   * @memberof CreateRoleUserMappingCommand
   */
  roleId: string;
}
/**
 * 建立 ShoppingCart
 * @export
 * @interface CreateShoppingCartCommand
 */
export interface CreateShoppingCartCommand {
  /**
   * id
   * @type {number}
   * @memberof CreateShoppingCartCommand
   */
  id: number;
  /**
   * User.Id
   * @type {number}
   * @memberof CreateShoppingCartCommand
   */
  userId: number;
  /**
   * 課程類別Course.Id
   * @type {number}
   * @memberof CreateShoppingCartCommand
   */
  courseId: number;
  /**
   * 數量
   * @type {number}
   * @memberof CreateShoppingCartCommand
   */
  count: number;
  /**
   * 出席狀態 對應SystemConfig內Type=ShoppingCartStatus 0:新增 1已轉入訂單 2:逾期課程清單(無法轉訂單) 3:數量不足
   * @type {string}
   * @memberof CreateShoppingCartCommand
   */
  shoppingCartStatus: string;
}
/**
 * 建立 ShoppingOrder
 * @export
 * @interface CreateShoppingOrderCommand
 */
export interface CreateShoppingOrderCommand {
  /**
   * 訂單主檔Id
   * @type {number}
   * @memberof CreateShoppingOrderCommand
   */
  id: number;
  /**
   * User.Id
   * @type {number}
   * @memberof CreateShoppingOrderCommand
   */
  userId: number;
  /**
   * 訂單總金額
   * @type {number}
   * @memberof CreateShoppingOrderCommand
   */
  totalAmount: number;
  /**
   * 付款總金額
   * @type {number}
   * @memberof CreateShoppingOrderCommand
   */
  paymentAmount: number;
  /**
   * 退款總金額
   * @type {number}
   * @memberof CreateShoppingOrderCommand
   */
  refundAmount: number;
  /**
   * 出席狀態 對應SystemConfig內Type=OrderStatus 0:尚未付款 1已付款 2:款項確認 3:異常 4：訂單逾期取消付款
   * @type {string}
   * @memberof CreateShoppingOrderCommand
   */
  orderPayStatus: string;
  /**
   * 付款交易序號
   * @type {string}
   * @memberof CreateShoppingOrderCommand
   */
  paymentTransactionNo: string;
  /**
   * 付款交易時間
   * @type {string}
   * @memberof CreateShoppingOrderCommand
   */
  paymentTransactionDate: string;
  /**
   * 付款備註
   * @type {string}
   * @memberof CreateShoppingOrderCommand
   */
  paymentTransactionDescription: string;
  /**
   * 付款方式 對應SystemConfig內Type=PaymentType 0:臨櫃現金 1:ATM 2:刷卡 3:其他
   * @type {string}
   * @memberof CreateShoppingOrderCommand
   */
  paymentType: string;
  /**
   * 退款交易序號
   * @type {string}
   * @memberof CreateShoppingOrderCommand
   */
  refundTransactionNo: string;
  /**
   * 退款交易時間
   * @type {string}
   * @memberof CreateShoppingOrderCommand
   */
  refundTransactionDate: string;
  /**
   * 退款方式 對應SystemConfig內Type=PaymentType 0:臨櫃現金 1:ATM 2:刷退 3:其他
   * @type {string}
   * @memberof CreateShoppingOrderCommand
   */
  refundType: string;
  /**
   * 退款備註
   * @type {string}
   * @memberof CreateShoppingOrderCommand
   */
  refundDescription: string;
  /**
   * 出席狀態 對應SystemConfig內Type=OrderStatus 0:訂單成立(待付款)1:訂單對帳2:訂單已確認3:訂單已結案4:訂單取消申請5:訂單取消審核中6:訂單取消已確認7:訂單取消已駁回8:訂單取消退款中9:訂單取消已退款
   * @type {string}
   * @memberof CreateShoppingOrderCommand
   */
  orderStatus: string;
  /**
   * 電子收據
   * @type {string}
   * @memberof CreateShoppingOrderCommand
   */
  receipt: string;
  /**
   * 實收金額
   * @type {number}
   * @memberof CreateShoppingOrderCommand
   */
  actuallyAmount: number;
  /**
   * 收款人員 對應user.Id
   * @type {number}
   * @memberof CreateShoppingOrderCommand
   */
  receiveUserId: number;
  /**
   * 訂購人資料-姓名
   * @type {string}
   * @memberof CreateShoppingOrderCommand
   */
  userName: string;
  /**
   * 訂購人資料-通信地址
   * @type {string}
   * @memberof CreateShoppingOrderCommand
   */
  userAddress: string;
  /**
   * 訂購人資料-行動電話
   * @type {string}
   * @memberof CreateShoppingOrderCommand
   */
  userCellPhone: string;
  /**
   * 訂購人資料-聯絡電話
   * @type {string}
   * @memberof CreateShoppingOrderCommand
   */
  userPhone: string;
  /**
   * 訂購人資料-Email
   * @type {string}
   * @memberof CreateShoppingOrderCommand
   */
  userEmail: string;
}
/**
 * 建立 ShoppingOrderDetail
 * @export
 * @interface CreateShoppingOrderDetailCommand
 */
export interface CreateShoppingOrderDetailCommand {
  /**
   * 訂單明細主檔Id
   * @type {number}
   * @memberof CreateShoppingOrderDetailCommand
   */
  id: number;
  /**
   * ShoppingOrder.Id
   * @type {number}
   * @memberof CreateShoppingOrderDetailCommand
   */
  shoppingOrderId: number;
  /**
   * Course.Id 課程Id
   * @type {number}
   * @memberof CreateShoppingOrderDetailCommand
   */
  courseId: number;
  /**
   * 單價
   * @type {number}
   * @memberof CreateShoppingOrderDetailCommand
   */
  price: number;
  /**
   * 購買數量
   * @type {number}
   * @memberof CreateShoppingOrderDetailCommand
   */
  count: number;
  /**
   * 總金額
   * @type {number}
   * @memberof CreateShoppingOrderDetailCommand
   */
  amount: number;
  /**
   * 付款方式 對應SystemConfig內Type=OrderDetailStatus 0:尚未付款 1:已付款 2:付款完成 3:退款申請 4:退款完成
   * @type {string}
   * @memberof CreateShoppingOrderDetailCommand
   */
  orderDetailStatus: string;
  /**
   * 是否素食 SystemConfig內Type=IsYN 0:否 1:是
   * @type {string}
   * @memberof CreateShoppingOrderDetailCommand
   */
  isViggieHelp: string;
  /**
   * 是否行動不便 SystemConfig內Type=IsYN 0:否 1:是
   * @type {string}
   * @memberof CreateShoppingOrderDetailCommand
   */
  isMoveHelp: string;
  /**
   * 是否懷孕 SystemConfig內Type=IsYN 0:否 1:是
   * @type {string}
   * @memberof CreateShoppingOrderDetailCommand
   */
  isPregnancyHelp: string;
  /**
   * 是否其他需要幫助 SystemConfig內Type=IsYN 0:否 1:是
   * @type {string}
   * @memberof CreateShoppingOrderDetailCommand
   */
  isOthersHelp: string;
  /**
   * 其他需要幫助說明
   * @type {string}
   * @memberof CreateShoppingOrderDetailCommand
   */
  isOthersHelpInformations: string;
  /**
   * 是否同班夫妻幫助 SystemConfig內Type=IsYN 0:否 1:是
   * @type {string}
   * @memberof CreateShoppingOrderDetailCommand
   */
  isCoupleSameClassHelp: string;
  /**
   * 同班夫妻配偶姓名
   * @type {string}
   * @memberof CreateShoppingOrderDetailCommand
   */
  isCoupleSameClassInformations: string;
}
/**
 * 建立 ShoppingTrack
 * @export
 * @interface CreateShoppingTrackCommand
 */
export interface CreateShoppingTrackCommand {
  /**
   * id
   * @type {number}
   * @memberof CreateShoppingTrackCommand
   */
  id: number;
  /**
   * User.Id
   * @type {number}
   * @memberof CreateShoppingTrackCommand
   */
  userId: number;
  /**
   * 課程類別Course.Id
   * @type {number}
   * @memberof CreateShoppingTrackCommand
   */
  courseId: number;
}
/**
 * 建立 SystemConfig
 * @export
 * @interface CreateSystemConfigCommand
 */
export interface CreateSystemConfigCommand {
  /**
   *
   * @type {number}
   * @memberof CreateSystemConfigCommand
   */
  id: number;
  /**
   *
   * @type {string}
   * @memberof CreateSystemConfigCommand
   */
  type: string;
  /**
   *
   * @type {string}
   * @memberof CreateSystemConfigCommand
   */
  value: string;
  /**
   *
   * @type {string}
   * @memberof CreateSystemConfigCommand
   */
  name: string;
  /**
   *
   * @type {string}
   * @memberof CreateSystemConfigCommand
   */
  memo: string;
}
/**
 * 建立 UserBankAccount
 * @export
 * @interface CreateUserBankAccountCommand
 */
export interface CreateUserBankAccountCommand {
  /**
   *
   * @type {string}
   * @memberof CreateUserBankAccountCommand
   */
  memo: string;
  /**
   *
   * @type {string}
   * @memberof CreateUserBankAccountCommand
   */
  handledId?: string | null;
  /**
   *
   * @type {string}
   * @memberof CreateUserBankAccountCommand
   */
  createdAt: string;
  /**
   *
   * @type {string}
   * @memberof CreateUserBankAccountCommand
   */
  creator: string;
  /**
   *
   * @type {string}
   * @memberof CreateUserBankAccountCommand
   */
  modifiedAt: string;
  /**
   *
   * @type {string}
   * @memberof CreateUserBankAccountCommand
   */
  modifier: string;
  /**
   * Id
   * @type {number}
   * @memberof CreateUserBankAccountCommand
   */
  id: number;
  /**
   * 建立 User.Id
   * @type {number}
   * @memberof CreateUserBankAccountCommand
   */
  userId: number;
  /**
   * 戶名
   * @type {string}
   * @memberof CreateUserBankAccountCommand
   */
  bankName: string;
  /**
   * 銀行代號
   * @type {string}
   * @memberof CreateUserBankAccountCommand
   */
  bankCode: string;
  /**
   * 分行代號
   * @type {string}
   * @memberof CreateUserBankAccountCommand
   */
  branchCode: string;
  /**
   * 銀行帳戶
   * @type {string}
   * @memberof CreateUserBankAccountCommand
   */
  account: string;
}
/**
 * 建立 User
 * @export
 * @interface CreateUserCommand
 */
export interface CreateUserCommand {
  /**
   * 所屬牧區id =>對應牧區身分類別
   * @type {number}
   * @memberof CreateUserCommand
   */
  pastoralId: number;
  /**
   * 姓名
   * @type {string}
   * @memberof CreateUserCommand
   */
  name: string;
  /**
   * 聚會點Id
   * @type {number}
   * @memberof CreateUserCommand
   */
  meetingPointId: number;
  /**
   * 帳號
   * @type {string}
   * @memberof CreateUserCommand
   */
  userNo: string;
  /**
   * 密碼
   * @type {string}
   * @memberof CreateUserCommand
   */
  password: string;
  /**
   * 令牌
   * @type {string}
   * @memberof CreateUserCommand
   */
  passwordSalt: string;
  /**
   * 手機類型 對應SystemConfig type=PhoneType 顯示 name value存此欄位 0：家長手機 1：小孩手機
   * @type {string}
   * @memberof CreateUserCommand
   */
  phoneType: string;
  /**
   * 姓
   * @type {string}
   * @memberof CreateUserCommand
   */
  firstName: string;
  /**
   * 名
   * @type {string}
   * @memberof CreateUserCommand
   */
  lastName: string;
  /**
   * 性別 對應SystemConfig type=GenderType 顯示 name value存此欄位0：女姓 1：男性\"
   * @type {string}
   * @memberof CreateUserCommand
   */
  genderType: string;
  /**
   * 居住國家
   * @type {string}
   * @memberof CreateUserCommand
   */
  liveCountry: string;
  /**
   * 生日
   * @type {string}
   * @memberof CreateUserCommand
   */
  birthday: string;
  /**
   * 身分證字號
   * @type {string}
   * @memberof CreateUserCommand
   */
  idNumber: string;
  /**
   * 手機國碼
   * @type {string}
   * @memberof CreateUserCommand
   */
  cellAreaCode: string;
  /**
   * 手機門號
   * @type {string}
   * @memberof CreateUserCommand
   */
  cellPhone: string;
  /**
   * 城市
   * @type {string}
   * @memberof CreateUserCommand
   */
  liveCity: string;
  /**
   * 郵遞區號
   * @type {string}
   * @memberof CreateUserCommand
   */
  liveZipCode: string;
  /**
   * 地區
   * @type {string}
   * @memberof CreateUserCommand
   */
  liveZipArea: string;
  /**
   * 詳細地址
   * @type {string}
   * @memberof CreateUserCommand
   */
  liveAddress: string;
  /**
   * 地址2
   * @type {string}
   * @memberof CreateUserCommand
   */
  liveAddress2: string;
  /**
   * 受洗 對應SystemConfig type=BaptizedType顯示 namevalue存此欄位0：未受洗1：已受洗2：其它
   * @type {string}
   * @memberof CreateUserCommand
   */
  baptizedType: string;
  /**
   * 受洗時間
   * @type {string}
   * @memberof CreateUserCommand
   */
  baptizedTime: string;
  /**
   * 教會施洗者 (若為旌旗教會者)
   * @type {string}
   * @memberof CreateUserCommand
   */
  baptizedPerson: string;
  /**
   * 教會類別 對應SystemConfigtype=ChurchType顯示 namevalue存此欄位0：其他1：旌旗教會
   * @type {string}
   * @memberof CreateUserCommand
   */
  churchType: string;
  /**
   * 會友所屬堂點 DDL對應Organization.Name
   * @type {string}
   * @memberof CreateUserCommand
   */
  churchName: string;
  /**
   * 過去在哪個教會名稱
   * @type {string}
   * @memberof CreateUserCommand
   */
  anotherChurchName: string;
  /**
   * 電話(市話)
   * @type {string}
   * @memberof CreateUserCommand
   */
  phone: string;
  /**
   * 手機國碼1
   * @type {string}
   * @memberof CreateUserCommand
   */
  cellAreaCode1: string;
  /**
   * 電話(手機)
   * @type {string}
   * @memberof CreateUserCommand
   */
  cellPhone1: string;
  /**
   * 手機國碼2
   * @type {string}
   * @memberof CreateUserCommand
   */
  cellAreaCode2: string;
  /**
   * 電話(手機2)
   * @type {string}
   * @memberof CreateUserCommand
   */
  cellPhone2: string;
  /**
   * Email(主要)
   * @type {string}
   * @memberof CreateUserCommand
   */
  email1: string;
  /**
   * Email(次要)
   * @type {string}
   * @memberof CreateUserCommand
   */
  email2: string;
  /**
   * InstagramId
   * @type {string}
   * @memberof CreateUserCommand
   */
  instagramId: string;
  /**
   * LineId
   * @type {string}
   * @memberof CreateUserCommand
   */
  lineId: string;
  /**
   * WeChatId
   * @type {string}
   * @memberof CreateUserCommand
   */
  weChatId: string;
  /**
   * 其他APPID
   * @type {string}
   * @memberof CreateUserCommand
   */
  otherSocialId: string;
  /**
   * 是否在旌旗小組對應SystemConfigtype = isYN顯示 namevalue存此欄位0：N1：Y\"
   * @type {string}
   * @memberof CreateUserCommand
   */
  isChurchGroup: string;
  /**
   * Id
   * @type {string}
   * @memberof CreateUserCommand
   */
  churchGroupNo: string;
  /**
   * 是否願意加入旌旗小組對應SystemConfigtype = isYN顯示 namevalue存此欄位0：N1：Y\"
   * @type {string}
   * @memberof CreateUserCommand
   */
  isJoinChurchGroup: string;
  /**
   * 志願序1 實體 星期對應SystemConfigtype = JoinSequenceType0顯示 namevalue存此欄位1：星期一2：星期二3：星期三4：星期四5：星期五6：星期六7：星期日
   * @type {string}
   * @memberof CreateUserCommand
   */
  joinInPersonDate1: string;
  /**
   * 志願序1 實體 時間type=JoinSequenceType1顯示 namevalue存此欄位1：上午2：下午
   * @type {string}
   * @memberof CreateUserCommand
   */
  joinInPersonTime1: string;
  /**
   * 志願序1 實體 時間type=JoinSequenceType2顯示 namevalue存此欄位1：堂點
   * @type {string}
   * @memberof CreateUserCommand
   */
  joinInPersonLocation1: string;
  /**
   * 志願序2 實體 星期對應SystemConfigtype = JoinSequenceType0顯示 namevalue存此欄位1：星期一2：星期二3：星期三4：星期四5：星期五6：星期六7：星期日
   * @type {string}
   * @memberof CreateUserCommand
   */
  joinInPersonDate2: string;
  /**
   * 志願序2 實體 時間type=JoinSequenceType1顯示 namevalue存此欄位1：上午2：下午
   * @type {string}
   * @memberof CreateUserCommand
   */
  joinInPersonTime2: string;
  /**
   * 志願序2 實體 時間type=JoinSequenceType2顯示 namevalue存此欄位1：堂點
   * @type {string}
   * @memberof CreateUserCommand
   */
  joinInPersonLocation2: string;
  /**
   * 志願序3 實體 星期對應SystemConfigtype = JoinSequenceType0顯示 namevalue存此欄位1：星期一2：星期二3：星期三4：星期四5：星期五6：星期六7：星期日
   * @type {string}
   * @memberof CreateUserCommand
   */
  joinInPersonDate3: string;
  /**
   * 志願序3 實體 時間type=JoinSequenceType1顯示 namevalue存此欄位1：上午2：下午
   * @type {string}
   * @memberof CreateUserCommand
   */
  joinInPersonTime3: string;
  /**
   * 志願序3 實體 時間type=JoinSequenceType2顯示 namevalue存此欄位1：堂點
   * @type {string}
   * @memberof CreateUserCommand
   */
  joinInPersonLocation3: string;
  /**
   * 志願序1 線上 星期
   * @type {string}
   * @memberof CreateUserCommand
   */
  joinOnlineDate1: string;
  /**
   * 志願序1 線上 時間
   * @type {string}
   * @memberof CreateUserCommand
   */
  joinOnlineTime1: string;
  /**
   * 志願序2 線上 星期
   * @type {string}
   * @memberof CreateUserCommand
   */
  joinOnlineDate2: string;
  /**
   * 志願序2 線上 時間
   * @type {string}
   * @memberof CreateUserCommand
   */
  joinOnlineTime2: string;
  /**
   * 志願序3 線上 星期
   * @type {string}
   * @memberof CreateUserCommand
   */
  joinOnlineDate3: string;
  /**
   * 志願序3 線上 時間
   * @type {string}
   * @memberof CreateUserCommand
   */
  joinOnlineTime3: string;
  /**
   * Id
   * @type {string}
   * @memberof CreateUserCommand
   */
  memberType: string;
  /**
   * 教育程度type=EduType顯示 namevalue存此欄位0：小學1：國中…
   * @type {string}
   * @memberof CreateUserCommand
   */
  eduType: string;
  /**
   * 職業type=EduType顯示 namevalue存此欄位0：老師1：家管…
   * @type {string}
   * @memberof CreateUserCommand
   */
  professionType: string;
  /**
   * 是否結婚對應SystemConfigtype = IsMarried顯示 namevalue存此欄位0：未婚1：已婚
   * @type {string}
   * @memberof CreateUserCommand
   */
  isMarried: string;
  /**
   * 國碼
   * @type {string}
   * @memberof CreateUserCommand
   */
  countryCode: string;
  /**
   * 是否舊會員 Y是N否
   * @type {string}
   * @memberof CreateUserCommand
   */
  isOldMember: string;
  /**
   * 勾選合約
   * @type {string}
   * @memberof CreateUserCommand
   */
  isTerm: string;
  /**
   * 是否受洗
   * @type {string}
   * @memberof CreateUserCommand
   */
  isBaptize: string;
  /**
   * 受洗類別 0:未知 1: 本教會受洗 2: 其他教會受洗 3: 未受洗
   * @type {string}
   * @memberof CreateUserCommand
   */
  baptizeTypeId: string;
  /**
   * 受洗日期
   * @type {string}
   * @memberof CreateUserCommand
   */
  baptizeday: string;
  /**
   * 受洗教會
   * @type {string}
   * @memberof CreateUserCommand
   */
  baptizeOrgName: string;
  /**
   * 受洗教會
   * @type {string}
   * @memberof CreateUserCommand
   */
  baptizeGroup: string;
  /**
   * 施洗人
   * @type {string}
   * @memberof CreateUserCommand
   */
  baptizer: string;
  /**
   * 使用者家長Id
   * @type {number}
   * @memberof CreateUserCommand
   */
  parentUserId: number;
  /**
   * 是否會員
   * @type {string}
   * @memberof CreateUserCommand
   */
  isMember: string;
  /**
   * 同工角色類別 對應SystemConfig type=GroupMemberType 顯示 name value存此欄位 0：無 1：核心同工 2：儲備同工
   * @type {string}
   * @memberof CreateUserCommand
   */
  groupMemberType: string;
  /**
   * 中低收入戶 IsYN 0:否 1:是
   * @type {string}
   * @memberof CreateUserCommand
   */
  lowIncome: string;
  /**
   * 備註欄位
   * @type {string}
   * @memberof CreateUserCommand
   */
  remark: string;
  /**
   * 狀態
   * @type {string}
   * @memberof CreateUserCommand
   */
  statusCd: string;
}
/**
 * 建立 UserContact
 * @export
 * @interface CreateUserContactCommand
 */
export interface CreateUserContactCommand {
  /**
   *
   * @type {string}
   * @memberof CreateUserContactCommand
   */
  relative: string;
  /**
   *
   * @type {string}
   * @memberof CreateUserContactCommand
   */
  memo: string;
  /**
   * Id
   * @type {number}
   * @memberof CreateUserContactCommand
   */
  id: number;
  /**
   * 建立 User.Id
   * @type {number}
   * @memberof CreateUserContactCommand
   */
  userId: number;
  /**
   * 姓名
   * @type {string}
   * @memberof CreateUserContactCommand
   */
  name: string;
  /**
   * 電話
   * @type {string}
   * @memberof CreateUserContactCommand
   */
  phone: string;
}
/**
 * 建立 UserCourse
 * @export
 * @interface CreateUserCourseCommand
 */
export interface CreateUserCourseCommand {
  /**
   * id
   * @type {number}
   * @memberof CreateUserCourseCommand
   */
  id: number;
  /**
   * User.Id
   * @type {number}
   * @memberof CreateUserCourseCommand
   */
  userId: number;
  /**
   * Course.Id
   * @type {number}
   * @memberof CreateUserCourseCommand
   */
  courseId: number;
  /**
   * 出席狀態 對應SystemConfig內Type=AttendanceType 0:未出席 1已出席 2:尚未開課
   * @type {string}
   * @memberof CreateUserCourseCommand
   */
  attendanceType: string;
  /**
   *
   * @type {string}
   * @memberof CreateUserCourseCommand
   */
  attendanceDate: string;
  /**
   * 备注
   * @type {string}
   * @memberof CreateUserCourseCommand
   */
  memo: string;
}
/**
 * 建立 UserExpertise
 * @export
 * @interface CreateUserExpertiseCommand
 */
export interface CreateUserExpertiseCommand {
  /**
   *
   * @type {string}
   * @memberof CreateUserExpertiseCommand
   */
  memo: string;
  /**
   * Id
   * @type {number}
   * @memberof CreateUserExpertiseCommand
   */
  id: number;
  /**
   * 建立 User.Id
   * @type {number}
   * @memberof CreateUserExpertiseCommand
   */
  userId: number;
  /**
   * 專長描述
   * @type {string}
   * @memberof CreateUserExpertiseCommand
   */
  name: string;
}
/**
 * 建立 UserFamily
 * @export
 * @interface CreateUserFamilyCommand
 */
export interface CreateUserFamilyCommand {
  /**
   *
   * @type {string}
   * @memberof CreateUserFamilyCommand
   */
  memo: string;
  /**
   * Id
   * @type {number}
   * @memberof CreateUserFamilyCommand
   */
  id: number;
  /**
   * 建立時間 User.Id
   * @type {string}
   * @memberof CreateUserFamilyCommand
   */
  userId: string;
  /**
   * 關係類別 對應SystemConfig        type=RelativeType       顯示 name       value存此欄位0：配偶1：父母2：子女
   * @type {string}
   * @memberof CreateUserFamilyCommand
   */
  relativeType: string;
  /**
   * 請輸入連絡電話
   * @type {string}
   * @memberof CreateUserFamilyCommand
   */
  name: string;
}
/**
 * 建立 UserPastoralCare
 * @export
 * @interface CreateUserPastoralCareCommand
 */
export interface CreateUserPastoralCareCommand {
  /**
   * Id
   * @type {number}
   * @memberof CreateUserPastoralCareCommand
   */
  id: number;
  /**
   * User.Id
   * @type {number}
   * @memberof CreateUserPastoralCareCommand
   */
  userId: number;
  /**
   * 牧養類型 對應SystemConfig        type=CareType        顯示 name        value存此欄位 0：新進會員 1：移動 2：身分變更
   * @type {string}
   * @memberof CreateUserPastoralCareCommand
   */
  careType: string;
  /**
   *
   * @type {string}
   * @memberof CreateUserPastoralCareCommand
   */
  pastoralTitle: string;
  /**
   * 新區域
   * @type {string}
   * @memberof CreateUserPastoralCareCommand
   */
  newArea: string;
  /**
   * 舊區域
   * @type {string}
   * @memberof CreateUserPastoralCareCommand
   */
  oldArea: string;
  /**
   * 日期
   * @type {string}
   * @memberof CreateUserPastoralCareCommand
   */
  careDate: string;
}
/**
 * 建立 UserQuestionnaire
 * @export
 * @interface CreateUserQuestionnaireCommand
 */
export interface CreateUserQuestionnaireCommand {
  /**
   * 會員填寫問卷.id
   * @type {number}
   * @memberof CreateUserQuestionnaireCommand
   */
  id: number;
  /**
   * 問卷.id
   * @type {number}
   * @memberof CreateUserQuestionnaireCommand
   */
  questionnaireId: number;
  /**
   * User.id
   * @type {number}
   * @memberof CreateUserQuestionnaireCommand
   */
  userId: number;
  /**
   * 問卷產生預設0  問卷類型  type=QuestionnaireWriteType  顯示 name  value存此欄位  0：未填寫  1：已填寫
   * @type {string}
   * @memberof CreateUserQuestionnaireCommand
   */
  questionnaireWriteType: string;
  /**
   * 居住區域  type=QuestionnaireGoArea  顯示 name  value存此欄位  0：台中  1：台北  2：高雄
   * @type {string}
   * @memberof CreateUserQuestionnaireCommand
   */
  questionnaireGoArea: string;
  /**
   * 滿意度  type=Satisfaction  顯示 name  value存此欄位  1：1  2：2  3：3  4：4  5：5
   * @type {string}
   * @memberof CreateUserQuestionnaireCommand
   */
  satisfaction: string;
  /**
   * 評價  type=Satisfaction  顯示 name  value存此欄位  1：1  2：2  3：3  4：4  5：5
   * @type {string}
   * @memberof CreateUserQuestionnaireCommand
   */
  evaluation: string;
  /**
   * 填寫問卷日期
   * @type {string}
   * @memberof CreateUserQuestionnaireCommand
   */
  writeQuestionnaireDate: string;
  /**
   * 說明
   * @type {string}
   * @memberof CreateUserQuestionnaireCommand
   */
  comment: string;
}
/**
 * 建立 UserSociety
 * @export
 * @interface CreateUserSocietyCommand
 */
export interface CreateUserSocietyCommand {
  /**
   * Key
   * @type {number}
   * @memberof CreateUserSocietyCommand
   */
  id: number;
  /**
   * User.Id
   * @type {number}
   * @memberof CreateUserSocietyCommand
   */
  userId: number;
  /**
   * User.Name
   * @type {string}
   * @memberof CreateUserSocietyCommand
   */
  name: string;
  /**
   *
   * @type {User}
   * @memberof CreateUserSocietyCommand
   */
  user: User;
}
/**
 * 刪除  CourseAppendix
 * @export
 * @interface DeleteCourseAppendixCommand
 */
export interface DeleteCourseAppendixCommand {
  /**
   *
   * @type {number}
   * @memberof DeleteCourseAppendixCommand
   */
  id: number;
}
/**
 * 刪除  Course
 * @export
 * @interface DeleteCourseCommand
 */
export interface DeleteCourseCommand {
  /**
   *
   * @type {number}
   * @memberof DeleteCourseCommand
   */
  id: number;
}
/**
 * 刪除  CourseManagementAppendix
 * @export
 * @interface DeleteCourseManagementAppendixCommand
 */
export interface DeleteCourseManagementAppendixCommand {
  /**
   *
   * @type {number}
   * @memberof DeleteCourseManagementAppendixCommand
   */
  id: number;
}
/**
 * 刪除  CourseManagement
 * @export
 * @interface DeleteCourseManagementCommand
 */
export interface DeleteCourseManagementCommand {
  /**
   *
   * @type {number}
   * @memberof DeleteCourseManagementCommand
   */
  id: number;
}
/**
 * 刪除  CourseManagementFilter
 * @export
 * @interface DeleteCourseManagementFilterCommand
 */
export interface DeleteCourseManagementFilterCommand {
  /**
   *
   * @type {number}
   * @memberof DeleteCourseManagementFilterCommand
   */
  id: number;
}
/**
 * 刪除  CourseManagementFilterCourse
 * @export
 * @interface DeleteCourseManagementFilterCourseCommand
 */
export interface DeleteCourseManagementFilterCourseCommand {
  /**
   *
   * @type {number}
   * @memberof DeleteCourseManagementFilterCourseCommand
   */
  id: number;
}
/**
 * 刪除  CourseManagementFilterPastoral
 * @export
 * @interface DeleteCourseManagementFilterPastoralCommand
 */
export interface DeleteCourseManagementFilterPastoralCommand {
  /**
   *
   * @type {number}
   * @memberof DeleteCourseManagementFilterPastoralCommand
   */
  id: number;
}
/**
 * 刪除  CourseManagementFilterResp
 * @export
 * @interface DeleteCourseManagementFilterRespCommand
 */
export interface DeleteCourseManagementFilterRespCommand {
  /**
   *
   * @type {number}
   * @memberof DeleteCourseManagementFilterRespCommand
   */
  id: number;
}
/**
 * 刪除  CourseManagementFilterUser
 * @export
 * @interface DeleteCourseManagementFilterUserCommand
 */
export interface DeleteCourseManagementFilterUserCommand {
  /**
   *
   * @type {number}
   * @memberof DeleteCourseManagementFilterUserCommand
   */
  id: number;
}
/**
 * 刪除  CourseManagementType
 * @export
 * @interface DeleteCourseManagementTypeCommand
 */
export interface DeleteCourseManagementTypeCommand {
  /**
   *
   * @type {number}
   * @memberof DeleteCourseManagementTypeCommand
   */
  id: number;
}
/**
 * 刪除  CourseOrganization
 * @export
 * @interface DeleteCourseOrganizationCommand
 */
export interface DeleteCourseOrganizationCommand {
  /**
   *
   * @type {number}
   * @memberof DeleteCourseOrganizationCommand
   */
  id: number;
}
/**
 * 刪除  CoursePrice
 * @export
 * @interface DeleteCoursePriceCommand
 */
export interface DeleteCoursePriceCommand {
  /**
   *
   * @type {number}
   * @memberof DeleteCoursePriceCommand
   */
  id: number;
}
/**
 * 刪除  CourseTimeSchedule
 * @export
 * @interface DeleteCourseTimeScheduleCommand
 */
export interface DeleteCourseTimeScheduleCommand {
  /**
   *
   * @type {number}
   * @memberof DeleteCourseTimeScheduleCommand
   */
  id: number;
}
/**
 * 刪除  CourseTimeScheduleTeacher
 * @export
 * @interface DeleteCourseTimeScheduleTeacherCommand
 */
export interface DeleteCourseTimeScheduleTeacherCommand {
  /**
   *
   * @type {number}
   * @memberof DeleteCourseTimeScheduleTeacherCommand
   */
  id: number;
}
/**
 * 刪除  CourseTimeScheduleUser
 * @export
 * @interface DeleteCourseTimeScheduleUserCommand
 */
export interface DeleteCourseTimeScheduleUserCommand {
  /**
   *
   * @type {number}
   * @memberof DeleteCourseTimeScheduleUserCommand
   */
  id: number;
}
/**
 * 刪除  Dept
 * @export
 * @interface DeleteDeptCommand
 */
export interface DeleteDeptCommand {
  /**
   *
   * @type {number}
   * @memberof DeleteDeptCommand
   */
  id: number;
}
/**
 * 刪除  MeetingPoint
 * @export
 * @interface DeleteMeetingPointCommand
 */
export interface DeleteMeetingPointCommand {
  /**
   *
   * @type {number}
   * @memberof DeleteMeetingPointCommand
   */
  id: number;
}
/**
 * 刪除  MessageInformation
 * @export
 * @interface DeleteMessageInformationCommand
 */
export interface DeleteMessageInformationCommand {
  /**
   *
   * @type {number}
   * @memberof DeleteMessageInformationCommand
   */
  id: number;
}
/**
 * 刪除  MessageInformationUser
 * @export
 * @interface DeleteMessageInformationUserCommand
 */
export interface DeleteMessageInformationUserCommand {
  /**
   *
   * @type {number}
   * @memberof DeleteMessageInformationUserCommand
   */
  id: number;
}
/**
 * 刪除  Ministry
 * @export
 * @interface DeleteMinistryCommand
 */
export interface DeleteMinistryCommand {
  /**
   *
   * @type {number}
   * @memberof DeleteMinistryCommand
   */
  id: number;
}
/**
 * 刪除  MinistryDef
 * @export
 * @interface DeleteMinistryDefCommand
 */
export interface DeleteMinistryDefCommand {
  /**
   *
   * @type {number}
   * @memberof DeleteMinistryDefCommand
   */
  id: number;
}
/**
 * 刪除  MinistryMeeting
 * @export
 * @interface DeleteMinistryMeetingCommand
 */
export interface DeleteMinistryMeetingCommand {
  /**
   *
   * @type {number}
   * @memberof DeleteMinistryMeetingCommand
   */
  id: number;
}
/**
 * 刪除  MinistryMeetingUser
 * @export
 * @interface DeleteMinistryMeetingUserCommand
 */
export interface DeleteMinistryMeetingUserCommand {
  /**
   *
   * @type {number}
   * @memberof DeleteMinistryMeetingUserCommand
   */
  id: number;
}
/**
 * 刪除  MinistryResp
 * @export
 * @interface DeleteMinistryRespCommand
 */
export interface DeleteMinistryRespCommand {
  /**
   *
   * @type {number}
   * @memberof DeleteMinistryRespCommand
   */
  id: number;
}
/**
 * 刪除  MinistryRespUser
 * @export
 * @interface DeleteMinistryRespUserCommand
 */
export interface DeleteMinistryRespUserCommand {
  /**
   *
   * @type {number}
   * @memberof DeleteMinistryRespUserCommand
   */
  id: number;
}
/**
 * 刪除  MinistrySchedule
 * @export
 * @interface DeleteMinistryScheduleCommand
 */
export interface DeleteMinistryScheduleCommand {
  /**
   *
   * @type {number}
   * @memberof DeleteMinistryScheduleCommand
   */
  id: number;
  /**
   *
   * @type {Array<DeleteMinistryScheduleDetailCommand>}
   * @memberof DeleteMinistryScheduleCommand
   */
  ministryScheduleDetails: Array<DeleteMinistryScheduleDetailCommand>;
}
/**
 * 刪除  MinistryScheduleDetail
 * @export
 * @interface DeleteMinistryScheduleDetailCommand
 */
export interface DeleteMinistryScheduleDetailCommand {
  /**
   *
   * @type {number}
   * @memberof DeleteMinistryScheduleDetailCommand
   */
  id: number;
}
/**
 * 刪除  Organization
 * @export
 * @interface DeleteOrganizationCommand
 */
export interface DeleteOrganizationCommand {
  /**
   *
   * @type {number}
   * @memberof DeleteOrganizationCommand
   */
  id: number;
}
/**
 * 刪除  Pastoral
 * @export
 * @interface DeletePastoralCommand
 */
export interface DeletePastoralCommand {
  /**
   *
   * @type {number}
   * @memberof DeletePastoralCommand
   */
  id: number;
}
/**
 * 刪除  PastoralMeeting
 * @export
 * @interface DeletePastoralMeetingCommand
 */
export interface DeletePastoralMeetingCommand {
  /**
   *
   * @type {number}
   * @memberof DeletePastoralMeetingCommand
   */
  id: number;
}
/**
 * 刪除  PastoralMeetingUser
 * @export
 * @interface DeletePastoralMeetingUserCommand
 */
export interface DeletePastoralMeetingUserCommand {
  /**
   *
   * @type {number}
   * @memberof DeletePastoralMeetingUserCommand
   */
  id: number;
}
/**
 * 刪除  Privilege
 * @export
 * @interface DeletePrivilegeCommand
 */
export interface DeletePrivilegeCommand {
  /**
   *
   * @type {string}
   * @memberof DeletePrivilegeCommand
   */
  id: string;
}
/**
 * 刪除  QrCode
 * @export
 * @interface DeleteQrCodeCommand
 */
export interface DeleteQrCodeCommand {
  /**
   *
   * @type {number}
   * @memberof DeleteQrCodeCommand
   */
  id: number;
}
/**
 * 刪除  Questionnaire
 * @export
 * @interface DeleteQuestionnaireCommand
 */
export interface DeleteQuestionnaireCommand {
  /**
   *
   * @type {number}
   * @memberof DeleteQuestionnaireCommand
   */
  id: number;
}
/**
 * 刪除  QuestionnaireDetail
 * @export
 * @interface DeleteQuestionnaireDetailCommand
 */
export interface DeleteQuestionnaireDetailCommand {
  /**
   *
   * @type {number}
   * @memberof DeleteQuestionnaireDetailCommand
   */
  id: number;
}
/**
 * 刪除  Role
 * @export
 * @interface DeleteRoleCommand
 */
export interface DeleteRoleCommand {
  /**
   *
   * @type {string}
   * @memberof DeleteRoleCommand
   */
  id: string;
}
/**
 * 刪除  RolePrivilegeMapping
 * @export
 * @interface DeleteRolePrivilegeMappingCommand
 */
export interface DeleteRolePrivilegeMappingCommand {
  /**
   *
   * @type {string}
   * @memberof DeleteRolePrivilegeMappingCommand
   */
  id: string;
}
/**
 * 刪除  RoleUserMapping
 * @export
 * @interface DeleteRoleUserMappingCommand
 */
export interface DeleteRoleUserMappingCommand {
  /**
   *
   * @type {string}
   * @memberof DeleteRoleUserMappingCommand
   */
  id: string;
}
/**
 * 刪除  ShoppingCart
 * @export
 * @interface DeleteShoppingCartCommand
 */
export interface DeleteShoppingCartCommand {
  /**
   *
   * @type {number}
   * @memberof DeleteShoppingCartCommand
   */
  id: number;
}
/**
 * 刪除  ShoppingOrder
 * @export
 * @interface DeleteShoppingOrderCommand
 */
export interface DeleteShoppingOrderCommand {
  /**
   *
   * @type {number}
   * @memberof DeleteShoppingOrderCommand
   */
  id: number;
}
/**
 * 刪除  ShoppingOrderDetail
 * @export
 * @interface DeleteShoppingOrderDetailCommand
 */
export interface DeleteShoppingOrderDetailCommand {
  /**
   *
   * @type {number}
   * @memberof DeleteShoppingOrderDetailCommand
   */
  id: number;
}
/**
 * 刪除  ShoppingTrack
 * @export
 * @interface DeleteShoppingTrackCommand
 */
export interface DeleteShoppingTrackCommand {
  /**
   *
   * @type {number}
   * @memberof DeleteShoppingTrackCommand
   */
  id: number;
}
/**
 * 刪除  UserCourse
 * @export
 * @interface DeleteUserCourseCommand
 */
export interface DeleteUserCourseCommand {
  /**
   *
   * @type {number}
   * @memberof DeleteUserCourseCommand
   */
  id: number;
}
/**
 * 刪除  UserFamily
 * @export
 * @interface DeleteUserFamilyCommand
 */
export interface DeleteUserFamilyCommand {
  /**
   *
   * @type {number}
   * @memberof DeleteUserFamilyCommand
   */
  id: number;
}
/**
 * 刪除  UserPastoralCare
 * @export
 * @interface DeleteUserPastoralCareCommand
 */
export interface DeleteUserPastoralCareCommand {
  /**
   *
   * @type {number}
   * @memberof DeleteUserPastoralCareCommand
   */
  id: number;
}
/**
 * 刪除  UserQuestionnaire
 * @export
 * @interface DeleteUserQuestionnaireCommand
 */
export interface DeleteUserQuestionnaireCommand {
  /**
   *
   * @type {number}
   * @memberof DeleteUserQuestionnaireCommand
   */
  id: number;
}
/**
 * 刪除  UserSociety
 * @export
 * @interface DeleteUserSocietyCommand
 */
export interface DeleteUserSocietyCommand {
  /**
   *
   * @type {number}
   * @memberof DeleteUserSocietyCommand
   */
  id: number;
}
/**
 *
 * @export
 * @interface Dept
 */
export interface Dept {
  /**
   * Id
   * @type {number}
   * @memberof Dept
   */
  id: number;
  /**
   * 舊的Id
   * @type {number}
   * @memberof Dept
   */
  upperDeptId: number;
  /**
   * 部門名稱
   * @type {string}
   * @memberof Dept
   */
  name: string;
  /**
   * 部門主管職稱
   * @type {string}
   * @memberof Dept
   */
  title: string;
  /**
   *
   * @type {string}
   * @memberof Dept
   */
  statusCd: string;
  /**
   * ApiLog HandledId
   * @type {string}
   * @memberof Dept
   */
  handledId?: string | null;
  /**
   * 建立日期
   * @type {string}
   * @memberof Dept
   */
  dateCreate?: string;
  /**
   * 建立人員
   * @type {string}
   * @memberof Dept
   */
  userCreate?: string | null;
  /**
   * 最後修改日期
   * @type {string}
   * @memberof Dept
   */
  dateUpdate?: string | null;
  /**
   * 最後修改人員
   * @type {string}
   * @memberof Dept
   */
  userUpdate?: string | null;
  /**
   *
   * @type {string}
   * @memberof Dept
   */
  rowVersion?: string | null;
}
/**
 *
 * @export
 * @interface DeptBase
 */
export interface DeptBase {
  /**
   * Id
   * @type {number}
   * @memberof DeptBase
   */
  id: number;
  /**
   * 舊的Id
   * @type {number}
   * @memberof DeptBase
   */
  upperDeptId: number;
  /**
   * 部門名稱
   * @type {string}
   * @memberof DeptBase
   */
  name: string;
  /**
   * 部門主管職稱
   * @type {string}
   * @memberof DeptBase
   */
  title: string;
  /**
   *
   * @type {string}
   * @memberof DeptBase
   */
  comment: string;
  /**
   *
   * @type {string}
   * @memberof DeptBase
   */
  dateCreate?: string | null;
  /**
   *
   * @type {string}
   * @memberof DeptBase
   */
  userCreate?: string | null;
  /**
   *
   * @type {string}
   * @memberof DeptBase
   */
  dateUpdate?: string | null;
  /**
   *
   * @type {string}
   * @memberof DeptBase
   */
  userUpdate?: string | null;
}
/**
 * Dept
 * @export
 * @interface DeptView
 */
export interface DeptView {
  /**
   *
   * @type {string}
   * @memberof DeptView
   */
  handledId?: string | null;
  /**
   * Id
   * @type {number}
   * @memberof DeptView
   */
  id: number;
  /**
   * 舊的Id
   * @type {number}
   * @memberof DeptView
   */
  upperDeptId: number;
  /**
   * 部門名稱
   * @type {string}
   * @memberof DeptView
   */
  name: string;
  /**
   * 部門主管職稱
   * @type {string}
   * @memberof DeptView
   */
  title: string;
  /**
   *
   * @type {string}
   * @memberof DeptView
   */
  comment: string;
  /**
   *
   * @type {string}
   * @memberof DeptView
   */
  dateCreate?: string | null;
  /**
   *
   * @type {string}
   * @memberof DeptView
   */
  userCreate?: string | null;
  /**
   *
   * @type {string}
   * @memberof DeptView
   */
  dateUpdate?: string | null;
  /**
   *
   * @type {string}
   * @memberof DeptView
   */
  userUpdate?: string | null;
}
/**
 *
 * @export
 * @interface DeptViewApiResponse
 */
export interface DeptViewApiResponse {
  /**
   *
   * @type {string}
   * @memberof DeptViewApiResponse
   */
  handledId?: string | null;
  /**
   * http-200  0000: 代表處理成功，其餘一律為失敗  http-4xx  Vxxxx: 資料驗證  Bxxxx: 詳見 message 欄位說明
   * @type {string}
   * @memberof DeptViewApiResponse
   */
  code: string;
  /**
   * 回傳訊息
   * @type {string}
   * @memberof DeptViewApiResponse
   */
  message: string;
  /**
   * 錯誤詳細資訊
   * @type {any}
   * @memberof DeptViewApiResponse
   */
  detailMessage: any;
  /**
   *
   * @type {DeptView}
   * @memberof DeptViewApiResponse
   */
  data: DeptView;
  /**
   * 交易時間
   * @type {string}
   * @memberof DeptViewApiResponse
   */
  txnTime: string;
}
/**
 *
 * @export
 * @interface DeptViewListApiResponse
 */
export interface DeptViewListApiResponse {
  /**
   *
   * @type {string}
   * @memberof DeptViewListApiResponse
   */
  handledId?: string | null;
  /**
   * http-200  0000: 代表處理成功，其餘一律為失敗  http-4xx  Vxxxx: 資料驗證  Bxxxx: 詳見 message 欄位說明
   * @type {string}
   * @memberof DeptViewListApiResponse
   */
  code: string;
  /**
   * 回傳訊息
   * @type {string}
   * @memberof DeptViewListApiResponse
   */
  message: string;
  /**
   * 錯誤詳細資訊
   * @type {any}
   * @memberof DeptViewListApiResponse
   */
  detailMessage: any;
  /**
   * 回傳資料
   * @type {Array<DeptView>}
   * @memberof DeptViewListApiResponse
   */
  data: Array<DeptView>;
  /**
   * 交易時間
   * @type {string}
   * @memberof DeptViewListApiResponse
   */
  txnTime: string;
}
/**
 *
 * @export
 * @interface DeptViewPage
 */
export interface DeptViewPage {
  /**
   *
   * @type {number}
   * @memberof DeptViewPage
   */
  totalCount: number;
  /**
   *
   * @type {number}
   * @memberof DeptViewPage
   */
  pageCount: number;
  /**
   *
   * @type {number}
   * @memberof DeptViewPage
   */
  currentPage: number;
  /**
   *
   * @type {number}
   * @memberof DeptViewPage
   */
  size: number;
  /**
   *
   * @type {Array<DeptView>}
   * @memberof DeptViewPage
   */
  records: Array<DeptView>;
  /**
   *
   * @type {number}
   * @memberof DeptViewPage
   */
  pageSize: number;
  /**
   *
   * @type {boolean}
   * @memberof DeptViewPage
   */
  hasPreviousPages: boolean;
  /**
   *
   * @type {boolean}
   * @memberof DeptViewPage
   */
  hasNextPages: boolean;
  /**
   *
   * @type {number}
   * @memberof DeptViewPage
   */
  previousLastPageNo: number;
  /**
   *
   * @type {number}
   * @memberof DeptViewPage
   */
  nextStartPageNo: number;
  /**
   *
   * @type {Array<number>}
   * @memberof DeptViewPage
   */
  navigationPages: Array<number>;
}
/**
 *
 * @export
 * @interface DeptViewPageApiResponse
 */
export interface DeptViewPageApiResponse {
  /**
   *
   * @type {string}
   * @memberof DeptViewPageApiResponse
   */
  handledId?: string | null;
  /**
   * http-200  0000: 代表處理成功，其餘一律為失敗  http-4xx  Vxxxx: 資料驗證  Bxxxx: 詳見 message 欄位說明
   * @type {string}
   * @memberof DeptViewPageApiResponse
   */
  code: string;
  /**
   * 回傳訊息
   * @type {string}
   * @memberof DeptViewPageApiResponse
   */
  message: string;
  /**
   * 錯誤詳細資訊
   * @type {any}
   * @memberof DeptViewPageApiResponse
   */
  detailMessage: any;
  /**
   *
   * @type {DeptViewPage}
   * @memberof DeptViewPageApiResponse
   */
  data: DeptViewPage;
  /**
   * 交易時間
   * @type {string}
   * @memberof DeptViewPageApiResponse
   */
  txnTime: string;
}
/**
 *
 * @export
 * @interface EmailAccountResponse
 */
export interface EmailAccountResponse {
  /**
   * 帳號
   * @type {string}
   * @memberof EmailAccountResponse
   */
  account: string;
  /**
   * Email
   * @type {string}
   * @memberof EmailAccountResponse
   */
  email: string;
  /**
   * [User].[Name]
   * @type {string}
   * @memberof EmailAccountResponse
   */
  name: string;
}
/**
 *
 * @export
 * @interface EmailAccountResponseApiResponse
 */
export interface EmailAccountResponseApiResponse {
  /**
   *
   * @type {string}
   * @memberof EmailAccountResponseApiResponse
   */
  handledId?: string | null;
  /**
   * http-200  0000: 代表處理成功，其餘一律為失敗  http-4xx  Vxxxx: 資料驗證  Bxxxx: 詳見 message 欄位說明
   * @type {string}
   * @memberof EmailAccountResponseApiResponse
   */
  code: string;
  /**
   * 回傳訊息
   * @type {string}
   * @memberof EmailAccountResponseApiResponse
   */
  message: string;
  /**
   * 錯誤詳細資訊
   * @type {any}
   * @memberof EmailAccountResponseApiResponse
   */
  detailMessage: any;
  /**
   *
   * @type {EmailAccountResponse}
   * @memberof EmailAccountResponseApiResponse
   */
  data: EmailAccountResponse;
  /**
   * 交易時間
   * @type {string}
   * @memberof EmailAccountResponseApiResponse
   */
  txnTime: string;
}
/**
 *
 * @export
 * @interface EmailPasswordResponse
 */
export interface EmailPasswordResponse {
  /**
   * 帳號
   * @type {string}
   * @memberof EmailPasswordResponse
   */
  account: string;
  /**
   * Email
   * @type {string}
   * @memberof EmailPasswordResponse
   */
  email: string;
  /**
   * [User].[Name]
   * @type {string}
   * @memberof EmailPasswordResponse
   */
  name: string;
  /**
   *
   * @type {string}
   * @memberof EmailPasswordResponse
   */
  password: string;
}
/**
 *
 * @export
 * @interface EmailPasswordResponseApiResponse
 */
export interface EmailPasswordResponseApiResponse {
  /**
   *
   * @type {string}
   * @memberof EmailPasswordResponseApiResponse
   */
  handledId?: string | null;
  /**
   * http-200  0000: 代表處理成功，其餘一律為失敗  http-4xx  Vxxxx: 資料驗證  Bxxxx: 詳見 message 欄位說明
   * @type {string}
   * @memberof EmailPasswordResponseApiResponse
   */
  code: string;
  /**
   * 回傳訊息
   * @type {string}
   * @memberof EmailPasswordResponseApiResponse
   */
  message: string;
  /**
   * 錯誤詳細資訊
   * @type {any}
   * @memberof EmailPasswordResponseApiResponse
   */
  detailMessage: any;
  /**
   *
   * @type {EmailPasswordResponse}
   * @memberof EmailPasswordResponseApiResponse
   */
  data: EmailPasswordResponse;
  /**
   * 交易時間
   * @type {string}
   * @memberof EmailPasswordResponseApiResponse
   */
  txnTime: string;
}
/**
 *
 * @export
 * @interface EntityBase
 */
export interface EntityBase {
  /**
   * ApiLog HandledId
   * @type {string}
   * @memberof EntityBase
   */
  handledId?: string | null;
  /**
   * 建立日期
   * @type {string}
   * @memberof EntityBase
   */
  dateCreate?: string;
  /**
   * 建立人員
   * @type {string}
   * @memberof EntityBase
   */
  userCreate?: string | null;
  /**
   * 最後修改日期
   * @type {string}
   * @memberof EntityBase
   */
  dateUpdate?: string | null;
  /**
   * 最後修改人員
   * @type {string}
   * @memberof EntityBase
   */
  userUpdate?: string | null;
  /**
   *
   * @type {string}
   * @memberof EntityBase
   */
  rowVersion?: string | null;
}
/**
 * AP 錯誤紀錄
 * @export
 * @interface ExceptionLog
 */
export interface ExceptionLog {
  /**
   *
   * @type {number}
   * @memberof ExceptionLog
   */
  id: number;
  /**
   * MachineName
   * @type {string}
   * @memberof ExceptionLog
   */
  machineName: string;
  /**
   * Message
   * @type {string}
   * @memberof ExceptionLog
   */
  message: string;
  /**
   * Source
   * @type {string}
   * @memberof ExceptionLog
   */
  source: string;
  /**
   * StackTrace
   * @type {string}
   * @memberof ExceptionLog
   */
  stackTrace: string;
  /**
   * 額外資訊
   * @type {string}
   * @memberof ExceptionLog
   */
  extraData: string;
  /**
   * ApiLog HandledId
   * @type {string}
   * @memberof ExceptionLog
   */
  handledId?: string | null;
  /**
   * 建立日期
   * @type {string}
   * @memberof ExceptionLog
   */
  dateCreate?: string;
  /**
   * 建立人員
   * @type {string}
   * @memberof ExceptionLog
   */
  userCreate?: string | null;
  /**
   * 最後修改日期
   * @type {string}
   * @memberof ExceptionLog
   */
  dateUpdate?: string | null;
  /**
   * 最後修改人員
   * @type {string}
   * @memberof ExceptionLog
   */
  userUpdate?: string | null;
  /**
   *
   * @type {string}
   * @memberof ExceptionLog
   */
  rowVersion?: string | null;
}
/**
 * 查詢  CourseAppendix 所有資料
 * @export
 * @interface FetchAllCourseAppendixRequest
 */
export interface FetchAllCourseAppendixRequest {
  /**
   *
   * @type {number}
   * @memberof FetchAllCourseAppendixRequest
   */
  limit?: number | null;
}
/**
 * 查詢  CourseManagementFilterCourse 所有資料
 * @export
 * @interface FetchAllCourseManagementFilterCourseRequest
 */
export interface FetchAllCourseManagementFilterCourseRequest {
  /**
   *
   * @type {number}
   * @memberof FetchAllCourseManagementFilterCourseRequest
   */
  limit?: number | null;
}
/**
 * 查詢  CourseManagementFilterPastoral 所有資料
 * @export
 * @interface FetchAllCourseManagementFilterPastoralRequest
 */
export interface FetchAllCourseManagementFilterPastoralRequest {
  /**
   *
   * @type {number}
   * @memberof FetchAllCourseManagementFilterPastoralRequest
   */
  limit?: number | null;
}
/**
 * 查詢  CourseManagementFilter 所有資料
 * @export
 * @interface FetchAllCourseManagementFilterRequest
 */
export interface FetchAllCourseManagementFilterRequest {
  /**
   *
   * @type {number}
   * @memberof FetchAllCourseManagementFilterRequest
   */
  limit?: number | null;
}
/**
 * 查詢  CourseManagementFilterResp 所有資料
 * @export
 * @interface FetchAllCourseManagementFilterRespRequest
 */
export interface FetchAllCourseManagementFilterRespRequest {
  /**
   *
   * @type {number}
   * @memberof FetchAllCourseManagementFilterRespRequest
   */
  limit?: number | null;
}
/**
 * 查詢  CourseManagementFilterUser 所有資料
 * @export
 * @interface FetchAllCourseManagementFilterUserRequest
 */
export interface FetchAllCourseManagementFilterUserRequest {
  /**
   *
   * @type {number}
   * @memberof FetchAllCourseManagementFilterUserRequest
   */
  limit?: number | null;
}
/**
 * 查詢  CourseManagement 所有資料
 * @export
 * @interface FetchAllCourseManagementRequest
 */
export interface FetchAllCourseManagementRequest {
  /**
   *
   * @type {number}
   * @memberof FetchAllCourseManagementRequest
   */
  limit?: number | null;
}
/**
 * 查詢  CourseManagementType 所有資料
 * @export
 * @interface FetchAllCourseManagementTypeRequest
 */
export interface FetchAllCourseManagementTypeRequest {
  /**
   *
   * @type {number}
   * @memberof FetchAllCourseManagementTypeRequest
   */
  limit?: number | null;
}
/**
 * 查詢  CourseOrganization 所有資料
 * @export
 * @interface FetchAllCourseOrganizationRequest
 */
export interface FetchAllCourseOrganizationRequest {
  /**
   *
   * @type {number}
   * @memberof FetchAllCourseOrganizationRequest
   */
  limit?: number | null;
}
/**
 * 查詢  CoursePrice 所有資料
 * @export
 * @interface FetchAllCoursePriceRequest
 */
export interface FetchAllCoursePriceRequest {
  /**
   *
   * @type {number}
   * @memberof FetchAllCoursePriceRequest
   */
  limit?: number | null;
}
/**
 * 查詢  Course 所有資料
 * @export
 * @interface FetchAllCourseRequest
 */
export interface FetchAllCourseRequest {
  /**
   *
   * @type {number}
   * @memberof FetchAllCourseRequest
   */
  limit?: number | null;
}
/**
 * 查詢  CourseTimeSchedule 所有資料
 * @export
 * @interface FetchAllCourseTimeScheduleRequest
 */
export interface FetchAllCourseTimeScheduleRequest {
  /**
   *
   * @type {number}
   * @memberof FetchAllCourseTimeScheduleRequest
   */
  limit?: number | null;
}
/**
 * 查詢  CourseTimeScheduleTeacher 所有資料
 * @export
 * @interface FetchAllCourseTimeScheduleTeacherRequest
 */
export interface FetchAllCourseTimeScheduleTeacherRequest {
  /**
   *
   * @type {number}
   * @memberof FetchAllCourseTimeScheduleTeacherRequest
   */
  limit?: number | null;
}
/**
 * 查詢  CourseTimeScheduleUser 所有資料
 * @export
 * @interface FetchAllCourseTimeScheduleUserRequest
 */
export interface FetchAllCourseTimeScheduleUserRequest {
  /**
   *
   * @type {number}
   * @memberof FetchAllCourseTimeScheduleUserRequest
   */
  limit?: number | null;
}
/**
 * 查詢  Dept 所有資料
 * @export
 * @interface FetchAllDeptRequest
 */
export interface FetchAllDeptRequest {
  /**
   *
   * @type {number}
   * @memberof FetchAllDeptRequest
   */
  limit?: number | null;
}
/**
 * 查詢  MeetingPoint 所有資料
 * @export
 * @interface FetchAllMeetingPointRequest
 */
export interface FetchAllMeetingPointRequest {
  /**
   *
   * @type {number}
   * @memberof FetchAllMeetingPointRequest
   */
  limit?: number | null;
}
/**
 * 查詢  MessageInformation 所有資料
 * @export
 * @interface FetchAllMessageInformationRequest
 */
export interface FetchAllMessageInformationRequest {
  /**
   *
   * @type {number}
   * @memberof FetchAllMessageInformationRequest
   */
  limit?: number | null;
}
/**
 * 查詢  MessageInformationUser 所有資料
 * @export
 * @interface FetchAllMessageInformationUserRequest
 */
export interface FetchAllMessageInformationUserRequest {
  /**
   *
   * @type {number}
   * @memberof FetchAllMessageInformationUserRequest
   */
  limit?: number | null;
}
/**
 * 查詢  MinistryDef 所有資料
 * @export
 * @interface FetchAllMinistryDefRequest
 */
export interface FetchAllMinistryDefRequest {
  /**
   *
   * @type {number}
   * @memberof FetchAllMinistryDefRequest
   */
  limit?: number | null;
}
/**
 * 查詢  MinistryMeetingUser 所有資料
 * @export
 * @interface FetchAllMinistryMeetingUserRequest
 */
export interface FetchAllMinistryMeetingUserRequest {
  /**
   *
   * @type {number}
   * @memberof FetchAllMinistryMeetingUserRequest
   */
  limit?: number | null;
  /**
   * User.Id
   * @type {number}
   * @memberof FetchAllMinistryMeetingUserRequest
   */
  userId?: number | null;
}
/**
 * 查詢  Ministry 所有資料
 * @export
 * @interface FetchAllMinistryRequest
 */
export interface FetchAllMinistryRequest {
  /**
   *
   * @type {number}
   * @memberof FetchAllMinistryRequest
   */
  limit?: number | null;
}
/**
 * 查詢  MinistryResp 所有資料
 * @export
 * @interface FetchAllMinistryRespRequest
 */
export interface FetchAllMinistryRespRequest {
  /**
   *
   * @type {number}
   * @memberof FetchAllMinistryRespRequest
   */
  limit?: number | null;
  /**
   * 事工團.Id
   * @type {number}
   * @memberof FetchAllMinistryRespRequest
   */
  ministryId?: number | null;
}
/**
 * 查詢  MinistryRespUser 所有資料
 * @export
 * @interface FetchAllMinistryRespUserRequest
 */
export interface FetchAllMinistryRespUserRequest {
  /**
   *
   * @type {number}
   * @memberof FetchAllMinistryRespUserRequest
   */
  limit?: number | null;
}
/**
 * 查詢  MinistrySchedule 所有資料
 * @export
 * @interface FetchAllMinistryScheduleRequest
 */
export interface FetchAllMinistryScheduleRequest {
  /**
   *
   * @type {number}
   * @memberof FetchAllMinistryScheduleRequest
   */
  limit?: number | null;
}
/**
 * 查詢  Organization 所有資料
 * @export
 * @interface FetchAllOrganizationRequest
 */
export interface FetchAllOrganizationRequest {
  /**
   *
   * @type {number}
   * @memberof FetchAllOrganizationRequest
   */
  limit?: number | null;
}
/**
 * 查詢  PastoralMeeting 所有資料
 * @export
 * @interface FetchAllPastoralMeetingRequest
 */
export interface FetchAllPastoralMeetingRequest {
  /**
   *
   * @type {number}
   * @memberof FetchAllPastoralMeetingRequest
   */
  limit?: number | null;
}
/**
 * 查詢  PastoralMeetingUser 所有資料
 * @export
 * @interface FetchAllPastoralMeetingUserRequest
 */
export interface FetchAllPastoralMeetingUserRequest {
  /**
   *
   * @type {number}
   * @memberof FetchAllPastoralMeetingUserRequest
   */
  limit?: number | null;
  /**
   * User.Id
   * @type {number}
   * @memberof FetchAllPastoralMeetingUserRequest
   */
  userId?: number | null;
}
/**
 * 查詢  Pastoral 所有資料
 * @export
 * @interface FetchAllPastoralRequest
 */
export interface FetchAllPastoralRequest {
  /**
   *
   * @type {number}
   * @memberof FetchAllPastoralRequest
   */
  limit?: number | null;
}
/**
 * 查詢  Privilege 所有資料
 * @export
 * @interface FetchAllPrivilegeRequest
 */
export interface FetchAllPrivilegeRequest {
  /**
   *
   * @type {number}
   * @memberof FetchAllPrivilegeRequest
   */
  limit?: number | null;
  /**
   *
   * @type {string}
   * @memberof FetchAllPrivilegeRequest
   */
  id?: string | null;
}
/**
 * 查詢  QrCode 所有資料
 * @export
 * @interface FetchAllQrCodeRequest
 */
export interface FetchAllQrCodeRequest {
  /**
   *
   * @type {number}
   * @memberof FetchAllQrCodeRequest
   */
  limit?: number | null;
  /**
   * User.Id
   * @type {number}
   * @memberof FetchAllQrCodeRequest
   */
  userId?: number | null;
}
/**
 * 查詢  QuestionnaireDetail 所有資料
 * @export
 * @interface FetchAllQuestionnaireDetailRequest
 */
export interface FetchAllQuestionnaireDetailRequest {
  /**
   *
   * @type {number}
   * @memberof FetchAllQuestionnaireDetailRequest
   */
  limit?: number | null;
}
/**
 * 查詢  Questionnaire 所有資料
 * @export
 * @interface FetchAllQuestionnaireRequest
 */
export interface FetchAllQuestionnaireRequest {
  /**
   *
   * @type {number}
   * @memberof FetchAllQuestionnaireRequest
   */
  limit?: number | null;
}
/**
 * 查詢  RolePrivilegeMapping 所有資料
 * @export
 * @interface FetchAllRolePrivilegeMappingRequest
 */
export interface FetchAllRolePrivilegeMappingRequest {
  /**
   *
   * @type {string}
   * @memberof FetchAllRolePrivilegeMappingRequest
   */
  id?: string | null;
  /**
   * Role Id
   * @type {string}
   * @memberof FetchAllRolePrivilegeMappingRequest
   */
  roleId?: string | null;
  /**
   * Privilege Id
   * @type {string}
   * @memberof FetchAllRolePrivilegeMappingRequest
   */
  privilegeId?: string | null;
  /**
   *
   * @type {number}
   * @memberof FetchAllRolePrivilegeMappingRequest
   */
  limit?: number | null;
}
/**
 * 查詢  Role 所有資料
 * @export
 * @interface FetchAllRoleRequest
 */
export interface FetchAllRoleRequest {
  /**
   *
   * @type {number}
   * @memberof FetchAllRoleRequest
   */
  limit?: number | null;
}
/**
 * 查詢  RoleUserMapping 所有資料
 * @export
 * @interface FetchAllRoleUserMappingRequest
 */
export interface FetchAllRoleUserMappingRequest {
  /**
   *
   * @type {string}
   * @memberof FetchAllRoleUserMappingRequest
   */
  id?: string | null;
  /**
   *
   * @type {number}
   * @memberof FetchAllRoleUserMappingRequest
   */
  limit?: number | null;
}
/**
 * 查詢  ShoppingCart 所有資料
 * @export
 * @interface FetchAllShoppingCartRequest
 */
export interface FetchAllShoppingCartRequest {
  /**
   * 用戶ID
   * @type {number}
   * @memberof FetchAllShoppingCartRequest
   */
  userId?: number | null;
  /**
   * 課程ID
   * @type {number}
   * @memberof FetchAllShoppingCartRequest
   */
  courseId?: number | null;
  /**
   *
   * @type {number}
   * @memberof FetchAllShoppingCartRequest
   */
  limit?: number | null;
}
/**
 * 查詢  ShoppingOrderDetail 所有資料
 * @export
 * @interface FetchAllShoppingOrderDetailRequest
 */
export interface FetchAllShoppingOrderDetailRequest {
  /**
   *
   * @type {number}
   * @memberof FetchAllShoppingOrderDetailRequest
   */
  limit?: number | null;
}
/**
 * 查詢  ShoppingOrder 所有資料
 * @export
 * @interface FetchAllShoppingOrderRequest
 */
export interface FetchAllShoppingOrderRequest {
  /**
   *
   * @type {number}
   * @memberof FetchAllShoppingOrderRequest
   */
  limit?: number | null;
  /**
   * User.Id
   * @type {number}
   * @memberof FetchAllShoppingOrderRequest
   */
  userId?: number | null;
}
/**
 * 查詢  ShoppingTrack 所有資料
 * @export
 * @interface FetchAllShoppingTrackRequest
 */
export interface FetchAllShoppingTrackRequest {
  /**
   *
   * @type {number}
   * @memberof FetchAllShoppingTrackRequest
   */
  limit?: number | null;
  /**
   * User.Id
   * @type {number}
   * @memberof FetchAllShoppingTrackRequest
   */
  userId?: number | null;
}
/**
 * 查詢  Teacher 所有資料 透過User去串
 * @export
 * @interface FetchAllTeacherRequest
 */
export interface FetchAllTeacherRequest {
  /**
   *
   * @type {number}
   * @memberof FetchAllTeacherRequest
   */
  limit?: number | null;
  /**
   * User.Id
   * @type {number}
   * @memberof FetchAllTeacherRequest
   */
  userId?: number | null;
}
/**
 * 查詢  UserCourse 所有資料
 * @export
 * @interface FetchAllUserCourseRequest
 */
export interface FetchAllUserCourseRequest {
  /**
   *
   * @type {number}
   * @memberof FetchAllUserCourseRequest
   */
  limit?: number | null;
  /**
   * User.Id
   * @type {number}
   * @memberof FetchAllUserCourseRequest
   */
  userId?: number | null;
}
/**
 * 查詢  UserFamily 所有資料
 * @export
 * @interface FetchAllUserFamilyRequest
 */
export interface FetchAllUserFamilyRequest {
  /**
   *
   * @type {number}
   * @memberof FetchAllUserFamilyRequest
   */
  limit?: number | null;
  /**
   * User.Id
   * @type {number}
   * @memberof FetchAllUserFamilyRequest
   */
  userId?: number | null;
}
/**
 * 查詢  UserPastoralCare 所有資料
 * @export
 * @interface FetchAllUserPastoralCareRequest
 */
export interface FetchAllUserPastoralCareRequest {
  /**
   *
   * @type {number}
   * @memberof FetchAllUserPastoralCareRequest
   */
  limit?: number | null;
  /**
   * User.Id
   * @type {number}
   * @memberof FetchAllUserPastoralCareRequest
   */
  userId?: number | null;
}
/**
 * 查詢  UserQuestionnaire 所有資料
 * @export
 * @interface FetchAllUserQuestionnaireRequest
 */
export interface FetchAllUserQuestionnaireRequest {
  /**
   *
   * @type {number}
   * @memberof FetchAllUserQuestionnaireRequest
   */
  limit?: number | null;
  /**
   * User.Id
   * @type {number}
   * @memberof FetchAllUserQuestionnaireRequest
   */
  userId?: number | null;
}
/**
 * 查詢  UserSociety 所有資料
 * @export
 * @interface FetchAllUserSocietyRequest
 */
export interface FetchAllUserSocietyRequest {
  /**
   *
   * @type {number}
   * @memberof FetchAllUserSocietyRequest
   */
  limit?: number | null;
  /**
   * User.Id
   * @type {number}
   * @memberof FetchAllUserSocietyRequest
   */
  userId?: number | null;
}
/**
 *
 * @export
 * @interface FetchPastoralFlatRequest
 */
export interface FetchPastoralFlatRequest {
  /**
   *
   * @type {number}
   * @memberof FetchPastoralFlatRequest
   */
  id?: number;
}
/**
 * 尋找帳號結果
 * @export
 * @interface FindAccountResponse
 */
export interface FindAccountResponse {
  /**
   * 帳號
   * @type {string}
   * @memberof FindAccountResponse
   */
  account: string;
}
/**
 *
 * @export
 * @interface FindAccountResponseApiResponse
 */
export interface FindAccountResponseApiResponse {
  /**
   *
   * @type {string}
   * @memberof FindAccountResponseApiResponse
   */
  handledId?: string | null;
  /**
   * http-200  0000: 代表處理成功，其餘一律為失敗  http-4xx  Vxxxx: 資料驗證  Bxxxx: 詳見 message 欄位說明
   * @type {string}
   * @memberof FindAccountResponseApiResponse
   */
  code: string;
  /**
   * 回傳訊息
   * @type {string}
   * @memberof FindAccountResponseApiResponse
   */
  message: string;
  /**
   * 錯誤詳細資訊
   * @type {any}
   * @memberof FindAccountResponseApiResponse
   */
  detailMessage: any;
  /**
   *
   * @type {FindAccountResponse}
   * @memberof FindAccountResponseApiResponse
   */
  data: FindAccountResponse;
  /**
   * 交易時間
   * @type {string}
   * @memberof FindAccountResponseApiResponse
   */
  txnTime: string;
}
/**
 * 尋找帳號結果
 * @export
 * @interface FindConfigResponse
 */
export interface FindConfigResponse {
  /**
   * 對應使用元件資訊
   * @type {string}
   * @memberof FindConfigResponse
   */
  type: string;
  /**
   * 顯示資訊
   * @type {string}
   * @memberof FindConfigResponse
   */
  name: string;
  /**
   * 對應數值
   * @type {string}
   * @memberof FindConfigResponse
   */
  value: string;
}
/**
 *
 * @export
 * @interface FindConfigResponseApiResponse
 */
export interface FindConfigResponseApiResponse {
  /**
   *
   * @type {string}
   * @memberof FindConfigResponseApiResponse
   */
  handledId?: string | null;
  /**
   * http-200  0000: 代表處理成功，其餘一律為失敗  http-4xx  Vxxxx: 資料驗證  Bxxxx: 詳見 message 欄位說明
   * @type {string}
   * @memberof FindConfigResponseApiResponse
   */
  code: string;
  /**
   * 回傳訊息
   * @type {string}
   * @memberof FindConfigResponseApiResponse
   */
  message: string;
  /**
   * 錯誤詳細資訊
   * @type {any}
   * @memberof FindConfigResponseApiResponse
   */
  detailMessage: any;
  /**
   *
   * @type {FindConfigResponse}
   * @memberof FindConfigResponseApiResponse
   */
  data: FindConfigResponse;
  /**
   * 交易時間
   * @type {string}
   * @memberof FindConfigResponseApiResponse
   */
  txnTime: string;
}
/**
 *
 * @export
 * @interface Int32ApiResponse
 */
export interface Int32ApiResponse {
  /**
   *
   * @type {string}
   * @memberof Int32ApiResponse
   */
  handledId?: string | null;
  /**
   * http-200  0000: 代表處理成功，其餘一律為失敗  http-4xx  Vxxxx: 資料驗證  Bxxxx: 詳見 message 欄位說明
   * @type {string}
   * @memberof Int32ApiResponse
   */
  code: string;
  /**
   * 回傳訊息
   * @type {string}
   * @memberof Int32ApiResponse
   */
  message: string;
  /**
   * 錯誤詳細資訊
   * @type {any}
   * @memberof Int32ApiResponse
   */
  detailMessage: any;
  /**
   * 回傳資料
   * @type {number}
   * @memberof Int32ApiResponse
   */
  data: number;
  /**
   * 交易時間
   * @type {string}
   * @memberof Int32ApiResponse
   */
  txnTime: string;
}
/**
 *
 * @export
 * @interface MeetingPoint
 */
export interface MeetingPoint {
  /**
   *
   * @type {number}
   * @memberof MeetingPoint
   */
  id: number;
  /**
   * 聚會點上層Id
   * @type {number}
   * @memberof MeetingPoint
   */
  organizationId: number;
  /**
   * 聚會點名稱
   * @type {string}
   * @memberof MeetingPoint
   */
  name: string;
  /**
   * 聚會點地址
   * @type {string}
   * @memberof MeetingPoint
   */
  address: string;
  /**
   * 聚會點電話
   * @type {string}
   * @memberof MeetingPoint
   */
  phone: string;
  /**
   * 聚會點備註說明
   * @type {string}
   * @memberof MeetingPoint
   */
  memo: string;
  /**
   *
   * @type {number}
   * @memberof MeetingPoint
   */
  userId: number;
  /**
   *
   * @type {string}
   * @memberof MeetingPoint
   */
  statusCd: string;
  /**
   *
   * @type {string}
   * @memberof MeetingPoint
   */
  comment: string;
  /**
   * ApiLog HandledId
   * @type {string}
   * @memberof MeetingPoint
   */
  handledId?: string | null;
  /**
   * 建立日期
   * @type {string}
   * @memberof MeetingPoint
   */
  dateCreate?: string;
  /**
   * 建立人員
   * @type {string}
   * @memberof MeetingPoint
   */
  userCreate?: string | null;
  /**
   * 最後修改日期
   * @type {string}
   * @memberof MeetingPoint
   */
  dateUpdate?: string | null;
  /**
   * 最後修改人員
   * @type {string}
   * @memberof MeetingPoint
   */
  userUpdate?: string | null;
  /**
   *
   * @type {string}
   * @memberof MeetingPoint
   */
  rowVersion?: string | null;
}
/**
 *
 * @export
 * @interface MeetingPointBase
 */
export interface MeetingPointBase {
  /**
   * id
   * @type {number}
   * @memberof MeetingPointBase
   */
  id: number;
  /**
   * 聚會點名稱
   * @type {string}
   * @memberof MeetingPointBase
   */
  name: string;
  /**
   * id
   * @type {string}
   * @memberof MeetingPointBase
   */
  statusCd: string;
  /**
   *
   * @type {string}
   * @memberof MeetingPointBase
   */
  comment: string;
  /**
   *
   * @type {string}
   * @memberof MeetingPointBase
   */
  dateCreate?: string | null;
  /**
   *
   * @type {string}
   * @memberof MeetingPointBase
   */
  userCreate?: string | null;
  /**
   *
   * @type {string}
   * @memberof MeetingPointBase
   */
  dateUpdate?: string | null;
  /**
   *
   * @type {string}
   * @memberof MeetingPointBase
   */
  userUpdate?: string | null;
  /**
   *
   * @type {number}
   * @memberof MeetingPointBase
   */
  isActivated: number;
}
/**
 * MeetingPoint
 * @export
 * @interface MeetingPointView
 */
export interface MeetingPointView {
  /**
   *
   * @type {string}
   * @memberof MeetingPointView
   */
  handledId?: string | null;
  /**
   * id
   * @type {number}
   * @memberof MeetingPointView
   */
  id: number;
  /**
   * 聚會點名稱
   * @type {string}
   * @memberof MeetingPointView
   */
  name: string;
  /**
   * id
   * @type {string}
   * @memberof MeetingPointView
   */
  statusCd: string;
  /**
   *
   * @type {string}
   * @memberof MeetingPointView
   */
  comment: string;
  /**
   *
   * @type {string}
   * @memberof MeetingPointView
   */
  dateCreate?: string | null;
  /**
   *
   * @type {string}
   * @memberof MeetingPointView
   */
  userCreate?: string | null;
  /**
   *
   * @type {string}
   * @memberof MeetingPointView
   */
  dateUpdate?: string | null;
  /**
   *
   * @type {string}
   * @memberof MeetingPointView
   */
  userUpdate?: string | null;
  /**
   *
   * @type {number}
   * @memberof MeetingPointView
   */
  isActivated: number;
}
/**
 *
 * @export
 * @interface MeetingPointViewApiResponse
 */
export interface MeetingPointViewApiResponse {
  /**
   *
   * @type {string}
   * @memberof MeetingPointViewApiResponse
   */
  handledId?: string | null;
  /**
   * http-200  0000: 代表處理成功，其餘一律為失敗  http-4xx  Vxxxx: 資料驗證  Bxxxx: 詳見 message 欄位說明
   * @type {string}
   * @memberof MeetingPointViewApiResponse
   */
  code: string;
  /**
   * 回傳訊息
   * @type {string}
   * @memberof MeetingPointViewApiResponse
   */
  message: string;
  /**
   * 錯誤詳細資訊
   * @type {any}
   * @memberof MeetingPointViewApiResponse
   */
  detailMessage: any;
  /**
   *
   * @type {MeetingPointView}
   * @memberof MeetingPointViewApiResponse
   */
  data: MeetingPointView;
  /**
   * 交易時間
   * @type {string}
   * @memberof MeetingPointViewApiResponse
   */
  txnTime: string;
}
/**
 *
 * @export
 * @interface MeetingPointViewListApiResponse
 */
export interface MeetingPointViewListApiResponse {
  /**
   *
   * @type {string}
   * @memberof MeetingPointViewListApiResponse
   */
  handledId?: string | null;
  /**
   * http-200  0000: 代表處理成功，其餘一律為失敗  http-4xx  Vxxxx: 資料驗證  Bxxxx: 詳見 message 欄位說明
   * @type {string}
   * @memberof MeetingPointViewListApiResponse
   */
  code: string;
  /**
   * 回傳訊息
   * @type {string}
   * @memberof MeetingPointViewListApiResponse
   */
  message: string;
  /**
   * 錯誤詳細資訊
   * @type {any}
   * @memberof MeetingPointViewListApiResponse
   */
  detailMessage: any;
  /**
   * 回傳資料
   * @type {Array<MeetingPointView>}
   * @memberof MeetingPointViewListApiResponse
   */
  data: Array<MeetingPointView>;
  /**
   * 交易時間
   * @type {string}
   * @memberof MeetingPointViewListApiResponse
   */
  txnTime: string;
}
/**
 *
 * @export
 * @interface MeetingPointViewPage
 */
export interface MeetingPointViewPage {
  /**
   *
   * @type {number}
   * @memberof MeetingPointViewPage
   */
  totalCount: number;
  /**
   *
   * @type {number}
   * @memberof MeetingPointViewPage
   */
  pageCount: number;
  /**
   *
   * @type {number}
   * @memberof MeetingPointViewPage
   */
  currentPage: number;
  /**
   *
   * @type {number}
   * @memberof MeetingPointViewPage
   */
  size: number;
  /**
   *
   * @type {Array<MeetingPointView>}
   * @memberof MeetingPointViewPage
   */
  records: Array<MeetingPointView>;
  /**
   *
   * @type {number}
   * @memberof MeetingPointViewPage
   */
  pageSize: number;
  /**
   *
   * @type {boolean}
   * @memberof MeetingPointViewPage
   */
  hasPreviousPages: boolean;
  /**
   *
   * @type {boolean}
   * @memberof MeetingPointViewPage
   */
  hasNextPages: boolean;
  /**
   *
   * @type {number}
   * @memberof MeetingPointViewPage
   */
  previousLastPageNo: number;
  /**
   *
   * @type {number}
   * @memberof MeetingPointViewPage
   */
  nextStartPageNo: number;
  /**
   *
   * @type {Array<number>}
   * @memberof MeetingPointViewPage
   */
  navigationPages: Array<number>;
}
/**
 *
 * @export
 * @interface MeetingPointViewPageApiResponse
 */
export interface MeetingPointViewPageApiResponse {
  /**
   *
   * @type {string}
   * @memberof MeetingPointViewPageApiResponse
   */
  handledId?: string | null;
  /**
   * http-200  0000: 代表處理成功，其餘一律為失敗  http-4xx  Vxxxx: 資料驗證  Bxxxx: 詳見 message 欄位說明
   * @type {string}
   * @memberof MeetingPointViewPageApiResponse
   */
  code: string;
  /**
   * 回傳訊息
   * @type {string}
   * @memberof MeetingPointViewPageApiResponse
   */
  message: string;
  /**
   * 錯誤詳細資訊
   * @type {any}
   * @memberof MeetingPointViewPageApiResponse
   */
  detailMessage: any;
  /**
   *
   * @type {MeetingPointViewPage}
   * @memberof MeetingPointViewPageApiResponse
   */
  data: MeetingPointViewPage;
  /**
   * 交易時間
   * @type {string}
   * @memberof MeetingPointViewPageApiResponse
   */
  txnTime: string;
}
/**
 *
 * @export
 * @interface MessageInformation
 */
export interface MessageInformation {
  /**
   * id
   * @type {number}
   * @memberof MessageInformation
   */
  id: number;
  /**
   * Organization.Id 旌旗id
   * @type {number}
   * @memberof MessageInformation
   */
  organizationId: number;
  /**
   * MeetingPoint.Id 聚會點id
   * @type {number}
   * @memberof MessageInformation
   */
  meetingPointId: number;
  /**
   * Pastoral.Id 牧養組織id
   * @type {number}
   * @memberof MessageInformation
   */
  pastoralId: number;
  /**
   * MinistryResp.Id 牧養身分
   * @type {number}
   * @memberof MessageInformation
   */
  ministryRespId: number;
  /**
   * Ministry.Id 事工團
   * @type {number}
   * @memberof MessageInformation
   */
  ministryId: number;
  /**
   * CourseId 課程名稱 課程代碼
   * @type {number}
   * @memberof MessageInformation
   */
  courseId: number;
  /**
   * 性別 對應SystemConfigtype=GenderType顯示 namevalue存此欄位0：女姓1：男性
   * @type {string}
   * @memberof MessageInformation
   */
  genderType: string;
  /**
   * 性別 對應SystemConfigtype=BirthdayYearRange顯示 namevalue存此欄位0：1920   1：1930  2:1940  3:1950  4:1960  5:1970   6:1980  7:1990  8:2000   9:2010   10:2020
   * @type {string}
   * @memberof MessageInformation
   */
  birthdayYearRange: string;
  /**
   * 職業type=EduType顯示 namevalue存此欄位0：老師1：家管…
   * @type {string}
   * @memberof MessageInformation
   */
  professionType: string;
  /**
   * 推播訊息描述
   * @type {string}
   * @memberof MessageInformation
   */
  title: string;
  /**
   * 推播訊息內容
   * @type {string}
   * @memberof MessageInformation
   */
  descriptions: string;
  /**
   * 職業type=MessageSendType namevalue存此欄位0：尚未推播    1：已推播
   * @type {string}
   * @memberof MessageInformation
   */
  messageSendType: string;
  /**
   * 發送數量Line
   * @type {number}
   * @memberof MessageInformation
   */
  sendLineCounter: number;
  /**
   * 發送數量Email
   * @type {number}
   * @memberof MessageInformation
   */
  sendEmailCounter: number;
  /**
   * 發送數量SMS
   * @type {number}
   * @memberof MessageInformation
   */
  sendSMSCounter: number;
  /**
   * 備註
   * @type {string}
   * @memberof MessageInformation
   */
  remark: string;
  /**
   * 狀態
   * @type {string}
   * @memberof MessageInformation
   */
  statusCd: string;
  /**
   * ApiLog HandledId
   * @type {string}
   * @memberof MessageInformation
   */
  handledId?: string | null;
  /**
   * 建立日期
   * @type {string}
   * @memberof MessageInformation
   */
  dateCreate?: string;
  /**
   * 建立人員
   * @type {string}
   * @memberof MessageInformation
   */
  userCreate?: string | null;
  /**
   * 最後修改日期
   * @type {string}
   * @memberof MessageInformation
   */
  dateUpdate?: string | null;
  /**
   * 最後修改人員
   * @type {string}
   * @memberof MessageInformation
   */
  userUpdate?: string | null;
  /**
   *
   * @type {string}
   * @memberof MessageInformation
   */
  rowVersion?: string | null;
}
/**
 * 訊息管理通知
 * @export
 * @interface MessageInformationBase
 */
export interface MessageInformationBase {
  /**
   * id
   * @type {number}
   * @memberof MessageInformationBase
   */
  id: number;
  /**
   * Organization.Id 旌旗id
   * @type {number}
   * @memberof MessageInformationBase
   */
  organizationId: number;
  /**
   * MeetingPoint.Id 聚會點id
   * @type {number}
   * @memberof MessageInformationBase
   */
  meetingPointId: number;
  /**
   * Pastoral.Id 牧養組織id
   * @type {number}
   * @memberof MessageInformationBase
   */
  pastoralId: number;
  /**
   * MinistryResp.Id 牧養身分
   * @type {number}
   * @memberof MessageInformationBase
   */
  ministryRespId: number;
  /**
   * Ministry.Id 事工團
   * @type {number}
   * @memberof MessageInformationBase
   */
  ministryId: number;
  /**
   * CourseId 課程名稱 課程代碼
   * @type {number}
   * @memberof MessageInformationBase
   */
  courseId: number;
  /**
   * 性別 對應SystemConfigtype=GenderType顯示 namevalue存此欄位0：女姓1：男性
   * @type {string}
   * @memberof MessageInformationBase
   */
  genderType: string;
  /**
   * 性別 對應SystemConfigtype=BirthdayYearRange顯示 namevalue存此欄位0：1920   1：1930  2:1940  3:1950  4:1960  5:1970   6:1980  7:1990  8:2000   9:2010   10:2020
   * @type {string}
   * @memberof MessageInformationBase
   */
  birthdayYearRange: string;
  /**
   * 職業type=EduType顯示 namevalue存此欄位0：老師1：家管…
   * @type {string}
   * @memberof MessageInformationBase
   */
  professionType: string;
  /**
   * 推播訊息描述
   * @type {string}
   * @memberof MessageInformationBase
   */
  title: string;
  /**
   * 推播訊息內容
   * @type {string}
   * @memberof MessageInformationBase
   */
  descriptions: string;
  /**
   * 職業type=MessageSendType namevalue存此欄位0：尚未推播    1：已推播
   * @type {string}
   * @memberof MessageInformationBase
   */
  messageSendType: string;
  /**
   * 發送數量Line
   * @type {number}
   * @memberof MessageInformationBase
   */
  sendLineCounter: number;
  /**
   * 發送數量Email
   * @type {number}
   * @memberof MessageInformationBase
   */
  sendEmailCounter: number;
  /**
   * 發送數量SMS
   * @type {number}
   * @memberof MessageInformationBase
   */
  sendSMSCounter: number;
  /**
   * 備註
   * @type {string}
   * @memberof MessageInformationBase
   */
  remark: string;
  /**
   * 狀態
   * @type {string}
   * @memberof MessageInformationBase
   */
  statusCd: string;
}
/**
 *
 * @export
 * @interface MessageInformationUser
 */
export interface MessageInformationUser {
  /**
   * id
   * @type {number}
   * @memberof MessageInformationUser
   */
  id: number;
  /**
   * MessageInformation.Id MessageInformationid
   * @type {number}
   * @memberof MessageInformationUser
   */
  messageInformationId: number;
  /**
   * User.Id Userid
   * @type {number}
   * @memberof MessageInformationUser
   */
  userId: number;
  /**
   * User.LineId
   * @type {string}
   * @memberof MessageInformationUser
   */
  lineId: string;
  /**
   * User.Email1
   * @type {string}
   * @memberof MessageInformationUser
   */
  email: string;
  /**
   * User.CellPhone
   * @type {string}
   * @memberof MessageInformationUser
   */
  sms: string;
  /**
   * 狀態
   * @type {string}
   * @memberof MessageInformationUser
   */
  statusCd: string;
  /**
   * ApiLog HandledId
   * @type {string}
   * @memberof MessageInformationUser
   */
  handledId?: string | null;
  /**
   * 建立日期
   * @type {string}
   * @memberof MessageInformationUser
   */
  dateCreate?: string;
  /**
   * 建立人員
   * @type {string}
   * @memberof MessageInformationUser
   */
  userCreate?: string | null;
  /**
   * 最後修改日期
   * @type {string}
   * @memberof MessageInformationUser
   */
  dateUpdate?: string | null;
  /**
   * 最後修改人員
   * @type {string}
   * @memberof MessageInformationUser
   */
  userUpdate?: string | null;
  /**
   *
   * @type {string}
   * @memberof MessageInformationUser
   */
  rowVersion?: string | null;
}
/**
 * 訊息管理通知
 * @export
 * @interface MessageInformationUserBase
 */
export interface MessageInformationUserBase {
  /**
   * id
   * @type {number}
   * @memberof MessageInformationUserBase
   */
  id: number;
  /**
   * MessageInformation.Id MessageInformationid
   * @type {number}
   * @memberof MessageInformationUserBase
   */
  messageInformationId: number;
  /**
   * User.Id Userid
   * @type {number}
   * @memberof MessageInformationUserBase
   */
  userId: number;
  /**
   * User.LineId
   * @type {string}
   * @memberof MessageInformationUserBase
   */
  lineId: string;
  /**
   * User.Email1
   * @type {string}
   * @memberof MessageInformationUserBase
   */
  email: string;
  /**
   * User.CellPhone
   * @type {string}
   * @memberof MessageInformationUserBase
   */
  sms: string;
  /**
   * 狀態
   * @type {string}
   * @memberof MessageInformationUserBase
   */
  statusCd: string;
}
/**
 * MessageInformationUser
 * @export
 * @interface MessageInformationUserView
 */
export interface MessageInformationUserView {
  /**
   *
   * @type {string}
   * @memberof MessageInformationUserView
   */
  handledId?: string | null;
  /**
   *
   * @type {string}
   * @memberof MessageInformationUserView
   */
  dateCreate?: string;
  /**
   *
   * @type {string}
   * @memberof MessageInformationUserView
   */
  userCreate?: string | null;
  /**
   *
   * @type {string}
   * @memberof MessageInformationUserView
   */
  dateUpdate?: string | null;
  /**
   *
   * @type {string}
   * @memberof MessageInformationUserView
   */
  userUpdate?: string | null;
  /**
   * id
   * @type {number}
   * @memberof MessageInformationUserView
   */
  id: number;
  /**
   * MessageInformation.Id MessageInformationid
   * @type {number}
   * @memberof MessageInformationUserView
   */
  messageInformationId: number;
  /**
   * User.Id Userid
   * @type {number}
   * @memberof MessageInformationUserView
   */
  userId: number;
  /**
   * User.LineId
   * @type {string}
   * @memberof MessageInformationUserView
   */
  lineId: string;
  /**
   * User.Email1
   * @type {string}
   * @memberof MessageInformationUserView
   */
  email: string;
  /**
   * User.CellPhone
   * @type {string}
   * @memberof MessageInformationUserView
   */
  sms: string;
  /**
   * 狀態
   * @type {string}
   * @memberof MessageInformationUserView
   */
  statusCd: string;
}
/**
 *
 * @export
 * @interface MessageInformationUserViewApiResponse
 */
export interface MessageInformationUserViewApiResponse {
  /**
   *
   * @type {string}
   * @memberof MessageInformationUserViewApiResponse
   */
  handledId?: string | null;
  /**
   * http-200  0000: 代表處理成功，其餘一律為失敗  http-4xx  Vxxxx: 資料驗證  Bxxxx: 詳見 message 欄位說明
   * @type {string}
   * @memberof MessageInformationUserViewApiResponse
   */
  code: string;
  /**
   * 回傳訊息
   * @type {string}
   * @memberof MessageInformationUserViewApiResponse
   */
  message: string;
  /**
   * 錯誤詳細資訊
   * @type {any}
   * @memberof MessageInformationUserViewApiResponse
   */
  detailMessage: any;
  /**
   *
   * @type {MessageInformationUserView}
   * @memberof MessageInformationUserViewApiResponse
   */
  data: MessageInformationUserView;
  /**
   * 交易時間
   * @type {string}
   * @memberof MessageInformationUserViewApiResponse
   */
  txnTime: string;
}
/**
 *
 * @export
 * @interface MessageInformationUserViewListApiResponse
 */
export interface MessageInformationUserViewListApiResponse {
  /**
   *
   * @type {string}
   * @memberof MessageInformationUserViewListApiResponse
   */
  handledId?: string | null;
  /**
   * http-200  0000: 代表處理成功，其餘一律為失敗  http-4xx  Vxxxx: 資料驗證  Bxxxx: 詳見 message 欄位說明
   * @type {string}
   * @memberof MessageInformationUserViewListApiResponse
   */
  code: string;
  /**
   * 回傳訊息
   * @type {string}
   * @memberof MessageInformationUserViewListApiResponse
   */
  message: string;
  /**
   * 錯誤詳細資訊
   * @type {any}
   * @memberof MessageInformationUserViewListApiResponse
   */
  detailMessage: any;
  /**
   * 回傳資料
   * @type {Array<MessageInformationUserView>}
   * @memberof MessageInformationUserViewListApiResponse
   */
  data: Array<MessageInformationUserView>;
  /**
   * 交易時間
   * @type {string}
   * @memberof MessageInformationUserViewListApiResponse
   */
  txnTime: string;
}
/**
 *
 * @export
 * @interface MessageInformationUserViewPage
 */
export interface MessageInformationUserViewPage {
  /**
   *
   * @type {number}
   * @memberof MessageInformationUserViewPage
   */
  totalCount: number;
  /**
   *
   * @type {number}
   * @memberof MessageInformationUserViewPage
   */
  pageCount: number;
  /**
   *
   * @type {number}
   * @memberof MessageInformationUserViewPage
   */
  currentPage: number;
  /**
   *
   * @type {number}
   * @memberof MessageInformationUserViewPage
   */
  size: number;
  /**
   *
   * @type {Array<MessageInformationUserView>}
   * @memberof MessageInformationUserViewPage
   */
  records: Array<MessageInformationUserView>;
  /**
   *
   * @type {number}
   * @memberof MessageInformationUserViewPage
   */
  pageSize: number;
  /**
   *
   * @type {boolean}
   * @memberof MessageInformationUserViewPage
   */
  hasPreviousPages: boolean;
  /**
   *
   * @type {boolean}
   * @memberof MessageInformationUserViewPage
   */
  hasNextPages: boolean;
  /**
   *
   * @type {number}
   * @memberof MessageInformationUserViewPage
   */
  previousLastPageNo: number;
  /**
   *
   * @type {number}
   * @memberof MessageInformationUserViewPage
   */
  nextStartPageNo: number;
  /**
   *
   * @type {Array<number>}
   * @memberof MessageInformationUserViewPage
   */
  navigationPages: Array<number>;
}
/**
 *
 * @export
 * @interface MessageInformationUserViewPageApiResponse
 */
export interface MessageInformationUserViewPageApiResponse {
  /**
   *
   * @type {string}
   * @memberof MessageInformationUserViewPageApiResponse
   */
  handledId?: string | null;
  /**
   * http-200  0000: 代表處理成功，其餘一律為失敗  http-4xx  Vxxxx: 資料驗證  Bxxxx: 詳見 message 欄位說明
   * @type {string}
   * @memberof MessageInformationUserViewPageApiResponse
   */
  code: string;
  /**
   * 回傳訊息
   * @type {string}
   * @memberof MessageInformationUserViewPageApiResponse
   */
  message: string;
  /**
   * 錯誤詳細資訊
   * @type {any}
   * @memberof MessageInformationUserViewPageApiResponse
   */
  detailMessage: any;
  /**
   *
   * @type {MessageInformationUserViewPage}
   * @memberof MessageInformationUserViewPageApiResponse
   */
  data: MessageInformationUserViewPage;
  /**
   * 交易時間
   * @type {string}
   * @memberof MessageInformationUserViewPageApiResponse
   */
  txnTime: string;
}
/**
 * MessageInformation
 * @export
 * @interface MessageInformationView
 */
export interface MessageInformationView {
  /**
   * 明細
   * @type {Array<MessageInformationUserView>}
   * @memberof MessageInformationView
   */
  messageInformationUserViews: Array<MessageInformationUserView>;
  /**
   *
   * @type {string}
   * @memberof MessageInformationView
   */
  handledId?: string | null;
  /**
   *
   * @type {string}
   * @memberof MessageInformationView
   */
  dateCreate?: string;
  /**
   *
   * @type {string}
   * @memberof MessageInformationView
   */
  userCreate?: string | null;
  /**
   *
   * @type {string}
   * @memberof MessageInformationView
   */
  dateUpdate?: string | null;
  /**
   *
   * @type {string}
   * @memberof MessageInformationView
   */
  userUpdate?: string | null;
  /**
   * id
   * @type {number}
   * @memberof MessageInformationView
   */
  id: number;
  /**
   * Organization.Id 旌旗id
   * @type {number}
   * @memberof MessageInformationView
   */
  organizationId: number;
  /**
   * MeetingPoint.Id 聚會點id
   * @type {number}
   * @memberof MessageInformationView
   */
  meetingPointId: number;
  /**
   * Pastoral.Id 牧養組織id
   * @type {number}
   * @memberof MessageInformationView
   */
  pastoralId: number;
  /**
   * MinistryResp.Id 牧養身分
   * @type {number}
   * @memberof MessageInformationView
   */
  ministryRespId: number;
  /**
   * Ministry.Id 事工團
   * @type {number}
   * @memberof MessageInformationView
   */
  ministryId: number;
  /**
   * CourseId 課程名稱 課程代碼
   * @type {number}
   * @memberof MessageInformationView
   */
  courseId: number;
  /**
   * 性別 對應SystemConfigtype=GenderType顯示 namevalue存此欄位0：女姓1：男性
   * @type {string}
   * @memberof MessageInformationView
   */
  genderType: string;
  /**
   * 性別 對應SystemConfigtype=BirthdayYearRange顯示 namevalue存此欄位0：1920   1：1930  2:1940  3:1950  4:1960  5:1970   6:1980  7:1990  8:2000   9:2010   10:2020
   * @type {string}
   * @memberof MessageInformationView
   */
  birthdayYearRange: string;
  /**
   * 職業type=EduType顯示 namevalue存此欄位0：老師1：家管…
   * @type {string}
   * @memberof MessageInformationView
   */
  professionType: string;
  /**
   * 推播訊息描述
   * @type {string}
   * @memberof MessageInformationView
   */
  title: string;
  /**
   * 推播訊息內容
   * @type {string}
   * @memberof MessageInformationView
   */
  descriptions: string;
  /**
   * 職業type=MessageSendType namevalue存此欄位0：尚未推播    1：已推播
   * @type {string}
   * @memberof MessageInformationView
   */
  messageSendType: string;
  /**
   * 發送數量Line
   * @type {number}
   * @memberof MessageInformationView
   */
  sendLineCounter: number;
  /**
   * 發送數量Email
   * @type {number}
   * @memberof MessageInformationView
   */
  sendEmailCounter: number;
  /**
   * 發送數量SMS
   * @type {number}
   * @memberof MessageInformationView
   */
  sendSMSCounter: number;
  /**
   * 備註
   * @type {string}
   * @memberof MessageInformationView
   */
  remark: string;
  /**
   * 狀態
   * @type {string}
   * @memberof MessageInformationView
   */
  statusCd: string;
}
/**
 *
 * @export
 * @interface MessageInformationViewApiResponse
 */
export interface MessageInformationViewApiResponse {
  /**
   *
   * @type {string}
   * @memberof MessageInformationViewApiResponse
   */
  handledId?: string | null;
  /**
   * http-200  0000: 代表處理成功，其餘一律為失敗  http-4xx  Vxxxx: 資料驗證  Bxxxx: 詳見 message 欄位說明
   * @type {string}
   * @memberof MessageInformationViewApiResponse
   */
  code: string;
  /**
   * 回傳訊息
   * @type {string}
   * @memberof MessageInformationViewApiResponse
   */
  message: string;
  /**
   * 錯誤詳細資訊
   * @type {any}
   * @memberof MessageInformationViewApiResponse
   */
  detailMessage: any;
  /**
   *
   * @type {MessageInformationView}
   * @memberof MessageInformationViewApiResponse
   */
  data: MessageInformationView;
  /**
   * 交易時間
   * @type {string}
   * @memberof MessageInformationViewApiResponse
   */
  txnTime: string;
}
/**
 *
 * @export
 * @interface MessageInformationViewListApiResponse
 */
export interface MessageInformationViewListApiResponse {
  /**
   *
   * @type {string}
   * @memberof MessageInformationViewListApiResponse
   */
  handledId?: string | null;
  /**
   * http-200  0000: 代表處理成功，其餘一律為失敗  http-4xx  Vxxxx: 資料驗證  Bxxxx: 詳見 message 欄位說明
   * @type {string}
   * @memberof MessageInformationViewListApiResponse
   */
  code: string;
  /**
   * 回傳訊息
   * @type {string}
   * @memberof MessageInformationViewListApiResponse
   */
  message: string;
  /**
   * 錯誤詳細資訊
   * @type {any}
   * @memberof MessageInformationViewListApiResponse
   */
  detailMessage: any;
  /**
   * 回傳資料
   * @type {Array<MessageInformationView>}
   * @memberof MessageInformationViewListApiResponse
   */
  data: Array<MessageInformationView>;
  /**
   * 交易時間
   * @type {string}
   * @memberof MessageInformationViewListApiResponse
   */
  txnTime: string;
}
/**
 *
 * @export
 * @interface MessageInformationViewPage
 */
export interface MessageInformationViewPage {
  /**
   *
   * @type {number}
   * @memberof MessageInformationViewPage
   */
  totalCount: number;
  /**
   *
   * @type {number}
   * @memberof MessageInformationViewPage
   */
  pageCount: number;
  /**
   *
   * @type {number}
   * @memberof MessageInformationViewPage
   */
  currentPage: number;
  /**
   *
   * @type {number}
   * @memberof MessageInformationViewPage
   */
  size: number;
  /**
   *
   * @type {Array<MessageInformationView>}
   * @memberof MessageInformationViewPage
   */
  records: Array<MessageInformationView>;
  /**
   *
   * @type {number}
   * @memberof MessageInformationViewPage
   */
  pageSize: number;
  /**
   *
   * @type {boolean}
   * @memberof MessageInformationViewPage
   */
  hasPreviousPages: boolean;
  /**
   *
   * @type {boolean}
   * @memberof MessageInformationViewPage
   */
  hasNextPages: boolean;
  /**
   *
   * @type {number}
   * @memberof MessageInformationViewPage
   */
  previousLastPageNo: number;
  /**
   *
   * @type {number}
   * @memberof MessageInformationViewPage
   */
  nextStartPageNo: number;
  /**
   *
   * @type {Array<number>}
   * @memberof MessageInformationViewPage
   */
  navigationPages: Array<number>;
}
/**
 *
 * @export
 * @interface MessageInformationViewPageApiResponse
 */
export interface MessageInformationViewPageApiResponse {
  /**
   *
   * @type {string}
   * @memberof MessageInformationViewPageApiResponse
   */
  handledId?: string | null;
  /**
   * http-200  0000: 代表處理成功，其餘一律為失敗  http-4xx  Vxxxx: 資料驗證  Bxxxx: 詳見 message 欄位說明
   * @type {string}
   * @memberof MessageInformationViewPageApiResponse
   */
  code: string;
  /**
   * 回傳訊息
   * @type {string}
   * @memberof MessageInformationViewPageApiResponse
   */
  message: string;
  /**
   * 錯誤詳細資訊
   * @type {any}
   * @memberof MessageInformationViewPageApiResponse
   */
  detailMessage: any;
  /**
   *
   * @type {MessageInformationViewPage}
   * @memberof MessageInformationViewPageApiResponse
   */
  data: MessageInformationViewPage;
  /**
   * 交易時間
   * @type {string}
   * @memberof MessageInformationViewPageApiResponse
   */
  txnTime: string;
}
/**
 *
 * @export
 * @interface Ministry
 */
export interface Ministry {
  /**
   * id
   * @type {number}
   * @memberof Ministry
   */
  id: number;
  /**
   * 事工團分類id
   * @type {number}
   * @memberof Ministry
   */
  ministryDefId: number;
  /**
   * 事工團編號
   * @type {string}
   * @memberof Ministry
   */
  ministryNo: string;
  /**
   * 事工團名稱
   * @type {string}
   * @memberof Ministry
   */
  name: string;
  /**
   * 是否兒童事工團
   * @type {string}
   * @memberof Ministry
   */
  childMinistry: string;
  /**
   * 事工團狀態
   * @type {string}
   * @memberof Ministry
   */
  ministryStatus: string;
  /**
   * 性質
   * @type {string}
   * @memberof Ministry
   */
  nature: string;
  /**
   * id
   * @type {string}
   * @memberof Ministry
   */
  statusCd: string;
  /**
   *
   * @type {string}
   * @memberof Ministry
   */
  comment: string;
  /**
   * ApiLog HandledId
   * @type {string}
   * @memberof Ministry
   */
  handledId?: string | null;
  /**
   * 建立日期
   * @type {string}
   * @memberof Ministry
   */
  dateCreate?: string;
  /**
   * 建立人員
   * @type {string}
   * @memberof Ministry
   */
  userCreate?: string | null;
  /**
   * 最後修改日期
   * @type {string}
   * @memberof Ministry
   */
  dateUpdate?: string | null;
  /**
   * 最後修改人員
   * @type {string}
   * @memberof Ministry
   */
  userUpdate?: string | null;
  /**
   *
   * @type {string}
   * @memberof Ministry
   */
  rowVersion?: string | null;
}
/**
 *
 * @export
 * @interface MinistryBase
 */
export interface MinistryBase {
  /**
   * id
   * @type {number}
   * @memberof MinistryBase
   */
  id: number;
  /**
   * Organization.Id
   * @type {number}
   * @memberof MinistryBase
   */
  organizationId: number;
  /**
   * 組織名稱
   * @type {string}
   * @memberof MinistryBase
   */
  organizationName: string;
  /**
   * 事工團分類id
   * @type {number}
   * @memberof MinistryBase
   */
  ministryDefId: number;
  /**
   * 事工團編號
   * @type {string}
   * @memberof MinistryBase
   */
  ministryNo: string;
  /**
   * 事工團名稱
   * @type {string}
   * @memberof MinistryBase
   */
  name: string;
  /**
   * 是否兒童事工團
   * @type {string}
   * @memberof MinistryBase
   */
  childMinistry: string;
  /**
   * 事工團狀態
   * @type {string}
   * @memberof MinistryBase
   */
  ministryStatus: string;
  /**
   * 性質
   * @type {string}
   * @memberof MinistryBase
   */
  nature: string;
  /**
   * id
   * @type {string}
   * @memberof MinistryBase
   */
  statusCd: string;
  /**
   *
   * @type {string}
   * @memberof MinistryBase
   */
  comment: string;
  /**
   *
   * @type {string}
   * @memberof MinistryBase
   */
  dateCreate?: string | null;
  /**
   *
   * @type {string}
   * @memberof MinistryBase
   */
  userCreate?: string | null;
  /**
   *
   * @type {string}
   * @memberof MinistryBase
   */
  dateUpdate?: string | null;
  /**
   *
   * @type {string}
   * @memberof MinistryBase
   */
  userUpdate?: string | null;
}
/**
 *
 * @export
 * @interface MinistryDef
 */
export interface MinistryDef {
  /**
   * id
   * @type {number}
   * @memberof MinistryDef
   */
  id: number;
  /**
   * 事工團編號
   * @type {string}
   * @memberof MinistryDef
   */
  ministryDefNo: string;
  /**
   * 事工團名稱
   * @type {string}
   * @memberof MinistryDef
   */
  name: string;
  /**
   * 是否兒童事工團
   * @type {string}
   * @memberof MinistryDef
   */
  childMinistry: string;
  /**
   * 事工團狀態
   * @type {string}
   * @memberof MinistryDef
   */
  ministryDefStatus: string;
  /**
   * 事工團類別  MinistryDefType 0一般事工團   1小組
   * @type {string}
   * @memberof MinistryDef
   */
  ministryDefType: string;
  /**
   * id
   * @type {string}
   * @memberof MinistryDef
   */
  statusCd: string;
  /**
   *
   * @type {string}
   * @memberof MinistryDef
   */
  comment: string;
  /**
   * ApiLog HandledId
   * @type {string}
   * @memberof MinistryDef
   */
  handledId?: string | null;
  /**
   * 建立日期
   * @type {string}
   * @memberof MinistryDef
   */
  dateCreate?: string;
  /**
   * 建立人員
   * @type {string}
   * @memberof MinistryDef
   */
  userCreate?: string | null;
  /**
   * 最後修改日期
   * @type {string}
   * @memberof MinistryDef
   */
  dateUpdate?: string | null;
  /**
   * 最後修改人員
   * @type {string}
   * @memberof MinistryDef
   */
  userUpdate?: string | null;
  /**
   *
   * @type {string}
   * @memberof MinistryDef
   */
  rowVersion?: string | null;
}
/**
 *
 * @export
 * @interface MinistryDefBase
 */
export interface MinistryDefBase {
  /**
   * id
   * @type {number}
   * @memberof MinistryDefBase
   */
  id: number;
  /**
   * 事工團分類代碼
   * @type {string}
   * @memberof MinistryDefBase
   */
  ministryDefNo: string;
  /**
   * 事工團分類名稱
   * @type {string}
   * @memberof MinistryDefBase
   */
  name: string;
  /**
   * 事工團類別狀態
   * @type {string}
   * @memberof MinistryDefBase
   */
  ministryDefStatus: string;
  /**
   * 事工團類別  MinistryDefType 0一般事工團   1小組
   * @type {string}
   * @memberof MinistryDefBase
   */
  ministryDefType: string;
  /**
   * id
   * @type {string}
   * @memberof MinistryDefBase
   */
  statusCd: string;
  /**
   *
   * @type {string}
   * @memberof MinistryDefBase
   */
  comment: string;
  /**
   *
   * @type {string}
   * @memberof MinistryDefBase
   */
  dateCreate?: string | null;
  /**
   *
   * @type {string}
   * @memberof MinistryDefBase
   */
  userCreate?: string | null;
  /**
   *
   * @type {string}
   * @memberof MinistryDefBase
   */
  dateUpdate?: string | null;
  /**
   *
   * @type {string}
   * @memberof MinistryDefBase
   */
  userUpdate?: string | null;
  /**
   *
   * @type {number}
   * @memberof MinistryDefBase
   */
  isActivated: number;
}
/**
 * MinistryDef
 * @export
 * @interface MinistryDefView
 */
export interface MinistryDefView {
  /**
   *
   * @type {string}
   * @memberof MinistryDefView
   */
  handledId?: string | null;
  /**
   * id
   * @type {number}
   * @memberof MinistryDefView
   */
  id: number;
  /**
   * 事工團分類代碼
   * @type {string}
   * @memberof MinistryDefView
   */
  ministryDefNo: string;
  /**
   * 事工團分類名稱
   * @type {string}
   * @memberof MinistryDefView
   */
  name: string;
  /**
   * 事工團類別狀態
   * @type {string}
   * @memberof MinistryDefView
   */
  ministryDefStatus: string;
  /**
   * 事工團類別  MinistryDefType 0一般事工團   1小組
   * @type {string}
   * @memberof MinistryDefView
   */
  ministryDefType: string;
  /**
   * id
   * @type {string}
   * @memberof MinistryDefView
   */
  statusCd: string;
  /**
   *
   * @type {string}
   * @memberof MinistryDefView
   */
  comment: string;
  /**
   *
   * @type {string}
   * @memberof MinistryDefView
   */
  dateCreate?: string | null;
  /**
   *
   * @type {string}
   * @memberof MinistryDefView
   */
  userCreate?: string | null;
  /**
   *
   * @type {string}
   * @memberof MinistryDefView
   */
  dateUpdate?: string | null;
  /**
   *
   * @type {string}
   * @memberof MinistryDefView
   */
  userUpdate?: string | null;
  /**
   *
   * @type {number}
   * @memberof MinistryDefView
   */
  isActivated: number;
}
/**
 *
 * @export
 * @interface MinistryDefViewApiResponse
 */
export interface MinistryDefViewApiResponse {
  /**
   *
   * @type {string}
   * @memberof MinistryDefViewApiResponse
   */
  handledId?: string | null;
  /**
   * http-200  0000: 代表處理成功，其餘一律為失敗  http-4xx  Vxxxx: 資料驗證  Bxxxx: 詳見 message 欄位說明
   * @type {string}
   * @memberof MinistryDefViewApiResponse
   */
  code: string;
  /**
   * 回傳訊息
   * @type {string}
   * @memberof MinistryDefViewApiResponse
   */
  message: string;
  /**
   * 錯誤詳細資訊
   * @type {any}
   * @memberof MinistryDefViewApiResponse
   */
  detailMessage: any;
  /**
   *
   * @type {MinistryDefView}
   * @memberof MinistryDefViewApiResponse
   */
  data: MinistryDefView;
  /**
   * 交易時間
   * @type {string}
   * @memberof MinistryDefViewApiResponse
   */
  txnTime: string;
}
/**
 *
 * @export
 * @interface MinistryDefViewListApiResponse
 */
export interface MinistryDefViewListApiResponse {
  /**
   *
   * @type {string}
   * @memberof MinistryDefViewListApiResponse
   */
  handledId?: string | null;
  /**
   * http-200  0000: 代表處理成功，其餘一律為失敗  http-4xx  Vxxxx: 資料驗證  Bxxxx: 詳見 message 欄位說明
   * @type {string}
   * @memberof MinistryDefViewListApiResponse
   */
  code: string;
  /**
   * 回傳訊息
   * @type {string}
   * @memberof MinistryDefViewListApiResponse
   */
  message: string;
  /**
   * 錯誤詳細資訊
   * @type {any}
   * @memberof MinistryDefViewListApiResponse
   */
  detailMessage: any;
  /**
   * 回傳資料
   * @type {Array<MinistryDefView>}
   * @memberof MinistryDefViewListApiResponse
   */
  data: Array<MinistryDefView>;
  /**
   * 交易時間
   * @type {string}
   * @memberof MinistryDefViewListApiResponse
   */
  txnTime: string;
}
/**
 *
 * @export
 * @interface MinistryDefViewPage
 */
export interface MinistryDefViewPage {
  /**
   *
   * @type {number}
   * @memberof MinistryDefViewPage
   */
  totalCount: number;
  /**
   *
   * @type {number}
   * @memberof MinistryDefViewPage
   */
  pageCount: number;
  /**
   *
   * @type {number}
   * @memberof MinistryDefViewPage
   */
  currentPage: number;
  /**
   *
   * @type {number}
   * @memberof MinistryDefViewPage
   */
  size: number;
  /**
   *
   * @type {Array<MinistryDefView>}
   * @memberof MinistryDefViewPage
   */
  records: Array<MinistryDefView>;
  /**
   *
   * @type {number}
   * @memberof MinistryDefViewPage
   */
  pageSize: number;
  /**
   *
   * @type {boolean}
   * @memberof MinistryDefViewPage
   */
  hasPreviousPages: boolean;
  /**
   *
   * @type {boolean}
   * @memberof MinistryDefViewPage
   */
  hasNextPages: boolean;
  /**
   *
   * @type {number}
   * @memberof MinistryDefViewPage
   */
  previousLastPageNo: number;
  /**
   *
   * @type {number}
   * @memberof MinistryDefViewPage
   */
  nextStartPageNo: number;
  /**
   *
   * @type {Array<number>}
   * @memberof MinistryDefViewPage
   */
  navigationPages: Array<number>;
}
/**
 *
 * @export
 * @interface MinistryDefViewPageApiResponse
 */
export interface MinistryDefViewPageApiResponse {
  /**
   *
   * @type {string}
   * @memberof MinistryDefViewPageApiResponse
   */
  handledId?: string | null;
  /**
   * http-200  0000: 代表處理成功，其餘一律為失敗  http-4xx  Vxxxx: 資料驗證  Bxxxx: 詳見 message 欄位說明
   * @type {string}
   * @memberof MinistryDefViewPageApiResponse
   */
  code: string;
  /**
   * 回傳訊息
   * @type {string}
   * @memberof MinistryDefViewPageApiResponse
   */
  message: string;
  /**
   * 錯誤詳細資訊
   * @type {any}
   * @memberof MinistryDefViewPageApiResponse
   */
  detailMessage: any;
  /**
   *
   * @type {MinistryDefViewPage}
   * @memberof MinistryDefViewPageApiResponse
   */
  data: MinistryDefViewPage;
  /**
   * 交易時間
   * @type {string}
   * @memberof MinistryDefViewPageApiResponse
   */
  txnTime: string;
}
/**
 *
 * @export
 * @interface MinistryMeeting
 */
export interface MinistryMeeting {
  /**
   * id
   * @type {number}
   * @memberof MinistryMeeting
   */
  id: number;
  /**
   * Ministry.Id
   * @type {number}
   * @memberof MinistryMeeting
   */
  ministryId: number;
  /**
   * 小組聚會每周哪一天
   * @type {string}
   * @memberof MinistryMeeting
   */
  meetingDayOfWeek: string;
  /**
   * 聚會時間
   * @type {string}
   * @memberof MinistryMeeting
   */
  meetingTime: string;
  /**
   * 聚會地點
   * @type {string}
   * @memberof MinistryMeeting
   */
  meetingAddress: string;
  /**
   * 聚會日期
   * @type {string}
   * @memberof MinistryMeeting
   */
  meetingDay: string;
  /**
   * 是否為外展對應SystemConfigtype=IsNY顯示 namevalue存此欄位0：N1：Y
   * @type {string}
   * @memberof MinistryMeeting
   */
  isExp: string;
  /**
   * 是否可查詢，否表示隱藏小組
   * @type {string}
   * @memberof MinistryMeeting
   */
  isSearchable: string;
  /**
   * 聚會狀態對應SystemConfigtype=MeetType顯示 namevalue存此欄位0：尚未開始1：正常舉行2：停辦
   * @type {string}
   * @memberof MinistryMeeting
   */
  meetType: string;
  /**
   *
   * @type {string}
   * @memberof MinistryMeeting
   */
  statusCd: string;
  /**
   * ApiLog HandledId
   * @type {string}
   * @memberof MinistryMeeting
   */
  handledId?: string | null;
  /**
   * 建立日期
   * @type {string}
   * @memberof MinistryMeeting
   */
  dateCreate?: string;
  /**
   * 建立人員
   * @type {string}
   * @memberof MinistryMeeting
   */
  userCreate?: string | null;
  /**
   * 最後修改日期
   * @type {string}
   * @memberof MinistryMeeting
   */
  dateUpdate?: string | null;
  /**
   * 最後修改人員
   * @type {string}
   * @memberof MinistryMeeting
   */
  userUpdate?: string | null;
  /**
   *
   * @type {string}
   * @memberof MinistryMeeting
   */
  rowVersion?: string | null;
}
/**
 * 事工團會議主檔
 * @export
 * @interface MinistryMeetingBase
 */
export interface MinistryMeetingBase {
  /**
   * id
   * @type {number}
   * @memberof MinistryMeetingBase
   */
  id: number;
  /**
   * Ministry.Id
   * @type {number}
   * @memberof MinistryMeetingBase
   */
  ministryId: number;
  /**
   * 小組聚會每周哪一天
   * @type {string}
   * @memberof MinistryMeetingBase
   */
  meetingDayOfWeek: string;
  /**
   * 聚會時間
   * @type {string}
   * @memberof MinistryMeetingBase
   */
  meetingTime: string;
  /**
   * 聚會地點
   * @type {string}
   * @memberof MinistryMeetingBase
   */
  meetingAddress: string;
  /**
   * 聚會日期
   * @type {string}
   * @memberof MinistryMeetingBase
   */
  meetingDay: string;
  /**
   * 是否為外展對應SystemConfigtype=IsNY顯示 namevalue存此欄位0：N1：Y
   * @type {string}
   * @memberof MinistryMeetingBase
   */
  isExp: string;
  /**
   * 是否可查詢，否表示隱藏小組
   * @type {string}
   * @memberof MinistryMeetingBase
   */
  isSearchable: string;
  /**
   * 聚會狀態對應SystemConfigtype=MeetType顯示 namevalue存此欄位0：尚未開始1：正常舉行2：停辦
   * @type {string}
   * @memberof MinistryMeetingBase
   */
  meetType: string;
}
/**
 *
 * @export
 * @interface MinistryMeetingUser
 */
export interface MinistryMeetingUser {
  /**
   * id
   * @type {number}
   * @memberof MinistryMeetingUser
   */
  id: number;
  /**
   * MinistryMeeting.Id
   * @type {number}
   * @memberof MinistryMeetingUser
   */
  ministryMeetingId: number;
  /**
   * User.Id
   * @type {number}
   * @memberof MinistryMeetingUser
   */
  userId: number;
  /**
   * 是否聚會出席狀態        對應SystemConfig        type = MeetAttendanceType顯示 namevalue存此欄位0：尚未開課1：已出席2:未出席
   * @type {number}
   * @memberof MinistryMeetingUser
   */
  meetAttendanceType: number;
  /**
   *
   * @type {string}
   * @memberof MinistryMeetingUser
   */
  statusCd: string;
  /**
   * ApiLog HandledId
   * @type {string}
   * @memberof MinistryMeetingUser
   */
  handledId?: string | null;
  /**
   * 建立日期
   * @type {string}
   * @memberof MinistryMeetingUser
   */
  dateCreate?: string;
  /**
   * 建立人員
   * @type {string}
   * @memberof MinistryMeetingUser
   */
  userCreate?: string | null;
  /**
   * 最後修改日期
   * @type {string}
   * @memberof MinistryMeetingUser
   */
  dateUpdate?: string | null;
  /**
   * 最後修改人員
   * @type {string}
   * @memberof MinistryMeetingUser
   */
  userUpdate?: string | null;
  /**
   *
   * @type {string}
   * @memberof MinistryMeetingUser
   */
  rowVersion?: string | null;
}
/**
 * 事工團組員參與會議記錄檔
 * @export
 * @interface MinistryMeetingUserBase
 */
export interface MinistryMeetingUserBase {
  /**
   * id
   * @type {number}
   * @memberof MinistryMeetingUserBase
   */
  id: number;
  /**
   * MinistryMeeting.Id
   * @type {number}
   * @memberof MinistryMeetingUserBase
   */
  ministryMeetingId: number;
  /**
   * User.Id
   * @type {number}
   * @memberof MinistryMeetingUserBase
   */
  userId: number;
  /**
   * 是否聚會出席狀態        對應SystemConfig        type = MeetAttendanceType顯示 namevalue存此欄位0：尚未開課1：已出席2:未出席
   * @type {number}
   * @memberof MinistryMeetingUserBase
   */
  meetAttendanceType: number;
  /**
   * MinistryDef.Name
   * @type {string}
   * @memberof MinistryMeetingUserBase
   */
  ministryDefName: string;
  /**
   * Ministry.Name
   * @type {string}
   * @memberof MinistryMeetingUserBase
   */
  ministryName: string;
  /**
   * MinistryResp.Name
   * @type {string}
   * @memberof MinistryMeetingUserBase
   */
  ministryRespName: string;
}
/**
 * MinistryMeetingUser
 * @export
 * @interface MinistryMeetingUserView
 */
export interface MinistryMeetingUserView {
  /**
   * Ministry.Id
   * @type {number}
   * @memberof MinistryMeetingUserView
   */
  ministryId: number;
  /**
   * MinistryDef.Id
   * @type {number}
   * @memberof MinistryMeetingUserView
   */
  ministryDefId: number;
  /**
   * MinistryRespUser.MinistryRespUserStatus
   * @type {string}
   * @memberof MinistryMeetingUserView
   */
  ministryRespUserStatus: string;
  /**
   * 會議日期
   * @type {string}
   * @memberof MinistryMeetingUserView
   */
  meetingDay: string;
  /**
   * 聚會時間
   * @type {string}
   * @memberof MinistryMeetingUserView
   */
  meetingTime: string;
  /**
   * 聚會地點
   * @type {string}
   * @memberof MinistryMeetingUserView
   */
  meetingAddress: string;
  /**
   * 小組聚會每周哪一天
   * @type {string}
   * @memberof MinistryMeetingUserView
   */
  meetingDayOfWeek: string;
  /**
   * 異動紀錄
   * @type {number}
   * @memberof MinistryMeetingUserView
   */
  statusCd: number;
  /**
   *
   * @type {string}
   * @memberof MinistryMeetingUserView
   */
  handledId?: string | null;
  /**
   *
   * @type {string}
   * @memberof MinistryMeetingUserView
   */
  dateCreate?: string;
  /**
   *
   * @type {string}
   * @memberof MinistryMeetingUserView
   */
  userCreate?: string | null;
  /**
   *
   * @type {string}
   * @memberof MinistryMeetingUserView
   */
  dateUpdate?: string | null;
  /**
   *
   * @type {string}
   * @memberof MinistryMeetingUserView
   */
  userUpdate?: string | null;
  /**
   * id
   * @type {number}
   * @memberof MinistryMeetingUserView
   */
  id: number;
  /**
   * MinistryMeeting.Id
   * @type {number}
   * @memberof MinistryMeetingUserView
   */
  ministryMeetingId: number;
  /**
   * User.Id
   * @type {number}
   * @memberof MinistryMeetingUserView
   */
  userId: number;
  /**
   * 是否聚會出席狀態        對應SystemConfig        type = MeetAttendanceType顯示 namevalue存此欄位0：尚未開課1：已出席2:未出席
   * @type {number}
   * @memberof MinistryMeetingUserView
   */
  meetAttendanceType: number;
  /**
   * MinistryDef.Name
   * @type {string}
   * @memberof MinistryMeetingUserView
   */
  ministryDefName: string;
  /**
   * Ministry.Name
   * @type {string}
   * @memberof MinistryMeetingUserView
   */
  ministryName: string;
  /**
   * MinistryResp.Name
   * @type {string}
   * @memberof MinistryMeetingUserView
   */
  ministryRespName: string;
}
/**
 *
 * @export
 * @interface MinistryMeetingUserViewApiResponse
 */
export interface MinistryMeetingUserViewApiResponse {
  /**
   *
   * @type {string}
   * @memberof MinistryMeetingUserViewApiResponse
   */
  handledId?: string | null;
  /**
   * http-200  0000: 代表處理成功，其餘一律為失敗  http-4xx  Vxxxx: 資料驗證  Bxxxx: 詳見 message 欄位說明
   * @type {string}
   * @memberof MinistryMeetingUserViewApiResponse
   */
  code: string;
  /**
   * 回傳訊息
   * @type {string}
   * @memberof MinistryMeetingUserViewApiResponse
   */
  message: string;
  /**
   * 錯誤詳細資訊
   * @type {any}
   * @memberof MinistryMeetingUserViewApiResponse
   */
  detailMessage: any;
  /**
   *
   * @type {MinistryMeetingUserView}
   * @memberof MinistryMeetingUserViewApiResponse
   */
  data: MinistryMeetingUserView;
  /**
   * 交易時間
   * @type {string}
   * @memberof MinistryMeetingUserViewApiResponse
   */
  txnTime: string;
}
/**
 *
 * @export
 * @interface MinistryMeetingUserViewListApiResponse
 */
export interface MinistryMeetingUserViewListApiResponse {
  /**
   *
   * @type {string}
   * @memberof MinistryMeetingUserViewListApiResponse
   */
  handledId?: string | null;
  /**
   * http-200  0000: 代表處理成功，其餘一律為失敗  http-4xx  Vxxxx: 資料驗證  Bxxxx: 詳見 message 欄位說明
   * @type {string}
   * @memberof MinistryMeetingUserViewListApiResponse
   */
  code: string;
  /**
   * 回傳訊息
   * @type {string}
   * @memberof MinistryMeetingUserViewListApiResponse
   */
  message: string;
  /**
   * 錯誤詳細資訊
   * @type {any}
   * @memberof MinistryMeetingUserViewListApiResponse
   */
  detailMessage: any;
  /**
   * 回傳資料
   * @type {Array<MinistryMeetingUserView>}
   * @memberof MinistryMeetingUserViewListApiResponse
   */
  data: Array<MinistryMeetingUserView>;
  /**
   * 交易時間
   * @type {string}
   * @memberof MinistryMeetingUserViewListApiResponse
   */
  txnTime: string;
}
/**
 *
 * @export
 * @interface MinistryMeetingUserViewPage
 */
export interface MinistryMeetingUserViewPage {
  /**
   *
   * @type {number}
   * @memberof MinistryMeetingUserViewPage
   */
  totalCount: number;
  /**
   *
   * @type {number}
   * @memberof MinistryMeetingUserViewPage
   */
  pageCount: number;
  /**
   *
   * @type {number}
   * @memberof MinistryMeetingUserViewPage
   */
  currentPage: number;
  /**
   *
   * @type {number}
   * @memberof MinistryMeetingUserViewPage
   */
  size: number;
  /**
   *
   * @type {Array<MinistryMeetingUserView>}
   * @memberof MinistryMeetingUserViewPage
   */
  records: Array<MinistryMeetingUserView>;
  /**
   *
   * @type {number}
   * @memberof MinistryMeetingUserViewPage
   */
  pageSize: number;
  /**
   *
   * @type {boolean}
   * @memberof MinistryMeetingUserViewPage
   */
  hasPreviousPages: boolean;
  /**
   *
   * @type {boolean}
   * @memberof MinistryMeetingUserViewPage
   */
  hasNextPages: boolean;
  /**
   *
   * @type {number}
   * @memberof MinistryMeetingUserViewPage
   */
  previousLastPageNo: number;
  /**
   *
   * @type {number}
   * @memberof MinistryMeetingUserViewPage
   */
  nextStartPageNo: number;
  /**
   *
   * @type {Array<number>}
   * @memberof MinistryMeetingUserViewPage
   */
  navigationPages: Array<number>;
}
/**
 *
 * @export
 * @interface MinistryMeetingUserViewPageApiResponse
 */
export interface MinistryMeetingUserViewPageApiResponse {
  /**
   *
   * @type {string}
   * @memberof MinistryMeetingUserViewPageApiResponse
   */
  handledId?: string | null;
  /**
   * http-200  0000: 代表處理成功，其餘一律為失敗  http-4xx  Vxxxx: 資料驗證  Bxxxx: 詳見 message 欄位說明
   * @type {string}
   * @memberof MinistryMeetingUserViewPageApiResponse
   */
  code: string;
  /**
   * 回傳訊息
   * @type {string}
   * @memberof MinistryMeetingUserViewPageApiResponse
   */
  message: string;
  /**
   * 錯誤詳細資訊
   * @type {any}
   * @memberof MinistryMeetingUserViewPageApiResponse
   */
  detailMessage: any;
  /**
   *
   * @type {MinistryMeetingUserViewPage}
   * @memberof MinistryMeetingUserViewPageApiResponse
   */
  data: MinistryMeetingUserViewPage;
  /**
   * 交易時間
   * @type {string}
   * @memberof MinistryMeetingUserViewPageApiResponse
   */
  txnTime: string;
}
/**
 * MinistryMeeting
 * @export
 * @interface MinistryMeetingView
 */
export interface MinistryMeetingView {
  /**
   * Id
   * @type {number}
   * @memberof MinistryMeetingView
   */
  id: number;
  /**
   *
   * @type {string}
   * @memberof MinistryMeetingView
   */
  handledId?: string | null;
  /**
   *
   * @type {string}
   * @memberof MinistryMeetingView
   */
  dateCreate?: string;
  /**
   *
   * @type {string}
   * @memberof MinistryMeetingView
   */
  userCreate?: string | null;
  /**
   *
   * @type {string}
   * @memberof MinistryMeetingView
   */
  dateUpdate?: string | null;
  /**
   *
   * @type {string}
   * @memberof MinistryMeetingView
   */
  userUpdate?: string | null;
  /**
   * Ministry.Id
   * @type {number}
   * @memberof MinistryMeetingView
   */
  ministryId: number;
  /**
   * 小組聚會每周哪一天
   * @type {string}
   * @memberof MinistryMeetingView
   */
  meetingDayOfWeek: string;
  /**
   * 聚會時間
   * @type {string}
   * @memberof MinistryMeetingView
   */
  meetingTime: string;
  /**
   * 聚會地點
   * @type {string}
   * @memberof MinistryMeetingView
   */
  meetingAddress: string;
  /**
   * 聚會日期
   * @type {string}
   * @memberof MinistryMeetingView
   */
  meetingDay: string;
  /**
   * 是否為外展對應SystemConfigtype=IsNY顯示 namevalue存此欄位0：N1：Y
   * @type {string}
   * @memberof MinistryMeetingView
   */
  isExp: string;
  /**
   * 是否可查詢，否表示隱藏小組
   * @type {string}
   * @memberof MinistryMeetingView
   */
  isSearchable: string;
  /**
   * 聚會狀態對應SystemConfigtype=MeetType顯示 namevalue存此欄位0：尚未開始1：正常舉行2：停辦
   * @type {string}
   * @memberof MinistryMeetingView
   */
  meetType: string;
}
/**
 *
 * @export
 * @interface MinistryMeetingViewApiResponse
 */
export interface MinistryMeetingViewApiResponse {
  /**
   *
   * @type {string}
   * @memberof MinistryMeetingViewApiResponse
   */
  handledId?: string | null;
  /**
   * http-200  0000: 代表處理成功，其餘一律為失敗  http-4xx  Vxxxx: 資料驗證  Bxxxx: 詳見 message 欄位說明
   * @type {string}
   * @memberof MinistryMeetingViewApiResponse
   */
  code: string;
  /**
   * 回傳訊息
   * @type {string}
   * @memberof MinistryMeetingViewApiResponse
   */
  message: string;
  /**
   * 錯誤詳細資訊
   * @type {any}
   * @memberof MinistryMeetingViewApiResponse
   */
  detailMessage: any;
  /**
   *
   * @type {MinistryMeetingView}
   * @memberof MinistryMeetingViewApiResponse
   */
  data: MinistryMeetingView;
  /**
   * 交易時間
   * @type {string}
   * @memberof MinistryMeetingViewApiResponse
   */
  txnTime: string;
}
/**
 *
 * @export
 * @interface MinistryMeetingViewPage
 */
export interface MinistryMeetingViewPage {
  /**
   *
   * @type {number}
   * @memberof MinistryMeetingViewPage
   */
  totalCount: number;
  /**
   *
   * @type {number}
   * @memberof MinistryMeetingViewPage
   */
  pageCount: number;
  /**
   *
   * @type {number}
   * @memberof MinistryMeetingViewPage
   */
  currentPage: number;
  /**
   *
   * @type {number}
   * @memberof MinistryMeetingViewPage
   */
  size: number;
  /**
   *
   * @type {Array<MinistryMeetingView>}
   * @memberof MinistryMeetingViewPage
   */
  records: Array<MinistryMeetingView>;
  /**
   *
   * @type {number}
   * @memberof MinistryMeetingViewPage
   */
  pageSize: number;
  /**
   *
   * @type {boolean}
   * @memberof MinistryMeetingViewPage
   */
  hasPreviousPages: boolean;
  /**
   *
   * @type {boolean}
   * @memberof MinistryMeetingViewPage
   */
  hasNextPages: boolean;
  /**
   *
   * @type {number}
   * @memberof MinistryMeetingViewPage
   */
  previousLastPageNo: number;
  /**
   *
   * @type {number}
   * @memberof MinistryMeetingViewPage
   */
  nextStartPageNo: number;
  /**
   *
   * @type {Array<number>}
   * @memberof MinistryMeetingViewPage
   */
  navigationPages: Array<number>;
}
/**
 *
 * @export
 * @interface MinistryMeetingViewPageApiResponse
 */
export interface MinistryMeetingViewPageApiResponse {
  /**
   *
   * @type {string}
   * @memberof MinistryMeetingViewPageApiResponse
   */
  handledId?: string | null;
  /**
   * http-200  0000: 代表處理成功，其餘一律為失敗  http-4xx  Vxxxx: 資料驗證  Bxxxx: 詳見 message 欄位說明
   * @type {string}
   * @memberof MinistryMeetingViewPageApiResponse
   */
  code: string;
  /**
   * 回傳訊息
   * @type {string}
   * @memberof MinistryMeetingViewPageApiResponse
   */
  message: string;
  /**
   * 錯誤詳細資訊
   * @type {any}
   * @memberof MinistryMeetingViewPageApiResponse
   */
  detailMessage: any;
  /**
   *
   * @type {MinistryMeetingViewPage}
   * @memberof MinistryMeetingViewPageApiResponse
   */
  data: MinistryMeetingViewPage;
  /**
   * 交易時間
   * @type {string}
   * @memberof MinistryMeetingViewPageApiResponse
   */
  txnTime: string;
}
/**
 *
 * @export
 * @interface MinistryResp
 */
export interface MinistryResp {
  /**
   * id
   * @type {number}
   * @memberof MinistryResp
   */
  id: number;
  /**
   * 事工團.Id
   * @type {number}
   * @memberof MinistryResp
   */
  ministryId: number;
  /**
   * 順序
   * @type {number}
   * @memberof MinistryResp
   */
  seq: number;
  /**
   * 事工團職份名稱
   * @type {string}
   * @memberof MinistryResp
   */
  name: string;
  /**
   * 是否管理職是否管理職        對應type=IsYN        顯示 name        value存此欄位 0：N 1：Y
   * @type {string}
   * @memberof MinistryResp
   */
  manageType: string;
  /**
   * id
   * @type {string}
   * @memberof MinistryResp
   */
  statusCd: string;
  /**
   *
   * @type {string}
   * @memberof MinistryResp
   */
  comment: string;
  /**
   * ApiLog HandledId
   * @type {string}
   * @memberof MinistryResp
   */
  handledId?: string | null;
  /**
   * 建立日期
   * @type {string}
   * @memberof MinistryResp
   */
  dateCreate?: string;
  /**
   * 建立人員
   * @type {string}
   * @memberof MinistryResp
   */
  userCreate?: string | null;
  /**
   * 最後修改日期
   * @type {string}
   * @memberof MinistryResp
   */
  dateUpdate?: string | null;
  /**
   * 最後修改人員
   * @type {string}
   * @memberof MinistryResp
   */
  userUpdate?: string | null;
  /**
   *
   * @type {string}
   * @memberof MinistryResp
   */
  rowVersion?: string | null;
}
/**
 *
 * @export
 * @interface MinistryRespBase
 */
export interface MinistryRespBase {
  /**
   * id
   * @type {number}
   * @memberof MinistryRespBase
   */
  id: number;
  /**
   * 事工團.Id
   * @type {number}
   * @memberof MinistryRespBase
   */
  ministryId: number;
  /**
   * 順序
   * @type {number}
   * @memberof MinistryRespBase
   */
  seq: number;
  /**
   * 事工團職份名稱
   * @type {string}
   * @memberof MinistryRespBase
   */
  name: string;
  /**
   * 是否管理職是否管理職        對應type=IsYN        顯示 name        value存此欄位 0：N 1：Y
   * @type {string}
   * @memberof MinistryRespBase
   */
  manageType: string;
  /**
   * id
   * @type {string}
   * @memberof MinistryRespBase
   */
  statusCd: string;
  /**
   *
   * @type {string}
   * @memberof MinistryRespBase
   */
  comment: string;
  /**
   *
   * @type {number}
   * @memberof MinistryRespBase
   */
  isActivated: number;
}
/**
 *
 * @export
 * @interface MinistryRespUser
 */
export interface MinistryRespUser {
  /**
   * id
   * @type {number}
   * @memberof MinistryRespUser
   */
  id: number;
  /**
   * 事工團職分明細主檔id
   * @type {number}
   * @memberof MinistryRespUser
   */
  ministryRespId: number;
  /**
   * User.Id
   * @type {number}
   * @memberof MinistryRespUser
   */
  userId: number;
  /**
   * 異動記錄
   * @type {number}
   * @memberof MinistryRespUser
   */
  ministryRespUserStatus: number;
  /**
   *
   * @type {string}
   * @memberof MinistryRespUser
   */
  statusCd: string;
  /**
   *
   * @type {string}
   * @memberof MinistryRespUser
   */
  comment: string;
  /**
   * ApiLog HandledId
   * @type {string}
   * @memberof MinistryRespUser
   */
  handledId?: string | null;
  /**
   * 建立日期
   * @type {string}
   * @memberof MinistryRespUser
   */
  dateCreate?: string;
  /**
   * 建立人員
   * @type {string}
   * @memberof MinistryRespUser
   */
  userCreate?: string | null;
  /**
   * 最後修改日期
   * @type {string}
   * @memberof MinistryRespUser
   */
  dateUpdate?: string | null;
  /**
   * 最後修改人員
   * @type {string}
   * @memberof MinistryRespUser
   */
  userUpdate?: string | null;
  /**
   *
   * @type {string}
   * @memberof MinistryRespUser
   */
  rowVersion?: string | null;
}
/**
 *
 * @export
 * @interface MinistryRespUserBase
 */
export interface MinistryRespUserBase {
  /**
   * id
   * @type {number}
   * @memberof MinistryRespUserBase
   */
  id: number;
  /**
   * 事工團職分明細主檔id
   * @type {number}
   * @memberof MinistryRespUserBase
   */
  ministryRespId: number;
  /**
   * User.Id
   * @type {number}
   * @memberof MinistryRespUserBase
   */
  userId: number;
  /**
   * 異動記錄
   * @type {number}
   * @memberof MinistryRespUserBase
   */
  ministryRespUserStatus: number;
  /**
   *
   * @type {string}
   * @memberof MinistryRespUserBase
   */
  statusCd: string;
  /**
   *
   * @type {string}
   * @memberof MinistryRespUserBase
   */
  comment: string;
  /**
   *
   * @type {number}
   * @memberof MinistryRespUserBase
   */
  isActivated: number;
}
/**
 * MinistryRespUser
 * @export
 * @interface MinistryRespUserView
 */
export interface MinistryRespUserView {
  /**
   *
   * @type {UserView}
   * @memberof MinistryRespUserView
   */
  userView: UserView;
  /**
   * 事工團分類
   * @type {string}
   * @memberof MinistryRespUserView
   */
  ministryDefName: string;
  /**
   * 事工團名稱
   * @type {string}
   * @memberof MinistryRespUserView
   */
  ministryName: string;
  /**
   * 事工團職分名稱
   * @type {string}
   * @memberof MinistryRespUserView
   */
  ministryRespName: string;
  /**
   *
   * @type {string}
   * @memberof MinistryRespUserView
   */
  handledId?: string | null;
  /**
   *
   * @type {string}
   * @memberof MinistryRespUserView
   */
  dateCreate?: string;
  /**
   *
   * @type {string}
   * @memberof MinistryRespUserView
   */
  userCreate?: string | null;
  /**
   *
   * @type {string}
   * @memberof MinistryRespUserView
   */
  dateUpdate?: string | null;
  /**
   *
   * @type {string}
   * @memberof MinistryRespUserView
   */
  userUpdate?: string | null;
  /**
   * id
   * @type {number}
   * @memberof MinistryRespUserView
   */
  id: number;
  /**
   * 事工團職分明細主檔id
   * @type {number}
   * @memberof MinistryRespUserView
   */
  ministryRespId: number;
  /**
   * User.Id
   * @type {number}
   * @memberof MinistryRespUserView
   */
  userId: number;
  /**
   * 異動記錄
   * @type {number}
   * @memberof MinistryRespUserView
   */
  ministryRespUserStatus: number;
  /**
   *
   * @type {string}
   * @memberof MinistryRespUserView
   */
  statusCd: string;
  /**
   *
   * @type {string}
   * @memberof MinistryRespUserView
   */
  comment: string;
  /**
   *
   * @type {number}
   * @memberof MinistryRespUserView
   */
  isActivated: number;
}
/**
 *
 * @export
 * @interface MinistryRespUserViewApiResponse
 */
export interface MinistryRespUserViewApiResponse {
  /**
   *
   * @type {string}
   * @memberof MinistryRespUserViewApiResponse
   */
  handledId?: string | null;
  /**
   * http-200  0000: 代表處理成功，其餘一律為失敗  http-4xx  Vxxxx: 資料驗證  Bxxxx: 詳見 message 欄位說明
   * @type {string}
   * @memberof MinistryRespUserViewApiResponse
   */
  code: string;
  /**
   * 回傳訊息
   * @type {string}
   * @memberof MinistryRespUserViewApiResponse
   */
  message: string;
  /**
   * 錯誤詳細資訊
   * @type {any}
   * @memberof MinistryRespUserViewApiResponse
   */
  detailMessage: any;
  /**
   *
   * @type {MinistryRespUserView}
   * @memberof MinistryRespUserViewApiResponse
   */
  data: MinistryRespUserView;
  /**
   * 交易時間
   * @type {string}
   * @memberof MinistryRespUserViewApiResponse
   */
  txnTime: string;
}
/**
 *
 * @export
 * @interface MinistryRespUserViewListApiResponse
 */
export interface MinistryRespUserViewListApiResponse {
  /**
   *
   * @type {string}
   * @memberof MinistryRespUserViewListApiResponse
   */
  handledId?: string | null;
  /**
   * http-200  0000: 代表處理成功，其餘一律為失敗  http-4xx  Vxxxx: 資料驗證  Bxxxx: 詳見 message 欄位說明
   * @type {string}
   * @memberof MinistryRespUserViewListApiResponse
   */
  code: string;
  /**
   * 回傳訊息
   * @type {string}
   * @memberof MinistryRespUserViewListApiResponse
   */
  message: string;
  /**
   * 錯誤詳細資訊
   * @type {any}
   * @memberof MinistryRespUserViewListApiResponse
   */
  detailMessage: any;
  /**
   * 回傳資料
   * @type {Array<MinistryRespUserView>}
   * @memberof MinistryRespUserViewListApiResponse
   */
  data: Array<MinistryRespUserView>;
  /**
   * 交易時間
   * @type {string}
   * @memberof MinistryRespUserViewListApiResponse
   */
  txnTime: string;
}
/**
 *
 * @export
 * @interface MinistryRespUserViewPage
 */
export interface MinistryRespUserViewPage {
  /**
   *
   * @type {number}
   * @memberof MinistryRespUserViewPage
   */
  totalCount: number;
  /**
   *
   * @type {number}
   * @memberof MinistryRespUserViewPage
   */
  pageCount: number;
  /**
   *
   * @type {number}
   * @memberof MinistryRespUserViewPage
   */
  currentPage: number;
  /**
   *
   * @type {number}
   * @memberof MinistryRespUserViewPage
   */
  size: number;
  /**
   *
   * @type {Array<MinistryRespUserView>}
   * @memberof MinistryRespUserViewPage
   */
  records: Array<MinistryRespUserView>;
  /**
   *
   * @type {number}
   * @memberof MinistryRespUserViewPage
   */
  pageSize: number;
  /**
   *
   * @type {boolean}
   * @memberof MinistryRespUserViewPage
   */
  hasPreviousPages: boolean;
  /**
   *
   * @type {boolean}
   * @memberof MinistryRespUserViewPage
   */
  hasNextPages: boolean;
  /**
   *
   * @type {number}
   * @memberof MinistryRespUserViewPage
   */
  previousLastPageNo: number;
  /**
   *
   * @type {number}
   * @memberof MinistryRespUserViewPage
   */
  nextStartPageNo: number;
  /**
   *
   * @type {Array<number>}
   * @memberof MinistryRespUserViewPage
   */
  navigationPages: Array<number>;
}
/**
 *
 * @export
 * @interface MinistryRespUserViewPageApiResponse
 */
export interface MinistryRespUserViewPageApiResponse {
  /**
   *
   * @type {string}
   * @memberof MinistryRespUserViewPageApiResponse
   */
  handledId?: string | null;
  /**
   * http-200  0000: 代表處理成功，其餘一律為失敗  http-4xx  Vxxxx: 資料驗證  Bxxxx: 詳見 message 欄位說明
   * @type {string}
   * @memberof MinistryRespUserViewPageApiResponse
   */
  code: string;
  /**
   * 回傳訊息
   * @type {string}
   * @memberof MinistryRespUserViewPageApiResponse
   */
  message: string;
  /**
   * 錯誤詳細資訊
   * @type {any}
   * @memberof MinistryRespUserViewPageApiResponse
   */
  detailMessage: any;
  /**
   *
   * @type {MinistryRespUserViewPage}
   * @memberof MinistryRespUserViewPageApiResponse
   */
  data: MinistryRespUserViewPage;
  /**
   * 交易時間
   * @type {string}
   * @memberof MinistryRespUserViewPageApiResponse
   */
  txnTime: string;
}
/**
 * MinistryResp
 * @export
 * @interface MinistryRespView
 */
export interface MinistryRespView {
  /**
   *
   * @type {string}
   * @memberof MinistryRespView
   */
  handledId?: string | null;
  /**
   *
   * @type {string}
   * @memberof MinistryRespView
   */
  dateCreate?: string;
  /**
   *
   * @type {string}
   * @memberof MinistryRespView
   */
  userCreate?: string | null;
  /**
   *
   * @type {string}
   * @memberof MinistryRespView
   */
  dateUpdate?: string | null;
  /**
   *
   * @type {string}
   * @memberof MinistryRespView
   */
  userUpdate?: string | null;
  /**
   * id
   * @type {number}
   * @memberof MinistryRespView
   */
  id: number;
  /**
   * 事工團.Id
   * @type {number}
   * @memberof MinistryRespView
   */
  ministryId: number;
  /**
   * 順序
   * @type {number}
   * @memberof MinistryRespView
   */
  seq: number;
  /**
   * 事工團職份名稱
   * @type {string}
   * @memberof MinistryRespView
   */
  name: string;
  /**
   * 是否管理職是否管理職        對應type=IsYN        顯示 name        value存此欄位 0：N 1：Y
   * @type {string}
   * @memberof MinistryRespView
   */
  manageType: string;
  /**
   * id
   * @type {string}
   * @memberof MinistryRespView
   */
  statusCd: string;
  /**
   *
   * @type {string}
   * @memberof MinistryRespView
   */
  comment: string;
  /**
   *
   * @type {number}
   * @memberof MinistryRespView
   */
  isActivated: number;
}
/**
 *
 * @export
 * @interface MinistryRespViewApiResponse
 */
export interface MinistryRespViewApiResponse {
  /**
   *
   * @type {string}
   * @memberof MinistryRespViewApiResponse
   */
  handledId?: string | null;
  /**
   * http-200  0000: 代表處理成功，其餘一律為失敗  http-4xx  Vxxxx: 資料驗證  Bxxxx: 詳見 message 欄位說明
   * @type {string}
   * @memberof MinistryRespViewApiResponse
   */
  code: string;
  /**
   * 回傳訊息
   * @type {string}
   * @memberof MinistryRespViewApiResponse
   */
  message: string;
  /**
   * 錯誤詳細資訊
   * @type {any}
   * @memberof MinistryRespViewApiResponse
   */
  detailMessage: any;
  /**
   *
   * @type {MinistryRespView}
   * @memberof MinistryRespViewApiResponse
   */
  data: MinistryRespView;
  /**
   * 交易時間
   * @type {string}
   * @memberof MinistryRespViewApiResponse
   */
  txnTime: string;
}
/**
 *
 * @export
 * @interface MinistryRespViewListApiResponse
 */
export interface MinistryRespViewListApiResponse {
  /**
   *
   * @type {string}
   * @memberof MinistryRespViewListApiResponse
   */
  handledId?: string | null;
  /**
   * http-200  0000: 代表處理成功，其餘一律為失敗  http-4xx  Vxxxx: 資料驗證  Bxxxx: 詳見 message 欄位說明
   * @type {string}
   * @memberof MinistryRespViewListApiResponse
   */
  code: string;
  /**
   * 回傳訊息
   * @type {string}
   * @memberof MinistryRespViewListApiResponse
   */
  message: string;
  /**
   * 錯誤詳細資訊
   * @type {any}
   * @memberof MinistryRespViewListApiResponse
   */
  detailMessage: any;
  /**
   * 回傳資料
   * @type {Array<MinistryRespView>}
   * @memberof MinistryRespViewListApiResponse
   */
  data: Array<MinistryRespView>;
  /**
   * 交易時間
   * @type {string}
   * @memberof MinistryRespViewListApiResponse
   */
  txnTime: string;
}
/**
 *
 * @export
 * @interface MinistryRespViewPage
 */
export interface MinistryRespViewPage {
  /**
   *
   * @type {number}
   * @memberof MinistryRespViewPage
   */
  totalCount: number;
  /**
   *
   * @type {number}
   * @memberof MinistryRespViewPage
   */
  pageCount: number;
  /**
   *
   * @type {number}
   * @memberof MinistryRespViewPage
   */
  currentPage: number;
  /**
   *
   * @type {number}
   * @memberof MinistryRespViewPage
   */
  size: number;
  /**
   *
   * @type {Array<MinistryRespView>}
   * @memberof MinistryRespViewPage
   */
  records: Array<MinistryRespView>;
  /**
   *
   * @type {number}
   * @memberof MinistryRespViewPage
   */
  pageSize: number;
  /**
   *
   * @type {boolean}
   * @memberof MinistryRespViewPage
   */
  hasPreviousPages: boolean;
  /**
   *
   * @type {boolean}
   * @memberof MinistryRespViewPage
   */
  hasNextPages: boolean;
  /**
   *
   * @type {number}
   * @memberof MinistryRespViewPage
   */
  previousLastPageNo: number;
  /**
   *
   * @type {number}
   * @memberof MinistryRespViewPage
   */
  nextStartPageNo: number;
  /**
   *
   * @type {Array<number>}
   * @memberof MinistryRespViewPage
   */
  navigationPages: Array<number>;
}
/**
 *
 * @export
 * @interface MinistryRespViewPageApiResponse
 */
export interface MinistryRespViewPageApiResponse {
  /**
   *
   * @type {string}
   * @memberof MinistryRespViewPageApiResponse
   */
  handledId?: string | null;
  /**
   * http-200  0000: 代表處理成功，其餘一律為失敗  http-4xx  Vxxxx: 資料驗證  Bxxxx: 詳見 message 欄位說明
   * @type {string}
   * @memberof MinistryRespViewPageApiResponse
   */
  code: string;
  /**
   * 回傳訊息
   * @type {string}
   * @memberof MinistryRespViewPageApiResponse
   */
  message: string;
  /**
   * 錯誤詳細資訊
   * @type {any}
   * @memberof MinistryRespViewPageApiResponse
   */
  detailMessage: any;
  /**
   *
   * @type {MinistryRespViewPage}
   * @memberof MinistryRespViewPageApiResponse
   */
  data: MinistryRespViewPage;
  /**
   * 交易時間
   * @type {string}
   * @memberof MinistryRespViewPageApiResponse
   */
  txnTime: string;
}
/**
 *
 * @export
 * @interface MinistrySchedule
 */
export interface MinistrySchedule {
  /**
   * id
   * @type {number}
   * @memberof MinistrySchedule
   */
  id: number;
  /**
   * 事工團代碼
   * @type {number}
   * @memberof MinistrySchedule
   */
  ministryId: number;
  /**
   * 事工團排程設定名稱
   * @type {string}
   * @memberof MinistrySchedule
   */
  name: string;
  /**
   * 週期類別        對應type=CycleType        顯示 name        value存此欄位0：固定週期1：非固定週期(偶發類型)
   * @type {string}
   * @memberof MinistrySchedule
   */
  cycleType: string;
  /**
   * 重複間隔
   * @type {string}
   * @memberof MinistrySchedule
   */
  repeatTime: string;
  /**
   * 重複間隔單位        對應type=RepeatTimeUnit        顯示 name        value存此欄位0：日1：週2：月3：年
   * @type {string}
   * @memberof MinistrySchedule
   */
  repeatTimeUnit: string;
  /**
   * 事工團類別類型 結束時間類別        對應type=EndDateType      顯示 name        value存此欄位0：持續不停1：於2：重複
   * @type {string}
   * @memberof MinistrySchedule
   */
  endDateType: string;
  /**
   * 結束時間日期
   * @type {string}
   * @memberof MinistrySchedule
   */
  endDate: string;
  /**
   * 結束時間日期
   * @type {string}
   * @memberof MinistrySchedule
   */
  repeaTimes: string;
  /**
   *
   * @type {string}
   * @memberof MinistrySchedule
   */
  statusCd: string;
  /**
   *
   * @type {string}
   * @memberof MinistrySchedule
   */
  comment: string;
  /**
   *
   * @type {number}
   * @memberof MinistrySchedule
   */
  isActivated: number;
  /**
   *
   * @type {Array<MinistryScheduleDetail>}
   * @memberof MinistrySchedule
   */
  ministryScheduleDetails: Array<MinistryScheduleDetail>;
  /**
   * ApiLog HandledId
   * @type {string}
   * @memberof MinistrySchedule
   */
  handledId?: string | null;
  /**
   * 建立日期
   * @type {string}
   * @memberof MinistrySchedule
   */
  dateCreate?: string;
  /**
   * 建立人員
   * @type {string}
   * @memberof MinistrySchedule
   */
  userCreate?: string | null;
  /**
   * 最後修改日期
   * @type {string}
   * @memberof MinistrySchedule
   */
  dateUpdate?: string | null;
  /**
   * 最後修改人員
   * @type {string}
   * @memberof MinistrySchedule
   */
  userUpdate?: string | null;
  /**
   *
   * @type {string}
   * @memberof MinistrySchedule
   */
  rowVersion?: string | null;
}
/**
 *
 * @export
 * @interface MinistryScheduleBase
 */
export interface MinistryScheduleBase {
  /**
   * Id
   * @type {number}
   * @memberof MinistryScheduleBase
   */
  id: number;
  /**
   * Ministry.Id
   * @type {number}
   * @memberof MinistryScheduleBase
   */
  ministryId: number;
  /**
   * 排程名稱
   * @type {string}
   * @memberof MinistryScheduleBase
   */
  name: string;
  /**
   * 週期類別        對應type=CycleType        顯示 name         value存此欄位 0：固定週期 1：非固定週期(偶發類型)
   * @type {string}
   * @memberof MinistryScheduleBase
   */
  cycleType: string;
  /**
   * 重複間隔
   * @type {string}
   * @memberof MinistryScheduleBase
   */
  repeatTime: string;
  /**
   * 重複間隔單位        對應type=RepeatTimeUnit        顯示 name        value存此欄位 0：日 1：週 2：月 3：年
   * @type {string}
   * @memberof MinistryScheduleBase
   */
  repeatTimeUnit: string;
  /**
   * 結束時間類別        對應type=EndDateType        顯示 name        value存此欄位 0：持續不停 1：於 2：重複
   * @type {string}
   * @memberof MinistryScheduleBase
   */
  endDateType: string;
  /**
   * 結束時間日期
   * @type {string}
   * @memberof MinistryScheduleBase
   */
  endDate: string;
  /**
   * 結束時間日期
   * @type {string}
   * @memberof MinistryScheduleBase
   */
  repeaTimes: string;
}
/**
 *
 * @export
 * @interface MinistryScheduleDetail
 */
export interface MinistryScheduleDetail {
  /**
   * id
   * @type {number}
   * @memberof MinistryScheduleDetail
   */
  id: number;
  /**
   * 事工團排程代碼
   * @type {number}
   * @memberof MinistryScheduleDetail
   */
  ministryScheduleId: number;
  /**
   * 堂表名稱 例如：第一堂
   * @type {string}
   * @memberof MinistryScheduleDetail
   */
  name: string;
  /**
   * 描述  例如 09:00~10:00
   * @type {string}
   * @memberof MinistryScheduleDetail
   */
  description: string;
  /**
   *
   * @type {string}
   * @memberof MinistryScheduleDetail
   */
  statusCd: string;
  /**
   * ApiLog HandledId
   * @type {string}
   * @memberof MinistryScheduleDetail
   */
  handledId?: string | null;
  /**
   * 建立日期
   * @type {string}
   * @memberof MinistryScheduleDetail
   */
  dateCreate?: string;
  /**
   * 建立人員
   * @type {string}
   * @memberof MinistryScheduleDetail
   */
  userCreate?: string | null;
  /**
   * 最後修改日期
   * @type {string}
   * @memberof MinistryScheduleDetail
   */
  dateUpdate?: string | null;
  /**
   * 最後修改人員
   * @type {string}
   * @memberof MinistryScheduleDetail
   */
  userUpdate?: string | null;
  /**
   *
   * @type {string}
   * @memberof MinistryScheduleDetail
   */
  rowVersion?: string | null;
}
/**
 *
 * @export
 * @interface MinistryScheduleDetailBase
 */
export interface MinistryScheduleDetailBase {
  /**
   * 排程明細id
   * @type {number}
   * @memberof MinistryScheduleDetailBase
   */
  id: number;
  /**
   * MinistrySchedule.Id
   * @type {number}
   * @memberof MinistryScheduleDetailBase
   */
  ministryScheduleId: number;
  /**
   * 堂表名稱 例如：第一堂
   * @type {string}
   * @memberof MinistryScheduleDetailBase
   */
  name: string;
  /**
   * 描述  例如 09:00~10:00
   * @type {string}
   * @memberof MinistryScheduleDetailBase
   */
  description: string;
}
/**
 * MinistryScheduleDetail
 * @export
 * @interface MinistryScheduleDetailView
 */
export interface MinistryScheduleDetailView {
  /**
   *
   * @type {string}
   * @memberof MinistryScheduleDetailView
   */
  handledId?: string | null;
  /**
   *
   * @type {string}
   * @memberof MinistryScheduleDetailView
   */
  dateCreate?: string;
  /**
   *
   * @type {string}
   * @memberof MinistryScheduleDetailView
   */
  userCreate?: string | null;
  /**
   *
   * @type {string}
   * @memberof MinistryScheduleDetailView
   */
  dateUpdate?: string | null;
  /**
   *
   * @type {string}
   * @memberof MinistryScheduleDetailView
   */
  userUpdate?: string | null;
  /**
   * 排程明細id
   * @type {number}
   * @memberof MinistryScheduleDetailView
   */
  id: number;
  /**
   * MinistrySchedule.Id
   * @type {number}
   * @memberof MinistryScheduleDetailView
   */
  ministryScheduleId: number;
  /**
   * 堂表名稱 例如：第一堂
   * @type {string}
   * @memberof MinistryScheduleDetailView
   */
  name: string;
  /**
   * 描述  例如 09:00~10:00
   * @type {string}
   * @memberof MinistryScheduleDetailView
   */
  description: string;
}
/**
 * MinistrySchedule
 * @export
 * @interface MinistryScheduleView
 */
export interface MinistryScheduleView {
  /**
   *
   * @type {string}
   * @memberof MinistryScheduleView
   */
  handledId?: string | null;
  /**
   *
   * @type {string}
   * @memberof MinistryScheduleView
   */
  dateCreate?: string;
  /**
   *
   * @type {string}
   * @memberof MinistryScheduleView
   */
  userCreate?: string | null;
  /**
   *
   * @type {string}
   * @memberof MinistryScheduleView
   */
  dateUpdate?: string | null;
  /**
   *
   * @type {string}
   * @memberof MinistryScheduleView
   */
  userUpdate?: string | null;
  /**
   * 排程明細檔
   * @type {Array<MinistryScheduleDetailView>}
   * @memberof MinistryScheduleView
   */
  ministryScheduleDetails: Array<MinistryScheduleDetailView>;
  /**
   * Id
   * @type {number}
   * @memberof MinistryScheduleView
   */
  id: number;
  /**
   * Ministry.Id
   * @type {number}
   * @memberof MinistryScheduleView
   */
  ministryId: number;
  /**
   * 排程名稱
   * @type {string}
   * @memberof MinistryScheduleView
   */
  name: string;
  /**
   * 週期類別        對應type=CycleType        顯示 name         value存此欄位 0：固定週期 1：非固定週期(偶發類型)
   * @type {string}
   * @memberof MinistryScheduleView
   */
  cycleType: string;
  /**
   * 重複間隔
   * @type {string}
   * @memberof MinistryScheduleView
   */
  repeatTime: string;
  /**
   * 重複間隔單位        對應type=RepeatTimeUnit        顯示 name        value存此欄位 0：日 1：週 2：月 3：年
   * @type {string}
   * @memberof MinistryScheduleView
   */
  repeatTimeUnit: string;
  /**
   * 結束時間類別        對應type=EndDateType        顯示 name        value存此欄位 0：持續不停 1：於 2：重複
   * @type {string}
   * @memberof MinistryScheduleView
   */
  endDateType: string;
  /**
   * 結束時間日期
   * @type {string}
   * @memberof MinistryScheduleView
   */
  endDate: string;
  /**
   * 結束時間日期
   * @type {string}
   * @memberof MinistryScheduleView
   */
  repeaTimes: string;
}
/**
 *
 * @export
 * @interface MinistryScheduleViewApiResponse
 */
export interface MinistryScheduleViewApiResponse {
  /**
   *
   * @type {string}
   * @memberof MinistryScheduleViewApiResponse
   */
  handledId?: string | null;
  /**
   * http-200  0000: 代表處理成功，其餘一律為失敗  http-4xx  Vxxxx: 資料驗證  Bxxxx: 詳見 message 欄位說明
   * @type {string}
   * @memberof MinistryScheduleViewApiResponse
   */
  code: string;
  /**
   * 回傳訊息
   * @type {string}
   * @memberof MinistryScheduleViewApiResponse
   */
  message: string;
  /**
   * 錯誤詳細資訊
   * @type {any}
   * @memberof MinistryScheduleViewApiResponse
   */
  detailMessage: any;
  /**
   *
   * @type {MinistryScheduleView}
   * @memberof MinistryScheduleViewApiResponse
   */
  data: MinistryScheduleView;
  /**
   * 交易時間
   * @type {string}
   * @memberof MinistryScheduleViewApiResponse
   */
  txnTime: string;
}
/**
 *
 * @export
 * @interface MinistryScheduleViewListApiResponse
 */
export interface MinistryScheduleViewListApiResponse {
  /**
   *
   * @type {string}
   * @memberof MinistryScheduleViewListApiResponse
   */
  handledId?: string | null;
  /**
   * http-200  0000: 代表處理成功，其餘一律為失敗  http-4xx  Vxxxx: 資料驗證  Bxxxx: 詳見 message 欄位說明
   * @type {string}
   * @memberof MinistryScheduleViewListApiResponse
   */
  code: string;
  /**
   * 回傳訊息
   * @type {string}
   * @memberof MinistryScheduleViewListApiResponse
   */
  message: string;
  /**
   * 錯誤詳細資訊
   * @type {any}
   * @memberof MinistryScheduleViewListApiResponse
   */
  detailMessage: any;
  /**
   * 回傳資料
   * @type {Array<MinistryScheduleView>}
   * @memberof MinistryScheduleViewListApiResponse
   */
  data: Array<MinistryScheduleView>;
  /**
   * 交易時間
   * @type {string}
   * @memberof MinistryScheduleViewListApiResponse
   */
  txnTime: string;
}
/**
 *
 * @export
 * @interface MinistryScheduleViewPage
 */
export interface MinistryScheduleViewPage {
  /**
   *
   * @type {number}
   * @memberof MinistryScheduleViewPage
   */
  totalCount: number;
  /**
   *
   * @type {number}
   * @memberof MinistryScheduleViewPage
   */
  pageCount: number;
  /**
   *
   * @type {number}
   * @memberof MinistryScheduleViewPage
   */
  currentPage: number;
  /**
   *
   * @type {number}
   * @memberof MinistryScheduleViewPage
   */
  size: number;
  /**
   *
   * @type {Array<MinistryScheduleView>}
   * @memberof MinistryScheduleViewPage
   */
  records: Array<MinistryScheduleView>;
  /**
   *
   * @type {number}
   * @memberof MinistryScheduleViewPage
   */
  pageSize: number;
  /**
   *
   * @type {boolean}
   * @memberof MinistryScheduleViewPage
   */
  hasPreviousPages: boolean;
  /**
   *
   * @type {boolean}
   * @memberof MinistryScheduleViewPage
   */
  hasNextPages: boolean;
  /**
   *
   * @type {number}
   * @memberof MinistryScheduleViewPage
   */
  previousLastPageNo: number;
  /**
   *
   * @type {number}
   * @memberof MinistryScheduleViewPage
   */
  nextStartPageNo: number;
  /**
   *
   * @type {Array<number>}
   * @memberof MinistryScheduleViewPage
   */
  navigationPages: Array<number>;
}
/**
 *
 * @export
 * @interface MinistryScheduleViewPageApiResponse
 */
export interface MinistryScheduleViewPageApiResponse {
  /**
   *
   * @type {string}
   * @memberof MinistryScheduleViewPageApiResponse
   */
  handledId?: string | null;
  /**
   * http-200  0000: 代表處理成功，其餘一律為失敗  http-4xx  Vxxxx: 資料驗證  Bxxxx: 詳見 message 欄位說明
   * @type {string}
   * @memberof MinistryScheduleViewPageApiResponse
   */
  code: string;
  /**
   * 回傳訊息
   * @type {string}
   * @memberof MinistryScheduleViewPageApiResponse
   */
  message: string;
  /**
   * 錯誤詳細資訊
   * @type {any}
   * @memberof MinistryScheduleViewPageApiResponse
   */
  detailMessage: any;
  /**
   *
   * @type {MinistryScheduleViewPage}
   * @memberof MinistryScheduleViewPageApiResponse
   */
  data: MinistryScheduleViewPage;
  /**
   * 交易時間
   * @type {string}
   * @memberof MinistryScheduleViewPageApiResponse
   */
  txnTime: string;
}
/**
 * Ministry
 * @export
 * @interface MinistryView
 */
export interface MinistryView {
  /**
   *
   * @type {string}
   * @memberof MinistryView
   */
  handledId?: string | null;
  /**
   * id
   * @type {number}
   * @memberof MinistryView
   */
  id: number;
  /**
   * Organization.Id
   * @type {number}
   * @memberof MinistryView
   */
  organizationId: number;
  /**
   * 組織名稱
   * @type {string}
   * @memberof MinistryView
   */
  organizationName: string;
  /**
   * 事工團分類id
   * @type {number}
   * @memberof MinistryView
   */
  ministryDefId: number;
  /**
   * 事工團編號
   * @type {string}
   * @memberof MinistryView
   */
  ministryNo: string;
  /**
   * 事工團名稱
   * @type {string}
   * @memberof MinistryView
   */
  name: string;
  /**
   * 是否兒童事工團
   * @type {string}
   * @memberof MinistryView
   */
  childMinistry: string;
  /**
   * 事工團狀態
   * @type {string}
   * @memberof MinistryView
   */
  ministryStatus: string;
  /**
   * 性質
   * @type {string}
   * @memberof MinistryView
   */
  nature: string;
  /**
   * id
   * @type {string}
   * @memberof MinistryView
   */
  statusCd: string;
  /**
   *
   * @type {string}
   * @memberof MinistryView
   */
  comment: string;
  /**
   *
   * @type {string}
   * @memberof MinistryView
   */
  dateCreate?: string | null;
  /**
   *
   * @type {string}
   * @memberof MinistryView
   */
  userCreate?: string | null;
  /**
   *
   * @type {string}
   * @memberof MinistryView
   */
  dateUpdate?: string | null;
  /**
   *
   * @type {string}
   * @memberof MinistryView
   */
  userUpdate?: string | null;
}
/**
 *
 * @export
 * @interface MinistryViewApiResponse
 */
export interface MinistryViewApiResponse {
  /**
   *
   * @type {string}
   * @memberof MinistryViewApiResponse
   */
  handledId?: string | null;
  /**
   * http-200  0000: 代表處理成功，其餘一律為失敗  http-4xx  Vxxxx: 資料驗證  Bxxxx: 詳見 message 欄位說明
   * @type {string}
   * @memberof MinistryViewApiResponse
   */
  code: string;
  /**
   * 回傳訊息
   * @type {string}
   * @memberof MinistryViewApiResponse
   */
  message: string;
  /**
   * 錯誤詳細資訊
   * @type {any}
   * @memberof MinistryViewApiResponse
   */
  detailMessage: any;
  /**
   *
   * @type {MinistryView}
   * @memberof MinistryViewApiResponse
   */
  data: MinistryView;
  /**
   * 交易時間
   * @type {string}
   * @memberof MinistryViewApiResponse
   */
  txnTime: string;
}
/**
 *
 * @export
 * @interface MinistryViewListApiResponse
 */
export interface MinistryViewListApiResponse {
  /**
   *
   * @type {string}
   * @memberof MinistryViewListApiResponse
   */
  handledId?: string | null;
  /**
   * http-200  0000: 代表處理成功，其餘一律為失敗  http-4xx  Vxxxx: 資料驗證  Bxxxx: 詳見 message 欄位說明
   * @type {string}
   * @memberof MinistryViewListApiResponse
   */
  code: string;
  /**
   * 回傳訊息
   * @type {string}
   * @memberof MinistryViewListApiResponse
   */
  message: string;
  /**
   * 錯誤詳細資訊
   * @type {any}
   * @memberof MinistryViewListApiResponse
   */
  detailMessage: any;
  /**
   * 回傳資料
   * @type {Array<MinistryView>}
   * @memberof MinistryViewListApiResponse
   */
  data: Array<MinistryView>;
  /**
   * 交易時間
   * @type {string}
   * @memberof MinistryViewListApiResponse
   */
  txnTime: string;
}
/**
 *
 * @export
 * @interface MinistryViewPage
 */
export interface MinistryViewPage {
  /**
   *
   * @type {number}
   * @memberof MinistryViewPage
   */
  totalCount: number;
  /**
   *
   * @type {number}
   * @memberof MinistryViewPage
   */
  pageCount: number;
  /**
   *
   * @type {number}
   * @memberof MinistryViewPage
   */
  currentPage: number;
  /**
   *
   * @type {number}
   * @memberof MinistryViewPage
   */
  size: number;
  /**
   *
   * @type {Array<MinistryView>}
   * @memberof MinistryViewPage
   */
  records: Array<MinistryView>;
  /**
   *
   * @type {number}
   * @memberof MinistryViewPage
   */
  pageSize: number;
  /**
   *
   * @type {boolean}
   * @memberof MinistryViewPage
   */
  hasPreviousPages: boolean;
  /**
   *
   * @type {boolean}
   * @memberof MinistryViewPage
   */
  hasNextPages: boolean;
  /**
   *
   * @type {number}
   * @memberof MinistryViewPage
   */
  previousLastPageNo: number;
  /**
   *
   * @type {number}
   * @memberof MinistryViewPage
   */
  nextStartPageNo: number;
  /**
   *
   * @type {Array<number>}
   * @memberof MinistryViewPage
   */
  navigationPages: Array<number>;
}
/**
 *
 * @export
 * @interface MinistryViewPageApiResponse
 */
export interface MinistryViewPageApiResponse {
  /**
   *
   * @type {string}
   * @memberof MinistryViewPageApiResponse
   */
  handledId?: string | null;
  /**
   * http-200  0000: 代表處理成功，其餘一律為失敗  http-4xx  Vxxxx: 資料驗證  Bxxxx: 詳見 message 欄位說明
   * @type {string}
   * @memberof MinistryViewPageApiResponse
   */
  code: string;
  /**
   * 回傳訊息
   * @type {string}
   * @memberof MinistryViewPageApiResponse
   */
  message: string;
  /**
   * 錯誤詳細資訊
   * @type {any}
   * @memberof MinistryViewPageApiResponse
   */
  detailMessage: any;
  /**
   *
   * @type {MinistryViewPage}
   * @memberof MinistryViewPageApiResponse
   */
  data: MinistryViewPage;
  /**
   * 交易時間
   * @type {string}
   * @memberof MinistryViewPageApiResponse
   */
  txnTime: string;
}
/**
 *
 * @export
 * @interface ModMemberBase
 */
export interface ModMemberBase {
  /**
   *
   * @type {number}
   * @memberof ModMemberBase
   */
  id: number;
  /**
   *
   * @type {string}
   * @memberof ModMemberBase
   */
  portalId: string;
  /**
   *
   * @type {string}
   * @memberof ModMemberBase
   */
  name: string;
  /**
   *
   * @type {string}
   * @memberof ModMemberBase
   */
  engName: string;
  /**
   *
   * @type {string}
   * @memberof ModMemberBase
   */
  userId: string;
  /**
   *
   * @type {number}
   * @memberof ModMemberBase
   */
  categoryId: number;
  /**
   *
   * @type {string}
   * @memberof ModMemberBase
   */
  identifier: string;
  /**
   *
   * @type {string}
   * @memberof ModMemberBase
   */
  idnumber: string;
  /**
   *
   * @type {string}
   * @memberof ModMemberBase
   */
  email: string;
  /**
   *
   * @type {string}
   * @memberof ModMemberBase
   */
  contactPhone: string;
  /**
   *
   * @type {string}
   * @memberof ModMemberBase
   */
  contactCellPhone: string;
  /**
   *
   * @type {string}
   * @memberof ModMemberBase
   */
  contactCellPhone2: string;
  /**
   *
   * @type {string}
   * @memberof ModMemberBase
   */
  contactCity: string;
  /**
   *
   * @type {string}
   * @memberof ModMemberBase
   */
  contactZipCode: string;
  /**
   *
   * @type {string}
   * @memberof ModMemberBase
   */
  contactAddress: string;
  /**
   *
   * @type {string}
   * @memberof ModMemberBase
   */
  homeAddress: string;
  /**
   *
   * @type {string}
   * @memberof ModMemberBase
   */
  bizPhone: string;
  /**
   *
   * @type {string}
   * @memberof ModMemberBase
   */
  fax: string;
  /**
   *
   * @type {string}
   * @memberof ModMemberBase
   */
  gender: string;
  /**
   *
   * @type {string}
   * @memberof ModMemberBase
   */
  birthday: string;
  /**
   *
   * @type {string}
   * @memberof ModMemberBase
   */
  introducer: string;
  /**
   *
   * @type {string}
   * @memberof ModMemberBase
   */
  introducerGroup: string;
  /**
   *
   * @type {string}
   * @memberof ModMemberBase
   */
  relativeName: string;
  /**
   *
   * @type {string}
   * @memberof ModMemberBase
   */
  relativeRelation: string;
  /**
   *
   * @type {string}
   * @memberof ModMemberBase
   */
  relativeCellPhone: string;
  /**
   *
   * @type {boolean}
   * @memberof ModMemberBase
   */
  isHasCommitment: boolean;
  /**
   *
   * @type {boolean}
   * @memberof ModMemberBase
   */
  isBaptize: boolean;
  /**
   *
   * @type {number}
   * @memberof ModMemberBase
   */
  baptizeTypeId: number;
  /**
   *
   * @type {string}
   * @memberof ModMemberBase
   */
  baptizeday: string;
  /**
   *
   * @type {string}
   * @memberof ModMemberBase
   */
  baptizeOrgName: string;
  /**
   *
   * @type {string}
   * @memberof ModMemberBase
   */
  baptizeGroup: string;
  /**
   *
   * @type {string}
   * @memberof ModMemberBase
   */
  baptizer: string;
  /**
   *
   * @type {string}
   * @memberof ModMemberBase
   */
  firstSermon: string;
  /**
   *
   * @type {string}
   * @memberof ModMemberBase
   */
  firstGroupMeeting: string;
  /**
   *
   * @type {string}
   * @memberof ModMemberBase
   */
  settleDate: string;
  /**
   *
   * @type {string}
   * @memberof ModMemberBase
   */
  lastMovedDate: string;
  /**
   *
   * @type {boolean}
   * @memberof ModMemberBase
   */
  isContact: boolean;
  /**
   *
   * @type {boolean}
   * @memberof ModMemberBase
   */
  isGranted: boolean;
  /**
   *
   * @type {string}
   * @memberof ModMemberBase
   */
  grantedDate: string;
  /**
   *
   * @type {boolean}
   * @memberof ModMemberBase
   */
  isFromExp: boolean;
  /**
   *
   * @type {string}
   * @memberof ModMemberBase
   */
  sourceCd: string;
  /**
   *
   * @type {string}
   * @memberof ModMemberBase
   */
  groupLeaderDate: string;
  /**
   *
   * @type {boolean}
   * @memberof ModMemberBase
   */
  isAllowLession: boolean;
  /**
   *
   * @type {string}
   * @memberof ModMemberBase
   */
  career: string;
  /**
   *
   * @type {string}
   * @memberof ModMemberBase
   */
  careerComment: string;
  /**
   *
   * @type {string}
   * @memberof ModMemberBase
   */
  interests: string;
  /**
   *
   * @type {string}
   * @memberof ModMemberBase
   */
  minister: string;
  /**
   *
   * @type {boolean}
   * @memberof ModMemberBase
   */
  isEducation: boolean;
  /**
   *
   * @type {string}
   * @memberof ModMemberBase
   */
  levelofEducation: string;
  /**
   *
   * @type {number}
   * @memberof ModMemberBase
   */
  educationGrade: number;
  /**
   *
   * @type {string}
   * @memberof ModMemberBase
   */
  educationSchool: string;
  /**
   *
   * @type {string}
   * @memberof ModMemberBase
   */
  schoolTimeCd: string;
  /**
   *
   * @type {number}
   * @memberof ModMemberBase
   */
  marriageId: number;
  /**
   *
   * @type {string}
   * @memberof ModMemberBase
   */
  spouse: string;
  /**
   *
   * @type {string}
   * @memberof ModMemberBase
   */
  child1: string;
  /**
   *
   * @type {string}
   * @memberof ModMemberBase
   */
  child2: string;
  /**
   *
   * @type {string}
   * @memberof ModMemberBase
   */
  child3: string;
  /**
   *
   * @type {string}
   * @memberof ModMemberBase
   */
  child4: string;
  /**
   *
   * @type {string}
   * @memberof ModMemberBase
   */
  father: string;
  /**
   *
   * @type {string}
   * @memberof ModMemberBase
   */
  mother: string;
  /**
   *
   * @type {string}
   * @memberof ModMemberBase
   */
  contactTimes: string;
  /**
   *
   * @type {string}
   * @memberof ModMemberBase
   */
  orgName: string;
  /**
   *
   * @type {string}
   * @memberof ModMemberBase
   */
  department: string;
  /**
   *
   * @type {string}
   * @memberof ModMemberBase
   */
  area: string;
  /**
   *
   * @type {string}
   * @memberof ModMemberBase
   */
  zone: string;
  /**
   *
   * @type {string}
   * @memberof ModMemberBase
   */
  group: string;
  /**
   *
   * @type {string}
   * @memberof ModMemberBase
   */
  orgPriest: string;
  /**
   *
   * @type {string}
   * @memberof ModMemberBase
   */
  orgTitle: string;
  /**
   *
   * @type {number}
   * @memberof ModMemberBase
   */
  groupId: number;
  /**
   *
   * @type {number}
   * @memberof ModMemberBase
   */
  zoneId: number;
  /**
   *
   * @type {number}
   * @memberof ModMemberBase
   */
  areaId: number;
  /**
   *
   * @type {boolean}
   * @memberof ModMemberBase
   */
  isE1: boolean;
  /**
   *
   * @type {boolean}
   * @memberof ModMemberBase
   */
  isE2: boolean;
  /**
   *
   * @type {boolean}
   * @memberof ModMemberBase
   */
  isE3: boolean;
  /**
   *
   * @type {boolean}
   * @memberof ModMemberBase
   */
  isE4: boolean;
  /**
   *
   * @type {boolean}
   * @memberof ModMemberBase
   */
  isReserved: boolean;
  /**
   *
   * @type {boolean}
   * @memberof ModMemberBase
   */
  isTerm: boolean;
  /**
   *
   * @type {boolean}
   * @memberof ModMemberBase
   */
  isGroupAttendExpected: boolean;
  /**
   *
   * @type {boolean}
   * @memberof ModMemberBase
   */
  isWorshipAttendExpected: boolean;
  /**
   *
   * @type {string}
   * @memberof ModMemberBase
   */
  statusCd: string;
  /**
   *
   * @type {string}
   * @memberof ModMemberBase
   */
  comment: string;
  /**
   *
   * @type {string}
   * @memberof ModMemberBase
   */
  dateCreate?: string | null;
  /**
   *
   * @type {string}
   * @memberof ModMemberBase
   */
  userCreate?: string | null;
  /**
   *
   * @type {string}
   * @memberof ModMemberBase
   */
  dateUpdate?: string | null;
  /**
   *
   * @type {string}
   * @memberof ModMemberBase
   */
  userUpdate?: string | null;
}
/**
 * ModMember
 * @export
 * @interface ModMemberView
 */
export interface ModMemberView {
  /**
   *
   * @type {number}
   * @memberof ModMemberView
   */
  id: number;
  /**
   *
   * @type {string}
   * @memberof ModMemberView
   */
  portalId: string;
  /**
   *
   * @type {string}
   * @memberof ModMemberView
   */
  name: string;
  /**
   *
   * @type {string}
   * @memberof ModMemberView
   */
  engName: string;
  /**
   *
   * @type {string}
   * @memberof ModMemberView
   */
  userId: string;
  /**
   *
   * @type {number}
   * @memberof ModMemberView
   */
  categoryId: number;
  /**
   *
   * @type {string}
   * @memberof ModMemberView
   */
  identifier: string;
  /**
   *
   * @type {string}
   * @memberof ModMemberView
   */
  idnumber: string;
  /**
   *
   * @type {string}
   * @memberof ModMemberView
   */
  email: string;
  /**
   *
   * @type {string}
   * @memberof ModMemberView
   */
  contactPhone: string;
  /**
   *
   * @type {string}
   * @memberof ModMemberView
   */
  contactCellPhone: string;
  /**
   *
   * @type {string}
   * @memberof ModMemberView
   */
  contactCellPhone2: string;
  /**
   *
   * @type {string}
   * @memberof ModMemberView
   */
  contactCity: string;
  /**
   *
   * @type {string}
   * @memberof ModMemberView
   */
  contactZipCode: string;
  /**
   *
   * @type {string}
   * @memberof ModMemberView
   */
  contactAddress: string;
  /**
   *
   * @type {string}
   * @memberof ModMemberView
   */
  homeAddress: string;
  /**
   *
   * @type {string}
   * @memberof ModMemberView
   */
  bizPhone: string;
  /**
   *
   * @type {string}
   * @memberof ModMemberView
   */
  fax: string;
  /**
   *
   * @type {string}
   * @memberof ModMemberView
   */
  gender: string;
  /**
   *
   * @type {string}
   * @memberof ModMemberView
   */
  birthday: string;
  /**
   *
   * @type {string}
   * @memberof ModMemberView
   */
  introducer: string;
  /**
   *
   * @type {string}
   * @memberof ModMemberView
   */
  introducerGroup: string;
  /**
   *
   * @type {string}
   * @memberof ModMemberView
   */
  relativeName: string;
  /**
   *
   * @type {string}
   * @memberof ModMemberView
   */
  relativeRelation: string;
  /**
   *
   * @type {string}
   * @memberof ModMemberView
   */
  relativeCellPhone: string;
  /**
   *
   * @type {boolean}
   * @memberof ModMemberView
   */
  isHasCommitment: boolean;
  /**
   *
   * @type {boolean}
   * @memberof ModMemberView
   */
  isBaptize: boolean;
  /**
   *
   * @type {number}
   * @memberof ModMemberView
   */
  baptizeTypeId: number;
  /**
   *
   * @type {string}
   * @memberof ModMemberView
   */
  baptizeday: string;
  /**
   *
   * @type {string}
   * @memberof ModMemberView
   */
  baptizeOrgName: string;
  /**
   *
   * @type {string}
   * @memberof ModMemberView
   */
  baptizeGroup: string;
  /**
   *
   * @type {string}
   * @memberof ModMemberView
   */
  baptizer: string;
  /**
   *
   * @type {string}
   * @memberof ModMemberView
   */
  firstSermon: string;
  /**
   *
   * @type {string}
   * @memberof ModMemberView
   */
  firstGroupMeeting: string;
  /**
   *
   * @type {string}
   * @memberof ModMemberView
   */
  settleDate: string;
  /**
   *
   * @type {string}
   * @memberof ModMemberView
   */
  lastMovedDate: string;
  /**
   *
   * @type {boolean}
   * @memberof ModMemberView
   */
  isContact: boolean;
  /**
   *
   * @type {boolean}
   * @memberof ModMemberView
   */
  isGranted: boolean;
  /**
   *
   * @type {string}
   * @memberof ModMemberView
   */
  grantedDate: string;
  /**
   *
   * @type {boolean}
   * @memberof ModMemberView
   */
  isFromExp: boolean;
  /**
   *
   * @type {string}
   * @memberof ModMemberView
   */
  sourceCd: string;
  /**
   *
   * @type {string}
   * @memberof ModMemberView
   */
  groupLeaderDate: string;
  /**
   *
   * @type {boolean}
   * @memberof ModMemberView
   */
  isAllowLession: boolean;
  /**
   *
   * @type {string}
   * @memberof ModMemberView
   */
  career: string;
  /**
   *
   * @type {string}
   * @memberof ModMemberView
   */
  careerComment: string;
  /**
   *
   * @type {string}
   * @memberof ModMemberView
   */
  interests: string;
  /**
   *
   * @type {string}
   * @memberof ModMemberView
   */
  minister: string;
  /**
   *
   * @type {boolean}
   * @memberof ModMemberView
   */
  isEducation: boolean;
  /**
   *
   * @type {string}
   * @memberof ModMemberView
   */
  levelofEducation: string;
  /**
   *
   * @type {number}
   * @memberof ModMemberView
   */
  educationGrade: number;
  /**
   *
   * @type {string}
   * @memberof ModMemberView
   */
  educationSchool: string;
  /**
   *
   * @type {string}
   * @memberof ModMemberView
   */
  schoolTimeCd: string;
  /**
   *
   * @type {number}
   * @memberof ModMemberView
   */
  marriageId: number;
  /**
   *
   * @type {string}
   * @memberof ModMemberView
   */
  spouse: string;
  /**
   *
   * @type {string}
   * @memberof ModMemberView
   */
  child1: string;
  /**
   *
   * @type {string}
   * @memberof ModMemberView
   */
  child2: string;
  /**
   *
   * @type {string}
   * @memberof ModMemberView
   */
  child3: string;
  /**
   *
   * @type {string}
   * @memberof ModMemberView
   */
  child4: string;
  /**
   *
   * @type {string}
   * @memberof ModMemberView
   */
  father: string;
  /**
   *
   * @type {string}
   * @memberof ModMemberView
   */
  mother: string;
  /**
   *
   * @type {string}
   * @memberof ModMemberView
   */
  contactTimes: string;
  /**
   *
   * @type {string}
   * @memberof ModMemberView
   */
  orgName: string;
  /**
   *
   * @type {string}
   * @memberof ModMemberView
   */
  department: string;
  /**
   *
   * @type {string}
   * @memberof ModMemberView
   */
  area: string;
  /**
   *
   * @type {string}
   * @memberof ModMemberView
   */
  zone: string;
  /**
   *
   * @type {string}
   * @memberof ModMemberView
   */
  group: string;
  /**
   *
   * @type {string}
   * @memberof ModMemberView
   */
  orgPriest: string;
  /**
   *
   * @type {string}
   * @memberof ModMemberView
   */
  orgTitle: string;
  /**
   *
   * @type {number}
   * @memberof ModMemberView
   */
  groupId: number;
  /**
   *
   * @type {number}
   * @memberof ModMemberView
   */
  zoneId: number;
  /**
   *
   * @type {number}
   * @memberof ModMemberView
   */
  areaId: number;
  /**
   *
   * @type {boolean}
   * @memberof ModMemberView
   */
  isE1: boolean;
  /**
   *
   * @type {boolean}
   * @memberof ModMemberView
   */
  isE2: boolean;
  /**
   *
   * @type {boolean}
   * @memberof ModMemberView
   */
  isE3: boolean;
  /**
   *
   * @type {boolean}
   * @memberof ModMemberView
   */
  isE4: boolean;
  /**
   *
   * @type {boolean}
   * @memberof ModMemberView
   */
  isReserved: boolean;
  /**
   *
   * @type {boolean}
   * @memberof ModMemberView
   */
  isTerm: boolean;
  /**
   *
   * @type {boolean}
   * @memberof ModMemberView
   */
  isGroupAttendExpected: boolean;
  /**
   *
   * @type {boolean}
   * @memberof ModMemberView
   */
  isWorshipAttendExpected: boolean;
  /**
   *
   * @type {string}
   * @memberof ModMemberView
   */
  statusCd: string;
  /**
   *
   * @type {string}
   * @memberof ModMemberView
   */
  comment: string;
  /**
   *
   * @type {string}
   * @memberof ModMemberView
   */
  dateCreate?: string | null;
  /**
   *
   * @type {string}
   * @memberof ModMemberView
   */
  userCreate?: string | null;
  /**
   *
   * @type {string}
   * @memberof ModMemberView
   */
  dateUpdate?: string | null;
  /**
   *
   * @type {string}
   * @memberof ModMemberView
   */
  userUpdate?: string | null;
}
/**
 *
 * @export
 * @interface ModMemberViewApiResponse
 */
export interface ModMemberViewApiResponse {
  /**
   *
   * @type {string}
   * @memberof ModMemberViewApiResponse
   */
  handledId?: string | null;
  /**
   * http-200  0000: 代表處理成功，其餘一律為失敗  http-4xx  Vxxxx: 資料驗證  Bxxxx: 詳見 message 欄位說明
   * @type {string}
   * @memberof ModMemberViewApiResponse
   */
  code: string;
  /**
   * 回傳訊息
   * @type {string}
   * @memberof ModMemberViewApiResponse
   */
  message: string;
  /**
   * 錯誤詳細資訊
   * @type {any}
   * @memberof ModMemberViewApiResponse
   */
  detailMessage: any;
  /**
   *
   * @type {ModMemberView}
   * @memberof ModMemberViewApiResponse
   */
  data: ModMemberView;
  /**
   * 交易時間
   * @type {string}
   * @memberof ModMemberViewApiResponse
   */
  txnTime: string;
}
/**
 *
 * @export
 * @interface ObjectApiResponse
 */
export interface ObjectApiResponse {
  /**
   *
   * @type {string}
   * @memberof ObjectApiResponse
   */
  handledId?: string | null;
  /**
   * http-200  0000: 代表處理成功，其餘一律為失敗  http-4xx  Vxxxx: 資料驗證  Bxxxx: 詳見 message 欄位說明
   * @type {string}
   * @memberof ObjectApiResponse
   */
  code: string;
  /**
   * 回傳訊息
   * @type {string}
   * @memberof ObjectApiResponse
   */
  message: string;
  /**
   * 錯誤詳細資訊
   * @type {any}
   * @memberof ObjectApiResponse
   */
  detailMessage: any;
  /**
   * 回傳資料
   * @type {any}
   * @memberof ObjectApiResponse
   */
  data: any;
  /**
   * 交易時間
   * @type {string}
   * @memberof ObjectApiResponse
   */
  txnTime: string;
}
/**
 *
 * @export
 * @interface Organization
 */
export interface Organization {
  /**
   * DeptId 組織部門Id
   * @type {number}
   * @memberof Organization
   */
  deptId: number;
  /**
   * Id
   * @type {number}
   * @memberof Organization
   */
  id: number;
  /**
   * 舊的Id
   * @type {number}
   * @memberof Organization
   */
  upperOrganizationId: number;
  /**
   * 組織名稱
   * @type {string}
   * @memberof Organization
   */
  name: string;
  /**
   * 主任牧師名稱
   * @type {string}
   * @memberof Organization
   */
  pastorName: string;
  /**
   * 主任牧師User.Id
   * @type {number}
   * @memberof Organization
   */
  pastorId: number;
  /**
   * 主任牧師身分證
   * @type {string}
   * @memberof Organization
   */
  pastor: string;
  /**
   * 主任牧師電話
   * @type {string}
   * @memberof Organization
   */
  pastorphone: string;
  /**
   *
   * @type {string}
   * @memberof Organization
   */
  phone: string;
  /**
   * 教會電話
   * @type {string}
   * @memberof Organization
   */
  fax: string;
  /**
   * 教會傳真
   * @type {string}
   * @memberof Organization
   */
  email: string;
  /**
   * 教會Email
   * @type {string}
   * @memberof Organization
   */
  site: string;
  /**
   * 教會網址
   * @type {string}
   * @memberof Organization
   */
  zip: string;
  /**
   * 教會郵遞區號
   * @type {string}
   * @memberof Organization
   */
  address: string;
  /**
   * 教會地址
   * @type {string}
   * @memberof Organization
   */
  invoiceIdentifier: string;
  /**
   * 教會統一編號抬頭
   * @type {string}
   * @memberof Organization
   */
  invoiceTitle: string;
  /**
   * LineToken
   * @type {string}
   * @memberof Organization
   */
  lineToken: string;
  /**
   * 是否需要發票抬頭        對應SystemConfig        type = IsYN顯示 namevalue存此欄位0：N1：Y
   * @type {string}
   * @memberof Organization
   */
  isInvoiceTitle: string;
  /**
   * 組織狀態        對應SystemConfig        type =OrgStatus顯示 namevalue存此欄位0：停用 1：正常
   * @type {string}
   * @memberof Organization
   */
  orgStatus: string;
  /**
   *
   * @type {string}
   * @memberof Organization
   */
  statusCd: string;
  /**
   * ApiLog HandledId
   * @type {string}
   * @memberof Organization
   */
  handledId?: string | null;
  /**
   * 建立日期
   * @type {string}
   * @memberof Organization
   */
  dateCreate?: string;
  /**
   * 建立人員
   * @type {string}
   * @memberof Organization
   */
  userCreate?: string | null;
  /**
   * 最後修改日期
   * @type {string}
   * @memberof Organization
   */
  dateUpdate?: string | null;
  /**
   * 最後修改人員
   * @type {string}
   * @memberof Organization
   */
  userUpdate?: string | null;
  /**
   *
   * @type {string}
   * @memberof Organization
   */
  rowVersion?: string | null;
}
/**
 *
 * @export
 * @interface OrganizationBase
 */
export interface OrganizationBase {
  /**
   * Id
   * @type {number}
   * @memberof OrganizationBase
   */
  id: number;
  /**
   * 組織部門Id
   * @type {number}
   * @memberof OrganizationBase
   */
  deptId: number;
  /**
   * 上層的Id
   * @type {number}
   * @memberof OrganizationBase
   */
  upperOrganizationId: number;
  /**
   * 舊欄位對應部門id Portal.Id
   * @type {number}
   * @memberof OrganizationBase
   */
  portalId: number;
  /**
   * 組織名稱
   * @type {string}
   * @memberof OrganizationBase
   */
  name: string;
  /**
   * 主任牧師名稱
   * @type {string}
   * @memberof OrganizationBase
   */
  pastorName: string;
  /**
   * 主任牧師User.Id
   * @type {number}
   * @memberof OrganizationBase
   */
  pastorId: number;
  /**
   * 主任牧師身分證
   * @type {string}
   * @memberof OrganizationBase
   */
  pastor: string;
  /**
   * 主任牧師電話
   * @type {string}
   * @memberof OrganizationBase
   */
  pastorphone: string;
  /**
   *
   * @type {string}
   * @memberof OrganizationBase
   */
  phone: string;
  /**
   * 教會電話
   * @type {string}
   * @memberof OrganizationBase
   */
  fax: string;
  /**
   * 教會傳真
   * @type {string}
   * @memberof OrganizationBase
   */
  email: string;
  /**
   * 教會Email
   * @type {string}
   * @memberof OrganizationBase
   */
  site: string;
  /**
   * 教會網址
   * @type {string}
   * @memberof OrganizationBase
   */
  zip: string;
  /**
   * 教會郵遞區號
   * @type {string}
   * @memberof OrganizationBase
   */
  address: string;
  /**
   * 教會地址
   * @type {string}
   * @memberof OrganizationBase
   */
  invoiceIdentifier: string;
  /**
   * 教會統一編號抬頭
   * @type {string}
   * @memberof OrganizationBase
   */
  invoiceTitle: string;
  /**
   * 是否需要發票抬頭        對應SystemConfig        type = IsYN顯示 namevalue存此欄位0：N1：Y
   * @type {string}
   * @memberof OrganizationBase
   */
  isInvoiceTitle: string;
  /**
   * 組織狀態        對應SystemConfig        type =OrgStatus顯示 namevalue存此欄位0：停用 1：正常
   * @type {string}
   * @memberof OrganizationBase
   */
  orgStatus: string;
  /**
   * LineToken
   * @type {string}
   * @memberof OrganizationBase
   */
  lineToken: string;
  /**
   *
   * @type {string}
   * @memberof OrganizationBase
   */
  comment: string;
  /**
   *
   * @type {string}
   * @memberof OrganizationBase
   */
  dateCreate?: string | null;
  /**
   *
   * @type {string}
   * @memberof OrganizationBase
   */
  userCreate?: string | null;
  /**
   *
   * @type {string}
   * @memberof OrganizationBase
   */
  dateUpdate?: string | null;
  /**
   *
   * @type {string}
   * @memberof OrganizationBase
   */
  userUpdate?: string | null;
}
/**
 *
 * @export
 * @interface OrganizationUser
 */
export interface OrganizationUser {
  /**
   *
   * @type {number}
   * @memberof OrganizationUser
   */
  id: number;
  /**
   *
   * @type {number}
   * @memberof OrganizationUser
   */
  organizationId: number;
  /**
   *
   * @type {number}
   * @memberof OrganizationUser
   */
  userId: number;
  /**
   *
   * @type {string}
   * @memberof OrganizationUser
   */
  statusCd: string;
  /**
   *
   * @type {string}
   * @memberof OrganizationUser
   */
  comment: string;
  /**
   * ApiLog HandledId
   * @type {string}
   * @memberof OrganizationUser
   */
  handledId?: string | null;
  /**
   * 建立日期
   * @type {string}
   * @memberof OrganizationUser
   */
  dateCreate?: string;
  /**
   * 建立人員
   * @type {string}
   * @memberof OrganizationUser
   */
  userCreate?: string | null;
  /**
   * 最後修改日期
   * @type {string}
   * @memberof OrganizationUser
   */
  dateUpdate?: string | null;
  /**
   * 最後修改人員
   * @type {string}
   * @memberof OrganizationUser
   */
  userUpdate?: string | null;
  /**
   *
   * @type {string}
   * @memberof OrganizationUser
   */
  rowVersion?: string | null;
}
/**
 * Organization
 * @export
 * @interface OrganizationView
 */
export interface OrganizationView {
  /**
   *
   * @type {string}
   * @memberof OrganizationView
   */
  handledId?: string | null;
  /**
   *
   * @type {number}
   * @memberof OrganizationView
   */
  subCounter: number;
  /**
   *
   * @type {string}
   * @memberof OrganizationView
   */
  deptTreeName: string;
  /**
   * Id
   * @type {number}
   * @memberof OrganizationView
   */
  id: number;
  /**
   * 組織部門Id
   * @type {number}
   * @memberof OrganizationView
   */
  deptId: number;
  /**
   * 上層的Id
   * @type {number}
   * @memberof OrganizationView
   */
  upperOrganizationId: number;
  /**
   * 舊欄位對應部門id Portal.Id
   * @type {number}
   * @memberof OrganizationView
   */
  portalId: number;
  /**
   * 組織名稱
   * @type {string}
   * @memberof OrganizationView
   */
  name: string;
  /**
   * 主任牧師名稱
   * @type {string}
   * @memberof OrganizationView
   */
  pastorName: string;
  /**
   * 主任牧師User.Id
   * @type {number}
   * @memberof OrganizationView
   */
  pastorId: number;
  /**
   * 主任牧師身分證
   * @type {string}
   * @memberof OrganizationView
   */
  pastor: string;
  /**
   * 主任牧師電話
   * @type {string}
   * @memberof OrganizationView
   */
  pastorphone: string;
  /**
   *
   * @type {string}
   * @memberof OrganizationView
   */
  phone: string;
  /**
   * 教會電話
   * @type {string}
   * @memberof OrganizationView
   */
  fax: string;
  /**
   * 教會傳真
   * @type {string}
   * @memberof OrganizationView
   */
  email: string;
  /**
   * 教會Email
   * @type {string}
   * @memberof OrganizationView
   */
  site: string;
  /**
   * 教會網址
   * @type {string}
   * @memberof OrganizationView
   */
  zip: string;
  /**
   * 教會郵遞區號
   * @type {string}
   * @memberof OrganizationView
   */
  address: string;
  /**
   * 教會地址
   * @type {string}
   * @memberof OrganizationView
   */
  invoiceIdentifier: string;
  /**
   * 教會統一編號抬頭
   * @type {string}
   * @memberof OrganizationView
   */
  invoiceTitle: string;
  /**
   * 是否需要發票抬頭        對應SystemConfig        type = IsYN顯示 namevalue存此欄位0：N1：Y
   * @type {string}
   * @memberof OrganizationView
   */
  isInvoiceTitle: string;
  /**
   * 組織狀態        對應SystemConfig        type =OrgStatus顯示 namevalue存此欄位0：停用 1：正常
   * @type {string}
   * @memberof OrganizationView
   */
  orgStatus: string;
  /**
   * LineToken
   * @type {string}
   * @memberof OrganizationView
   */
  lineToken: string;
  /**
   *
   * @type {string}
   * @memberof OrganizationView
   */
  comment: string;
  /**
   *
   * @type {string}
   * @memberof OrganizationView
   */
  dateCreate?: string | null;
  /**
   *
   * @type {string}
   * @memberof OrganizationView
   */
  userCreate?: string | null;
  /**
   *
   * @type {string}
   * @memberof OrganizationView
   */
  dateUpdate?: string | null;
  /**
   *
   * @type {string}
   * @memberof OrganizationView
   */
  userUpdate?: string | null;
}
/**
 *
 * @export
 * @interface OrganizationViewApiResponse
 */
export interface OrganizationViewApiResponse {
  /**
   *
   * @type {string}
   * @memberof OrganizationViewApiResponse
   */
  handledId?: string | null;
  /**
   * http-200  0000: 代表處理成功，其餘一律為失敗  http-4xx  Vxxxx: 資料驗證  Bxxxx: 詳見 message 欄位說明
   * @type {string}
   * @memberof OrganizationViewApiResponse
   */
  code: string;
  /**
   * 回傳訊息
   * @type {string}
   * @memberof OrganizationViewApiResponse
   */
  message: string;
  /**
   * 錯誤詳細資訊
   * @type {any}
   * @memberof OrganizationViewApiResponse
   */
  detailMessage: any;
  /**
   *
   * @type {OrganizationView}
   * @memberof OrganizationViewApiResponse
   */
  data: OrganizationView;
  /**
   * 交易時間
   * @type {string}
   * @memberof OrganizationViewApiResponse
   */
  txnTime: string;
}
/**
 *
 * @export
 * @interface OrganizationViewListApiResponse
 */
export interface OrganizationViewListApiResponse {
  /**
   *
   * @type {string}
   * @memberof OrganizationViewListApiResponse
   */
  handledId?: string | null;
  /**
   * http-200  0000: 代表處理成功，其餘一律為失敗  http-4xx  Vxxxx: 資料驗證  Bxxxx: 詳見 message 欄位說明
   * @type {string}
   * @memberof OrganizationViewListApiResponse
   */
  code: string;
  /**
   * 回傳訊息
   * @type {string}
   * @memberof OrganizationViewListApiResponse
   */
  message: string;
  /**
   * 錯誤詳細資訊
   * @type {any}
   * @memberof OrganizationViewListApiResponse
   */
  detailMessage: any;
  /**
   * 回傳資料
   * @type {Array<OrganizationView>}
   * @memberof OrganizationViewListApiResponse
   */
  data: Array<OrganizationView>;
  /**
   * 交易時間
   * @type {string}
   * @memberof OrganizationViewListApiResponse
   */
  txnTime: string;
}
/**
 *
 * @export
 * @interface OrganizationViewPage
 */
export interface OrganizationViewPage {
  /**
   *
   * @type {number}
   * @memberof OrganizationViewPage
   */
  totalCount: number;
  /**
   *
   * @type {number}
   * @memberof OrganizationViewPage
   */
  pageCount: number;
  /**
   *
   * @type {number}
   * @memberof OrganizationViewPage
   */
  currentPage: number;
  /**
   *
   * @type {number}
   * @memberof OrganizationViewPage
   */
  size: number;
  /**
   *
   * @type {Array<OrganizationView>}
   * @memberof OrganizationViewPage
   */
  records: Array<OrganizationView>;
  /**
   *
   * @type {number}
   * @memberof OrganizationViewPage
   */
  pageSize: number;
  /**
   *
   * @type {boolean}
   * @memberof OrganizationViewPage
   */
  hasPreviousPages: boolean;
  /**
   *
   * @type {boolean}
   * @memberof OrganizationViewPage
   */
  hasNextPages: boolean;
  /**
   *
   * @type {number}
   * @memberof OrganizationViewPage
   */
  previousLastPageNo: number;
  /**
   *
   * @type {number}
   * @memberof OrganizationViewPage
   */
  nextStartPageNo: number;
  /**
   *
   * @type {Array<number>}
   * @memberof OrganizationViewPage
   */
  navigationPages: Array<number>;
}
/**
 *
 * @export
 * @interface OrganizationViewPageApiResponse
 */
export interface OrganizationViewPageApiResponse {
  /**
   *
   * @type {string}
   * @memberof OrganizationViewPageApiResponse
   */
  handledId?: string | null;
  /**
   * http-200  0000: 代表處理成功，其餘一律為失敗  http-4xx  Vxxxx: 資料驗證  Bxxxx: 詳見 message 欄位說明
   * @type {string}
   * @memberof OrganizationViewPageApiResponse
   */
  code: string;
  /**
   * 回傳訊息
   * @type {string}
   * @memberof OrganizationViewPageApiResponse
   */
  message: string;
  /**
   * 錯誤詳細資訊
   * @type {any}
   * @memberof OrganizationViewPageApiResponse
   */
  detailMessage: any;
  /**
   *
   * @type {OrganizationViewPage}
   * @memberof OrganizationViewPageApiResponse
   */
  data: OrganizationViewPage;
  /**
   * 交易時間
   * @type {string}
   * @memberof OrganizationViewPageApiResponse
   */
  txnTime: string;
}
/**
 *
 * @export
 * @interface PageableQuery
 */
export interface PageableQuery {
  /**
   * 查詢欄位排序
   * @type {Array<SortProperty>}
   * @memberof PageableQuery
   */
  sortProperties: Array<SortProperty>;
  /**
   * 目前頁數
   * @type {number}
   * @memberof PageableQuery
   */
  page: number;
  /**
   * 每頁筆數
   * @type {number}
   * @memberof PageableQuery
   */
  size: number;
}
/**
 *
 * @export
 * @enum {string}
 */

export enum PasswordResetType {
  Email = "Email",
  Sms = "Sms",
}

/**
 *
 * @export
 * @interface Pastoral
 */
export interface Pastoral {
  /**
   * 組織部門Id
   * @type {number}
   * @memberof Pastoral
   */
  deptId: number;
  /**
   *
   * @type {number}
   * @memberof Pastoral
   */
  id: number;
  /**
   *
   * @type {number}
   * @memberof Pastoral
   */
  upperPastoralId: number;
  /**
   *
   * @type {string}
   * @memberof Pastoral
   */
  name: string;
  /**
   *
   * @type {string}
   * @memberof Pastoral
   */
  title: string;
  /**
   *
   * @type {string}
   * @memberof Pastoral
   */
  groupNo: string;
  /**
   *
   * @type {number}
   * @memberof Pastoral
   */
  leaderId: number;
  /**
   *
   * @type {string}
   * @memberof Pastoral
   */
  leaderIdNumber: string;
  /**
   *
   * @type {number}
   * @memberof Pastoral
   */
  leader2Id: number;
  /**
   *
   * @type {string}
   * @memberof Pastoral
   */
  leader2IdNumber: string;
  /**
   *
   * @type {number}
   * @memberof Pastoral
   */
  leader3Id: number;
  /**
   *
   * @type {string}
   * @memberof Pastoral
   */
  leader3IdNumber: string;
  /**
   *
   * @type {number}
   * @memberof Pastoral
   */
  supervisorId: number;
  /**
   *
   * @type {number}
   * @memberof Pastoral
   */
  oid: number;
  /**
   *
   * @type {number}
   * @memberof Pastoral
   */
  orgId: number;
  /**
   *
   * @type {string}
   * @memberof Pastoral
   */
  typeId: string;
  /**
   * LineToken
   * @type {string}
   * @memberof Pastoral
   */
  lineToken: string;
  /**
   *
   * @type {string}
   * @memberof Pastoral
   */
  statusCd: string;
  /**
   *
   * @type {string}
   * @memberof Pastoral
   */
  comment: string;
  /**
   * ApiLog HandledId
   * @type {string}
   * @memberof Pastoral
   */
  handledId?: string | null;
  /**
   * 建立日期
   * @type {string}
   * @memberof Pastoral
   */
  dateCreate?: string;
  /**
   * 建立人員
   * @type {string}
   * @memberof Pastoral
   */
  userCreate?: string | null;
  /**
   * 最後修改日期
   * @type {string}
   * @memberof Pastoral
   */
  dateUpdate?: string | null;
  /**
   * 最後修改人員
   * @type {string}
   * @memberof Pastoral
   */
  userUpdate?: string | null;
  /**
   *
   * @type {string}
   * @memberof Pastoral
   */
  rowVersion?: string | null;
}
/**
 *
 * @export
 * @interface PastoralBase
 */
export interface PastoralBase {
  /**
   * 組織部門Id
   * @type {number}
   * @memberof PastoralBase
   */
  deptId: number;
  /**
   * id
   * @type {number}
   * @memberof PastoralBase
   */
  id: number;
  /**
   * 組織上層Id (分多階層)        堂點       牧區 督區 區 小組
   * @type {number}
   * @memberof PastoralBase
   */
  upperPastoralId: number;
  /**
   * 分組區域名稱
   * @type {string}
   * @memberof PastoralBase
   */
  name: string;
  /**
   * 分組區域職稱
   * @type {string}
   * @memberof PastoralBase
   */
  title: string;
  /**
   * 小組編號//八碼數字 系統自動產生(為小組時才需填入)
   * @type {string}
   * @memberof PastoralBase
   */
  groupNo: string;
  /**
   * 領導人 UserId
   * @type {number}
   * @memberof PastoralBase
   */
  leaderId: number;
  /**
   * 領導人身分證
   * @type {string}
   * @memberof PastoralBase
   */
  leaderIdnumber: string;
  /**
   * 領導人2 UserId
   * @type {number}
   * @memberof PastoralBase
   */
  leader2Id: number;
  /**
   * 領導人2身分證
   * @type {string}
   * @memberof PastoralBase
   */
  leader2Idnumber: string;
  /**
   * 領導人3 UserId
   * @type {number}
   * @memberof PastoralBase
   */
  leader3Id: number;
  /**
   * 領導人3身分證
   * @type {string}
   * @memberof PastoralBase
   */
  leader3Idnumber: string;
  /**
   * 最大權限人UserId
   * @type {number}
   * @memberof PastoralBase
   */
  supervisorId: number;
  /**
   * LineToken
   * @type {string}
   * @memberof PastoralBase
   */
  lineToken: string;
  /**
   *
   * @type {number}
   * @memberof PastoralBase
   */
  upperOrganizationId: number;
  /**
   *
   * @type {number}
   * @memberof PastoralBase
   */
  orgId: number;
  /**
   *
   * @type {string}
   * @memberof PastoralBase
   */
  typeId: string;
  /**
   *
   * @type {string}
   * @memberof PastoralBase
   */
  statusCd: string;
  /**
   *
   * @type {string}
   * @memberof PastoralBase
   */
  comment: string;
  /**
   *
   * @type {string}
   * @memberof PastoralBase
   */
  dateCreate?: string | null;
  /**
   *
   * @type {string}
   * @memberof PastoralBase
   */
  userCreate?: string | null;
  /**
   *
   * @type {string}
   * @memberof PastoralBase
   */
  dateUpdate?: string | null;
  /**
   *
   * @type {string}
   * @memberof PastoralBase
   */
  userUpdate?: string | null;
  /**
   *
   * @type {number}
   * @memberof PastoralBase
   */
  isActivated: number;
}
/**
 *
 * @export
 * @interface PastoralMeeting
 */
export interface PastoralMeeting {
  /**
   * id
   * @type {number}
   * @memberof PastoralMeeting
   */
  id: number;
  /**
   * Pastoral.Id
   * @type {number}
   * @memberof PastoralMeeting
   */
  pastoralId: number;
  /**
   * 小組聚會每周哪一天
   * @type {string}
   * @memberof PastoralMeeting
   */
  meetingDayOfWeek: string;
  /**
   * 聚會時間
   * @type {string}
   * @memberof PastoralMeeting
   */
  meetingTime: string;
  /**
   * 聚會地點
   * @type {string}
   * @memberof PastoralMeeting
   */
  meetingAddress: string;
  /**
   * 聚會日期
   * @type {string}
   * @memberof PastoralMeeting
   */
  meetingDay: string;
  /**
   * 是否為外展對應SystemConfigtype=IsNY顯示 namevalue存此欄位0：N1：Y
   * @type {string}
   * @memberof PastoralMeeting
   */
  isExp: string;
  /**
   * 是否可查詢，否表示隱藏小組
   * @type {string}
   * @memberof PastoralMeeting
   */
  isSearchable: string;
  /**
   * 聚會狀態對應SystemConfigtype=MeetType顯示 namevalue存此欄位0：尚未開始1：正常舉行2：停辦
   * @type {string}
   * @memberof PastoralMeeting
   */
  meetType: string;
  /**
   *
   * @type {string}
   * @memberof PastoralMeeting
   */
  statusCd: string;
  /**
   * ApiLog HandledId
   * @type {string}
   * @memberof PastoralMeeting
   */
  handledId?: string | null;
  /**
   * 建立日期
   * @type {string}
   * @memberof PastoralMeeting
   */
  dateCreate?: string;
  /**
   * 建立人員
   * @type {string}
   * @memberof PastoralMeeting
   */
  userCreate?: string | null;
  /**
   * 最後修改日期
   * @type {string}
   * @memberof PastoralMeeting
   */
  dateUpdate?: string | null;
  /**
   * 最後修改人員
   * @type {string}
   * @memberof PastoralMeeting
   */
  userUpdate?: string | null;
  /**
   *
   * @type {string}
   * @memberof PastoralMeeting
   */
  rowVersion?: string | null;
}
/**
 *
 * @export
 * @interface PastoralMeetingBase
 */
export interface PastoralMeetingBase {
  /**
   * id
   * @type {number}
   * @memberof PastoralMeetingBase
   */
  id: number;
  /**
   * Pastoral.Id
   * @type {number}
   * @memberof PastoralMeetingBase
   */
  pastoralId: number;
  /**
   * 小組聚會每周哪一天
   * @type {string}
   * @memberof PastoralMeetingBase
   */
  meetingDayOfWeek: string;
  /**
   * 聚會時間
   * @type {string}
   * @memberof PastoralMeetingBase
   */
  meetingTime: string;
  /**
   * 聚會地點
   * @type {string}
   * @memberof PastoralMeetingBase
   */
  meetingAddress: string;
  /**
   * 聚會日期
   * @type {string}
   * @memberof PastoralMeetingBase
   */
  meetingDay: string;
  /**
   * 是否為外展對應SystemConfigtype=IsNY顯示 namevalue存此欄位0：N1：Y
   * @type {string}
   * @memberof PastoralMeetingBase
   */
  isExp: string;
  /**
   * 是否可查詢，否表示隱藏小組
   * @type {string}
   * @memberof PastoralMeetingBase
   */
  isSearchable: string;
  /**
   * 聚會狀態對應SystemConfigtype=MeetType顯示 namevalue存此欄位0：尚未開始1：正常舉行2：停辦
   * @type {string}
   * @memberof PastoralMeetingBase
   */
  meetType: string;
}
/**
 *
 * @export
 * @interface PastoralMeetingUser
 */
export interface PastoralMeetingUser {
  /**
   * id
   * @type {number}
   * @memberof PastoralMeetingUser
   */
  id: number;
  /**
   * PastoralMeeting.Id
   * @type {number}
   * @memberof PastoralMeetingUser
   */
  pastoralMeetingId: number;
  /**
   * User.Id
   * @type {number}
   * @memberof PastoralMeetingUser
   */
  userId: number;
  /**
   * 是否聚會出席狀態        對應SystemConfig        type = MeetAttendanceType顯示 namevalue存此欄位0：尚未開課1：已出席2:未出席
   * @type {number}
   * @memberof PastoralMeetingUser
   */
  meetAttendanceType: number;
  /**
   *
   * @type {string}
   * @memberof PastoralMeetingUser
   */
  statusCd: string;
  /**
   * ApiLog HandledId
   * @type {string}
   * @memberof PastoralMeetingUser
   */
  handledId?: string | null;
  /**
   * 建立日期
   * @type {string}
   * @memberof PastoralMeetingUser
   */
  dateCreate?: string;
  /**
   * 建立人員
   * @type {string}
   * @memberof PastoralMeetingUser
   */
  userCreate?: string | null;
  /**
   * 最後修改日期
   * @type {string}
   * @memberof PastoralMeetingUser
   */
  dateUpdate?: string | null;
  /**
   * 最後修改人員
   * @type {string}
   * @memberof PastoralMeetingUser
   */
  userUpdate?: string | null;
  /**
   *
   * @type {string}
   * @memberof PastoralMeetingUser
   */
  rowVersion?: string | null;
}
/**
 * 簽到表
 * @export
 * @interface PastoralMeetingUserBase
 */
export interface PastoralMeetingUserBase {
  /**
   * id
   * @type {number}
   * @memberof PastoralMeetingUserBase
   */
  id: number;
  /**
   * PastoralMeeting.Id
   * @type {number}
   * @memberof PastoralMeetingUserBase
   */
  pastoralMeetingId: number;
  /**
   * User.Id
   * @type {number}
   * @memberof PastoralMeetingUserBase
   */
  userId: number;
  /**
   * 是否聚會出席狀態        對應SystemConfig        type = MeetAttendanceType顯示 namevalue存此欄位0：尚未開課1：已出席2:未出席
   * @type {number}
   * @memberof PastoralMeetingUserBase
   */
  meetAttendanceType: number;
}
/**
 * PastoralMeetingUser
 * @export
 * @interface PastoralMeetingUserView
 */
export interface PastoralMeetingUserView {
  /**
   *
   * @type {string}
   * @memberof PastoralMeetingUserView
   */
  handledId?: string | null;
  /**
   *
   * @type {string}
   * @memberof PastoralMeetingUserView
   */
  dateCreate?: string;
  /**
   *
   * @type {string}
   * @memberof PastoralMeetingUserView
   */
  userCreate?: string | null;
  /**
   *
   * @type {string}
   * @memberof PastoralMeetingUserView
   */
  dateUpdate?: string | null;
  /**
   *
   * @type {string}
   * @memberof PastoralMeetingUserView
   */
  userUpdate?: string | null;
  /**
   * id
   * @type {number}
   * @memberof PastoralMeetingUserView
   */
  id: number;
  /**
   * PastoralMeeting.Id
   * @type {number}
   * @memberof PastoralMeetingUserView
   */
  pastoralMeetingId: number;
  /**
   * User.Id
   * @type {number}
   * @memberof PastoralMeetingUserView
   */
  userId: number;
  /**
   * 是否聚會出席狀態        對應SystemConfig        type = MeetAttendanceType顯示 namevalue存此欄位0：尚未開課1：已出席2:未出席
   * @type {number}
   * @memberof PastoralMeetingUserView
   */
  meetAttendanceType: number;
}
/**
 *
 * @export
 * @interface PastoralMeetingUserViewApiResponse
 */
export interface PastoralMeetingUserViewApiResponse {
  /**
   *
   * @type {string}
   * @memberof PastoralMeetingUserViewApiResponse
   */
  handledId?: string | null;
  /**
   * http-200  0000: 代表處理成功，其餘一律為失敗  http-4xx  Vxxxx: 資料驗證  Bxxxx: 詳見 message 欄位說明
   * @type {string}
   * @memberof PastoralMeetingUserViewApiResponse
   */
  code: string;
  /**
   * 回傳訊息
   * @type {string}
   * @memberof PastoralMeetingUserViewApiResponse
   */
  message: string;
  /**
   * 錯誤詳細資訊
   * @type {any}
   * @memberof PastoralMeetingUserViewApiResponse
   */
  detailMessage: any;
  /**
   *
   * @type {PastoralMeetingUserView}
   * @memberof PastoralMeetingUserViewApiResponse
   */
  data: PastoralMeetingUserView;
  /**
   * 交易時間
   * @type {string}
   * @memberof PastoralMeetingUserViewApiResponse
   */
  txnTime: string;
}
/**
 *
 * @export
 * @interface PastoralMeetingUserViewListApiResponse
 */
export interface PastoralMeetingUserViewListApiResponse {
  /**
   *
   * @type {string}
   * @memberof PastoralMeetingUserViewListApiResponse
   */
  handledId?: string | null;
  /**
   * http-200  0000: 代表處理成功，其餘一律為失敗  http-4xx  Vxxxx: 資料驗證  Bxxxx: 詳見 message 欄位說明
   * @type {string}
   * @memberof PastoralMeetingUserViewListApiResponse
   */
  code: string;
  /**
   * 回傳訊息
   * @type {string}
   * @memberof PastoralMeetingUserViewListApiResponse
   */
  message: string;
  /**
   * 錯誤詳細資訊
   * @type {any}
   * @memberof PastoralMeetingUserViewListApiResponse
   */
  detailMessage: any;
  /**
   * 回傳資料
   * @type {Array<PastoralMeetingUserView>}
   * @memberof PastoralMeetingUserViewListApiResponse
   */
  data: Array<PastoralMeetingUserView>;
  /**
   * 交易時間
   * @type {string}
   * @memberof PastoralMeetingUserViewListApiResponse
   */
  txnTime: string;
}
/**
 *
 * @export
 * @interface PastoralMeetingUserViewPage
 */
export interface PastoralMeetingUserViewPage {
  /**
   *
   * @type {number}
   * @memberof PastoralMeetingUserViewPage
   */
  totalCount: number;
  /**
   *
   * @type {number}
   * @memberof PastoralMeetingUserViewPage
   */
  pageCount: number;
  /**
   *
   * @type {number}
   * @memberof PastoralMeetingUserViewPage
   */
  currentPage: number;
  /**
   *
   * @type {number}
   * @memberof PastoralMeetingUserViewPage
   */
  size: number;
  /**
   *
   * @type {Array<PastoralMeetingUserView>}
   * @memberof PastoralMeetingUserViewPage
   */
  records: Array<PastoralMeetingUserView>;
  /**
   *
   * @type {number}
   * @memberof PastoralMeetingUserViewPage
   */
  pageSize: number;
  /**
   *
   * @type {boolean}
   * @memberof PastoralMeetingUserViewPage
   */
  hasPreviousPages: boolean;
  /**
   *
   * @type {boolean}
   * @memberof PastoralMeetingUserViewPage
   */
  hasNextPages: boolean;
  /**
   *
   * @type {number}
   * @memberof PastoralMeetingUserViewPage
   */
  previousLastPageNo: number;
  /**
   *
   * @type {number}
   * @memberof PastoralMeetingUserViewPage
   */
  nextStartPageNo: number;
  /**
   *
   * @type {Array<number>}
   * @memberof PastoralMeetingUserViewPage
   */
  navigationPages: Array<number>;
}
/**
 *
 * @export
 * @interface PastoralMeetingUserViewPageApiResponse
 */
export interface PastoralMeetingUserViewPageApiResponse {
  /**
   *
   * @type {string}
   * @memberof PastoralMeetingUserViewPageApiResponse
   */
  handledId?: string | null;
  /**
   * http-200  0000: 代表處理成功，其餘一律為失敗  http-4xx  Vxxxx: 資料驗證  Bxxxx: 詳見 message 欄位說明
   * @type {string}
   * @memberof PastoralMeetingUserViewPageApiResponse
   */
  code: string;
  /**
   * 回傳訊息
   * @type {string}
   * @memberof PastoralMeetingUserViewPageApiResponse
   */
  message: string;
  /**
   * 錯誤詳細資訊
   * @type {any}
   * @memberof PastoralMeetingUserViewPageApiResponse
   */
  detailMessage: any;
  /**
   *
   * @type {PastoralMeetingUserViewPage}
   * @memberof PastoralMeetingUserViewPageApiResponse
   */
  data: PastoralMeetingUserViewPage;
  /**
   * 交易時間
   * @type {string}
   * @memberof PastoralMeetingUserViewPageApiResponse
   */
  txnTime: string;
}
/**
 * PastoralMeeting
 * @export
 * @interface PastoralMeetingView
 */
export interface PastoralMeetingView {
  /**
   *
   * @type {string}
   * @memberof PastoralMeetingView
   */
  handledId?: string | null;
  /**
   *
   * @type {string}
   * @memberof PastoralMeetingView
   */
  dateCreate?: string;
  /**
   *
   * @type {string}
   * @memberof PastoralMeetingView
   */
  userCreate?: string | null;
  /**
   *
   * @type {string}
   * @memberof PastoralMeetingView
   */
  dateUpdate?: string | null;
  /**
   *
   * @type {string}
   * @memberof PastoralMeetingView
   */
  userUpdate?: string | null;
  /**
   * id
   * @type {number}
   * @memberof PastoralMeetingView
   */
  id: number;
  /**
   * Pastoral.Id
   * @type {number}
   * @memberof PastoralMeetingView
   */
  pastoralId: number;
  /**
   * 小組聚會每周哪一天
   * @type {string}
   * @memberof PastoralMeetingView
   */
  meetingDayOfWeek: string;
  /**
   * 聚會時間
   * @type {string}
   * @memberof PastoralMeetingView
   */
  meetingTime: string;
  /**
   * 聚會地點
   * @type {string}
   * @memberof PastoralMeetingView
   */
  meetingAddress: string;
  /**
   * 聚會日期
   * @type {string}
   * @memberof PastoralMeetingView
   */
  meetingDay: string;
  /**
   * 是否為外展對應SystemConfigtype=IsNY顯示 namevalue存此欄位0：N1：Y
   * @type {string}
   * @memberof PastoralMeetingView
   */
  isExp: string;
  /**
   * 是否可查詢，否表示隱藏小組
   * @type {string}
   * @memberof PastoralMeetingView
   */
  isSearchable: string;
  /**
   * 聚會狀態對應SystemConfigtype=MeetType顯示 namevalue存此欄位0：尚未開始1：正常舉行2：停辦
   * @type {string}
   * @memberof PastoralMeetingView
   */
  meetType: string;
}
/**
 *
 * @export
 * @interface PastoralMeetingViewApiResponse
 */
export interface PastoralMeetingViewApiResponse {
  /**
   *
   * @type {string}
   * @memberof PastoralMeetingViewApiResponse
   */
  handledId?: string | null;
  /**
   * http-200  0000: 代表處理成功，其餘一律為失敗  http-4xx  Vxxxx: 資料驗證  Bxxxx: 詳見 message 欄位說明
   * @type {string}
   * @memberof PastoralMeetingViewApiResponse
   */
  code: string;
  /**
   * 回傳訊息
   * @type {string}
   * @memberof PastoralMeetingViewApiResponse
   */
  message: string;
  /**
   * 錯誤詳細資訊
   * @type {any}
   * @memberof PastoralMeetingViewApiResponse
   */
  detailMessage: any;
  /**
   *
   * @type {PastoralMeetingView}
   * @memberof PastoralMeetingViewApiResponse
   */
  data: PastoralMeetingView;
  /**
   * 交易時間
   * @type {string}
   * @memberof PastoralMeetingViewApiResponse
   */
  txnTime: string;
}
/**
 *
 * @export
 * @interface PastoralMeetingViewListApiResponse
 */
export interface PastoralMeetingViewListApiResponse {
  /**
   *
   * @type {string}
   * @memberof PastoralMeetingViewListApiResponse
   */
  handledId?: string | null;
  /**
   * http-200  0000: 代表處理成功，其餘一律為失敗  http-4xx  Vxxxx: 資料驗證  Bxxxx: 詳見 message 欄位說明
   * @type {string}
   * @memberof PastoralMeetingViewListApiResponse
   */
  code: string;
  /**
   * 回傳訊息
   * @type {string}
   * @memberof PastoralMeetingViewListApiResponse
   */
  message: string;
  /**
   * 錯誤詳細資訊
   * @type {any}
   * @memberof PastoralMeetingViewListApiResponse
   */
  detailMessage: any;
  /**
   * 回傳資料
   * @type {Array<PastoralMeetingView>}
   * @memberof PastoralMeetingViewListApiResponse
   */
  data: Array<PastoralMeetingView>;
  /**
   * 交易時間
   * @type {string}
   * @memberof PastoralMeetingViewListApiResponse
   */
  txnTime: string;
}
/**
 *
 * @export
 * @interface PastoralMeetingViewPage
 */
export interface PastoralMeetingViewPage {
  /**
   *
   * @type {number}
   * @memberof PastoralMeetingViewPage
   */
  totalCount: number;
  /**
   *
   * @type {number}
   * @memberof PastoralMeetingViewPage
   */
  pageCount: number;
  /**
   *
   * @type {number}
   * @memberof PastoralMeetingViewPage
   */
  currentPage: number;
  /**
   *
   * @type {number}
   * @memberof PastoralMeetingViewPage
   */
  size: number;
  /**
   *
   * @type {Array<PastoralMeetingView>}
   * @memberof PastoralMeetingViewPage
   */
  records: Array<PastoralMeetingView>;
  /**
   *
   * @type {number}
   * @memberof PastoralMeetingViewPage
   */
  pageSize: number;
  /**
   *
   * @type {boolean}
   * @memberof PastoralMeetingViewPage
   */
  hasPreviousPages: boolean;
  /**
   *
   * @type {boolean}
   * @memberof PastoralMeetingViewPage
   */
  hasNextPages: boolean;
  /**
   *
   * @type {number}
   * @memberof PastoralMeetingViewPage
   */
  previousLastPageNo: number;
  /**
   *
   * @type {number}
   * @memberof PastoralMeetingViewPage
   */
  nextStartPageNo: number;
  /**
   *
   * @type {Array<number>}
   * @memberof PastoralMeetingViewPage
   */
  navigationPages: Array<number>;
}
/**
 *
 * @export
 * @interface PastoralMeetingViewPageApiResponse
 */
export interface PastoralMeetingViewPageApiResponse {
  /**
   *
   * @type {string}
   * @memberof PastoralMeetingViewPageApiResponse
   */
  handledId?: string | null;
  /**
   * http-200  0000: 代表處理成功，其餘一律為失敗  http-4xx  Vxxxx: 資料驗證  Bxxxx: 詳見 message 欄位說明
   * @type {string}
   * @memberof PastoralMeetingViewPageApiResponse
   */
  code: string;
  /**
   * 回傳訊息
   * @type {string}
   * @memberof PastoralMeetingViewPageApiResponse
   */
  message: string;
  /**
   * 錯誤詳細資訊
   * @type {any}
   * @memberof PastoralMeetingViewPageApiResponse
   */
  detailMessage: any;
  /**
   *
   * @type {PastoralMeetingViewPage}
   * @memberof PastoralMeetingViewPageApiResponse
   */
  data: PastoralMeetingViewPage;
  /**
   * 交易時間
   * @type {string}
   * @memberof PastoralMeetingViewPageApiResponse
   */
  txnTime: string;
}
/**
 * Pastoral Tree View
 * @export
 * @interface PastoralTreeView
 */
export interface PastoralTreeView {
  /**
   *
   * @type {number}
   * @memberof PastoralTreeView
   */
  subCounter: number;
  /**
   *
   * @type {PastoralTreeView}
   * @memberof PastoralTreeView
   */
  parent: PastoralTreeView;
  /**
   *
   * @type {Array<PastoralTreeView>}
   * @memberof PastoralTreeView
   */
  nodes: Array<PastoralTreeView>;
  /**
   * 組織部門Id
   * @type {number}
   * @memberof PastoralTreeView
   */
  deptId: number;
  /**
   * id
   * @type {number}
   * @memberof PastoralTreeView
   */
  id: number;
  /**
   * 組織上層Id (分多階層)        堂點       牧區 督區 區 小組
   * @type {number}
   * @memberof PastoralTreeView
   */
  upperPastoralId: number;
  /**
   * 分組區域名稱
   * @type {string}
   * @memberof PastoralTreeView
   */
  name: string;
  /**
   * 分組區域職稱
   * @type {string}
   * @memberof PastoralTreeView
   */
  title: string;
  /**
   * 小組編號//八碼數字 系統自動產生(為小組時才需填入)
   * @type {string}
   * @memberof PastoralTreeView
   */
  groupNo: string;
  /**
   * 領導人 UserId
   * @type {number}
   * @memberof PastoralTreeView
   */
  leaderId: number;
  /**
   * 領導人身分證
   * @type {string}
   * @memberof PastoralTreeView
   */
  leaderIdnumber: string;
  /**
   * 領導人2 UserId
   * @type {number}
   * @memberof PastoralTreeView
   */
  leader2Id: number;
  /**
   * 領導人2身分證
   * @type {string}
   * @memberof PastoralTreeView
   */
  leader2Idnumber: string;
  /**
   * 領導人3 UserId
   * @type {number}
   * @memberof PastoralTreeView
   */
  leader3Id: number;
  /**
   * 領導人3身分證
   * @type {string}
   * @memberof PastoralTreeView
   */
  leader3Idnumber: string;
  /**
   * 最大權限人UserId
   * @type {number}
   * @memberof PastoralTreeView
   */
  supervisorId: number;
  /**
   * LineToken
   * @type {string}
   * @memberof PastoralTreeView
   */
  lineToken: string;
  /**
   *
   * @type {number}
   * @memberof PastoralTreeView
   */
  upperOrganizationId: number;
  /**
   *
   * @type {number}
   * @memberof PastoralTreeView
   */
  orgId: number;
  /**
   *
   * @type {string}
   * @memberof PastoralTreeView
   */
  typeId: string;
  /**
   *
   * @type {string}
   * @memberof PastoralTreeView
   */
  statusCd: string;
  /**
   *
   * @type {string}
   * @memberof PastoralTreeView
   */
  comment: string;
  /**
   *
   * @type {string}
   * @memberof PastoralTreeView
   */
  dateCreate?: string | null;
  /**
   *
   * @type {string}
   * @memberof PastoralTreeView
   */
  userCreate?: string | null;
  /**
   *
   * @type {string}
   * @memberof PastoralTreeView
   */
  dateUpdate?: string | null;
  /**
   *
   * @type {string}
   * @memberof PastoralTreeView
   */
  userUpdate?: string | null;
  /**
   *
   * @type {number}
   * @memberof PastoralTreeView
   */
  isActivated: number;
}
/**
 *
 * @export
 * @interface PastoralTreeViewApiResponse
 */
export interface PastoralTreeViewApiResponse {
  /**
   *
   * @type {string}
   * @memberof PastoralTreeViewApiResponse
   */
  handledId?: string | null;
  /**
   * http-200  0000: 代表處理成功，其餘一律為失敗  http-4xx  Vxxxx: 資料驗證  Bxxxx: 詳見 message 欄位說明
   * @type {string}
   * @memberof PastoralTreeViewApiResponse
   */
  code: string;
  /**
   * 回傳訊息
   * @type {string}
   * @memberof PastoralTreeViewApiResponse
   */
  message: string;
  /**
   * 錯誤詳細資訊
   * @type {any}
   * @memberof PastoralTreeViewApiResponse
   */
  detailMessage: any;
  /**
   *
   * @type {PastoralTreeView}
   * @memberof PastoralTreeViewApiResponse
   */
  data: PastoralTreeView;
  /**
   * 交易時間
   * @type {string}
   * @memberof PastoralTreeViewApiResponse
   */
  txnTime: string;
}
/**
 * Pastoral
 * @export
 * @interface PastoralView
 */
export interface PastoralView {
  /**
   *
   * @type {string}
   * @memberof PastoralView
   */
  handledId?: string | null;
  /**
   *
   * @type {number}
   * @memberof PastoralView
   */
  subCounter: number;
  /**
   * 組織部門Id
   * @type {number}
   * @memberof PastoralView
   */
  deptId: number;
  /**
   * id
   * @type {number}
   * @memberof PastoralView
   */
  id: number;
  /**
   * 組織上層Id (分多階層)        堂點       牧區 督區 區 小組
   * @type {number}
   * @memberof PastoralView
   */
  upperPastoralId: number;
  /**
   * 分組區域名稱
   * @type {string}
   * @memberof PastoralView
   */
  name: string;
  /**
   * 分組區域職稱
   * @type {string}
   * @memberof PastoralView
   */
  title: string;
  /**
   * 小組編號//八碼數字 系統自動產生(為小組時才需填入)
   * @type {string}
   * @memberof PastoralView
   */
  groupNo: string;
  /**
   * 領導人 UserId
   * @type {number}
   * @memberof PastoralView
   */
  leaderId: number;
  /**
   * 領導人身分證
   * @type {string}
   * @memberof PastoralView
   */
  leaderIdnumber: string;
  /**
   * 領導人2 UserId
   * @type {number}
   * @memberof PastoralView
   */
  leader2Id: number;
  /**
   * 領導人2身分證
   * @type {string}
   * @memberof PastoralView
   */
  leader2Idnumber: string;
  /**
   * 領導人3 UserId
   * @type {number}
   * @memberof PastoralView
   */
  leader3Id: number;
  /**
   * 領導人3身分證
   * @type {string}
   * @memberof PastoralView
   */
  leader3Idnumber: string;
  /**
   * 最大權限人UserId
   * @type {number}
   * @memberof PastoralView
   */
  supervisorId: number;
  /**
   * LineToken
   * @type {string}
   * @memberof PastoralView
   */
  lineToken: string;
  /**
   *
   * @type {number}
   * @memberof PastoralView
   */
  upperOrganizationId: number;
  /**
   *
   * @type {number}
   * @memberof PastoralView
   */
  orgId: number;
  /**
   *
   * @type {string}
   * @memberof PastoralView
   */
  typeId: string;
  /**
   *
   * @type {string}
   * @memberof PastoralView
   */
  statusCd: string;
  /**
   *
   * @type {string}
   * @memberof PastoralView
   */
  comment: string;
  /**
   *
   * @type {string}
   * @memberof PastoralView
   */
  dateCreate?: string | null;
  /**
   *
   * @type {string}
   * @memberof PastoralView
   */
  userCreate?: string | null;
  /**
   *
   * @type {string}
   * @memberof PastoralView
   */
  dateUpdate?: string | null;
  /**
   *
   * @type {string}
   * @memberof PastoralView
   */
  userUpdate?: string | null;
  /**
   *
   * @type {number}
   * @memberof PastoralView
   */
  isActivated: number;
}
/**
 *
 * @export
 * @interface PastoralViewApiResponse
 */
export interface PastoralViewApiResponse {
  /**
   *
   * @type {string}
   * @memberof PastoralViewApiResponse
   */
  handledId?: string | null;
  /**
   * http-200  0000: 代表處理成功，其餘一律為失敗  http-4xx  Vxxxx: 資料驗證  Bxxxx: 詳見 message 欄位說明
   * @type {string}
   * @memberof PastoralViewApiResponse
   */
  code: string;
  /**
   * 回傳訊息
   * @type {string}
   * @memberof PastoralViewApiResponse
   */
  message: string;
  /**
   * 錯誤詳細資訊
   * @type {any}
   * @memberof PastoralViewApiResponse
   */
  detailMessage: any;
  /**
   *
   * @type {PastoralView}
   * @memberof PastoralViewApiResponse
   */
  data: PastoralView;
  /**
   * 交易時間
   * @type {string}
   * @memberof PastoralViewApiResponse
   */
  txnTime: string;
}
/**
 *
 * @export
 * @interface PastoralViewListApiResponse
 */
export interface PastoralViewListApiResponse {
  /**
   *
   * @type {string}
   * @memberof PastoralViewListApiResponse
   */
  handledId?: string | null;
  /**
   * http-200  0000: 代表處理成功，其餘一律為失敗  http-4xx  Vxxxx: 資料驗證  Bxxxx: 詳見 message 欄位說明
   * @type {string}
   * @memberof PastoralViewListApiResponse
   */
  code: string;
  /**
   * 回傳訊息
   * @type {string}
   * @memberof PastoralViewListApiResponse
   */
  message: string;
  /**
   * 錯誤詳細資訊
   * @type {any}
   * @memberof PastoralViewListApiResponse
   */
  detailMessage: any;
  /**
   * 回傳資料
   * @type {Array<PastoralView>}
   * @memberof PastoralViewListApiResponse
   */
  data: Array<PastoralView>;
  /**
   * 交易時間
   * @type {string}
   * @memberof PastoralViewListApiResponse
   */
  txnTime: string;
}
/**
 *
 * @export
 * @interface PastoralViewPage
 */
export interface PastoralViewPage {
  /**
   *
   * @type {number}
   * @memberof PastoralViewPage
   */
  totalCount: number;
  /**
   *
   * @type {number}
   * @memberof PastoralViewPage
   */
  pageCount: number;
  /**
   *
   * @type {number}
   * @memberof PastoralViewPage
   */
  currentPage: number;
  /**
   *
   * @type {number}
   * @memberof PastoralViewPage
   */
  size: number;
  /**
   *
   * @type {Array<PastoralView>}
   * @memberof PastoralViewPage
   */
  records: Array<PastoralView>;
  /**
   *
   * @type {number}
   * @memberof PastoralViewPage
   */
  pageSize: number;
  /**
   *
   * @type {boolean}
   * @memberof PastoralViewPage
   */
  hasPreviousPages: boolean;
  /**
   *
   * @type {boolean}
   * @memberof PastoralViewPage
   */
  hasNextPages: boolean;
  /**
   *
   * @type {number}
   * @memberof PastoralViewPage
   */
  previousLastPageNo: number;
  /**
   *
   * @type {number}
   * @memberof PastoralViewPage
   */
  nextStartPageNo: number;
  /**
   *
   * @type {Array<number>}
   * @memberof PastoralViewPage
   */
  navigationPages: Array<number>;
}
/**
 *
 * @export
 * @interface PastoralViewPageApiResponse
 */
export interface PastoralViewPageApiResponse {
  /**
   *
   * @type {string}
   * @memberof PastoralViewPageApiResponse
   */
  handledId?: string | null;
  /**
   * http-200  0000: 代表處理成功，其餘一律為失敗  http-4xx  Vxxxx: 資料驗證  Bxxxx: 詳見 message 欄位說明
   * @type {string}
   * @memberof PastoralViewPageApiResponse
   */
  code: string;
  /**
   * 回傳訊息
   * @type {string}
   * @memberof PastoralViewPageApiResponse
   */
  message: string;
  /**
   * 錯誤詳細資訊
   * @type {any}
   * @memberof PastoralViewPageApiResponse
   */
  detailMessage: any;
  /**
   *
   * @type {PastoralViewPage}
   * @memberof PastoralViewPageApiResponse
   */
  data: PastoralViewPage;
  /**
   * 交易時間
   * @type {string}
   * @memberof PastoralViewPageApiResponse
   */
  txnTime: string;
}
/**
 * 更新  Privilege
 * @export
 * @interface PatchPrivilegeCommand
 */
export interface PatchPrivilegeCommand {
  /**
   * Id
   * @type {string}
   * @memberof PatchPrivilegeCommand
   */
  id: string;
  /**
   * 6 碼 ABCD1234
   * @type {string}
   * @memberof PatchPrivilegeCommand
   */
  functionId: string;
  /**
   * 父層功能 Id
   * @type {string}
   * @memberof PatchPrivilegeCommand
   */
  parentFunctionId: string;
  /**
   * 功能名稱
   * @type {string}
   * @memberof PatchPrivilegeCommand
   */
  name: string;
  /**
   * 排序
   * @type {number}
   * @memberof PatchPrivilegeCommand
   */
  sort: number;
  /**
   *
   * @type {PrivilegeNodeType}
   * @memberof PatchPrivilegeCommand
   */
  linkType: PrivilegeNodeType;
  /**
   * QueryParams
   * @type {string}
   * @memberof PatchPrivilegeCommand
   */
  queryParams: string;
  /**
   * 圖示
   * @type {string}
   * @memberof PatchPrivilegeCommand
   */
  icon: string;
  /**
   * 檢視
   * @type {boolean}
   * @memberof PatchPrivilegeCommand
   */
  viewGranted: boolean;
  /**
   * 新增/編輯
   * @type {boolean}
   * @memberof PatchPrivilegeCommand
   */
  modifyGranted: boolean;
  /**
   * 刪除
   * @type {boolean}
   * @memberof PatchPrivilegeCommand
   */
  deleteGranted: boolean;
  /**
   * 上傳
   * @type {boolean}
   * @memberof PatchPrivilegeCommand
   */
  uploadGranted: boolean;
  /**
   * 下載
   * @type {boolean}
   * @memberof PatchPrivilegeCommand
   */
  downloadGranted: boolean;
  /**
   *
   * @type {string}
   * @memberof PatchPrivilegeCommand
   */
  comment: string;
}
/**
 * 更新  Role
 * @export
 * @interface PatchRoleCommand
 */
export interface PatchRoleCommand {
  /**
   * 角色與功能Menu列表
   * @type {Array<CreateRolePrivilegeMappingCommand>}
   * @memberof PatchRoleCommand
   */
  rolePrivilegeList: Array<CreateRolePrivilegeMappingCommand>;
  /**
   * Id
   * @type {string}
   * @memberof PatchRoleCommand
   */
  id: string;
  /**
   * 角色名稱
   * @type {string}
   * @memberof PatchRoleCommand
   */
  name: string;
  /**
   * 角色說明
   * @type {string}
   * @memberof PatchRoleCommand
   */
  roleDescriptions: string;
  /**
   * 角色資料階層
   * @type {number}
   * @memberof PatchRoleCommand
   */
  dataLevel: number;
  /**
   * HandledId
   * @type {string}
   * @memberof PatchRoleCommand
   */
  handledId?: string | null;
}
/**
 * 更新  RolePrivilegeMapping
 * @export
 * @interface PatchRolePrivilegeMappingCommand
 */
export interface PatchRolePrivilegeMappingCommand {
  /**
   * Id
   * @type {string}
   * @memberof PatchRolePrivilegeMappingCommand
   */
  id: string;
  /**
   * RoleId
   * @type {string}
   * @memberof PatchRolePrivilegeMappingCommand
   */
  roleId: string;
  /**
   * PrivilegeId
   * @type {string}
   * @memberof PatchRolePrivilegeMappingCommand
   */
  privilegeId: string;
  /**
   * PrivilegeId
   * @type {boolean}
   * @memberof PatchRolePrivilegeMappingCommand
   */
  enable: boolean;
  /**
   * 檢視
   * @type {boolean}
   * @memberof PatchRolePrivilegeMappingCommand
   */
  viewGranted: boolean;
  /**
   * 新增/編輯
   * @type {boolean}
   * @memberof PatchRolePrivilegeMappingCommand
   */
  modifyGranted: boolean;
  /**
   * 刪除
   * @type {boolean}
   * @memberof PatchRolePrivilegeMappingCommand
   */
  deleteGranted: boolean;
  /**
   * 上傳
   * @type {boolean}
   * @memberof PatchRolePrivilegeMappingCommand
   */
  uploadGranted: boolean;
  /**
   * 下載
   * @type {boolean}
   * @memberof PatchRolePrivilegeMappingCommand
   */
  downloadGranted: boolean;
}
/**
 * 更新  RoleUserMapping
 * @export
 * @interface PatchRoleUserMappingCommand
 */
export interface PatchRoleUserMappingCommand {
  /**
   *
   * @type {string}
   * @memberof PatchRoleUserMappingCommand
   */
  id: string;
  /**
   *
   * @type {number}
   * @memberof PatchRoleUserMappingCommand
   */
  userId: number;
  /**
   *
   * @type {string}
   * @memberof PatchRoleUserMappingCommand
   */
  roleId: string;
}
/**
 *
 * @export
 * @interface PhoneAccountResponse
 */
export interface PhoneAccountResponse {
  /**
   * 帳號
   * @type {string}
   * @memberof PhoneAccountResponse
   */
  account: string;
  /**
   * Phone
   * @type {string}
   * @memberof PhoneAccountResponse
   */
  phone: string;
  /**
   * [User].[Name]
   * @type {string}
   * @memberof PhoneAccountResponse
   */
  name: string;
}
/**
 *
 * @export
 * @interface PhoneAccountResponseApiResponse
 */
export interface PhoneAccountResponseApiResponse {
  /**
   *
   * @type {string}
   * @memberof PhoneAccountResponseApiResponse
   */
  handledId?: string | null;
  /**
   * http-200  0000: 代表處理成功，其餘一律為失敗  http-4xx  Vxxxx: 資料驗證  Bxxxx: 詳見 message 欄位說明
   * @type {string}
   * @memberof PhoneAccountResponseApiResponse
   */
  code: string;
  /**
   * 回傳訊息
   * @type {string}
   * @memberof PhoneAccountResponseApiResponse
   */
  message: string;
  /**
   * 錯誤詳細資訊
   * @type {any}
   * @memberof PhoneAccountResponseApiResponse
   */
  detailMessage: any;
  /**
   *
   * @type {PhoneAccountResponse}
   * @memberof PhoneAccountResponseApiResponse
   */
  data: PhoneAccountResponse;
  /**
   * 交易時間
   * @type {string}
   * @memberof PhoneAccountResponseApiResponse
   */
  txnTime: string;
}
/**
 *
 * @export
 * @interface PhonePasswordResponse
 */
export interface PhonePasswordResponse {
  /**
   * 帳號
   * @type {string}
   * @memberof PhonePasswordResponse
   */
  account: string;
  /**
   * Phone
   * @type {string}
   * @memberof PhonePasswordResponse
   */
  phone: string;
  /**
   * [User].[Name]
   * @type {string}
   * @memberof PhonePasswordResponse
   */
  name: string;
  /**
   *
   * @type {string}
   * @memberof PhonePasswordResponse
   */
  password: string;
}
/**
 *
 * @export
 * @interface PhonePasswordResponseApiResponse
 */
export interface PhonePasswordResponseApiResponse {
  /**
   *
   * @type {string}
   * @memberof PhonePasswordResponseApiResponse
   */
  handledId?: string | null;
  /**
   * http-200  0000: 代表處理成功，其餘一律為失敗  http-4xx  Vxxxx: 資料驗證  Bxxxx: 詳見 message 欄位說明
   * @type {string}
   * @memberof PhonePasswordResponseApiResponse
   */
  code: string;
  /**
   * 回傳訊息
   * @type {string}
   * @memberof PhonePasswordResponseApiResponse
   */
  message: string;
  /**
   * 錯誤詳細資訊
   * @type {any}
   * @memberof PhonePasswordResponseApiResponse
   */
  detailMessage: any;
  /**
   *
   * @type {PhonePasswordResponse}
   * @memberof PhonePasswordResponseApiResponse
   */
  data: PhonePasswordResponse;
  /**
   * 交易時間
   * @type {string}
   * @memberof PhonePasswordResponseApiResponse
   */
  txnTime: string;
}
/**
 * 功能頁-> menu -> 可多層
 * @export
 * @interface Privilege
 */
export interface Privilege {
  /**
   *
   * @type {string}
   * @memberof Privilege
   */
  id: string;
  /**
   * 6 碼 ABCD1234
   * @type {string}
   * @memberof Privilege
   */
  functionId: string;
  /**
   *
   * @type {string}
   * @memberof Privilege
   */
  parentFunctionId: string;
  /**
   *
   * @type {string}
   * @memberof Privilege
   */
  name: string;
  /**
   *
   * @type {number}
   * @memberof Privilege
   */
  sort: number;
  /**
   *
   * @type {PrivilegeNodeType}
   * @memberof Privilege
   */
  linkType: PrivilegeNodeType;
  /**
   *
   * @type {string}
   * @memberof Privilege
   */
  queryParams: string;
  /**
   *
   * @type {string}
   * @memberof Privilege
   */
  icon: string;
  /**
   *
   * @type {string}
   * @memberof Privilege
   */
  comment: string;
  /**
   * ApiLog HandledId
   * @type {string}
   * @memberof Privilege
   */
  handledId?: string | null;
  /**
   * 建立日期
   * @type {string}
   * @memberof Privilege
   */
  dateCreate?: string;
  /**
   * 建立人員
   * @type {string}
   * @memberof Privilege
   */
  userCreate?: string | null;
  /**
   * 最後修改日期
   * @type {string}
   * @memberof Privilege
   */
  dateUpdate?: string | null;
  /**
   * 最後修改人員
   * @type {string}
   * @memberof Privilege
   */
  userUpdate?: string | null;
  /**
   *
   * @type {string}
   * @memberof Privilege
   */
  rowVersion?: string | null;
}
/**
 *
 * @export
 * @interface PrivilegeBase
 */
export interface PrivilegeBase {
  /**
   * Id
   * @type {string}
   * @memberof PrivilegeBase
   */
  id: string;
  /**
   * 6 碼 ABCD1234
   * @type {string}
   * @memberof PrivilegeBase
   */
  functionId: string;
  /**
   * 父層功能 Id
   * @type {string}
   * @memberof PrivilegeBase
   */
  parentFunctionId: string;
  /**
   * 功能名稱
   * @type {string}
   * @memberof PrivilegeBase
   */
  name: string;
  /**
   * 排序
   * @type {number}
   * @memberof PrivilegeBase
   */
  sort: number;
  /**
   *
   * @type {PrivilegeNodeType}
   * @memberof PrivilegeBase
   */
  linkType: PrivilegeNodeType;
  /**
   * QueryParams
   * @type {string}
   * @memberof PrivilegeBase
   */
  queryParams: string;
  /**
   * 圖示
   * @type {string}
   * @memberof PrivilegeBase
   */
  icon: string;
  /**
   * 檢視
   * @type {boolean}
   * @memberof PrivilegeBase
   */
  viewGranted: boolean;
  /**
   * 新增/編輯
   * @type {boolean}
   * @memberof PrivilegeBase
   */
  modifyGranted: boolean;
  /**
   * 刪除
   * @type {boolean}
   * @memberof PrivilegeBase
   */
  deleteGranted: boolean;
  /**
   * 上傳
   * @type {boolean}
   * @memberof PrivilegeBase
   */
  uploadGranted: boolean;
  /**
   * 下載
   * @type {boolean}
   * @memberof PrivilegeBase
   */
  downloadGranted: boolean;
  /**
   *
   * @type {string}
   * @memberof PrivilegeBase
   */
  comment: string;
}
/**
 * 權限 menu
 * @export
 * @interface PrivilegeNode
 */
export interface PrivilegeNode {
  /**
   * Function ID
   * @type {string}
   * @memberof PrivilegeNode
   */
  key: string;
  /**
   * Parent Function Id
   * @type {string}
   * @memberof PrivilegeNode
   */
  parentKey: string;
  /**
   * Function ID
   * @type {string}
   * @memberof PrivilegeNode
   */
  functionId: string;
  /**
   * Parent Function Id
   * @type {string}
   * @memberof PrivilegeNode
   */
  parentFunctionId: string;
  /**
   * 子節點
   * @type {Array<PrivilegeNode>}
   * @memberof PrivilegeNode
   */
  nodes: Array<PrivilegeNode>;
  /**
   *
   * @type {number}
   * @memberof PrivilegeNode
   */
  level: number;
  /**
   *
   * @type {number}
   * @memberof PrivilegeNode
   */
  sort: number;
  /**
   *
   * @type {string}
   * @memberof PrivilegeNode
   */
  id: string;
  /**
   * 功能名稱
   * @type {string}
   * @memberof PrivilegeNode
   */
  name: string;
  /**
   *
   * @type {PrivilegeNodeType}
   * @memberof PrivilegeNode
   */
  linkType: PrivilegeNodeType;
  /**
   * QueryParams
   * @type {string}
   * @memberof PrivilegeNode
   */
  queryParams: string;
  /**
   * 圖示
   * @type {string}
   * @memberof PrivilegeNode
   */
  icon: string;
  /**
   * 檢視
   * @type {boolean}
   * @memberof PrivilegeNode
   */
  viewGranted: boolean;
  /**
   * 新增/編輯
   * @type {boolean}
   * @memberof PrivilegeNode
   */
  modifyGranted: boolean;
  /**
   * 刪除
   * @type {boolean}
   * @memberof PrivilegeNode
   */
  deleteGranted: boolean;
  /**
   * 上傳
   * @type {boolean}
   * @memberof PrivilegeNode
   */
  uploadGranted: boolean;
  /**
   * 下載
   * @type {boolean}
   * @memberof PrivilegeNode
   */
  downloadGranted: boolean;
  /**
   * 備註
   * @type {string}
   * @memberof PrivilegeNode
   */
  comment: string;
}
/**
 *
 * @export
 * @interface PrivilegeNodeListApiResponse
 */
export interface PrivilegeNodeListApiResponse {
  /**
   *
   * @type {string}
   * @memberof PrivilegeNodeListApiResponse
   */
  handledId?: string | null;
  /**
   * http-200  0000: 代表處理成功，其餘一律為失敗  http-4xx  Vxxxx: 資料驗證  Bxxxx: 詳見 message 欄位說明
   * @type {string}
   * @memberof PrivilegeNodeListApiResponse
   */
  code: string;
  /**
   * 回傳訊息
   * @type {string}
   * @memberof PrivilegeNodeListApiResponse
   */
  message: string;
  /**
   * 錯誤詳細資訊
   * @type {any}
   * @memberof PrivilegeNodeListApiResponse
   */
  detailMessage: any;
  /**
   * 回傳資料
   * @type {Array<PrivilegeNode>}
   * @memberof PrivilegeNodeListApiResponse
   */
  data: Array<PrivilegeNode>;
  /**
   * 交易時間
   * @type {string}
   * @memberof PrivilegeNodeListApiResponse
   */
  txnTime: string;
}
/**
 *
 * @export
 * @enum {string}
 */

export enum PrivilegeNodeType {
  Root = "Root",
  Node = "Node",
  Link = "Link",
  Functionality = "Functionality",
}

/**
 *
 * @export
 * @interface PrivilegeNodeView
 */
export interface PrivilegeNodeView {
  /**
   *
   * @type {string}
   * @memberof PrivilegeNodeView
   */
  key: string;
  /**
   *
   * @type {string}
   * @memberof PrivilegeNodeView
   */
  parentKey: string;
  /**
   * Id
   * @type {string}
   * @memberof PrivilegeNodeView
   */
  id: string;
  /**
   *
   * @type {number}
   * @memberof PrivilegeNodeView
   */
  level: number;
  /**
   * Authorized
   * @type {boolean}
   * @memberof PrivilegeNodeView
   */
  authorized: boolean;
  /**
   *
   * @type {Array<PrivilegeNodeView>}
   * @memberof PrivilegeNodeView
   */
  nodes: Array<PrivilegeNodeView>;
  /**
   *
   * @type {string}
   * @memberof PrivilegeNodeView
   */
  handledId?: string | null;
  /**
   *
   * @type {string}
   * @memberof PrivilegeNodeView
   */
  dateCreate?: string;
  /**
   *
   * @type {string}
   * @memberof PrivilegeNodeView
   */
  userCreate?: string | null;
  /**
   *
   * @type {string}
   * @memberof PrivilegeNodeView
   */
  dateUpdate?: string | null;
  /**
   *
   * @type {string}
   * @memberof PrivilegeNodeView
   */
  userUpdate?: string | null;
  /**
   * 6 碼 ABCD1234
   * @type {string}
   * @memberof PrivilegeNodeView
   */
  functionId: string;
  /**
   * 父層功能 Id
   * @type {string}
   * @memberof PrivilegeNodeView
   */
  parentFunctionId: string;
  /**
   * 功能名稱
   * @type {string}
   * @memberof PrivilegeNodeView
   */
  name: string;
  /**
   * 排序
   * @type {number}
   * @memberof PrivilegeNodeView
   */
  sort: number;
  /**
   *
   * @type {PrivilegeNodeType}
   * @memberof PrivilegeNodeView
   */
  linkType: PrivilegeNodeType;
  /**
   * QueryParams
   * @type {string}
   * @memberof PrivilegeNodeView
   */
  queryParams: string;
  /**
   * 圖示
   * @type {string}
   * @memberof PrivilegeNodeView
   */
  icon: string;
  /**
   * 檢視
   * @type {boolean}
   * @memberof PrivilegeNodeView
   */
  viewGranted: boolean;
  /**
   * 新增/編輯
   * @type {boolean}
   * @memberof PrivilegeNodeView
   */
  modifyGranted: boolean;
  /**
   * 刪除
   * @type {boolean}
   * @memberof PrivilegeNodeView
   */
  deleteGranted: boolean;
  /**
   * 上傳
   * @type {boolean}
   * @memberof PrivilegeNodeView
   */
  uploadGranted: boolean;
  /**
   * 下載
   * @type {boolean}
   * @memberof PrivilegeNodeView
   */
  downloadGranted: boolean;
  /**
   *
   * @type {string}
   * @memberof PrivilegeNodeView
   */
  comment: string;
}
/**
 * Privilege
 * @export
 * @interface PrivilegeView
 */
export interface PrivilegeView {
  /**
   *
   * @type {number}
   * @memberof PrivilegeView
   */
  level: number;
  /**
   *
   * @type {string}
   * @memberof PrivilegeView
   */
  handledId?: string | null;
  /**
   *
   * @type {string}
   * @memberof PrivilegeView
   */
  dateCreate?: string;
  /**
   *
   * @type {string}
   * @memberof PrivilegeView
   */
  userCreate?: string | null;
  /**
   *
   * @type {string}
   * @memberof PrivilegeView
   */
  dateUpdate?: string | null;
  /**
   *
   * @type {string}
   * @memberof PrivilegeView
   */
  userUpdate?: string | null;
  /**
   * Id
   * @type {string}
   * @memberof PrivilegeView
   */
  id: string;
  /**
   * 6 碼 ABCD1234
   * @type {string}
   * @memberof PrivilegeView
   */
  functionId: string;
  /**
   * 父層功能 Id
   * @type {string}
   * @memberof PrivilegeView
   */
  parentFunctionId: string;
  /**
   * 功能名稱
   * @type {string}
   * @memberof PrivilegeView
   */
  name: string;
  /**
   * 排序
   * @type {number}
   * @memberof PrivilegeView
   */
  sort: number;
  /**
   *
   * @type {PrivilegeNodeType}
   * @memberof PrivilegeView
   */
  linkType: PrivilegeNodeType;
  /**
   * QueryParams
   * @type {string}
   * @memberof PrivilegeView
   */
  queryParams: string;
  /**
   * 圖示
   * @type {string}
   * @memberof PrivilegeView
   */
  icon: string;
  /**
   * 檢視
   * @type {boolean}
   * @memberof PrivilegeView
   */
  viewGranted: boolean;
  /**
   * 新增/編輯
   * @type {boolean}
   * @memberof PrivilegeView
   */
  modifyGranted: boolean;
  /**
   * 刪除
   * @type {boolean}
   * @memberof PrivilegeView
   */
  deleteGranted: boolean;
  /**
   * 上傳
   * @type {boolean}
   * @memberof PrivilegeView
   */
  uploadGranted: boolean;
  /**
   * 下載
   * @type {boolean}
   * @memberof PrivilegeView
   */
  downloadGranted: boolean;
  /**
   *
   * @type {string}
   * @memberof PrivilegeView
   */
  comment: string;
}
/**
 *
 * @export
 * @interface PrivilegeViewApiResponse
 */
export interface PrivilegeViewApiResponse {
  /**
   *
   * @type {string}
   * @memberof PrivilegeViewApiResponse
   */
  handledId?: string | null;
  /**
   * http-200  0000: 代表處理成功，其餘一律為失敗  http-4xx  Vxxxx: 資料驗證  Bxxxx: 詳見 message 欄位說明
   * @type {string}
   * @memberof PrivilegeViewApiResponse
   */
  code: string;
  /**
   * 回傳訊息
   * @type {string}
   * @memberof PrivilegeViewApiResponse
   */
  message: string;
  /**
   * 錯誤詳細資訊
   * @type {any}
   * @memberof PrivilegeViewApiResponse
   */
  detailMessage: any;
  /**
   *
   * @type {PrivilegeView}
   * @memberof PrivilegeViewApiResponse
   */
  data: PrivilegeView;
  /**
   * 交易時間
   * @type {string}
   * @memberof PrivilegeViewApiResponse
   */
  txnTime: string;
}
/**
 *
 * @export
 * @interface PrivilegeViewListApiResponse
 */
export interface PrivilegeViewListApiResponse {
  /**
   *
   * @type {string}
   * @memberof PrivilegeViewListApiResponse
   */
  handledId?: string | null;
  /**
   * http-200  0000: 代表處理成功，其餘一律為失敗  http-4xx  Vxxxx: 資料驗證  Bxxxx: 詳見 message 欄位說明
   * @type {string}
   * @memberof PrivilegeViewListApiResponse
   */
  code: string;
  /**
   * 回傳訊息
   * @type {string}
   * @memberof PrivilegeViewListApiResponse
   */
  message: string;
  /**
   * 錯誤詳細資訊
   * @type {any}
   * @memberof PrivilegeViewListApiResponse
   */
  detailMessage: any;
  /**
   * 回傳資料
   * @type {Array<PrivilegeView>}
   * @memberof PrivilegeViewListApiResponse
   */
  data: Array<PrivilegeView>;
  /**
   * 交易時間
   * @type {string}
   * @memberof PrivilegeViewListApiResponse
   */
  txnTime: string;
}
/**
 *
 * @export
 * @interface PrivilegeViewPage
 */
export interface PrivilegeViewPage {
  /**
   *
   * @type {number}
   * @memberof PrivilegeViewPage
   */
  totalCount: number;
  /**
   *
   * @type {number}
   * @memberof PrivilegeViewPage
   */
  pageCount: number;
  /**
   *
   * @type {number}
   * @memberof PrivilegeViewPage
   */
  currentPage: number;
  /**
   *
   * @type {number}
   * @memberof PrivilegeViewPage
   */
  size: number;
  /**
   *
   * @type {Array<PrivilegeView>}
   * @memberof PrivilegeViewPage
   */
  records: Array<PrivilegeView>;
  /**
   *
   * @type {number}
   * @memberof PrivilegeViewPage
   */
  pageSize: number;
  /**
   *
   * @type {boolean}
   * @memberof PrivilegeViewPage
   */
  hasPreviousPages: boolean;
  /**
   *
   * @type {boolean}
   * @memberof PrivilegeViewPage
   */
  hasNextPages: boolean;
  /**
   *
   * @type {number}
   * @memberof PrivilegeViewPage
   */
  previousLastPageNo: number;
  /**
   *
   * @type {number}
   * @memberof PrivilegeViewPage
   */
  nextStartPageNo: number;
  /**
   *
   * @type {Array<number>}
   * @memberof PrivilegeViewPage
   */
  navigationPages: Array<number>;
}
/**
 *
 * @export
 * @interface PrivilegeViewPageApiResponse
 */
export interface PrivilegeViewPageApiResponse {
  /**
   *
   * @type {string}
   * @memberof PrivilegeViewPageApiResponse
   */
  handledId?: string | null;
  /**
   * http-200  0000: 代表處理成功，其餘一律為失敗  http-4xx  Vxxxx: 資料驗證  Bxxxx: 詳見 message 欄位說明
   * @type {string}
   * @memberof PrivilegeViewPageApiResponse
   */
  code: string;
  /**
   * 回傳訊息
   * @type {string}
   * @memberof PrivilegeViewPageApiResponse
   */
  message: string;
  /**
   * 錯誤詳細資訊
   * @type {any}
   * @memberof PrivilegeViewPageApiResponse
   */
  detailMessage: any;
  /**
   *
   * @type {PrivilegeViewPage}
   * @memberof PrivilegeViewPageApiResponse
   */
  data: PrivilegeViewPage;
  /**
   * 交易時間
   * @type {string}
   * @memberof PrivilegeViewPageApiResponse
   */
  txnTime: string;
}
/**
 *
 * @export
 * @interface QrCode
 */
export interface QrCode {
  /**
   * QrCodeId
   * @type {number}
   * @memberof QrCode
   */
  id: number;
  /**
   * 報到類別對應 systemconfig.Type=RefferenceType 0:兒童個人報到專用 1:小組報到 2:主日報到 3:領袖之夜報到 4:課程報到 5:事工團報到 6:問卷填寫
   * @type {number}
   * @memberof QrCode
   */
  referenceType: number;
  /**
   * 對應報到類別主擋Id
   * @type {number}
   * @memberof QrCode
   */
  referenceId: number;
  /**
   * 報到使用者Id
   * @type {number}
   * @memberof QrCode
   */
  userId: number;
  /**
   * Id+RefferenceType+UserId 產生唯一值
   * @type {string}
   * @memberof QrCode
   */
  generateCode: string;
  /**
   * 付款方式 對應SystemConfig內Type=RegisterStatus 0:尚未報到 1:已報到
   * @type {number}
   * @memberof QrCode
   */
  registerStatus: number;
  /**
   * 報到時間
   * @type {string}
   * @memberof QrCode
   */
  registerTime: string;
  /**
   *
   * @type {string}
   * @memberof QrCode
   */
  statusCd: string;
  /**
   * ApiLog HandledId
   * @type {string}
   * @memberof QrCode
   */
  handledId?: string | null;
  /**
   * 建立日期
   * @type {string}
   * @memberof QrCode
   */
  dateCreate?: string;
  /**
   * 建立人員
   * @type {string}
   * @memberof QrCode
   */
  userCreate?: string | null;
  /**
   * 最後修改日期
   * @type {string}
   * @memberof QrCode
   */
  dateUpdate?: string | null;
  /**
   * 最後修改人員
   * @type {string}
   * @memberof QrCode
   */
  userUpdate?: string | null;
  /**
   *
   * @type {string}
   * @memberof QrCode
   */
  rowVersion?: string | null;
}
/**
 * QrCode主檔
 * @export
 * @interface QrCodeBase
 */
export interface QrCodeBase {
  /**
   * QrCodeId
   * @type {number}
   * @memberof QrCodeBase
   */
  id: number;
  /**
   * 報到類別對應 systemconfig.Type=RefferenceType 0:兒童個人報到專用 1:小組報到 2:主日報到 3:領袖之夜報到 4:課程報到 5:事工團報到 6:問卷填寫
   * @type {number}
   * @memberof QrCodeBase
   */
  referenceType: number;
  /**
   * 對應報到類別主擋Id
   * @type {number}
   * @memberof QrCodeBase
   */
  referenceId: number;
  /**
   * 報到使用者Id
   * @type {number}
   * @memberof QrCodeBase
   */
  userId: number;
  /**
   * Id+RefferenceType+UserId 產生唯一值
   * @type {string}
   * @memberof QrCodeBase
   */
  generateCode: string;
  /**
   * 付款方式 對應SystemConfig內Type=RegisterStatus 0:尚未報到 1:已報到
   * @type {number}
   * @memberof QrCodeBase
   */
  registerStatus: number;
  /**
   * 報到時間
   * @type {string}
   * @memberof QrCodeBase
   */
  registerTime: string;
}
/**
 * QrCode
 * @export
 * @interface QrCodeView
 */
export interface QrCodeView {
  /**
   * Id
   * @type {number}
   * @memberof QrCodeView
   */
  id: number;
  /**
   *
   * @type {string}
   * @memberof QrCodeView
   */
  handledId?: string | null;
  /**
   *
   * @type {string}
   * @memberof QrCodeView
   */
  dateCreate?: string;
  /**
   *
   * @type {string}
   * @memberof QrCodeView
   */
  userCreate?: string | null;
  /**
   *
   * @type {string}
   * @memberof QrCodeView
   */
  dateUpdate?: string | null;
  /**
   *
   * @type {string}
   * @memberof QrCodeView
   */
  userUpdate?: string | null;
  /**
   * 報到類別對應 systemconfig.Type=RefferenceType 0:兒童個人報到專用 1:小組報到 2:主日報到 3:領袖之夜報到 4:課程報到 5:事工團報到 6:問卷填寫
   * @type {number}
   * @memberof QrCodeView
   */
  referenceType: number;
  /**
   * 對應報到類別主擋Id
   * @type {number}
   * @memberof QrCodeView
   */
  referenceId: number;
  /**
   * 報到使用者Id
   * @type {number}
   * @memberof QrCodeView
   */
  userId: number;
  /**
   * Id+RefferenceType+UserId 產生唯一值
   * @type {string}
   * @memberof QrCodeView
   */
  generateCode: string;
  /**
   * 付款方式 對應SystemConfig內Type=RegisterStatus 0:尚未報到 1:已報到
   * @type {number}
   * @memberof QrCodeView
   */
  registerStatus: number;
  /**
   * 報到時間
   * @type {string}
   * @memberof QrCodeView
   */
  registerTime: string;
}
/**
 *
 * @export
 * @interface QrCodeViewApiResponse
 */
export interface QrCodeViewApiResponse {
  /**
   *
   * @type {string}
   * @memberof QrCodeViewApiResponse
   */
  handledId?: string | null;
  /**
   * http-200  0000: 代表處理成功，其餘一律為失敗  http-4xx  Vxxxx: 資料驗證  Bxxxx: 詳見 message 欄位說明
   * @type {string}
   * @memberof QrCodeViewApiResponse
   */
  code: string;
  /**
   * 回傳訊息
   * @type {string}
   * @memberof QrCodeViewApiResponse
   */
  message: string;
  /**
   * 錯誤詳細資訊
   * @type {any}
   * @memberof QrCodeViewApiResponse
   */
  detailMessage: any;
  /**
   *
   * @type {QrCodeView}
   * @memberof QrCodeViewApiResponse
   */
  data: QrCodeView;
  /**
   * 交易時間
   * @type {string}
   * @memberof QrCodeViewApiResponse
   */
  txnTime: string;
}
/**
 *
 * @export
 * @interface QrCodeViewListApiResponse
 */
export interface QrCodeViewListApiResponse {
  /**
   *
   * @type {string}
   * @memberof QrCodeViewListApiResponse
   */
  handledId?: string | null;
  /**
   * http-200  0000: 代表處理成功，其餘一律為失敗  http-4xx  Vxxxx: 資料驗證  Bxxxx: 詳見 message 欄位說明
   * @type {string}
   * @memberof QrCodeViewListApiResponse
   */
  code: string;
  /**
   * 回傳訊息
   * @type {string}
   * @memberof QrCodeViewListApiResponse
   */
  message: string;
  /**
   * 錯誤詳細資訊
   * @type {any}
   * @memberof QrCodeViewListApiResponse
   */
  detailMessage: any;
  /**
   * 回傳資料
   * @type {Array<QrCodeView>}
   * @memberof QrCodeViewListApiResponse
   */
  data: Array<QrCodeView>;
  /**
   * 交易時間
   * @type {string}
   * @memberof QrCodeViewListApiResponse
   */
  txnTime: string;
}
/**
 *
 * @export
 * @interface QrCodeViewPage
 */
export interface QrCodeViewPage {
  /**
   *
   * @type {number}
   * @memberof QrCodeViewPage
   */
  totalCount: number;
  /**
   *
   * @type {number}
   * @memberof QrCodeViewPage
   */
  pageCount: number;
  /**
   *
   * @type {number}
   * @memberof QrCodeViewPage
   */
  currentPage: number;
  /**
   *
   * @type {number}
   * @memberof QrCodeViewPage
   */
  size: number;
  /**
   *
   * @type {Array<QrCodeView>}
   * @memberof QrCodeViewPage
   */
  records: Array<QrCodeView>;
  /**
   *
   * @type {number}
   * @memberof QrCodeViewPage
   */
  pageSize: number;
  /**
   *
   * @type {boolean}
   * @memberof QrCodeViewPage
   */
  hasPreviousPages: boolean;
  /**
   *
   * @type {boolean}
   * @memberof QrCodeViewPage
   */
  hasNextPages: boolean;
  /**
   *
   * @type {number}
   * @memberof QrCodeViewPage
   */
  previousLastPageNo: number;
  /**
   *
   * @type {number}
   * @memberof QrCodeViewPage
   */
  nextStartPageNo: number;
  /**
   *
   * @type {Array<number>}
   * @memberof QrCodeViewPage
   */
  navigationPages: Array<number>;
}
/**
 *
 * @export
 * @interface QrCodeViewPageApiResponse
 */
export interface QrCodeViewPageApiResponse {
  /**
   *
   * @type {string}
   * @memberof QrCodeViewPageApiResponse
   */
  handledId?: string | null;
  /**
   * http-200  0000: 代表處理成功，其餘一律為失敗  http-4xx  Vxxxx: 資料驗證  Bxxxx: 詳見 message 欄位說明
   * @type {string}
   * @memberof QrCodeViewPageApiResponse
   */
  code: string;
  /**
   * 回傳訊息
   * @type {string}
   * @memberof QrCodeViewPageApiResponse
   */
  message: string;
  /**
   * 錯誤詳細資訊
   * @type {any}
   * @memberof QrCodeViewPageApiResponse
   */
  detailMessage: any;
  /**
   *
   * @type {QrCodeViewPage}
   * @memberof QrCodeViewPageApiResponse
   */
  data: QrCodeViewPage;
  /**
   * 交易時間
   * @type {string}
   * @memberof QrCodeViewPageApiResponse
   */
  txnTime: string;
}
/**
 *
 * @export
 * @interface QueryApiAuditLogRequest
 */
export interface QueryApiAuditLogRequest {
  /**
   * 交易處理 id
   * @type {string}
   * @memberof QueryApiAuditLogRequest
   */
  handledId?: string | null;
  /**
   * 帳號(員工編號)
   * @type {string}
   * @memberof QueryApiAuditLogRequest
   */
  account?: string | null;
  /**
   * 來源 ip
   * @type {string}
   * @memberof QueryApiAuditLogRequest
   */
  sourceIp?: string | null;
  /**
   * 請求網址路徑
   * @type {string}
   * @memberof QueryApiAuditLogRequest
   */
  requestPath?: string | null;
  /**
   * HTTP 回應碼
   * @type {number}
   * @memberof QueryApiAuditLogRequest
   */
  responseStatusCode?: number | null;
  /**
   * 紀錄起始時間
   * @type {string}
   * @memberof QueryApiAuditLogRequest
   */
  createAtStart?: string | null;
  /**
   * 紀錄結束時間
   * @type {string}
   * @memberof QueryApiAuditLogRequest
   */
  createAtEnd?: string | null;
  /**
   * 查詢欄位排序
   * @type {Array<SortProperty>}
   * @memberof QueryApiAuditLogRequest
   */
  sortProperties: Array<SortProperty>;
  /**
   * 目前頁數
   * @type {number}
   * @memberof QueryApiAuditLogRequest
   */
  page: number;
  /**
   * 每頁筆數
   * @type {number}
   * @memberof QueryApiAuditLogRequest
   */
  size: number;
}
/**
 * 分頁查詢 AspnetApplication
 * @export
 * @interface QueryAspnetApplicationRequest
 */
export interface QueryAspnetApplicationRequest {
  /**
   *
   * @type {string}
   * @memberof QueryAspnetApplicationRequest
   */
  name?: string | null;
  /**
   * 查詢欄位排序
   * @type {Array<SortProperty>}
   * @memberof QueryAspnetApplicationRequest
   */
  sortProperties: Array<SortProperty>;
  /**
   * 目前頁數
   * @type {number}
   * @memberof QueryAspnetApplicationRequest
   */
  page: number;
  /**
   * 每頁筆數
   * @type {number}
   * @memberof QueryAspnetApplicationRequest
   */
  size: number;
}
/**
 * 分頁查詢 AspnetMembership
 * @export
 * @interface QueryAspnetMembershipRequest
 */
export interface QueryAspnetMembershipRequest {
  /**
   *
   * @type {string}
   * @memberof QueryAspnetMembershipRequest
   */
  name?: string | null;
  /**
   * 查詢欄位排序
   * @type {Array<SortProperty>}
   * @memberof QueryAspnetMembershipRequest
   */
  sortProperties: Array<SortProperty>;
  /**
   * 目前頁數
   * @type {number}
   * @memberof QueryAspnetMembershipRequest
   */
  page: number;
  /**
   * 每頁筆數
   * @type {number}
   * @memberof QueryAspnetMembershipRequest
   */
  size: number;
}
/**
 * 分頁查詢 AspnetPath
 * @export
 * @interface QueryAspnetPathRequest
 */
export interface QueryAspnetPathRequest {
  /**
   *
   * @type {string}
   * @memberof QueryAspnetPathRequest
   */
  name?: string | null;
  /**
   * 查詢欄位排序
   * @type {Array<SortProperty>}
   * @memberof QueryAspnetPathRequest
   */
  sortProperties: Array<SortProperty>;
  /**
   * 目前頁數
   * @type {number}
   * @memberof QueryAspnetPathRequest
   */
  page: number;
  /**
   * 每頁筆數
   * @type {number}
   * @memberof QueryAspnetPathRequest
   */
  size: number;
}
/**
 * 分頁查詢 AspnetPersonalizationAllUser
 * @export
 * @interface QueryAspnetPersonalizationAllUserRequest
 */
export interface QueryAspnetPersonalizationAllUserRequest {
  /**
   *
   * @type {string}
   * @memberof QueryAspnetPersonalizationAllUserRequest
   */
  name?: string | null;
  /**
   * 查詢欄位排序
   * @type {Array<SortProperty>}
   * @memberof QueryAspnetPersonalizationAllUserRequest
   */
  sortProperties: Array<SortProperty>;
  /**
   * 目前頁數
   * @type {number}
   * @memberof QueryAspnetPersonalizationAllUserRequest
   */
  page: number;
  /**
   * 每頁筆數
   * @type {number}
   * @memberof QueryAspnetPersonalizationAllUserRequest
   */
  size: number;
}
/**
 * 分頁查詢 AspnetPersonalizationPerUser
 * @export
 * @interface QueryAspnetPersonalizationPerUserRequest
 */
export interface QueryAspnetPersonalizationPerUserRequest {
  /**
   *
   * @type {string}
   * @memberof QueryAspnetPersonalizationPerUserRequest
   */
  name?: string | null;
  /**
   * 查詢欄位排序
   * @type {Array<SortProperty>}
   * @memberof QueryAspnetPersonalizationPerUserRequest
   */
  sortProperties: Array<SortProperty>;
  /**
   * 目前頁數
   * @type {number}
   * @memberof QueryAspnetPersonalizationPerUserRequest
   */
  page: number;
  /**
   * 每頁筆數
   * @type {number}
   * @memberof QueryAspnetPersonalizationPerUserRequest
   */
  size: number;
}
/**
 * 分頁查詢 AspnetProfile
 * @export
 * @interface QueryAspnetProfileRequest
 */
export interface QueryAspnetProfileRequest {
  /**
   *
   * @type {string}
   * @memberof QueryAspnetProfileRequest
   */
  name?: string | null;
  /**
   * 查詢欄位排序
   * @type {Array<SortProperty>}
   * @memberof QueryAspnetProfileRequest
   */
  sortProperties: Array<SortProperty>;
  /**
   * 目前頁數
   * @type {number}
   * @memberof QueryAspnetProfileRequest
   */
  page: number;
  /**
   * 每頁筆數
   * @type {number}
   * @memberof QueryAspnetProfileRequest
   */
  size: number;
}
/**
 * 分頁查詢 AspnetRole
 * @export
 * @interface QueryAspnetRoleRequest
 */
export interface QueryAspnetRoleRequest {
  /**
   *
   * @type {string}
   * @memberof QueryAspnetRoleRequest
   */
  name?: string | null;
  /**
   * 查詢欄位排序
   * @type {Array<SortProperty>}
   * @memberof QueryAspnetRoleRequest
   */
  sortProperties: Array<SortProperty>;
  /**
   * 目前頁數
   * @type {number}
   * @memberof QueryAspnetRoleRequest
   */
  page: number;
  /**
   * 每頁筆數
   * @type {number}
   * @memberof QueryAspnetRoleRequest
   */
  size: number;
}
/**
 * 分頁查詢 AspnetSchemaVersion
 * @export
 * @interface QueryAspnetSchemaVersionRequest
 */
export interface QueryAspnetSchemaVersionRequest {
  /**
   *
   * @type {string}
   * @memberof QueryAspnetSchemaVersionRequest
   */
  name?: string | null;
  /**
   * 查詢欄位排序
   * @type {Array<SortProperty>}
   * @memberof QueryAspnetSchemaVersionRequest
   */
  sortProperties: Array<SortProperty>;
  /**
   * 目前頁數
   * @type {number}
   * @memberof QueryAspnetSchemaVersionRequest
   */
  page: number;
  /**
   * 每頁筆數
   * @type {number}
   * @memberof QueryAspnetSchemaVersionRequest
   */
  size: number;
}
/**
 * 分頁查詢 AspnetUser
 * @export
 * @interface QueryAspnetUserRequest
 */
export interface QueryAspnetUserRequest {
  /**
   *
   * @type {string}
   * @memberof QueryAspnetUserRequest
   */
  name?: string | null;
  /**
   * 查詢欄位排序
   * @type {Array<SortProperty>}
   * @memberof QueryAspnetUserRequest
   */
  sortProperties: Array<SortProperty>;
  /**
   * 目前頁數
   * @type {number}
   * @memberof QueryAspnetUserRequest
   */
  page: number;
  /**
   * 每頁筆數
   * @type {number}
   * @memberof QueryAspnetUserRequest
   */
  size: number;
}
/**
 * 分頁查詢 AspnetUsersinrole
 * @export
 * @interface QueryAspnetUsersinroleRequest
 */
export interface QueryAspnetUsersinroleRequest {
  /**
   *
   * @type {string}
   * @memberof QueryAspnetUsersinroleRequest
   */
  name?: string | null;
  /**
   * 查詢欄位排序
   * @type {Array<SortProperty>}
   * @memberof QueryAspnetUsersinroleRequest
   */
  sortProperties: Array<SortProperty>;
  /**
   * 目前頁數
   * @type {number}
   * @memberof QueryAspnetUsersinroleRequest
   */
  page: number;
  /**
   * 每頁筆數
   * @type {number}
   * @memberof QueryAspnetUsersinroleRequest
   */
  size: number;
}
/**
 * 分頁查詢 AspnetWebeventEvent
 * @export
 * @interface QueryAspnetWebeventEventRequest
 */
export interface QueryAspnetWebeventEventRequest {
  /**
   *
   * @type {string}
   * @memberof QueryAspnetWebeventEventRequest
   */
  name?: string | null;
  /**
   * 查詢欄位排序
   * @type {Array<SortProperty>}
   * @memberof QueryAspnetWebeventEventRequest
   */
  sortProperties: Array<SortProperty>;
  /**
   * 目前頁數
   * @type {number}
   * @memberof QueryAspnetWebeventEventRequest
   */
  page: number;
  /**
   * 每頁筆數
   * @type {number}
   * @memberof QueryAspnetWebeventEventRequest
   */
  size: number;
}
/**
 * 分頁查詢 CourseAppendix
 * @export
 * @interface QueryCourseAppendixRequest
 */
export interface QueryCourseAppendixRequest {
  /**
   * id
   * @type {number}
   * @memberof QueryCourseAppendixRequest
   */
  id?: number;
  /**
   * 課程類別CourseManagement.Id
   * @type {number}
   * @memberof QueryCourseAppendixRequest
   */
  courseId?: number;
  /**
   * 附件類別對應type=AppendixType顯示 namevalue存此欄位0：文件1：影音
   * @type {string}
   * @memberof QueryCourseAppendixRequest
   */
  appendixType?: string | null;
  /**
   * 存放網路路徑
   * @type {string}
   * @memberof QueryCourseAppendixRequest
   */
  path?: string | null;
  /**
   * 查詢欄位排序
   * @type {Array<SortProperty>}
   * @memberof QueryCourseAppendixRequest
   */
  sortProperties: Array<SortProperty>;
  /**
   * 目前頁數
   * @type {number}
   * @memberof QueryCourseAppendixRequest
   */
  page: number;
  /**
   * 每頁筆數
   * @type {number}
   * @memberof QueryCourseAppendixRequest
   */
  size: number;
}
/**
 * 分頁查詢 CourseManagementAppendix
 * @export
 * @interface QueryCourseManagementAppendixRequest
 */
export interface QueryCourseManagementAppendixRequest {
  /**
   * id
   * @type {number}
   * @memberof QueryCourseManagementAppendixRequest
   */
  id?: number;
  /**
   * 課程類別CourseManagement.Id
   * @type {number}
   * @memberof QueryCourseManagementAppendixRequest
   */
  courseManagementId?: number;
  /**
   * 附件類別對應type=AppendixType顯示 namevalue存此欄位0：文件1：影音
   * @type {string}
   * @memberof QueryCourseManagementAppendixRequest
   */
  appendixType?: string | null;
  /**
   * 存放網路路徑
   * @type {string}
   * @memberof QueryCourseManagementAppendixRequest
   */
  path?: string | null;
  /**
   * 查詢欄位排序
   * @type {Array<SortProperty>}
   * @memberof QueryCourseManagementAppendixRequest
   */
  sortProperties: Array<SortProperty>;
  /**
   * 目前頁數
   * @type {number}
   * @memberof QueryCourseManagementAppendixRequest
   */
  page: number;
  /**
   * 每頁筆數
   * @type {number}
   * @memberof QueryCourseManagementAppendixRequest
   */
  size: number;
}
/**
 * 分頁查詢 CourseManagementFilterCourse
 * @export
 * @interface QueryCourseManagementFilterCourseRequest
 */
export interface QueryCourseManagementFilterCourseRequest {
  /**
   * id
   * @type {number}
   * @memberof QueryCourseManagementFilterCourseRequest
   */
  id?: number;
  /**
   * 課程樣板過濾CourseManagementFilter.Id
   * @type {number}
   * @memberof QueryCourseManagementFilterCourseRequest
   */
  courseManagementFilterId?: number;
  /**
   * CourseManagement.Id
   * @type {number}
   * @memberof QueryCourseManagementFilterCourseRequest
   */
  courseManagementId?: number;
  /**
   * 查詢欄位排序
   * @type {Array<SortProperty>}
   * @memberof QueryCourseManagementFilterCourseRequest
   */
  sortProperties: Array<SortProperty>;
  /**
   * 目前頁數
   * @type {number}
   * @memberof QueryCourseManagementFilterCourseRequest
   */
  page: number;
  /**
   * 每頁筆數
   * @type {number}
   * @memberof QueryCourseManagementFilterCourseRequest
   */
  size: number;
}
/**
 * 分頁查詢 CourseManagementFilterPastoral
 * @export
 * @interface QueryCourseManagementFilterPastoralRequest
 */
export interface QueryCourseManagementFilterPastoralRequest {
  /**
   * id
   * @type {number}
   * @memberof QueryCourseManagementFilterPastoralRequest
   */
  id?: number;
  /**
   * 課程樣板過濾CourseManagementFilter.Id
   * @type {number}
   * @memberof QueryCourseManagementFilterPastoralRequest
   */
  courseManagementFilterId?: number;
  /**
   * Pastoral.Id
   * @type {number}
   * @memberof QueryCourseManagementFilterPastoralRequest
   */
  pastoralId?: number;
  /**
   * 查詢欄位排序
   * @type {Array<SortProperty>}
   * @memberof QueryCourseManagementFilterPastoralRequest
   */
  sortProperties: Array<SortProperty>;
  /**
   * 目前頁數
   * @type {number}
   * @memberof QueryCourseManagementFilterPastoralRequest
   */
  page: number;
  /**
   * 每頁筆數
   * @type {number}
   * @memberof QueryCourseManagementFilterPastoralRequest
   */
  size: number;
}
/**
 * 分頁查詢 CourseManagementFilter
 * @export
 * @interface QueryCourseManagementFilterRequest
 */
export interface QueryCourseManagementFilterRequest {
  /**
   * id
   * @type {number}
   * @memberof QueryCourseManagementFilterRequest
   */
  id?: number;
  /**
   * 課程樣板CourseManagement.Id
   * @type {number}
   * @memberof QueryCourseManagementFilterRequest
   */
  courseManagementId?: number;
  /**
   * 堂點Id Organization.Id
   * @type {number}
   * @memberof QueryCourseManagementFilterRequest
   */
  organizationId?: number;
  /**
   * 課程性別限制
   * @type {string}
   * @memberof QueryCourseManagementFilterRequest
   */
  courseSex?: string | null;
  /**
   * 年齡門檻上
   * @type {number}
   * @memberof QueryCourseManagementFilterRequest
   */
  ageUp?: number | null;
  /**
   * 年齡門檻下
   * @type {number}
   * @memberof QueryCourseManagementFilterRequest
   */
  ageDown?: number | null;
  /**
   * 查詢欄位排序
   * @type {Array<SortProperty>}
   * @memberof QueryCourseManagementFilterRequest
   */
  sortProperties: Array<SortProperty>;
  /**
   * 目前頁數
   * @type {number}
   * @memberof QueryCourseManagementFilterRequest
   */
  page: number;
  /**
   * 每頁筆數
   * @type {number}
   * @memberof QueryCourseManagementFilterRequest
   */
  size: number;
}
/**
 * 分頁查詢 CourseManagementFilterResp
 * @export
 * @interface QueryCourseManagementFilterRespRequest
 */
export interface QueryCourseManagementFilterRespRequest {
  /**
   * id
   * @type {number}
   * @memberof QueryCourseManagementFilterRespRequest
   */
  id?: number;
  /**
   * 課程樣板過濾CourseManagementFilter.Id
   * @type {number}
   * @memberof QueryCourseManagementFilterRespRequest
   */
  courseManagementFilterId?: number;
  /**
   * MinistryResp.Id
   * @type {number}
   * @memberof QueryCourseManagementFilterRespRequest
   */
  ministryRespId?: number;
  /**
   * 查詢欄位排序
   * @type {Array<SortProperty>}
   * @memberof QueryCourseManagementFilterRespRequest
   */
  sortProperties: Array<SortProperty>;
  /**
   * 目前頁數
   * @type {number}
   * @memberof QueryCourseManagementFilterRespRequest
   */
  page: number;
  /**
   * 每頁筆數
   * @type {number}
   * @memberof QueryCourseManagementFilterRespRequest
   */
  size: number;
}
/**
 * 分頁查詢 CourseManagementFilterUser
 * @export
 * @interface QueryCourseManagementFilterUserRequest
 */
export interface QueryCourseManagementFilterUserRequest {
  /**
   * id
   * @type {number}
   * @memberof QueryCourseManagementFilterUserRequest
   */
  id?: number;
  /**
   * 課程樣板過濾CourseManagementFilter.Id
   * @type {number}
   * @memberof QueryCourseManagementFilterUserRequest
   */
  courseManagementFilterId?: number;
  /**
   * UserId.Id
   * @type {number}
   * @memberof QueryCourseManagementFilterUserRequest
   */
  userId?: number;
  /**
   * 查詢欄位排序
   * @type {Array<SortProperty>}
   * @memberof QueryCourseManagementFilterUserRequest
   */
  sortProperties: Array<SortProperty>;
  /**
   * 目前頁數
   * @type {number}
   * @memberof QueryCourseManagementFilterUserRequest
   */
  page: number;
  /**
   * 每頁筆數
   * @type {number}
   * @memberof QueryCourseManagementFilterUserRequest
   */
  size: number;
}
/**
 * 分頁查詢 CourseManagement
 * @export
 * @interface QueryCourseManagementRequest
 */
export interface QueryCourseManagementRequest {
  /**
   * id
   * @type {number}
   * @memberof QueryCourseManagementRequest
   */
  id?: number | null;
  /**
   * 課程類別CourseManagementType.Id
   * @type {number}
   * @memberof QueryCourseManagementRequest
   */
  courseManagementTypeId?: number | null;
  /**
   * 堂點Id Organization.Id
   * @type {number}
   * @memberof QueryCourseManagementRequest
   */
  organizationId?: number | null;
  /**
   * 課程代碼
   * @type {string}
   * @memberof QueryCourseManagementRequest
   */
  courseManagementNo?: string | null;
  /**
   * 課程作業繳交日期
   * @type {string}
   * @memberof QueryCourseManagementRequest
   */
  homeworkDate?: string;
  /**
   * 課程標題
   * @type {string}
   * @memberof QueryCourseManagementRequest
   */
  title?: string | null;
  /**
   * 課程內容描述
   * @type {string}
   * @memberof QueryCourseManagementRequest
   */
  description?: string | null;
  /**
   * 課程狀態對應type=CourseManagementStatus顯示 namevalue存此欄位0：關閉1：開啟
   * @type {string}
   * @memberof QueryCourseManagementRequest
   */
  courseManagementStatus?: string | null;
  /**
   * 狀態
   * @type {string}
   * @memberof QueryCourseManagementRequest
   */
  statusCd?: string | null;
  /**
   * 查詢欄位排序
   * @type {Array<SortProperty>}
   * @memberof QueryCourseManagementRequest
   */
  sortProperties: Array<SortProperty>;
  /**
   * 目前頁數
   * @type {number}
   * @memberof QueryCourseManagementRequest
   */
  page: number;
  /**
   * 每頁筆數
   * @type {number}
   * @memberof QueryCourseManagementRequest
   */
  size: number;
}
/**
 * 分頁查詢 CourseManagementType
 * @export
 * @interface QueryCourseManagementTypeRequest
 */
export interface QueryCourseManagementTypeRequest {
  /**
   * id
   * @type {number}
   * @memberof QueryCourseManagementTypeRequest
   */
  id?: number | null;
  /**
   * 課程類別編號
   * @type {string}
   * @memberof QueryCourseManagementTypeRequest
   */
  courseManagementTypeNo?: string | null;
  /**
   * 課程類別名稱
   * @type {string}
   * @memberof QueryCourseManagementTypeRequest
   */
  name?: string | null;
  /**
   * 備註
   * @type {string}
   * @memberof QueryCourseManagementTypeRequest
   */
  remark?: string | null;
  /**
   * 狀態
   * @type {string}
   * @memberof QueryCourseManagementTypeRequest
   */
  statusCd?: string | null;
  /**
   * 查詢欄位排序
   * @type {Array<SortProperty>}
   * @memberof QueryCourseManagementTypeRequest
   */
  sortProperties: Array<SortProperty>;
  /**
   * 目前頁數
   * @type {number}
   * @memberof QueryCourseManagementTypeRequest
   */
  page: number;
  /**
   * 每頁筆數
   * @type {number}
   * @memberof QueryCourseManagementTypeRequest
   */
  size: number;
}
/**
 * 分頁查詢 CourseOrganization
 * @export
 * @interface QueryCourseOrganizationRequest
 */
export interface QueryCourseOrganizationRequest {
  /**
   * id
   * @type {number}
   * @memberof QueryCourseOrganizationRequest
   */
  id?: number;
  /**
   * 課程類別Course.Id
   * @type {number}
   * @memberof QueryCourseOrganizationRequest
   */
  courseId?: number;
  /**
   * Organization.Id
   * @type {number}
   * @memberof QueryCourseOrganizationRequest
   */
  organizationId?: number;
  /**
   * 查詢欄位排序
   * @type {Array<SortProperty>}
   * @memberof QueryCourseOrganizationRequest
   */
  sortProperties: Array<SortProperty>;
  /**
   * 目前頁數
   * @type {number}
   * @memberof QueryCourseOrganizationRequest
   */
  page: number;
  /**
   * 每頁筆數
   * @type {number}
   * @memberof QueryCourseOrganizationRequest
   */
  size: number;
}
/**
 * 分頁查詢 CoursePrice
 * @export
 * @interface QueryCoursePriceRequest
 */
export interface QueryCoursePriceRequest {
  /**
   * id
   * @type {number}
   * @memberof QueryCoursePriceRequest
   */
  id?: number;
  /**
   * 課程類別Course.Id
   * @type {number}
   * @memberof QueryCoursePriceRequest
   */
  courseId?: number;
  /**
   * 價格名稱
   * @type {string}
   * @memberof QueryCoursePriceRequest
   */
  priceName?: string | null;
  /**
   * 價格
   * @type {number}
   * @memberof QueryCoursePriceRequest
   */
  price?: number;
  /**
   * 是否公開對應type=IsYN顯示 namevalue存此欄位0：N1：Y
   * @type {string}
   * @memberof QueryCoursePriceRequest
   */
  isPublic?: string | null;
  /**
   * 是否超過優惠日期後關閉對應type=IsYN顯示 namevalue存此欄0N1Yif1ThendataTimeCourse.DiscountSignUpDate關閉此選項
   * @type {string}
   * @memberof QueryCoursePriceRequest
   */
  isDueDate?: string | null;
  /**
   * 查詢欄位排序
   * @type {Array<SortProperty>}
   * @memberof QueryCoursePriceRequest
   */
  sortProperties: Array<SortProperty>;
  /**
   * 目前頁數
   * @type {number}
   * @memberof QueryCoursePriceRequest
   */
  page: number;
  /**
   * 每頁筆數
   * @type {number}
   * @memberof QueryCoursePriceRequest
   */
  size: number;
}
/**
 * 分頁查詢 Course
 * @export
 * @interface QueryCourseRequest
 */
export interface QueryCourseRequest {
  /**
   * id
   * @type {number}
   * @memberof QueryCourseRequest
   */
  id?: number | null;
  /**
   * 課程類別CourseManagement.Id
   * @type {number}
   * @memberof QueryCourseRequest
   */
  courseManagementId?: number | null;
  /**
   * Organization.Id
   * @type {number}
   * @memberof QueryCourseRequest
   */
  organizationId?: number | null;
  /**
   * Questionnaire.Id 問卷Id
   * @type {number}
   * @memberof QueryCourseRequest
   */
  questionnaireId?: number | null;
  /**
   * 年度 屆別
   * @type {string}
   * @memberof QueryCourseRequest
   */
  year?: string | null;
  /**
   * 名稱
   * @type {string}
   * @memberof QueryCourseRequest
   */
  name?: string | null;
  /**
   * 梯次
   * @type {string}
   * @memberof QueryCourseRequest
   */
  classNum?: string | null;
  /**
   * 季
   * @type {string}
   * @memberof QueryCourseRequest
   */
  season?: string | null;
  /**
   * 開課日
   * @type {string}
   * @memberof QueryCourseRequest
   */
  openDate?: string | null;
  /**
   * 報名日期(線上)
   * @type {string}
   * @memberof QueryCourseRequest
   */
  signUpDateS?: string | null;
  /**
   * 報名截止日(線上)
   * @type {string}
   * @memberof QueryCourseRequest
   */
  signUpDateE?: string | null;
  /**
   * 報名日期(臨櫃)
   * @type {string}
   * @memberof QueryCourseRequest
   */
  counterSignUpDateS?: string | null;
  /**
   * 報名截止日(臨櫃)
   * @type {string}
   * @memberof QueryCourseRequest
   */
  counterSignUpDateE?: string | null;
  /**
   * 優惠報名截止日
   * @type {string}
   * @memberof QueryCourseRequest
   */
  discountSignUpDate?: string | null;
  /**
   * 報名方式對應type=CourseSignUpType顯示 namevalue存此欄位0：一般臨櫃1：網路報名
   * @type {string}
   * @memberof QueryCourseRequest
   */
  courseSignUpType?: string | null;
  /**
   * 最少志願數
   * @type {number}
   * @memberof QueryCourseRequest
   */
  wishCount?: number;
  /**
   * 是否需要推薦對應type=IsYN顯示 namevalue存此欄位0：N1：Y
   * @type {string}
   * @memberof QueryCourseRequest
   */
  needRecommend?: string | null;
  /**
   * 新朋友可報名對應type=IsYN顯示 namevalue存此欄位0：N1：Y
   * @type {string}
   * @memberof QueryCourseRequest
   */
  acceptNewMember?: string | null;
  /**
   * 課程說明/資格
   * @type {string}
   * @memberof QueryCourseRequest
   */
  description?: string | null;
  /**
   * 上課堂數
   * @type {number}
   * @memberof QueryCourseRequest
   */
  courseCount?: number;
  /**
   * 報名名額
   * @type {number}
   * @memberof QueryCourseRequest
   */
  quota?: number;
  /**
   * 結業狀態對應type=GraduationType顯示 namevalue存此欄位0：未結業1：已結業 2:-
   * @type {string}
   * @memberof QueryCourseRequest
   */
  graduationType?: string | null;
  /**
   * 作業繳交日期
   * @type {string}
   * @memberof QueryCourseRequest
   */
  homeworkDate?: string;
  /**
   * 查尋字串
   * @type {string}
   * @memberof QueryCourseRequest
   */
  searchText?: string | null;
  /**
   * 課程型態：實體、線上
   * @type {Array<string>}
   * @memberof QueryCourseRequest
   */
  courseType?: Array<string> | null;
  /**
   * 開課日期起日
   * @type {string}
   * @memberof QueryCourseRequest
   */
  openDateS?: string | null;
  /**
   * 開課日期迄日
   * @type {string}
   * @memberof QueryCourseRequest
   */
  openDateE?: string | null;
  /**
   * 開課堂點
   * @type {Array<number>}
   * @memberof QueryCourseRequest
   */
  organizations?: Array<number> | null;
  /**
   * ModeConditions：經典課程0         最新課程：1 要有幾天內建的資料當條件?   即將結束課程：2 要判斷 報名結束幾天內的條件?
   * @type {string}
   * @memberof QueryCourseRequest
   */
  searchModeConditions?: string | null;
  /**
   * 狀態
   * @type {string}
   * @memberof QueryCourseRequest
   */
  statusCd?: string | null;
  /**
   * 課程代碼
   * @type {string}
   * @memberof QueryCourseRequest
   */
  courseManagementNo?: string | null;
  /**
   * 課程標題
   * @type {string}
   * @memberof QueryCourseRequest
   */
  courseManagementTitle?: string | null;
  /**
   * 課程內容描述
   * @type {string}
   * @memberof QueryCourseRequest
   */
  courseManagementDescription?: string | null;
  /**
   * CourseIsFilter：是否有擋修 0否 1是
   * @type {string}
   * @memberof QueryCourseRequest
   */
  courseIsFilter?: string | null;
  /**
   * 查詢欄位排序
   * @type {Array<SortProperty>}
   * @memberof QueryCourseRequest
   */
  sortProperties: Array<SortProperty>;
  /**
   * 目前頁數
   * @type {number}
   * @memberof QueryCourseRequest
   */
  page: number;
  /**
   * 每頁筆數
   * @type {number}
   * @memberof QueryCourseRequest
   */
  size: number;
}
/**
 * 分頁查詢 CourseTimeSchedule
 * @export
 * @interface QueryCourseTimeScheduleRequest
 */
export interface QueryCourseTimeScheduleRequest {
  /**
   * id
   * @type {number}
   * @memberof QueryCourseTimeScheduleRequest
   */
  id?: number;
  /**
   * 課程類別CourseManagement.Id
   * @type {number}
   * @memberof QueryCourseTimeScheduleRequest
   */
  courseId?: number;
  /**
   * 代號/梯次
   * @type {string}
   * @memberof QueryCourseTimeScheduleRequest
   */
  scheduleNo?: string | null;
  /**
   * 附件類別對應type=ClassDay顯示 namevalue存此欄位1：一2：二….
   * @type {string}
   * @memberof QueryCourseTimeScheduleRequest
   */
  classDay?: string | null;
  /**
   * 開始時間
   * @type {string}
   * @memberof QueryCourseTimeScheduleRequest
   */
  classTimeS?: string | null;
  /**
   * 結束時間
   * @type {string}
   * @memberof QueryCourseTimeScheduleRequest
   */
  classTimeE?: string | null;
  /**
   * 地點
   * @type {string}
   * @memberof QueryCourseTimeScheduleRequest
   */
  place?: string | null;
  /**
   * 查詢欄位排序
   * @type {Array<SortProperty>}
   * @memberof QueryCourseTimeScheduleRequest
   */
  sortProperties: Array<SortProperty>;
  /**
   * 目前頁數
   * @type {number}
   * @memberof QueryCourseTimeScheduleRequest
   */
  page: number;
  /**
   * 每頁筆數
   * @type {number}
   * @memberof QueryCourseTimeScheduleRequest
   */
  size: number;
}
/**
 * 分頁查詢 CourseTimeScheduleTeacher
 * @export
 * @interface QueryCourseTimeScheduleTeacherRequest
 */
export interface QueryCourseTimeScheduleTeacherRequest {
  /**
   * id
   * @type {number}
   * @memberof QueryCourseTimeScheduleTeacherRequest
   */
  id?: number;
  /**
   * 課程時段CourseTimeSchedule.Id
   * @type {number}
   * @memberof QueryCourseTimeScheduleTeacherRequest
   */
  courseTimeScheduleId?: number;
  /**
   * 代號/梯次
   * @type {string}
   * @memberof QueryCourseTimeScheduleTeacherRequest
   */
  scheduleNo?: string | null;
  /**
   * Teacher.Id
   * @type {number}
   * @memberof QueryCourseTimeScheduleTeacherRequest
   */
  teacherId?: number;
  /**
   * 查詢欄位排序
   * @type {Array<SortProperty>}
   * @memberof QueryCourseTimeScheduleTeacherRequest
   */
  sortProperties: Array<SortProperty>;
  /**
   * 目前頁數
   * @type {number}
   * @memberof QueryCourseTimeScheduleTeacherRequest
   */
  page: number;
  /**
   * 每頁筆數
   * @type {number}
   * @memberof QueryCourseTimeScheduleTeacherRequest
   */
  size: number;
}
/**
 * 分頁查詢 CourseTimeScheduleUser
 * @export
 * @interface QueryCourseTimeScheduleUserRequest
 */
export interface QueryCourseTimeScheduleUserRequest {
  /**
   * id
   * @type {number}
   * @memberof QueryCourseTimeScheduleUserRequest
   */
  id?: number;
  /**
   * 課程時段CourseTimeSchedule.Id
   * @type {number}
   * @memberof QueryCourseTimeScheduleUserRequest
   */
  courseTimeScheduleId?: number;
  /**
   * 代號/梯次
   * @type {string}
   * @memberof QueryCourseTimeScheduleUserRequest
   */
  scheduleNo?: string | null;
  /**
   * User.Id
   * @type {number}
   * @memberof QueryCourseTimeScheduleUserRequest
   */
  userId?: number;
  /**
   * 出席狀態
   * @type {string}
   * @memberof QueryCourseTimeScheduleUserRequest
   */
  attendanceType?: string | null;
  /**
   * 查詢欄位排序
   * @type {Array<SortProperty>}
   * @memberof QueryCourseTimeScheduleUserRequest
   */
  sortProperties: Array<SortProperty>;
  /**
   * 目前頁數
   * @type {number}
   * @memberof QueryCourseTimeScheduleUserRequest
   */
  page: number;
  /**
   * 每頁筆數
   * @type {number}
   * @memberof QueryCourseTimeScheduleUserRequest
   */
  size: number;
}
/**
 * 分頁查詢 Dept
 * @export
 * @interface QueryDeptRequest
 */
export interface QueryDeptRequest {
  /**
   * Id
   * @type {number}
   * @memberof QueryDeptRequest
   */
  id?: number;
  /**
   * 以前欄位Id
   * @type {number}
   * @memberof QueryDeptRequest
   */
  deptId?: number;
  /**
   * 上層
   * @type {number}
   * @memberof QueryDeptRequest
   */
  upperDeptId?: number;
  /**
   * 舊欄位對應部門id Portal.Id
   * @type {number}
   * @memberof QueryDeptRequest
   */
  pastoralId?: number;
  /**
   * 部門名稱
   * @type {string}
   * @memberof QueryDeptRequest
   */
  name?: string | null;
  /**
   * 部門主管職稱
   * @type {string}
   * @memberof QueryDeptRequest
   */
  title?: string | null;
  /**
   * 查詢欄位排序
   * @type {Array<SortProperty>}
   * @memberof QueryDeptRequest
   */
  sortProperties: Array<SortProperty>;
  /**
   * 目前頁數
   * @type {number}
   * @memberof QueryDeptRequest
   */
  page: number;
  /**
   * 每頁筆數
   * @type {number}
   * @memberof QueryDeptRequest
   */
  size: number;
}
/**
 * 分頁查詢 ErrCancel
 * @export
 * @interface QueryErrCancelRequest
 */
export interface QueryErrCancelRequest {
  /**
   *
   * @type {string}
   * @memberof QueryErrCancelRequest
   */
  name?: string | null;
  /**
   * 查詢欄位排序
   * @type {Array<SortProperty>}
   * @memberof QueryErrCancelRequest
   */
  sortProperties: Array<SortProperty>;
  /**
   * 目前頁數
   * @type {number}
   * @memberof QueryErrCancelRequest
   */
  page: number;
  /**
   * 每頁筆數
   * @type {number}
   * @memberof QueryErrCancelRequest
   */
  size: number;
}
/**
 *
 * @export
 * @interface QueryExceptionLogRequest
 */
export interface QueryExceptionLogRequest {
  /**
   * HandledId (值同 apiLog HandledId)
   * @type {string}
   * @memberof QueryExceptionLogRequest
   */
  handledId?: string | null;
  /**
   * 紀錄起始時間
   * @type {string}
   * @memberof QueryExceptionLogRequest
   */
  createAtStart?: string | null;
  /**
   * 紀錄結束時間
   * @type {string}
   * @memberof QueryExceptionLogRequest
   */
  createAtEnd?: string | null;
  /**
   * 查詢欄位排序
   * @type {Array<SortProperty>}
   * @memberof QueryExceptionLogRequest
   */
  sortProperties: Array<SortProperty>;
  /**
   * 目前頁數
   * @type {number}
   * @memberof QueryExceptionLogRequest
   */
  page: number;
  /**
   * 每頁筆數
   * @type {number}
   * @memberof QueryExceptionLogRequest
   */
  size: number;
}
/**
 * 分頁查詢 MeetingPoint
 * @export
 * @interface QueryMeetingPointRequest
 */
export interface QueryMeetingPointRequest {
  /**
   * id
   * @type {number}
   * @memberof QueryMeetingPointRequest
   */
  id?: number | null;
  /**
   * 聚會點名稱
   * @type {string}
   * @memberof QueryMeetingPointRequest
   */
  name?: string | null;
  /**
   * 查詢欄位排序
   * @type {Array<SortProperty>}
   * @memberof QueryMeetingPointRequest
   */
  sortProperties: Array<SortProperty>;
  /**
   * 目前頁數
   * @type {number}
   * @memberof QueryMeetingPointRequest
   */
  page: number;
  /**
   * 每頁筆數
   * @type {number}
   * @memberof QueryMeetingPointRequest
   */
  size: number;
}
/**
 * 分頁查詢 MessageInformation
 * @export
 * @interface QueryMessageInformationRequest
 */
export interface QueryMessageInformationRequest {
  /**
   * id
   * @type {number}
   * @memberof QueryMessageInformationRequest
   */
  id?: number | null;
  /**
   *
   * @type {number}
   * @memberof QueryMessageInformationRequest
   */
  organizationId?: number | null;
  /**
   * MeetingPoint.Id 聚會點id       //GetUserId from  User.MeetingPointId
   * @type {number}
   * @memberof QueryMessageInformationRequest
   */
  meetingPointId?: number | null;
  /**
   * Pastoral.Id 牧養組織id         //GetUserId from  User.PastoralId
   * @type {number}
   * @memberof QueryMessageInformationRequest
   */
  pastoralId?: number | null;
  /**
   * MinistryResp.Id 牧養身分
   * @type {number}
   * @memberof QueryMessageInformationRequest
   */
  ministryRespId?: number | null;
  /**
   * Ministry.Id 事工團                                      //GetUserId from MinistryMeetingUser join  MinistryMeeting   => MinistryMeeting.MinistryId=輸入的MinistryId
   * @type {number}
   * @memberof QueryMessageInformationRequest
   */
  ministryId?: number | null;
  /**
   * CourseNo 課程名稱 課程代碼          //GetUserId from UserCourse
   * @type {number}
   * @memberof QueryMessageInformationRequest
   */
  courseId?: number | null;
  /**
   * 性別 對應SystemConfigtype=GenderType顯示 namevalue存此欄位0：女姓1：男性     //GetUserId from  User.GenderType
   * @type {string}
   * @memberof QueryMessageInformationRequest
   */
  genderType?: string | null;
  /**
   * //GetUserId from  User.Birthday 年分 like 選的前三位 碼  例如  0 =>1920   就是 birthday like \'192%\'   性別 對應SystemConfigtype=BirthdayYearRange顯示 namevalue存此欄位0：1920   1：1930  2:1940  3:1950  4:1960  5:1970   6:1980  7:1990  8:2000   9:2010   10:2020
   * @type {string}
   * @memberof QueryMessageInformationRequest
   */
  birthdayYearRange?: string | null;
  /**
   * 職業type=EduType顯示 namevalue存此欄位0：老師1：家管…    //GetUserId from  User.ProfessionType
   * @type {string}
   * @memberof QueryMessageInformationRequest
   */
  professionType?: string | null;
  /**
   * 推播訊息描述
   * @type {string}
   * @memberof QueryMessageInformationRequest
   */
  title?: string | null;
  /**
   * 推播訊息內容
   * @type {string}
   * @memberof QueryMessageInformationRequest
   */
  descriptions?: string | null;
  /**
   * 職業type=MessageSendType namevalue存此欄位0：尚未推播    1：已推播
   * @type {string}
   * @memberof QueryMessageInformationRequest
   */
  messageSendType?: string | null;
  /**
   * 狀態
   * @type {string}
   * @memberof QueryMessageInformationRequest
   */
  statusCd?: string | null;
  /**
   * 查詢欄位排序
   * @type {Array<SortProperty>}
   * @memberof QueryMessageInformationRequest
   */
  sortProperties: Array<SortProperty>;
  /**
   * 目前頁數
   * @type {number}
   * @memberof QueryMessageInformationRequest
   */
  page: number;
  /**
   * 每頁筆數
   * @type {number}
   * @memberof QueryMessageInformationRequest
   */
  size: number;
}
/**
 * 分頁查詢 MessageInformationUser
 * @export
 * @interface QueryMessageInformationUserRequest
 */
export interface QueryMessageInformationUserRequest {
  /**
   * id
   * @type {number}
   * @memberof QueryMessageInformationUserRequest
   */
  id?: number | null;
  /**
   * User.Id Userid
   * @type {number}
   * @memberof QueryMessageInformationUserRequest
   */
  userId?: number | null;
  /**
   * User.LineId
   * @type {string}
   * @memberof QueryMessageInformationUserRequest
   */
  lineId?: string | null;
  /**
   * 狀態
   * @type {string}
   * @memberof QueryMessageInformationUserRequest
   */
  statusCd?: string | null;
  /**
   * Head Id
   * @type {number}
   * @memberof QueryMessageInformationUserRequest
   */
  messageInformationId?: number | null;
  /**
   * 查詢欄位排序
   * @type {Array<SortProperty>}
   * @memberof QueryMessageInformationUserRequest
   */
  sortProperties: Array<SortProperty>;
  /**
   * 目前頁數
   * @type {number}
   * @memberof QueryMessageInformationUserRequest
   */
  page: number;
  /**
   * 每頁筆數
   * @type {number}
   * @memberof QueryMessageInformationUserRequest
   */
  size: number;
}
/**
 * 分頁查詢 MinistryDef
 * @export
 * @interface QueryMinistryDefRequest
 */
export interface QueryMinistryDefRequest {
  /**
   * id
   * @type {number}
   * @memberof QueryMinistryDefRequest
   */
  id?: number | null;
  /**
   * 事工團分類代碼
   * @type {string}
   * @memberof QueryMinistryDefRequest
   */
  ministryDefNo?: string | null;
  /**
   * 事工團分類名稱
   * @type {string}
   * @memberof QueryMinistryDefRequest
   */
  name?: string | null;
  /**
   * 事工團類別狀態
   * @type {string}
   * @memberof QueryMinistryDefRequest
   */
  ministryDefStatus?: string | null;
  /**
   * 事工團類別  MinistryDefType 0一般事工團   1小組
   * @type {string}
   * @memberof QueryMinistryDefRequest
   */
  ministryDefType?: string | null;
  /**
   * 查詢欄位排序
   * @type {Array<SortProperty>}
   * @memberof QueryMinistryDefRequest
   */
  sortProperties: Array<SortProperty>;
  /**
   * 目前頁數
   * @type {number}
   * @memberof QueryMinistryDefRequest
   */
  page: number;
  /**
   * 每頁筆數
   * @type {number}
   * @memberof QueryMinistryDefRequest
   */
  size: number;
}
/**
 * 分頁查詢 MinistryMeeting
 * @export
 * @interface QueryMinistryMeetingRequest
 */
export interface QueryMinistryMeetingRequest {
  /**
   * id
   * @type {number}
   * @memberof QueryMinistryMeetingRequest
   */
  id?: number;
  /**
   * Ministry.Id
   * @type {number}
   * @memberof QueryMinistryMeetingRequest
   */
  ministryId?: number;
  /**
   * 小組聚會每周哪一天
   * @type {string}
   * @memberof QueryMinistryMeetingRequest
   */
  meetingDayOfWeek?: string | null;
  /**
   * 聚會時間
   * @type {string}
   * @memberof QueryMinistryMeetingRequest
   */
  meetingTime?: string | null;
  /**
   * 聚會地點
   * @type {string}
   * @memberof QueryMinistryMeetingRequest
   */
  meetingAddress?: string | null;
  /**
   * 聚會日期
   * @type {string}
   * @memberof QueryMinistryMeetingRequest
   */
  meetingDay?: string | null;
  /**
   * 是否為外展對應SystemConfigtype=IsNY顯示 namevalue存此欄位0：N1：Y
   * @type {string}
   * @memberof QueryMinistryMeetingRequest
   */
  isExp?: string | null;
  /**
   * 是否可查詢，否表示隱藏小組
   * @type {string}
   * @memberof QueryMinistryMeetingRequest
   */
  isSearchable?: string | null;
  /**
   * 聚會狀態對應SystemConfigtype=MeetType顯示 namevalue存此欄位0：尚未開始1：正常舉行2：停辦
   * @type {string}
   * @memberof QueryMinistryMeetingRequest
   */
  meetType?: string | null;
  /**
   * 查詢欄位排序
   * @type {Array<SortProperty>}
   * @memberof QueryMinistryMeetingRequest
   */
  sortProperties: Array<SortProperty>;
  /**
   * 目前頁數
   * @type {number}
   * @memberof QueryMinistryMeetingRequest
   */
  page: number;
  /**
   * 每頁筆數
   * @type {number}
   * @memberof QueryMinistryMeetingRequest
   */
  size: number;
}
/**
 * 分頁查詢 MinistryMeetingUser
 * @export
 * @interface QueryMinistryMeetingUserRequest
 */
export interface QueryMinistryMeetingUserRequest {
  /**
   * id
   * @type {number}
   * @memberof QueryMinistryMeetingUserRequest
   */
  id?: number | null;
  /**
   * MinistryMeeting.Id
   * @type {number}
   * @memberof QueryMinistryMeetingUserRequest
   */
  ministryMeetingId?: number | null;
  /**
   * User.Id
   * @type {number}
   * @memberof QueryMinistryMeetingUserRequest
   */
  userId?: number | null;
  /**
   * 是否聚會出席狀態        對應SystemConfig        type = MeetAttendanceType顯示 namevalue存此欄位0：尚未開課1：已出席2:未出席
   * @type {number}
   * @memberof QueryMinistryMeetingUserRequest
   */
  attendanceType?: number | null;
  /**
   * MinistryDef.Name
   * @type {string}
   * @memberof QueryMinistryMeetingUserRequest
   */
  ministryDefName?: string | null;
  /**
   * MinistryDef.Id
   * @type {number}
   * @memberof QueryMinistryMeetingUserRequest
   */
  ministryDefId?: number | null;
  /**
   * Ministry.Id
   * @type {number}
   * @memberof QueryMinistryMeetingUserRequest
   */
  ministryId?: number | null;
  /**
   * Ministry.Name
   * @type {string}
   * @memberof QueryMinistryMeetingUserRequest
   */
  ministryName?: string | null;
  /**
   * MinistryResp.Name
   * @type {string}
   * @memberof QueryMinistryMeetingUserRequest
   */
  ministryRespName?: string | null;
  /**
   * MeetingDayS
   * @type {string}
   * @memberof QueryMinistryMeetingUserRequest
   */
  meetingDayS?: string | null;
  /**
   * MeetingDayS
   * @type {string}
   * @memberof QueryMinistryMeetingUserRequest
   */
  meetingDayE?: string | null;
  /**
   * 異動紀錄
   * @type {number}
   * @memberof QueryMinistryMeetingUserRequest
   */
  ministryRespUserStatus?: number | null;
  /**
   * 查詢欄位排序
   * @type {Array<SortProperty>}
   * @memberof QueryMinistryMeetingUserRequest
   */
  sortProperties: Array<SortProperty>;
  /**
   * 目前頁數
   * @type {number}
   * @memberof QueryMinistryMeetingUserRequest
   */
  page: number;
  /**
   * 每頁筆數
   * @type {number}
   * @memberof QueryMinistryMeetingUserRequest
   */
  size: number;
}
/**
 * 分頁查詢 Ministry
 * @export
 * @interface QueryMinistryRequest
 */
export interface QueryMinistryRequest {
  /**
   * id
   * @type {number}
   * @memberof QueryMinistryRequest
   */
  id?: number | null;
  /**
   * 堂點
   * @type {number}
   * @memberof QueryMinistryRequest
   */
  organizationId?: number | null;
  /**
   * 事工團分類id
   * @type {number}
   * @memberof QueryMinistryRequest
   */
  ministryDefId?: number | null;
  /**
   * 事工團編號
   * @type {string}
   * @memberof QueryMinistryRequest
   */
  ministryNo?: string | null;
  /**
   * 事工團名稱
   * @type {string}
   * @memberof QueryMinistryRequest
   */
  name?: string | null;
  /**
   * 是否兒童事工團
   * @type {string}
   * @memberof QueryMinistryRequest
   */
  childMinistry?: string | null;
  /**
   * 事工團狀態
   * @type {string}
   * @memberof QueryMinistryRequest
   */
  ministryStatus?: string | null;
  /**
   * 查詢欄位排序
   * @type {Array<SortProperty>}
   * @memberof QueryMinistryRequest
   */
  sortProperties: Array<SortProperty>;
  /**
   * 目前頁數
   * @type {number}
   * @memberof QueryMinistryRequest
   */
  page: number;
  /**
   * 每頁筆數
   * @type {number}
   * @memberof QueryMinistryRequest
   */
  size: number;
}
/**
 * 分頁查詢 MinistryResp
 * @export
 * @interface QueryMinistryRespRequest
 */
export interface QueryMinistryRespRequest {
  /**
   * id
   * @type {number}
   * @memberof QueryMinistryRespRequest
   */
  id?: number | null;
  /**
   * 事工團.Id
   * @type {number}
   * @memberof QueryMinistryRespRequest
   */
  ministryId?: number | null;
  /**
   * 順序
   * @type {number}
   * @memberof QueryMinistryRespRequest
   */
  seq?: number | null;
  /**
   * 事工團職份名稱
   * @type {string}
   * @memberof QueryMinistryRespRequest
   */
  name?: string | null;
  /**
   * 是否管理職是否管理職        對應type=IsYN        顯示 name        value存此欄位 0：N 1：Y
   * @type {string}
   * @memberof QueryMinistryRespRequest
   */
  manageType?: string | null;
  /**
   * 查詢欄位排序
   * @type {Array<SortProperty>}
   * @memberof QueryMinistryRespRequest
   */
  sortProperties: Array<SortProperty>;
  /**
   * 目前頁數
   * @type {number}
   * @memberof QueryMinistryRespRequest
   */
  page: number;
  /**
   * 每頁筆數
   * @type {number}
   * @memberof QueryMinistryRespRequest
   */
  size: number;
}
/**
 * 分頁查詢 MinistryRespUser
 * @export
 * @interface QueryMinistryRespUserRequest
 */
export interface QueryMinistryRespUserRequest {
  /**
   * id
   * @type {number}
   * @memberof QueryMinistryRespUserRequest
   */
  id?: number | null;
  /**
   * User ID
   * @type {number}
   * @memberof QueryMinistryRespUserRequest
   */
  userId?: number | null;
  /**
   * 事工團職分明細主檔id
   * @type {number}
   * @memberof QueryMinistryRespUserRequest
   */
  ministryRespId?: number | null;
  /**
   * 查詢欄位排序
   * @type {Array<SortProperty>}
   * @memberof QueryMinistryRespUserRequest
   */
  sortProperties: Array<SortProperty>;
  /**
   * 目前頁數
   * @type {number}
   * @memberof QueryMinistryRespUserRequest
   */
  page: number;
  /**
   * 每頁筆數
   * @type {number}
   * @memberof QueryMinistryRespUserRequest
   */
  size: number;
}
/**
 * 分頁查詢 MinistryScheduleDetail
 * @export
 * @interface QueryMinistryScheduleDetailRequest
 */
export interface QueryMinistryScheduleDetailRequest {
  /**
   * 排程明細id
   * @type {number}
   * @memberof QueryMinistryScheduleDetailRequest
   */
  id?: number;
  /**
   * MinistrySchedule.Id
   * @type {number}
   * @memberof QueryMinistryScheduleDetailRequest
   */
  ministryScheduleId?: number;
  /**
   * 堂表名稱 例如：第一堂
   * @type {string}
   * @memberof QueryMinistryScheduleDetailRequest
   */
  name?: string | null;
  /**
   * 描述  例如 09:00~10:00
   * @type {string}
   * @memberof QueryMinistryScheduleDetailRequest
   */
  description?: string | null;
  /**
   * 查詢欄位排序
   * @type {Array<SortProperty>}
   * @memberof QueryMinistryScheduleDetailRequest
   */
  sortProperties: Array<SortProperty>;
  /**
   * 目前頁數
   * @type {number}
   * @memberof QueryMinistryScheduleDetailRequest
   */
  page: number;
  /**
   * 每頁筆數
   * @type {number}
   * @memberof QueryMinistryScheduleDetailRequest
   */
  size: number;
}
/**
 * 分頁查詢 MinistrySchedule
 * @export
 * @interface QueryMinistryScheduleRequest
 */
export interface QueryMinistryScheduleRequest {
  /**
   * Id
   * @type {number}
   * @memberof QueryMinistryScheduleRequest
   */
  id?: number;
  /**
   * Ministry.Id
   * @type {number}
   * @memberof QueryMinistryScheduleRequest
   */
  ministryId?: number;
  /**
   * 排程名稱
   * @type {string}
   * @memberof QueryMinistryScheduleRequest
   */
  name?: string | null;
  /**
   * 週期類別        對應type=CycleType        顯示 name         value存此欄位 0：固定週期 1：非固定週期(偶發類型)
   * @type {string}
   * @memberof QueryMinistryScheduleRequest
   */
  cycleType?: string | null;
  /**
   * 重複間隔
   * @type {string}
   * @memberof QueryMinistryScheduleRequest
   */
  repeatTime?: string | null;
  /**
   * 重複間隔單位        對應type=RepeatTimeUnit        顯示 name        value存此欄位 0：日 1：週 2：月 3：年
   * @type {string}
   * @memberof QueryMinistryScheduleRequest
   */
  repeatTimeUnit?: string | null;
  /**
   * 結束時間類別        對應type=EndDateType        顯示 name        value存此欄位 0：持續不停 1：於 2：重複
   * @type {string}
   * @memberof QueryMinistryScheduleRequest
   */
  endDateType?: string | null;
  /**
   * 結束時間日期
   * @type {string}
   * @memberof QueryMinistryScheduleRequest
   */
  endDate?: string | null;
  /**
   * 結束時間日期
   * @type {string}
   * @memberof QueryMinistryScheduleRequest
   */
  repeaTimes?: string | null;
  /**
   * 查詢欄位排序
   * @type {Array<SortProperty>}
   * @memberof QueryMinistryScheduleRequest
   */
  sortProperties: Array<SortProperty>;
  /**
   * 目前頁數
   * @type {number}
   * @memberof QueryMinistryScheduleRequest
   */
  page: number;
  /**
   * 每頁筆數
   * @type {number}
   * @memberof QueryMinistryScheduleRequest
   */
  size: number;
}
/**
 * 分頁查詢 ModActivity
 * @export
 * @interface QueryModActivityRequest
 */
export interface QueryModActivityRequest {
  /**
   *
   * @type {string}
   * @memberof QueryModActivityRequest
   */
  name?: string | null;
  /**
   * 查詢欄位排序
   * @type {Array<SortProperty>}
   * @memberof QueryModActivityRequest
   */
  sortProperties: Array<SortProperty>;
  /**
   * 目前頁數
   * @type {number}
   * @memberof QueryModActivityRequest
   */
  page: number;
  /**
   * 每頁筆數
   * @type {number}
   * @memberof QueryModActivityRequest
   */
  size: number;
}
/**
 * 分頁查詢 ModActivityWork
 * @export
 * @interface QueryModActivityWorkRequest
 */
export interface QueryModActivityWorkRequest {
  /**
   *
   * @type {string}
   * @memberof QueryModActivityWorkRequest
   */
  name?: string | null;
  /**
   * 查詢欄位排序
   * @type {Array<SortProperty>}
   * @memberof QueryModActivityWorkRequest
   */
  sortProperties: Array<SortProperty>;
  /**
   * 目前頁數
   * @type {number}
   * @memberof QueryModActivityWorkRequest
   */
  page: number;
  /**
   * 每頁筆數
   * @type {number}
   * @memberof QueryModActivityWorkRequest
   */
  size: number;
}
/**
 * 分頁查詢 ModActivityWorkShare
 * @export
 * @interface QueryModActivityWorkShareRequest
 */
export interface QueryModActivityWorkShareRequest {
  /**
   *
   * @type {string}
   * @memberof QueryModActivityWorkShareRequest
   */
  name?: string | null;
  /**
   * 查詢欄位排序
   * @type {Array<SortProperty>}
   * @memberof QueryModActivityWorkShareRequest
   */
  sortProperties: Array<SortProperty>;
  /**
   * 目前頁數
   * @type {number}
   * @memberof QueryModActivityWorkShareRequest
   */
  page: number;
  /**
   * 每頁筆數
   * @type {number}
   * @memberof QueryModActivityWorkShareRequest
   */
  size: number;
}
/**
 * 分頁查詢 ModActivityWorkSignup
 * @export
 * @interface QueryModActivityWorkSignupRequest
 */
export interface QueryModActivityWorkSignupRequest {
  /**
   *
   * @type {string}
   * @memberof QueryModActivityWorkSignupRequest
   */
  name?: string | null;
  /**
   * 查詢欄位排序
   * @type {Array<SortProperty>}
   * @memberof QueryModActivityWorkSignupRequest
   */
  sortProperties: Array<SortProperty>;
  /**
   * 目前頁數
   * @type {number}
   * @memberof QueryModActivityWorkSignupRequest
   */
  page: number;
  /**
   * 每頁筆數
   * @type {number}
   * @memberof QueryModActivityWorkSignupRequest
   */
  size: number;
}
/**
 * 分頁查詢 ModArea
 * @export
 * @interface QueryModAreaRequest
 */
export interface QueryModAreaRequest {
  /**
   *
   * @type {string}
   * @memberof QueryModAreaRequest
   */
  name?: string | null;
  /**
   * 查詢欄位排序
   * @type {Array<SortProperty>}
   * @memberof QueryModAreaRequest
   */
  sortProperties: Array<SortProperty>;
  /**
   * 目前頁數
   * @type {number}
   * @memberof QueryModAreaRequest
   */
  page: number;
  /**
   * 每頁筆數
   * @type {number}
   * @memberof QueryModAreaRequest
   */
  size: number;
}
/**
 * 分頁查詢 ModArealeader
 * @export
 * @interface QueryModArealeaderRequest
 */
export interface QueryModArealeaderRequest {
  /**
   *
   * @type {string}
   * @memberof QueryModArealeaderRequest
   */
  name?: string | null;
  /**
   * 查詢欄位排序
   * @type {Array<SortProperty>}
   * @memberof QueryModArealeaderRequest
   */
  sortProperties: Array<SortProperty>;
  /**
   * 目前頁數
   * @type {number}
   * @memberof QueryModArealeaderRequest
   */
  page: number;
  /**
   * 每頁筆數
   * @type {number}
   * @memberof QueryModArealeaderRequest
   */
  size: number;
}
/**
 * 分頁查詢 ModAreasupervisor
 * @export
 * @interface QueryModAreasupervisorRequest
 */
export interface QueryModAreasupervisorRequest {
  /**
   *
   * @type {string}
   * @memberof QueryModAreasupervisorRequest
   */
  name?: string | null;
  /**
   * 查詢欄位排序
   * @type {Array<SortProperty>}
   * @memberof QueryModAreasupervisorRequest
   */
  sortProperties: Array<SortProperty>;
  /**
   * 目前頁數
   * @type {number}
   * @memberof QueryModAreasupervisorRequest
   */
  page: number;
  /**
   * 每頁筆數
   * @type {number}
   * @memberof QueryModAreasupervisorRequest
   */
  size: number;
}
/**
 * 分頁查詢 ModCampaignMember
 * @export
 * @interface QueryModCampaignMemberRequest
 */
export interface QueryModCampaignMemberRequest {
  /**
   *
   * @type {string}
   * @memberof QueryModCampaignMemberRequest
   */
  name?: string | null;
  /**
   * 查詢欄位排序
   * @type {Array<SortProperty>}
   * @memberof QueryModCampaignMemberRequest
   */
  sortProperties: Array<SortProperty>;
  /**
   * 目前頁數
   * @type {number}
   * @memberof QueryModCampaignMemberRequest
   */
  page: number;
  /**
   * 每頁筆數
   * @type {number}
   * @memberof QueryModCampaignMemberRequest
   */
  size: number;
}
/**
 * 分頁查詢 ModCampaign
 * @export
 * @interface QueryModCampaignRequest
 */
export interface QueryModCampaignRequest {
  /**
   *
   * @type {string}
   * @memberof QueryModCampaignRequest
   */
  name?: string | null;
  /**
   * 查詢欄位排序
   * @type {Array<SortProperty>}
   * @memberof QueryModCampaignRequest
   */
  sortProperties: Array<SortProperty>;
  /**
   * 目前頁數
   * @type {number}
   * @memberof QueryModCampaignRequest
   */
  page: number;
  /**
   * 每頁筆數
   * @type {number}
   * @memberof QueryModCampaignRequest
   */
  size: number;
}
/**
 * 分頁查詢 ModCampaignSpday
 * @export
 * @interface QueryModCampaignSpdayRequest
 */
export interface QueryModCampaignSpdayRequest {
  /**
   *
   * @type {string}
   * @memberof QueryModCampaignSpdayRequest
   */
  name?: string | null;
  /**
   * 查詢欄位排序
   * @type {Array<SortProperty>}
   * @memberof QueryModCampaignSpdayRequest
   */
  sortProperties: Array<SortProperty>;
  /**
   * 目前頁數
   * @type {number}
   * @memberof QueryModCampaignSpdayRequest
   */
  page: number;
  /**
   * 每頁筆數
   * @type {number}
   * @memberof QueryModCampaignSpdayRequest
   */
  size: number;
}
/**
 * 分頁查詢 ModCareer
 * @export
 * @interface QueryModCareerRequest
 */
export interface QueryModCareerRequest {
  /**
   *
   * @type {string}
   * @memberof QueryModCareerRequest
   */
  name?: string | null;
  /**
   * 查詢欄位排序
   * @type {Array<SortProperty>}
   * @memberof QueryModCareerRequest
   */
  sortProperties: Array<SortProperty>;
  /**
   * 目前頁數
   * @type {number}
   * @memberof QueryModCareerRequest
   */
  page: number;
  /**
   * 每頁筆數
   * @type {number}
   * @memberof QueryModCareerRequest
   */
  size: number;
}
/**
 * 分頁查詢 ModClassDay
 * @export
 * @interface QueryModClassDayRequest
 */
export interface QueryModClassDayRequest {
  /**
   *
   * @type {string}
   * @memberof QueryModClassDayRequest
   */
  name?: string | null;
  /**
   * 查詢欄位排序
   * @type {Array<SortProperty>}
   * @memberof QueryModClassDayRequest
   */
  sortProperties: Array<SortProperty>;
  /**
   * 目前頁數
   * @type {number}
   * @memberof QueryModClassDayRequest
   */
  page: number;
  /**
   * 每頁筆數
   * @type {number}
   * @memberof QueryModClassDayRequest
   */
  size: number;
}
/**
 * 分頁查詢 ModClassPrice
 * @export
 * @interface QueryModClassPriceRequest
 */
export interface QueryModClassPriceRequest {
  /**
   *
   * @type {string}
   * @memberof QueryModClassPriceRequest
   */
  name?: string | null;
  /**
   * 查詢欄位排序
   * @type {Array<SortProperty>}
   * @memberof QueryModClassPriceRequest
   */
  sortProperties: Array<SortProperty>;
  /**
   * 目前頁數
   * @type {number}
   * @memberof QueryModClassPriceRequest
   */
  page: number;
  /**
   * 每頁筆數
   * @type {number}
   * @memberof QueryModClassPriceRequest
   */
  size: number;
}
/**
 * 分頁查詢 ModClass
 * @export
 * @interface QueryModClassRequest
 */
export interface QueryModClassRequest {
  /**
   *
   * @type {string}
   * @memberof QueryModClassRequest
   */
  name?: string | null;
  /**
   * 查詢欄位排序
   * @type {Array<SortProperty>}
   * @memberof QueryModClassRequest
   */
  sortProperties: Array<SortProperty>;
  /**
   * 目前頁數
   * @type {number}
   * @memberof QueryModClassRequest
   */
  page: number;
  /**
   * 每頁筆數
   * @type {number}
   * @memberof QueryModClassRequest
   */
  size: number;
}
/**
 * 分頁查詢 ModClassTerm
 * @export
 * @interface QueryModClassTermRequest
 */
export interface QueryModClassTermRequest {
  /**
   *
   * @type {string}
   * @memberof QueryModClassTermRequest
   */
  name?: string | null;
  /**
   * 查詢欄位排序
   * @type {Array<SortProperty>}
   * @memberof QueryModClassTermRequest
   */
  sortProperties: Array<SortProperty>;
  /**
   * 目前頁數
   * @type {number}
   * @memberof QueryModClassTermRequest
   */
  page: number;
  /**
   * 每頁筆數
   * @type {number}
   * @memberof QueryModClassTermRequest
   */
  size: number;
}
/**
 * 分頁查詢 ModClassTime
 * @export
 * @interface QueryModClassTimeRequest
 */
export interface QueryModClassTimeRequest {
  /**
   *
   * @type {string}
   * @memberof QueryModClassTimeRequest
   */
  name?: string | null;
  /**
   * 查詢欄位排序
   * @type {Array<SortProperty>}
   * @memberof QueryModClassTimeRequest
   */
  sortProperties: Array<SortProperty>;
  /**
   * 目前頁數
   * @type {number}
   * @memberof QueryModClassTimeRequest
   */
  page: number;
  /**
   * 每頁筆數
   * @type {number}
   * @memberof QueryModClassTimeRequest
   */
  size: number;
}
/**
 * 分頁查詢 ModDepartment
 * @export
 * @interface QueryModDepartmentRequest
 */
export interface QueryModDepartmentRequest {
  /**
   *
   * @type {string}
   * @memberof QueryModDepartmentRequest
   */
  name?: string | null;
  /**
   * 查詢欄位排序
   * @type {Array<SortProperty>}
   * @memberof QueryModDepartmentRequest
   */
  sortProperties: Array<SortProperty>;
  /**
   * 目前頁數
   * @type {number}
   * @memberof QueryModDepartmentRequest
   */
  page: number;
  /**
   * 每頁筆數
   * @type {number}
   * @memberof QueryModDepartmentRequest
   */
  size: number;
}
/**
 * 分頁查詢 ModExpgroup
 * @export
 * @interface QueryModExpgroupRequest
 */
export interface QueryModExpgroupRequest {
  /**
   *
   * @type {string}
   * @memberof QueryModExpgroupRequest
   */
  name?: string | null;
  /**
   * 查詢欄位排序
   * @type {Array<SortProperty>}
   * @memberof QueryModExpgroupRequest
   */
  sortProperties: Array<SortProperty>;
  /**
   * 目前頁數
   * @type {number}
   * @memberof QueryModExpgroupRequest
   */
  page: number;
  /**
   * 每頁筆數
   * @type {number}
   * @memberof QueryModExpgroupRequest
   */
  size: number;
}
/**
 * 分頁查詢 ModGroup
 * @export
 * @interface QueryModGroupRequest
 */
export interface QueryModGroupRequest {
  /**
   *
   * @type {string}
   * @memberof QueryModGroupRequest
   */
  name?: string | null;
  /**
   * 查詢欄位排序
   * @type {Array<SortProperty>}
   * @memberof QueryModGroupRequest
   */
  sortProperties: Array<SortProperty>;
  /**
   * 目前頁數
   * @type {number}
   * @memberof QueryModGroupRequest
   */
  page: number;
  /**
   * 每頁筆數
   * @type {number}
   * @memberof QueryModGroupRequest
   */
  size: number;
}
/**
 * 分頁查詢 ModGroupleader
 * @export
 * @interface QueryModGroupleaderRequest
 */
export interface QueryModGroupleaderRequest {
  /**
   *
   * @type {string}
   * @memberof QueryModGroupleaderRequest
   */
  name?: string | null;
  /**
   * 查詢欄位排序
   * @type {Array<SortProperty>}
   * @memberof QueryModGroupleaderRequest
   */
  sortProperties: Array<SortProperty>;
  /**
   * 目前頁數
   * @type {number}
   * @memberof QueryModGroupleaderRequest
   */
  page: number;
  /**
   * 每頁筆數
   * @type {number}
   * @memberof QueryModGroupleaderRequest
   */
  size: number;
}
/**
 * 分頁查詢 ModLessionCategory
 * @export
 * @interface QueryModLessionCategoryRequest
 */
export interface QueryModLessionCategoryRequest {
  /**
   *
   * @type {string}
   * @memberof QueryModLessionCategoryRequest
   */
  name?: string | null;
  /**
   * 查詢欄位排序
   * @type {Array<SortProperty>}
   * @memberof QueryModLessionCategoryRequest
   */
  sortProperties: Array<SortProperty>;
  /**
   * 目前頁數
   * @type {number}
   * @memberof QueryModLessionCategoryRequest
   */
  page: number;
  /**
   * 每頁筆數
   * @type {number}
   * @memberof QueryModLessionCategoryRequest
   */
  size: number;
}
/**
 * 分頁查詢 ModLessionPrice
 * @export
 * @interface QueryModLessionPriceRequest
 */
export interface QueryModLessionPriceRequest {
  /**
   *
   * @type {string}
   * @memberof QueryModLessionPriceRequest
   */
  name?: string | null;
  /**
   * 查詢欄位排序
   * @type {Array<SortProperty>}
   * @memberof QueryModLessionPriceRequest
   */
  sortProperties: Array<SortProperty>;
  /**
   * 目前頁數
   * @type {number}
   * @memberof QueryModLessionPriceRequest
   */
  page: number;
  /**
   * 每頁筆數
   * @type {number}
   * @memberof QueryModLessionPriceRequest
   */
  size: number;
}
/**
 * 分頁查詢 ModLession
 * @export
 * @interface QueryModLessionRequest
 */
export interface QueryModLessionRequest {
  /**
   *
   * @type {string}
   * @memberof QueryModLessionRequest
   */
  name?: string | null;
  /**
   * 查詢欄位排序
   * @type {Array<SortProperty>}
   * @memberof QueryModLessionRequest
   */
  sortProperties: Array<SortProperty>;
  /**
   * 目前頁數
   * @type {number}
   * @memberof QueryModLessionRequest
   */
  page: number;
  /**
   * 每頁筆數
   * @type {number}
   * @memberof QueryModLessionRequest
   */
  size: number;
}
/**
 * 分頁查詢 ModLessionTime
 * @export
 * @interface QueryModLessionTimeRequest
 */
export interface QueryModLessionTimeRequest {
  /**
   *
   * @type {string}
   * @memberof QueryModLessionTimeRequest
   */
  name?: string | null;
  /**
   * 查詢欄位排序
   * @type {Array<SortProperty>}
   * @memberof QueryModLessionTimeRequest
   */
  sortProperties: Array<SortProperty>;
  /**
   * 目前頁數
   * @type {number}
   * @memberof QueryModLessionTimeRequest
   */
  page: number;
  /**
   * 每頁筆數
   * @type {number}
   * @memberof QueryModLessionTimeRequest
   */
  size: number;
}
/**
 * 分頁查詢 ModLog
 * @export
 * @interface QueryModLogRequest
 */
export interface QueryModLogRequest {
  /**
   *
   * @type {string}
   * @memberof QueryModLogRequest
   */
  name?: string | null;
  /**
   * 查詢欄位排序
   * @type {Array<SortProperty>}
   * @memberof QueryModLogRequest
   */
  sortProperties: Array<SortProperty>;
  /**
   * 目前頁數
   * @type {number}
   * @memberof QueryModLogRequest
   */
  page: number;
  /**
   * 每頁筆數
   * @type {number}
   * @memberof QueryModLogRequest
   */
  size: number;
}
/**
 * 分頁查詢 ModMeetingMember
 * @export
 * @interface QueryModMeetingMemberRequest
 */
export interface QueryModMeetingMemberRequest {
  /**
   *
   * @type {string}
   * @memberof QueryModMeetingMemberRequest
   */
  name?: string | null;
  /**
   * 查詢欄位排序
   * @type {Array<SortProperty>}
   * @memberof QueryModMeetingMemberRequest
   */
  sortProperties: Array<SortProperty>;
  /**
   * 目前頁數
   * @type {number}
   * @memberof QueryModMeetingMemberRequest
   */
  page: number;
  /**
   * 每頁筆數
   * @type {number}
   * @memberof QueryModMeetingMemberRequest
   */
  size: number;
}
/**
 * 分頁查詢 ModMeeting
 * @export
 * @interface QueryModMeetingRequest
 */
export interface QueryModMeetingRequest {
  /**
   *
   * @type {string}
   * @memberof QueryModMeetingRequest
   */
  name?: string | null;
  /**
   * 查詢欄位排序
   * @type {Array<SortProperty>}
   * @memberof QueryModMeetingRequest
   */
  sortProperties: Array<SortProperty>;
  /**
   * 目前頁數
   * @type {number}
   * @memberof QueryModMeetingRequest
   */
  page: number;
  /**
   * 每頁筆數
   * @type {number}
   * @memberof QueryModMeetingRequest
   */
  size: number;
}
/**
 * 分頁查詢 ModMemberClassDay
 * @export
 * @interface QueryModMemberClassDayRequest
 */
export interface QueryModMemberClassDayRequest {
  /**
   *
   * @type {string}
   * @memberof QueryModMemberClassDayRequest
   */
  name?: string | null;
  /**
   * 查詢欄位排序
   * @type {Array<SortProperty>}
   * @memberof QueryModMemberClassDayRequest
   */
  sortProperties: Array<SortProperty>;
  /**
   * 目前頁數
   * @type {number}
   * @memberof QueryModMemberClassDayRequest
   */
  page: number;
  /**
   * 每頁筆數
   * @type {number}
   * @memberof QueryModMemberClassDayRequest
   */
  size: number;
}
/**
 * 分頁查詢 ModMemberClassDayTerm
 * @export
 * @interface QueryModMemberClassDayTermRequest
 */
export interface QueryModMemberClassDayTermRequest {
  /**
   *
   * @type {string}
   * @memberof QueryModMemberClassDayTermRequest
   */
  name?: string | null;
  /**
   * 查詢欄位排序
   * @type {Array<SortProperty>}
   * @memberof QueryModMemberClassDayTermRequest
   */
  sortProperties: Array<SortProperty>;
  /**
   * 目前頁數
   * @type {number}
   * @memberof QueryModMemberClassDayTermRequest
   */
  page: number;
  /**
   * 每頁筆數
   * @type {number}
   * @memberof QueryModMemberClassDayTermRequest
   */
  size: number;
}
/**
 * 分頁查詢 ModMemberClass
 * @export
 * @interface QueryModMemberClassRequest
 */
export interface QueryModMemberClassRequest {
  /**
   *
   * @type {string}
   * @memberof QueryModMemberClassRequest
   */
  name?: string | null;
  /**
   * 查詢欄位排序
   * @type {Array<SortProperty>}
   * @memberof QueryModMemberClassRequest
   */
  sortProperties: Array<SortProperty>;
  /**
   * 目前頁數
   * @type {number}
   * @memberof QueryModMemberClassRequest
   */
  page: number;
  /**
   * 每頁筆數
   * @type {number}
   * @memberof QueryModMemberClassRequest
   */
  size: number;
}
/**
 * 分頁查詢 ModMemberClassTime
 * @export
 * @interface QueryModMemberClassTimeRequest
 */
export interface QueryModMemberClassTimeRequest {
  /**
   *
   * @type {string}
   * @memberof QueryModMemberClassTimeRequest
   */
  name?: string | null;
  /**
   * 查詢欄位排序
   * @type {Array<SortProperty>}
   * @memberof QueryModMemberClassTimeRequest
   */
  sortProperties: Array<SortProperty>;
  /**
   * 目前頁數
   * @type {number}
   * @memberof QueryModMemberClassTimeRequest
   */
  page: number;
  /**
   * 每頁筆數
   * @type {number}
   * @memberof QueryModMemberClassTimeRequest
   */
  size: number;
}
/**
 * 分頁查詢 ModMemberInTag
 * @export
 * @interface QueryModMemberInTagRequest
 */
export interface QueryModMemberInTagRequest {
  /**
   *
   * @type {string}
   * @memberof QueryModMemberInTagRequest
   */
  name?: string | null;
  /**
   * 查詢欄位排序
   * @type {Array<SortProperty>}
   * @memberof QueryModMemberInTagRequest
   */
  sortProperties: Array<SortProperty>;
  /**
   * 目前頁數
   * @type {number}
   * @memberof QueryModMemberInTagRequest
   */
  page: number;
  /**
   * 每頁筆數
   * @type {number}
   * @memberof QueryModMemberInTagRequest
   */
  size: number;
}
/**
 * 分頁查詢 ModMemberLog
 * @export
 * @interface QueryModMemberLogRequest
 */
export interface QueryModMemberLogRequest {
  /**
   *
   * @type {string}
   * @memberof QueryModMemberLogRequest
   */
  name?: string | null;
  /**
   * 查詢欄位排序
   * @type {Array<SortProperty>}
   * @memberof QueryModMemberLogRequest
   */
  sortProperties: Array<SortProperty>;
  /**
   * 目前頁數
   * @type {number}
   * @memberof QueryModMemberLogRequest
   */
  page: number;
  /**
   * 每頁筆數
   * @type {number}
   * @memberof QueryModMemberLogRequest
   */
  size: number;
}
/**
 * 分頁查詢 ModMemberMinisterLog
 * @export
 * @interface QueryModMemberMinisterLogRequest
 */
export interface QueryModMemberMinisterLogRequest {
  /**
   *
   * @type {string}
   * @memberof QueryModMemberMinisterLogRequest
   */
  name?: string | null;
  /**
   * 查詢欄位排序
   * @type {Array<SortProperty>}
   * @memberof QueryModMemberMinisterLogRequest
   */
  sortProperties: Array<SortProperty>;
  /**
   * 目前頁數
   * @type {number}
   * @memberof QueryModMemberMinisterLogRequest
   */
  page: number;
  /**
   * 每頁筆數
   * @type {number}
   * @memberof QueryModMemberMinisterLogRequest
   */
  size: number;
}
/**
 * 分頁查詢 ModMemberMinister
 * @export
 * @interface QueryModMemberMinisterRequest
 */
export interface QueryModMemberMinisterRequest {
  /**
   *
   * @type {string}
   * @memberof QueryModMemberMinisterRequest
   */
  name?: string | null;
  /**
   * 查詢欄位排序
   * @type {Array<SortProperty>}
   * @memberof QueryModMemberMinisterRequest
   */
  sortProperties: Array<SortProperty>;
  /**
   * 目前頁數
   * @type {number}
   * @memberof QueryModMemberMinisterRequest
   */
  page: number;
  /**
   * 每頁筆數
   * @type {number}
   * @memberof QueryModMemberMinisterRequest
   */
  size: number;
}
/**
 * 分頁查詢 ModMember
 * @export
 * @interface QueryModMemberRequest
 */
export interface QueryModMemberRequest {
  /**
   *
   * @type {string}
   * @memberof QueryModMemberRequest
   */
  name?: string | null;
  /**
   * 查詢欄位排序
   * @type {Array<SortProperty>}
   * @memberof QueryModMemberRequest
   */
  sortProperties: Array<SortProperty>;
  /**
   * 目前頁數
   * @type {number}
   * @memberof QueryModMemberRequest
   */
  page: number;
  /**
   * 每頁筆數
   * @type {number}
   * @memberof QueryModMemberRequest
   */
  size: number;
}
/**
 * 分頁查詢 ModMinisterGroup
 * @export
 * @interface QueryModMinisterGroupRequest
 */
export interface QueryModMinisterGroupRequest {
  /**
   *
   * @type {string}
   * @memberof QueryModMinisterGroupRequest
   */
  name?: string | null;
  /**
   * 查詢欄位排序
   * @type {Array<SortProperty>}
   * @memberof QueryModMinisterGroupRequest
   */
  sortProperties: Array<SortProperty>;
  /**
   * 目前頁數
   * @type {number}
   * @memberof QueryModMinisterGroupRequest
   */
  page: number;
  /**
   * 每頁筆數
   * @type {number}
   * @memberof QueryModMinisterGroupRequest
   */
  size: number;
}
/**
 * 分頁查詢 ModMinister
 * @export
 * @interface QueryModMinisterRequest
 */
export interface QueryModMinisterRequest {
  /**
   *
   * @type {string}
   * @memberof QueryModMinisterRequest
   */
  name?: string | null;
  /**
   * 查詢欄位排序
   * @type {Array<SortProperty>}
   * @memberof QueryModMinisterRequest
   */
  sortProperties: Array<SortProperty>;
  /**
   * 目前頁數
   * @type {number}
   * @memberof QueryModMinisterRequest
   */
  page: number;
  /**
   * 每頁筆數
   * @type {number}
   * @memberof QueryModMinisterRequest
   */
  size: number;
}
/**
 * 分頁查詢 ModNewcommer
 * @export
 * @interface QueryModNewcommerRequest
 */
export interface QueryModNewcommerRequest {
  /**
   *
   * @type {string}
   * @memberof QueryModNewcommerRequest
   */
  name?: string | null;
  /**
   * 查詢欄位排序
   * @type {Array<SortProperty>}
   * @memberof QueryModNewcommerRequest
   */
  sortProperties: Array<SortProperty>;
  /**
   * 目前頁數
   * @type {number}
   * @memberof QueryModNewcommerRequest
   */
  page: number;
  /**
   * 每頁筆數
   * @type {number}
   * @memberof QueryModNewcommerRequest
   */
  size: number;
}
/**
 * 分頁查詢 ModNews
 * @export
 * @interface QueryModNewsRequest
 */
export interface QueryModNewsRequest {
  /**
   *
   * @type {string}
   * @memberof QueryModNewsRequest
   */
  name?: string | null;
  /**
   * 查詢欄位排序
   * @type {Array<SortProperty>}
   * @memberof QueryModNewsRequest
   */
  sortProperties: Array<SortProperty>;
  /**
   * 目前頁數
   * @type {number}
   * @memberof QueryModNewsRequest
   */
  page: number;
  /**
   * 每頁筆數
   * @type {number}
   * @memberof QueryModNewsRequest
   */
  size: number;
}
/**
 * 分頁查詢 ModOrderInvoice
 * @export
 * @interface QueryModOrderInvoiceRequest
 */
export interface QueryModOrderInvoiceRequest {
  /**
   *
   * @type {string}
   * @memberof QueryModOrderInvoiceRequest
   */
  name?: string | null;
  /**
   * 查詢欄位排序
   * @type {Array<SortProperty>}
   * @memberof QueryModOrderInvoiceRequest
   */
  sortProperties: Array<SortProperty>;
  /**
   * 目前頁數
   * @type {number}
   * @memberof QueryModOrderInvoiceRequest
   */
  page: number;
  /**
   * 每頁筆數
   * @type {number}
   * @memberof QueryModOrderInvoiceRequest
   */
  size: number;
}
/**
 * 分頁查詢 ModOrder
 * @export
 * @interface QueryModOrderRequest
 */
export interface QueryModOrderRequest {
  /**
   *
   * @type {string}
   * @memberof QueryModOrderRequest
   */
  name?: string | null;
  /**
   * 查詢欄位排序
   * @type {Array<SortProperty>}
   * @memberof QueryModOrderRequest
   */
  sortProperties: Array<SortProperty>;
  /**
   * 目前頁數
   * @type {number}
   * @memberof QueryModOrderRequest
   */
  page: number;
  /**
   * 每頁筆數
   * @type {number}
   * @memberof QueryModOrderRequest
   */
  size: number;
}
/**
 * 分頁查詢 ModPreorder
 * @export
 * @interface QueryModPreorderRequest
 */
export interface QueryModPreorderRequest {
  /**
   *
   * @type {string}
   * @memberof QueryModPreorderRequest
   */
  name?: string | null;
  /**
   * 查詢欄位排序
   * @type {Array<SortProperty>}
   * @memberof QueryModPreorderRequest
   */
  sortProperties: Array<SortProperty>;
  /**
   * 目前頁數
   * @type {number}
   * @memberof QueryModPreorderRequest
   */
  page: number;
  /**
   * 每頁筆數
   * @type {number}
   * @memberof QueryModPreorderRequest
   */
  size: number;
}
/**
 * 分頁查詢 ModRollcall
 * @export
 * @interface QueryModRollcallRequest
 */
export interface QueryModRollcallRequest {
  /**
   *
   * @type {string}
   * @memberof QueryModRollcallRequest
   */
  name?: string | null;
  /**
   * 查詢欄位排序
   * @type {Array<SortProperty>}
   * @memberof QueryModRollcallRequest
   */
  sortProperties: Array<SortProperty>;
  /**
   * 目前頁數
   * @type {number}
   * @memberof QueryModRollcallRequest
   */
  page: number;
  /**
   * 每頁筆數
   * @type {number}
   * @memberof QueryModRollcallRequest
   */
  size: number;
}
/**
 * 分頁查詢 ModRollcallWork
 * @export
 * @interface QueryModRollcallWorkRequest
 */
export interface QueryModRollcallWorkRequest {
  /**
   *
   * @type {string}
   * @memberof QueryModRollcallWorkRequest
   */
  name?: string | null;
  /**
   * 查詢欄位排序
   * @type {Array<SortProperty>}
   * @memberof QueryModRollcallWorkRequest
   */
  sortProperties: Array<SortProperty>;
  /**
   * 目前頁數
   * @type {number}
   * @memberof QueryModRollcallWorkRequest
   */
  page: number;
  /**
   * 每頁筆數
   * @type {number}
   * @memberof QueryModRollcallWorkRequest
   */
  size: number;
}
/**
 * 分頁查詢 ModStatisticDetail
 * @export
 * @interface QueryModStatisticDetailRequest
 */
export interface QueryModStatisticDetailRequest {
  /**
   *
   * @type {string}
   * @memberof QueryModStatisticDetailRequest
   */
  name?: string | null;
  /**
   * 查詢欄位排序
   * @type {Array<SortProperty>}
   * @memberof QueryModStatisticDetailRequest
   */
  sortProperties: Array<SortProperty>;
  /**
   * 目前頁數
   * @type {number}
   * @memberof QueryModStatisticDetailRequest
   */
  page: number;
  /**
   * 每頁筆數
   * @type {number}
   * @memberof QueryModStatisticDetailRequest
   */
  size: number;
}
/**
 * 分頁查詢 ModStatistic
 * @export
 * @interface QueryModStatisticRequest
 */
export interface QueryModStatisticRequest {
  /**
   *
   * @type {string}
   * @memberof QueryModStatisticRequest
   */
  name?: string | null;
  /**
   * 查詢欄位排序
   * @type {Array<SortProperty>}
   * @memberof QueryModStatisticRequest
   */
  sortProperties: Array<SortProperty>;
  /**
   * 目前頁數
   * @type {number}
   * @memberof QueryModStatisticRequest
   */
  page: number;
  /**
   * 每頁筆數
   * @type {number}
   * @memberof QueryModStatisticRequest
   */
  size: number;
}
/**
 * 分頁查詢 ModTag
 * @export
 * @interface QueryModTagRequest
 */
export interface QueryModTagRequest {
  /**
   *
   * @type {string}
   * @memberof QueryModTagRequest
   */
  name?: string | null;
  /**
   * 查詢欄位排序
   * @type {Array<SortProperty>}
   * @memberof QueryModTagRequest
   */
  sortProperties: Array<SortProperty>;
  /**
   * 目前頁數
   * @type {number}
   * @memberof QueryModTagRequest
   */
  page: number;
  /**
   * 每頁筆數
   * @type {number}
   * @memberof QueryModTagRequest
   */
  size: number;
}
/**
 * 分頁查詢 ModTeacher
 * @export
 * @interface QueryModTeacherRequest
 */
export interface QueryModTeacherRequest {
  /**
   *
   * @type {string}
   * @memberof QueryModTeacherRequest
   */
  name?: string | null;
  /**
   * 查詢欄位排序
   * @type {Array<SortProperty>}
   * @memberof QueryModTeacherRequest
   */
  sortProperties: Array<SortProperty>;
  /**
   * 目前頁數
   * @type {number}
   * @memberof QueryModTeacherRequest
   */
  page: number;
  /**
   * 每頁筆數
   * @type {number}
   * @memberof QueryModTeacherRequest
   */
  size: number;
}
/**
 * 分頁查詢 ModZone
 * @export
 * @interface QueryModZoneRequest
 */
export interface QueryModZoneRequest {
  /**
   *
   * @type {string}
   * @memberof QueryModZoneRequest
   */
  name?: string | null;
  /**
   * 查詢欄位排序
   * @type {Array<SortProperty>}
   * @memberof QueryModZoneRequest
   */
  sortProperties: Array<SortProperty>;
  /**
   * 目前頁數
   * @type {number}
   * @memberof QueryModZoneRequest
   */
  page: number;
  /**
   * 每頁筆數
   * @type {number}
   * @memberof QueryModZoneRequest
   */
  size: number;
}
/**
 * 分頁查詢 ModZoneleader
 * @export
 * @interface QueryModZoneleaderRequest
 */
export interface QueryModZoneleaderRequest {
  /**
   *
   * @type {string}
   * @memberof QueryModZoneleaderRequest
   */
  name?: string | null;
  /**
   * 查詢欄位排序
   * @type {Array<SortProperty>}
   * @memberof QueryModZoneleaderRequest
   */
  sortProperties: Array<SortProperty>;
  /**
   * 目前頁數
   * @type {number}
   * @memberof QueryModZoneleaderRequest
   */
  page: number;
  /**
   * 每頁筆數
   * @type {number}
   * @memberof QueryModZoneleaderRequest
   */
  size: number;
}
/**
 * 分頁查詢 ModZonesupervisor
 * @export
 * @interface QueryModZonesupervisorRequest
 */
export interface QueryModZonesupervisorRequest {
  /**
   *
   * @type {string}
   * @memberof QueryModZonesupervisorRequest
   */
  name?: string | null;
  /**
   * 查詢欄位排序
   * @type {Array<SortProperty>}
   * @memberof QueryModZonesupervisorRequest
   */
  sortProperties: Array<SortProperty>;
  /**
   * 目前頁數
   * @type {number}
   * @memberof QueryModZonesupervisorRequest
   */
  page: number;
  /**
   * 每頁筆數
   * @type {number}
   * @memberof QueryModZonesupervisorRequest
   */
  size: number;
}
/**
 * 分頁查詢 Organization
 * @export
 * @interface QueryOrganizationRequest
 */
export interface QueryOrganizationRequest {
  /**
   * Id
   * @type {number}
   * @memberof QueryOrganizationRequest
   */
  id?: number;
  /**
   * 以前欄位Id
   * @type {number}
   * @memberof QueryOrganizationRequest
   */
  organizationId?: number;
  /**
   * 上層
   * @type {number}
   * @memberof QueryOrganizationRequest
   */
  upperOrganizationId?: number;
  /**
   * 舊欄位對應部門id Portal.Id
   * @type {number}
   * @memberof QueryOrganizationRequest
   */
  pastoralId?: number;
  /**
   * 組織名稱
   * @type {string}
   * @memberof QueryOrganizationRequest
   */
  name?: string | null;
  /**
   * 主任牧師名稱
   * @type {string}
   * @memberof QueryOrganizationRequest
   */
  pastorName?: string | null;
  /**
   * 主任牧師User.Id
   * @type {number}
   * @memberof QueryOrganizationRequest
   */
  pastorId?: number;
  /**
   * 主任牧師身分證
   * @type {string}
   * @memberof QueryOrganizationRequest
   */
  pastor?: string | null;
  /**
   * 主任牧師電話
   * @type {string}
   * @memberof QueryOrganizationRequest
   */
  pastorphone?: string | null;
  /**
   *
   * @type {string}
   * @memberof QueryOrganizationRequest
   */
  phone?: string | null;
  /**
   * 教會電話
   * @type {string}
   * @memberof QueryOrganizationRequest
   */
  fax?: string | null;
  /**
   * 教會傳真
   * @type {string}
   * @memberof QueryOrganizationRequest
   */
  email?: string | null;
  /**
   * 教會Email
   * @type {string}
   * @memberof QueryOrganizationRequest
   */
  site?: string | null;
  /**
   * 教會網址
   * @type {string}
   * @memberof QueryOrganizationRequest
   */
  zip?: string | null;
  /**
   * 教會郵遞區號
   * @type {string}
   * @memberof QueryOrganizationRequest
   */
  address?: string | null;
  /**
   * 教會地址
   * @type {string}
   * @memberof QueryOrganizationRequest
   */
  invoiceIdentifier?: string | null;
  /**
   * 教會統一編號抬頭
   * @type {string}
   * @memberof QueryOrganizationRequest
   */
  invoiceTitle?: string | null;
  /**
   * 是否需要發票抬頭        對應SystemConfig        type = IsYN顯示 namevalue存此欄位0：N1：Y
   * @type {string}
   * @memberof QueryOrganizationRequest
   */
  isInvoiceTitle?: string | null;
  /**
   * 組織狀態        對應SystemConfig        type =OrgStatus顯示 namevalue存此欄位0：停用 1：正常
   * @type {string}
   * @memberof QueryOrganizationRequest
   */
  orgStatus?: string | null;
  /**
   *
   * @type {string}
   * @memberof QueryOrganizationRequest
   */
  deptName?: string | null;
  /**
   * DeptId
   * @type {number}
   * @memberof QueryOrganizationRequest
   */
  deptId?: number;
  /**
   * 查詢欄位排序
   * @type {Array<SortProperty>}
   * @memberof QueryOrganizationRequest
   */
  sortProperties: Array<SortProperty>;
  /**
   * 目前頁數
   * @type {number}
   * @memberof QueryOrganizationRequest
   */
  page: number;
  /**
   * 每頁筆數
   * @type {number}
   * @memberof QueryOrganizationRequest
   */
  size: number;
}
/**
 * 分頁查詢 OrganizationUser
 * @export
 * @interface QueryOrganizationUserRequest
 */
export interface QueryOrganizationUserRequest {
  /**
   *
   * @type {string}
   * @memberof QueryOrganizationUserRequest
   */
  name?: string | null;
  /**
   * 查詢欄位排序
   * @type {Array<SortProperty>}
   * @memberof QueryOrganizationUserRequest
   */
  sortProperties: Array<SortProperty>;
  /**
   * 目前頁數
   * @type {number}
   * @memberof QueryOrganizationUserRequest
   */
  page: number;
  /**
   * 每頁筆數
   * @type {number}
   * @memberof QueryOrganizationUserRequest
   */
  size: number;
}
/**
 * 分頁查詢 PastoralMeeting
 * @export
 * @interface QueryPastoralMeetingRequest
 */
export interface QueryPastoralMeetingRequest {
  /**
   * id
   * @type {number}
   * @memberof QueryPastoralMeetingRequest
   */
  id?: number;
  /**
   * Pastoral.Id
   * @type {number}
   * @memberof QueryPastoralMeetingRequest
   */
  pastoralId?: number;
  /**
   * 小組聚會每周哪一天
   * @type {string}
   * @memberof QueryPastoralMeetingRequest
   */
  meetingDayOfWeek?: string | null;
  /**
   * 聚會時間
   * @type {string}
   * @memberof QueryPastoralMeetingRequest
   */
  meetingTime?: string | null;
  /**
   * 聚會地點
   * @type {string}
   * @memberof QueryPastoralMeetingRequest
   */
  meetingAddress?: string | null;
  /**
   * 聚會日期
   * @type {string}
   * @memberof QueryPastoralMeetingRequest
   */
  meetingDay?: string | null;
  /**
   * 是否為外展對應SystemConfigtype=IsNY顯示 namevalue存此欄位0：N1：Y
   * @type {string}
   * @memberof QueryPastoralMeetingRequest
   */
  isExp?: string | null;
  /**
   * 是否可查詢，否表示隱藏小組
   * @type {string}
   * @memberof QueryPastoralMeetingRequest
   */
  isSearchable?: string | null;
  /**
   * 聚會狀態對應SystemConfigtype=MeetType顯示 namevalue存此欄位0：尚未開始1：正常舉行2：停辦
   * @type {string}
   * @memberof QueryPastoralMeetingRequest
   */
  meetType?: string | null;
  /**
   * 查詢欄位排序
   * @type {Array<SortProperty>}
   * @memberof QueryPastoralMeetingRequest
   */
  sortProperties: Array<SortProperty>;
  /**
   * 目前頁數
   * @type {number}
   * @memberof QueryPastoralMeetingRequest
   */
  page: number;
  /**
   * 每頁筆數
   * @type {number}
   * @memberof QueryPastoralMeetingRequest
   */
  size: number;
}
/**
 * 分頁查詢 PastoralMeetingUser
 * @export
 * @interface QueryPastoralMeetingUserRequest
 */
export interface QueryPastoralMeetingUserRequest {
  /**
   * id
   * @type {number}
   * @memberof QueryPastoralMeetingUserRequest
   */
  id?: number;
  /**
   * PastoralMeeting.Id
   * @type {number}
   * @memberof QueryPastoralMeetingUserRequest
   */
  pastoralMeetingId?: number;
  /**
   * User.Id
   * @type {number}
   * @memberof QueryPastoralMeetingUserRequest
   */
  userId?: number;
  /**
   * 是否聚會出席狀態        對應SystemConfig        type = MeetAttendanceType顯示 namevalue存此欄位0：尚未開課1：已出席2:未出席
   * @type {number}
   * @memberof QueryPastoralMeetingUserRequest
   */
  meetAttendanceType?: number;
  /**
   * 查詢欄位排序
   * @type {Array<SortProperty>}
   * @memberof QueryPastoralMeetingUserRequest
   */
  sortProperties: Array<SortProperty>;
  /**
   * 目前頁數
   * @type {number}
   * @memberof QueryPastoralMeetingUserRequest
   */
  page: number;
  /**
   * 每頁筆數
   * @type {number}
   * @memberof QueryPastoralMeetingUserRequest
   */
  size: number;
}
/**
 * 分頁查詢 Pastoral
 * @export
 * @interface QueryPastoralRequest
 */
export interface QueryPastoralRequest {
  /**
   * id
   * @type {number}
   * @memberof QueryPastoralRequest
   */
  id?: number;
  /**
   * 組織上層Id (分多階層)        堂點       牧區 督區 區 小組
   * @type {number}
   * @memberof QueryPastoralRequest
   */
  upperPastoralId?: number;
  /**
   * 分組區域名稱
   * @type {string}
   * @memberof QueryPastoralRequest
   */
  name?: string | null;
  /**
   * 分組區域職稱
   * @type {string}
   * @memberof QueryPastoralRequest
   */
  title?: string | null;
  /**
   * 小組編號//八碼數字 系統自動產生(為小組時才需填入)
   * @type {string}
   * @memberof QueryPastoralRequest
   */
  groupNo?: string | null;
  /**
   * 領導人 UserId
   * @type {number}
   * @memberof QueryPastoralRequest
   */
  leaderId?: number | null;
  /**
   * 領導人身分證
   * @type {string}
   * @memberof QueryPastoralRequest
   */
  leaderIdnumber?: string | null;
  /**
   * 領導人2 UserId
   * @type {number}
   * @memberof QueryPastoralRequest
   */
  leader2Id?: number | null;
  /**
   * 領導人2身分證
   * @type {string}
   * @memberof QueryPastoralRequest
   */
  leader2Idnumber?: string | null;
  /**
   * 領導人3 UserId
   * @type {number}
   * @memberof QueryPastoralRequest
   */
  leader3Id?: number | null;
  /**
   * 領導人3身分證
   * @type {string}
   * @memberof QueryPastoralRequest
   */
  leader3Idnumber?: string | null;
  /**
   * 最大權限人UserId
   * @type {number}
   * @memberof QueryPastoralRequest
   */
  supervisorId?: number | null;
  /**
   *
   * @type {number}
   * @memberof QueryPastoralRequest
   */
  upperOrganizationId?: number | null;
  /**
   *
   * @type {number}
   * @memberof QueryPastoralRequest
   */
  orgId?: number;
  /**
   *
   * @type {number}
   * @memberof QueryPastoralRequest
   */
  typeId?: number | null;
  /**
   * 查詢欄位排序
   * @type {Array<SortProperty>}
   * @memberof QueryPastoralRequest
   */
  sortProperties: Array<SortProperty>;
  /**
   * 目前頁數
   * @type {number}
   * @memberof QueryPastoralRequest
   */
  page: number;
  /**
   * 每頁筆數
   * @type {number}
   * @memberof QueryPastoralRequest
   */
  size: number;
}
/**
 * 取得  Pastoral 單筆明細
 * @export
 * @interface QueryPastoralTreeRequest
 */
export interface QueryPastoralTreeRequest {
  /**
   *
   * @type {number}
   * @memberof QueryPastoralTreeRequest
   */
  id?: number;
}
/**
 * 分頁查詢 Privilege
 * @export
 * @interface QueryPrivilegeRequest
 */
export interface QueryPrivilegeRequest {
  /**
   *
   * @type {string}
   * @memberof QueryPrivilegeRequest
   */
  name?: string | null;
  /**
   * 查詢欄位排序
   * @type {Array<SortProperty>}
   * @memberof QueryPrivilegeRequest
   */
  sortProperties: Array<SortProperty>;
  /**
   * 目前頁數
   * @type {number}
   * @memberof QueryPrivilegeRequest
   */
  page: number;
  /**
   * 每頁筆數
   * @type {number}
   * @memberof QueryPrivilegeRequest
   */
  size: number;
}
/**
 * 分頁查詢 QrCode
 * @export
 * @interface QueryQrCodeRequest
 */
export interface QueryQrCodeRequest {
  /**
   * QrCodeId
   * @type {number}
   * @memberof QueryQrCodeRequest
   */
  id?: number;
  /**
   * 報到類別對應 systemconfig.Type=RefferenceType 0:兒童個人報到專用 1:小組報到 2:主日報到 3:領袖之夜報到 4:課程報到 5:事工團報到 6:問卷填寫
   * @type {number}
   * @memberof QueryQrCodeRequest
   */
  referenceType?: number | null;
  /**
   * 對應報到類別主擋Id
   * @type {number}
   * @memberof QueryQrCodeRequest
   */
  referenceId?: number | null;
  /**
   * 報到使用者Id
   * @type {number}
   * @memberof QueryQrCodeRequest
   */
  userId?: number | null;
  /**
   * Id+RefferenceType+UserId 產生唯一值
   * @type {string}
   * @memberof QueryQrCodeRequest
   */
  generateCode?: string | null;
  /**
   * 付款方式 對應SystemConfig內Type=RegisterStatus 0:尚未報到 1:已報到
   * @type {number}
   * @memberof QueryQrCodeRequest
   */
  registerStatus?: number | null;
  /**
   * 報到時間
   * @type {string}
   * @memberof QueryQrCodeRequest
   */
  registerTime?: string | null;
  /**
   * 查詢欄位排序
   * @type {Array<SortProperty>}
   * @memberof QueryQrCodeRequest
   */
  sortProperties: Array<SortProperty>;
  /**
   * 目前頁數
   * @type {number}
   * @memberof QueryQrCodeRequest
   */
  page: number;
  /**
   * 每頁筆數
   * @type {number}
   * @memberof QueryQrCodeRequest
   */
  size: number;
}
/**
 * 分頁查詢 QuestionnaireDetail
 * @export
 * @interface QueryQuestionnaireDetailRequest
 */
export interface QueryQuestionnaireDetailRequest {
  /**
   * 問卷明細Id
   * @type {number}
   * @memberof QueryQuestionnaireDetailRequest
   */
  id?: number;
  /**
   * 問卷Id
   * @type {number}
   * @memberof QueryQuestionnaireDetailRequest
   */
  questionnaireId?: number;
  /**
   * 上層問卷DetailId
   * @type {number}
   * @memberof QueryQuestionnaireDetailRequest
   */
  upperQuestionnaireDetailId?: number;
  /**
   * 問卷內容類型type=QuestionnaireDetailType顯示 namevalue存此欄位0：區段標題1：題目2：選項
   * @type {string}
   * @memberof QueryQuestionnaireDetailRequest
   */
  questionnaireDetailType?: string | null;
  /**
   * QuestionnaireType=1才可選問卷內容類型type=ComponentType顯示 namevalue存此欄位0：選擇(單選)1：選擇(多選)2：是非3：簡答
   * @type {string}
   * @memberof QueryQuestionnaireDetailRequest
   */
  componentType?: string | null;
  /**
   * 顯示排序
   * @type {number}
   * @memberof QueryQuestionnaireDetailRequest
   */
  sequence?: number;
  /**
   * 元件描述假設QuestionnaireType=0此顯示區段標題假設QuestionnaireType=1此顯示該UpperQuestionnaireId.區段之Sequence題目名稱假設QuestionnaireType=2此顯示該UpperQuestionnaireId.區段之ComponentType選項之內容說明
   * @type {string}
   * @memberof QueryQuestionnaireDetailRequest
   */
  name?: string | null;
  /**
   * 描述
   * @type {string}
   * @memberof QueryQuestionnaireDetailRequest
   */
  description?: string | null;
  /**
   * 查詢欄位排序
   * @type {Array<SortProperty>}
   * @memberof QueryQuestionnaireDetailRequest
   */
  sortProperties: Array<SortProperty>;
  /**
   * 目前頁數
   * @type {number}
   * @memberof QueryQuestionnaireDetailRequest
   */
  page: number;
  /**
   * 每頁筆數
   * @type {number}
   * @memberof QueryQuestionnaireDetailRequest
   */
  size: number;
}
/**
 * 分頁查詢 Questionnaire
 * @export
 * @interface QueryQuestionnaireRequest
 */
export interface QueryQuestionnaireRequest {
  /**
   * 問卷Id
   * @type {number}
   * @memberof QueryQuestionnaireRequest
   */
  id?: number | null;
  /**
   * 問卷堂點類別        type=QuestionnaireJoinLocation       顯示 name     value存此欄位0：堂點
   * @type {string}
   * @memberof QueryQuestionnaireRequest
   */
  questionnaireJoinLocation?: string | null;
  /**
   * 問卷類型type=QuestionnaireType顯示 namevalue存此欄位0：課程問卷 1:服事徵召 2:一般問卷
   * @type {string}
   * @memberof QueryQuestionnaireRequest
   */
  questionnaireType?: string | null;
  /**
   * 問卷名稱
   * @type {string}
   * @memberof QueryQuestionnaireRequest
   */
  name?: string | null;
  /**
   * 問卷說明
   * @type {string}
   * @memberof QueryQuestionnaireRequest
   */
  description?: string | null;
  /**
   * 指定堂點
   * @type {number}
   * @memberof QueryQuestionnaireRequest
   */
  organizationId?: number | null;
  /**
   * 指定牧區
   * @type {number}
   * @memberof QueryQuestionnaireRequest
   */
  pastoralId?: number | null;
  /**
   * 指定課程分類
   * @type {number}
   * @memberof QueryQuestionnaireRequest
   */
  courseManagementTypeId?: number | null;
  /**
   * 指定課程名稱
   * @type {string}
   * @memberof QueryQuestionnaireRequest
   */
  courseManagementName?: string | null;
  /**
   * 指定年度
   * @type {string}
   * @memberof QueryQuestionnaireRequest
   */
  courseYear?: string | null;
  /**
   * 指定季
   * @type {string}
   * @memberof QueryQuestionnaireRequest
   */
  courseSeason?: string | null;
  /**
   * 指定梯次
   * @type {string}
   * @memberof QueryQuestionnaireRequest
   */
  courseClassNum?: string | null;
  /**
   * 指定課程代碼
   * @type {string}
   * @memberof QueryQuestionnaireRequest
   */
  courseManagementNo?: string | null;
  /**
   * 作業繳交日期起 courseHomeworkDate
   * @type {string}
   * @memberof QueryQuestionnaireRequest
   */
  dateRangeS?: string | null;
  /**
   * 作業繳交日期迄courseHomeworkDate
   * @type {string}
   * @memberof QueryQuestionnaireRequest
   */
  dateRangeE?: string | null;
  /**
   * 查詢欄位排序
   * @type {Array<SortProperty>}
   * @memberof QueryQuestionnaireRequest
   */
  sortProperties: Array<SortProperty>;
  /**
   * 目前頁數
   * @type {number}
   * @memberof QueryQuestionnaireRequest
   */
  page: number;
  /**
   * 每頁筆數
   * @type {number}
   * @memberof QueryQuestionnaireRequest
   */
  size: number;
}
/**
 * 分頁查詢 QuestionnaireSatisfyUser
 * @export
 * @interface QueryQuestionnaireSatisfyUserRequest
 */
export interface QueryQuestionnaireSatisfyUserRequest {
  /**
   * 會員出席聚會狀態.id
   * @type {number}
   * @memberof QueryQuestionnaireSatisfyUserRequest
   */
  id?: number;
  /**
   * Questionnaire.id 問卷Id
   * @type {number}
   * @memberof QueryQuestionnaireSatisfyUserRequest
   */
  questionnaireId?: number;
  /**
   * User.Id
   * @type {number}
   * @memberof QueryQuestionnaireSatisfyUserRequest
   */
  userId?: number;
  /**
   * 問卷產生預設0        問卷類型        type = QuestionnaireWriteType顯示 namevalue存此欄位0：未填寫1：已填寫
   * @type {string}
   * @memberof QueryQuestionnaireSatisfyUserRequest
   */
  questionnaireWriteType?: string | null;
  /**
   * 居住區域        type=QuestionnaireGoArea        顯示 name        value存此欄位0：台中1：台北2：高雄
   * @type {string}
   * @memberof QueryQuestionnaireSatisfyUserRequest
   */
  questionnaireGoArea?: string | null;
  /**
   * 滿意度        type=Satisfaction        顯示 name       value存此欄位1：1 2：2 3：3 4：4 5：5
   * @type {string}
   * @memberof QueryQuestionnaireSatisfyUserRequest
   */
  satisfaction?: string | null;
  /**
   * 評價        type=Evaluation        顯示 name       value存此欄位1：1 2：2 3：3 4：4 5：5
   * @type {string}
   * @memberof QueryQuestionnaireSatisfyUserRequest
   */
  evaluation?: string | null;
  /**
   * 問卷日期
   * @type {string}
   * @memberof QueryQuestionnaireSatisfyUserRequest
   */
  writeQuestionnaireDate?: string | null;
  /**
   * 查詢欄位排序
   * @type {Array<SortProperty>}
   * @memberof QueryQuestionnaireSatisfyUserRequest
   */
  sortProperties: Array<SortProperty>;
  /**
   * 目前頁數
   * @type {number}
   * @memberof QueryQuestionnaireSatisfyUserRequest
   */
  page: number;
  /**
   * 每頁筆數
   * @type {number}
   * @memberof QueryQuestionnaireSatisfyUserRequest
   */
  size: number;
}
/**
 * 分頁查詢 RolePrivilegeMapping
 * @export
 * @interface QueryRolePrivilegeMappingRequest
 */
export interface QueryRolePrivilegeMappingRequest {
  /**
   *
   * @type {string}
   * @memberof QueryRolePrivilegeMappingRequest
   */
  id?: string | null;
  /**
   * Role Id
   * @type {string}
   * @memberof QueryRolePrivilegeMappingRequest
   */
  roleId?: string | null;
  /**
   * Privilege Id
   * @type {string}
   * @memberof QueryRolePrivilegeMappingRequest
   */
  privilegeId?: string | null;
  /**
   *
   * @type {string}
   * @memberof QueryRolePrivilegeMappingRequest
   */
  name?: string | null;
  /**
   * 查詢欄位排序
   * @type {Array<SortProperty>}
   * @memberof QueryRolePrivilegeMappingRequest
   */
  sortProperties: Array<SortProperty>;
  /**
   * 目前頁數
   * @type {number}
   * @memberof QueryRolePrivilegeMappingRequest
   */
  page: number;
  /**
   * 每頁筆數
   * @type {number}
   * @memberof QueryRolePrivilegeMappingRequest
   */
  size: number;
}
/**
 * 分頁查詢 Role
 * @export
 * @interface QueryRoleRequest
 */
export interface QueryRoleRequest {
  /**
   *
   * @type {string}
   * @memberof QueryRoleRequest
   */
  name?: string | null;
  /**
   * 查詢欄位排序
   * @type {Array<SortProperty>}
   * @memberof QueryRoleRequest
   */
  sortProperties: Array<SortProperty>;
  /**
   * 目前頁數
   * @type {number}
   * @memberof QueryRoleRequest
   */
  page: number;
  /**
   * 每頁筆數
   * @type {number}
   * @memberof QueryRoleRequest
   */
  size: number;
}
/**
 * 分頁查詢 RoleUserMapping
 * @export
 * @interface QueryRoleUserMappingRequest
 */
export interface QueryRoleUserMappingRequest {
  /**
   *
   * @type {string}
   * @memberof QueryRoleUserMappingRequest
   */
  name?: string | null;
  /**
   *
   * @type {number}
   * @memberof QueryRoleUserMappingRequest
   */
  userId?: number | null;
  /**
   *
   * @type {string}
   * @memberof QueryRoleUserMappingRequest
   */
  roleId?: string | null;
  /**
   * 查詢欄位排序
   * @type {Array<SortProperty>}
   * @memberof QueryRoleUserMappingRequest
   */
  sortProperties: Array<SortProperty>;
  /**
   * 目前頁數
   * @type {number}
   * @memberof QueryRoleUserMappingRequest
   */
  page: number;
  /**
   * 每頁筆數
   * @type {number}
   * @memberof QueryRoleUserMappingRequest
   */
  size: number;
}
/**
 * 分頁查詢 SecRole
 * @export
 * @interface QuerySecRoleRequest
 */
export interface QuerySecRoleRequest {
  /**
   *
   * @type {string}
   * @memberof QuerySecRoleRequest
   */
  name?: string | null;
  /**
   * 查詢欄位排序
   * @type {Array<SortProperty>}
   * @memberof QuerySecRoleRequest
   */
  sortProperties: Array<SortProperty>;
  /**
   * 目前頁數
   * @type {number}
   * @memberof QuerySecRoleRequest
   */
  page: number;
  /**
   * 每頁筆數
   * @type {number}
   * @memberof QuerySecRoleRequest
   */
  size: number;
}
/**
 * 分頁查詢 SecUser
 * @export
 * @interface QuerySecUserRequest
 */
export interface QuerySecUserRequest {
  /**
   *
   * @type {string}
   * @memberof QuerySecUserRequest
   */
  name?: string | null;
  /**
   * 查詢欄位排序
   * @type {Array<SortProperty>}
   * @memberof QuerySecUserRequest
   */
  sortProperties: Array<SortProperty>;
  /**
   * 目前頁數
   * @type {number}
   * @memberof QuerySecUserRequest
   */
  page: number;
  /**
   * 每頁筆數
   * @type {number}
   * @memberof QuerySecUserRequest
   */
  size: number;
}
/**
 * 分頁查詢 SecUserRole
 * @export
 * @interface QuerySecUserRoleRequest
 */
export interface QuerySecUserRoleRequest {
  /**
   *
   * @type {string}
   * @memberof QuerySecUserRoleRequest
   */
  name?: string | null;
  /**
   * 查詢欄位排序
   * @type {Array<SortProperty>}
   * @memberof QuerySecUserRoleRequest
   */
  sortProperties: Array<SortProperty>;
  /**
   * 目前頁數
   * @type {number}
   * @memberof QuerySecUserRoleRequest
   */
  page: number;
  /**
   * 每頁筆數
   * @type {number}
   * @memberof QuerySecUserRoleRequest
   */
  size: number;
}
/**
 * 分頁查詢 ShoppingCart
 * @export
 * @interface QueryShoppingCartRequest
 */
export interface QueryShoppingCartRequest {
  /**
   * id
   * @type {number}
   * @memberof QueryShoppingCartRequest
   */
  id?: number;
  /**
   * User.Id
   * @type {number}
   * @memberof QueryShoppingCartRequest
   */
  userId?: number;
  /**
   * 課程類別Course.Id
   * @type {number}
   * @memberof QueryShoppingCartRequest
   */
  courseId?: number;
  /**
   * 數量
   * @type {number}
   * @memberof QueryShoppingCartRequest
   */
  count?: number;
  /**
   * 出席狀態 對應SystemConfig內Type=ShoppingCartStatus 0:新增 1已轉入訂單 2:逾期課程清單(無法轉訂單) 3:數量不足
   * @type {string}
   * @memberof QueryShoppingCartRequest
   */
  shoppingCartStatus?: string | null;
  /**
   * 查詢欄位排序
   * @type {Array<SortProperty>}
   * @memberof QueryShoppingCartRequest
   */
  sortProperties: Array<SortProperty>;
  /**
   * 目前頁數
   * @type {number}
   * @memberof QueryShoppingCartRequest
   */
  page: number;
  /**
   * 每頁筆數
   * @type {number}
   * @memberof QueryShoppingCartRequest
   */
  size: number;
}
/**
 * 分頁查詢 ShoppingOrderDetail
 * @export
 * @interface QueryShoppingOrderDetailRequest
 */
export interface QueryShoppingOrderDetailRequest {
  /**
   * 訂單明細主檔Id
   * @type {number}
   * @memberof QueryShoppingOrderDetailRequest
   */
  id?: number;
  /**
   * ShoppingOrder.Id
   * @type {number}
   * @memberof QueryShoppingOrderDetailRequest
   */
  shoppingOrderId?: number;
  /**
   * Course.Id 課程Id
   * @type {number}
   * @memberof QueryShoppingOrderDetailRequest
   */
  courseId?: number;
  /**
   * 單價
   * @type {number}
   * @memberof QueryShoppingOrderDetailRequest
   */
  price?: number;
  /**
   * 購買數量
   * @type {number}
   * @memberof QueryShoppingOrderDetailRequest
   */
  count?: number;
  /**
   * 總金額
   * @type {number}
   * @memberof QueryShoppingOrderDetailRequest
   */
  amount?: number;
  /**
   * 付款方式 對應SystemConfig內Type=OrderDetailStatus 0:尚未付款 1:已付款 2:付款完成 3:退款申請 4:退款完成
   * @type {string}
   * @memberof QueryShoppingOrderDetailRequest
   */
  orderDetailStatus?: string | null;
  /**
   * UserId
   * @type {number}
   * @memberof QueryShoppingOrderDetailRequest
   */
  userId?: number;
  /**
   * 查詢欄位排序
   * @type {Array<SortProperty>}
   * @memberof QueryShoppingOrderDetailRequest
   */
  sortProperties: Array<SortProperty>;
  /**
   * 目前頁數
   * @type {number}
   * @memberof QueryShoppingOrderDetailRequest
   */
  page: number;
  /**
   * 每頁筆數
   * @type {number}
   * @memberof QueryShoppingOrderDetailRequest
   */
  size: number;
}
/**
 * 分頁查詢 ShoppingOrder
 * @export
 * @interface QueryShoppingOrderRequest
 */
export interface QueryShoppingOrderRequest {
  /**
   * 訂單主檔Id
   * @type {number}
   * @memberof QueryShoppingOrderRequest
   */
  id?: number;
  /**
   * User.Id
   * @type {number}
   * @memberof QueryShoppingOrderRequest
   */
  userId?: number;
  /**
   * 訂單總金額
   * @type {number}
   * @memberof QueryShoppingOrderRequest
   */
  totalAmount?: number;
  /**
   * 付款總金額
   * @type {number}
   * @memberof QueryShoppingOrderRequest
   */
  paymentAmount?: number;
  /**
   * 退款總金額
   * @type {number}
   * @memberof QueryShoppingOrderRequest
   */
  refundAmount?: number;
  /**
   * 出席狀態 對應SystemConfig內Type=OrderStatus 0:尚未付款 1已付款 2:款項確認 3:異常
   * @type {string}
   * @memberof QueryShoppingOrderRequest
   */
  orderPayStatus?: string | null;
  /**
   * 付款交易序號
   * @type {string}
   * @memberof QueryShoppingOrderRequest
   */
  paymentTransactionNo?: string | null;
  /**
   * 付款交易時間
   * @type {string}
   * @memberof QueryShoppingOrderRequest
   */
  paymentTransactionDate?: string | null;
  /**
   * 付款備註
   * @type {string}
   * @memberof QueryShoppingOrderRequest
   */
  paymentTransactionDescription?: string | null;
  /**
   * 付款方式 對應SystemConfig內Type=PaymentType 0:臨櫃現金 1:ATM 2:刷卡 3:其他
   * @type {string}
   * @memberof QueryShoppingOrderRequest
   */
  paymentType?: string | null;
  /**
   * 退款交易序號
   * @type {string}
   * @memberof QueryShoppingOrderRequest
   */
  refundTransactionNo?: string | null;
  /**
   * 退款交易時間
   * @type {string}
   * @memberof QueryShoppingOrderRequest
   */
  refundTransactionDate?: string | null;
  /**
   * 退款方式 對應SystemConfig內Type=PaymentType 0:臨櫃現金 1:ATM 2:刷退 3:其他
   * @type {string}
   * @memberof QueryShoppingOrderRequest
   */
  refundType?: string | null;
  /**
   * 退款備註
   * @type {string}
   * @memberof QueryShoppingOrderRequest
   */
  refundDescription?: string | null;
  /**
   * 出席狀態 對應SystemConfig內Type=OrderStatus 0:訂單成立(待付款)1:訂單對帳2:訂單已確認3:訂單已結案4:訂單取消申請5:訂單取消審核中6:訂單取消已確認7:訂單取消已駁回8:訂單取消退款中9:訂單取消已退款
   * @type {string}
   * @memberof QueryShoppingOrderRequest
   */
  orderStatus?: string | null;
  /**
   * 電子收據
   * @type {string}
   * @memberof QueryShoppingOrderRequest
   */
  receipt?: string | null;
  /**
   * 實收金額
   * @type {number}
   * @memberof QueryShoppingOrderRequest
   */
  actuallyAmount?: number;
  /**
   * 收款人員 對應user.Id
   * @type {number}
   * @memberof QueryShoppingOrderRequest
   */
  receiveUserId?: number;
  /**
   *
   * @type {number}
   * @memberof QueryShoppingOrderRequest
   */
  organizationId?: number | null;
  /**
   *
   * @type {string}
   * @memberof QueryShoppingOrderRequest
   */
  userName?: string | null;
  /**
   *
   * @type {string}
   * @memberof QueryShoppingOrderRequest
   */
  phone?: string | null;
  /**
   *
   * @type {string}
   * @memberof QueryShoppingOrderRequest
   */
  eMail?: string | null;
  /**
   * 查詢欄位排序
   * @type {Array<SortProperty>}
   * @memberof QueryShoppingOrderRequest
   */
  sortProperties: Array<SortProperty>;
  /**
   * 目前頁數
   * @type {number}
   * @memberof QueryShoppingOrderRequest
   */
  page: number;
  /**
   * 每頁筆數
   * @type {number}
   * @memberof QueryShoppingOrderRequest
   */
  size: number;
}
/**
 * 分頁查詢 ShoppingTrack
 * @export
 * @interface QueryShoppingTrackRequest
 */
export interface QueryShoppingTrackRequest {
  /**
   * id
   * @type {number}
   * @memberof QueryShoppingTrackRequest
   */
  id?: number;
  /**
   * User.Id
   * @type {number}
   * @memberof QueryShoppingTrackRequest
   */
  userId?: number;
  /**
   * 課程類別Course.Id
   * @type {number}
   * @memberof QueryShoppingTrackRequest
   */
  courseId?: number;
  /**
   * 查詢欄位排序
   * @type {Array<SortProperty>}
   * @memberof QueryShoppingTrackRequest
   */
  sortProperties: Array<SortProperty>;
  /**
   * 目前頁數
   * @type {number}
   * @memberof QueryShoppingTrackRequest
   */
  page: number;
  /**
   * 每頁筆數
   * @type {number}
   * @memberof QueryShoppingTrackRequest
   */
  size: number;
}
/**
 * 分頁查詢 SysAdminPermission
 * @export
 * @interface QuerySysAdminPermissionRequest
 */
export interface QuerySysAdminPermissionRequest {
  /**
   *
   * @type {string}
   * @memberof QuerySysAdminPermissionRequest
   */
  name?: string | null;
  /**
   * 查詢欄位排序
   * @type {Array<SortProperty>}
   * @memberof QuerySysAdminPermissionRequest
   */
  sortProperties: Array<SortProperty>;
  /**
   * 目前頁數
   * @type {number}
   * @memberof QuerySysAdminPermissionRequest
   */
  page: number;
  /**
   * 每頁筆數
   * @type {number}
   * @memberof QuerySysAdminPermissionRequest
   */
  size: number;
}
/**
 * 分頁查詢 SysOrgUser
 * @export
 * @interface QuerySysOrgUserRequest
 */
export interface QuerySysOrgUserRequest {
  /**
   *
   * @type {string}
   * @memberof QuerySysOrgUserRequest
   */
  name?: string | null;
  /**
   * 查詢欄位排序
   * @type {Array<SortProperty>}
   * @memberof QuerySysOrgUserRequest
   */
  sortProperties: Array<SortProperty>;
  /**
   * 目前頁數
   * @type {number}
   * @memberof QuerySysOrgUserRequest
   */
  page: number;
  /**
   * 每頁筆數
   * @type {number}
   * @memberof QuerySysOrgUserRequest
   */
  size: number;
}
/**
 * 分頁查詢 SysOrganization
 * @export
 * @interface QuerySysOrganizationRequest
 */
export interface QuerySysOrganizationRequest {
  /**
   *
   * @type {string}
   * @memberof QuerySysOrganizationRequest
   */
  name?: string | null;
  /**
   * 查詢欄位排序
   * @type {Array<SortProperty>}
   * @memberof QuerySysOrganizationRequest
   */
  sortProperties: Array<SortProperty>;
  /**
   * 目前頁數
   * @type {number}
   * @memberof QuerySysOrganizationRequest
   */
  page: number;
  /**
   * 每頁筆數
   * @type {number}
   * @memberof QuerySysOrganizationRequest
   */
  size: number;
}
/**
 * 分頁查詢 SysPermission
 * @export
 * @interface QuerySysPermissionRequest
 */
export interface QuerySysPermissionRequest {
  /**
   *
   * @type {string}
   * @memberof QuerySysPermissionRequest
   */
  name?: string | null;
  /**
   * 查詢欄位排序
   * @type {Array<SortProperty>}
   * @memberof QuerySysPermissionRequest
   */
  sortProperties: Array<SortProperty>;
  /**
   * 目前頁數
   * @type {number}
   * @memberof QuerySysPermissionRequest
   */
  page: number;
  /**
   * 每頁筆數
   * @type {number}
   * @memberof QuerySysPermissionRequest
   */
  size: number;
}
/**
 * 分頁查詢 SysPortal
 * @export
 * @interface QuerySysPortalRequest
 */
export interface QuerySysPortalRequest {
  /**
   *
   * @type {string}
   * @memberof QuerySysPortalRequest
   */
  name?: string | null;
  /**
   * 查詢欄位排序
   * @type {Array<SortProperty>}
   * @memberof QuerySysPortalRequest
   */
  sortProperties: Array<SortProperty>;
  /**
   * 目前頁數
   * @type {number}
   * @memberof QuerySysPortalRequest
   */
  page: number;
  /**
   * 每頁筆數
   * @type {number}
   * @memberof QuerySysPortalRequest
   */
  size: number;
}
/**
 * 分頁查詢 SysSeedIdentity
 * @export
 * @interface QuerySysSeedIdentityRequest
 */
export interface QuerySysSeedIdentityRequest {
  /**
   *
   * @type {string}
   * @memberof QuerySysSeedIdentityRequest
   */
  name?: string | null;
  /**
   * 查詢欄位排序
   * @type {Array<SortProperty>}
   * @memberof QuerySysSeedIdentityRequest
   */
  sortProperties: Array<SortProperty>;
  /**
   * 目前頁數
   * @type {number}
   * @memberof QuerySysSeedIdentityRequest
   */
  page: number;
  /**
   * 每頁筆數
   * @type {number}
   * @memberof QuerySysSeedIdentityRequest
   */
  size: number;
}
/**
 * 分頁查詢 SysSetting
 * @export
 * @interface QuerySysSettingRequest
 */
export interface QuerySysSettingRequest {
  /**
   *
   * @type {string}
   * @memberof QuerySysSettingRequest
   */
  name?: string | null;
  /**
   * 查詢欄位排序
   * @type {Array<SortProperty>}
   * @memberof QuerySysSettingRequest
   */
  sortProperties: Array<SortProperty>;
  /**
   * 目前頁數
   * @type {number}
   * @memberof QuerySysSettingRequest
   */
  page: number;
  /**
   * 每頁筆數
   * @type {number}
   * @memberof QuerySysSettingRequest
   */
  size: number;
}
/**
 * 分頁查詢 SysSmsResult
 * @export
 * @interface QuerySysSmsResultRequest
 */
export interface QuerySysSmsResultRequest {
  /**
   *
   * @type {string}
   * @memberof QuerySysSmsResultRequest
   */
  name?: string | null;
  /**
   * 查詢欄位排序
   * @type {Array<SortProperty>}
   * @memberof QuerySysSmsResultRequest
   */
  sortProperties: Array<SortProperty>;
  /**
   * 目前頁數
   * @type {number}
   * @memberof QuerySysSmsResultRequest
   */
  page: number;
  /**
   * 每頁筆數
   * @type {number}
   * @memberof QuerySysSmsResultRequest
   */
  size: number;
}
/**
 * 分頁查詢 SystemConfig
 * @export
 * @interface QuerySystemConfigRequest
 */
export interface QuerySystemConfigRequest {
  /**
   *
   * @type {string}
   * @memberof QuerySystemConfigRequest
   */
  name?: string | null;
  /**
   *
   * @type {string}
   * @memberof QuerySystemConfigRequest
   */
  type?: string | null;
  /**
   * 查詢欄位排序
   * @type {Array<SortProperty>}
   * @memberof QuerySystemConfigRequest
   */
  sortProperties: Array<SortProperty>;
  /**
   * 目前頁數
   * @type {number}
   * @memberof QuerySystemConfigRequest
   */
  page: number;
  /**
   * 每頁筆數
   * @type {number}
   * @memberof QuerySystemConfigRequest
   */
  size: number;
}
/**
 * 分頁查詢 Teacher
 * @export
 * @interface QueryTeacherRequest
 */
export interface QueryTeacherRequest {
  /**
   * id
   * @type {number}
   * @memberof QueryTeacherRequest
   */
  id?: number | null;
  /**
   * 堂點Id Organization.Id
   * @type {number}
   * @memberof QueryTeacherRequest
   */
  organizationId?: number | null;
  /**
   * 講師姓名
   * @type {string}
   * @memberof QueryTeacherRequest
   */
  name?: string | null;
  /**
   * 講師電話
   * @type {string}
   * @memberof QueryTeacherRequest
   */
  phone?: string | null;
  /**
   * 性別 對應SystemConfigtype=GenderType顯示 namevalue存此欄位0：女姓1：男性
   * @type {string}
   * @memberof QueryTeacherRequest
   */
  genderType?: string | null;
  /**
   * 查詢欄位排序
   * @type {Array<SortProperty>}
   * @memberof QueryTeacherRequest
   */
  sortProperties: Array<SortProperty>;
  /**
   * 目前頁數
   * @type {number}
   * @memberof QueryTeacherRequest
   */
  page: number;
  /**
   * 每頁筆數
   * @type {number}
   * @memberof QueryTeacherRequest
   */
  size: number;
}
/**
 * 分頁查詢 UserBankAccount
 * @export
 * @interface QueryUserBankAccountRequest
 */
export interface QueryUserBankAccountRequest {
  /**
   * Id
   * @type {number}
   * @memberof QueryUserBankAccountRequest
   */
  id?: number;
  /**
   * 建立 User.Id
   * @type {number}
   * @memberof QueryUserBankAccountRequest
   */
  userId?: number;
  /**
   * 戶名
   * @type {string}
   * @memberof QueryUserBankAccountRequest
   */
  bankName?: string | null;
  /**
   * 銀行代號
   * @type {string}
   * @memberof QueryUserBankAccountRequest
   */
  bankCode?: string | null;
  /**
   * 分行代號
   * @type {string}
   * @memberof QueryUserBankAccountRequest
   */
  branchCode?: string | null;
  /**
   * 銀行帳戶
   * @type {string}
   * @memberof QueryUserBankAccountRequest
   */
  account?: string | null;
  /**
   * 查詢欄位排序
   * @type {Array<SortProperty>}
   * @memberof QueryUserBankAccountRequest
   */
  sortProperties: Array<SortProperty>;
  /**
   * 目前頁數
   * @type {number}
   * @memberof QueryUserBankAccountRequest
   */
  page: number;
  /**
   * 每頁筆數
   * @type {number}
   * @memberof QueryUserBankAccountRequest
   */
  size: number;
}
/**
 * 分頁查詢 UserContact
 * @export
 * @interface QueryUserContactRequest
 */
export interface QueryUserContactRequest {
  /**
   * Id
   * @type {number}
   * @memberof QueryUserContactRequest
   */
  id?: number;
  /**
   * 建立 User.Id
   * @type {number}
   * @memberof QueryUserContactRequest
   */
  userId?: number;
  /**
   * 姓名
   * @type {string}
   * @memberof QueryUserContactRequest
   */
  name?: string | null;
  /**
   * 關係類別 對應SystemConfig        type=RelativeType       顯示 name       value存此欄位0：配偶1：父母2：子女
   * @type {string}
   * @memberof QueryUserContactRequest
   */
  relativeType?: string | null;
  /**
   * 電話
   * @type {string}
   * @memberof QueryUserContactRequest
   */
  phone?: string | null;
  /**
   * 查詢欄位排序
   * @type {Array<SortProperty>}
   * @memberof QueryUserContactRequest
   */
  sortProperties: Array<SortProperty>;
  /**
   * 目前頁數
   * @type {number}
   * @memberof QueryUserContactRequest
   */
  page: number;
  /**
   * 每頁筆數
   * @type {number}
   * @memberof QueryUserContactRequest
   */
  size: number;
}
/**
 * 分頁查詢 UserCourse
 * @export
 * @interface QueryUserCourseRequest
 */
export interface QueryUserCourseRequest {
  /**
   * 課程名稱
   * @type {string}
   * @memberof QueryUserCourseRequest
   */
  courseName?: string | null;
  /**
   * Organization.Id
   * @type {number}
   * @memberof QueryUserCourseRequest
   */
  organizationId?: number | null;
  /**
   * 組織名稱
   * @type {string}
   * @memberof QueryUserCourseRequest
   */
  organizationName?: string | null;
  /**
   * 主任牧師名稱
   * @type {string}
   * @memberof QueryUserCourseRequest
   */
  pastorName?: string | null;
  /**
   * 代號/梯次
   * @type {string}
   * @memberof QueryUserCourseRequest
   */
  scheduleNo?: string | null;
  /**
   * 附件類別對應type=ClassDay顯示 namevalue存此欄位1：一2：二….
   * @type {string}
   * @memberof QueryUserCourseRequest
   */
  classDay?: string | null;
  /**
   * 開始時間
   * @type {string}
   * @memberof QueryUserCourseRequest
   */
  classTimeS?: string | null;
  /**
   * 結束時間
   * @type {string}
   * @memberof QueryUserCourseRequest
   */
  classTimeE?: string | null;
  /**
   * 地點
   * @type {string}
   * @memberof QueryUserCourseRequest
   */
  place?: string | null;
  /**
   * 課程類別CourseManagementType.Id
   * @type {number}
   * @memberof QueryUserCourseRequest
   */
  courseManagementTypeId?: number | null;
  /**
   * 課程代碼
   * @type {string}
   * @memberof QueryUserCourseRequest
   */
  courseManagementNo?: string | null;
  /**
   * 課程作業繳交日期
   * @type {string}
   * @memberof QueryUserCourseRequest
   */
  homeworkDate?: string;
  /**
   * 課程標題
   * @type {string}
   * @memberof QueryUserCourseRequest
   */
  title?: string | null;
  /**
   * 課程內容描述
   * @type {string}
   * @memberof QueryUserCourseRequest
   */
  description?: string | null;
  /**
   * 課程狀態對應type=CourseManagementStatus顯示 namevalue存此欄位0：關閉1：開啟
   * @type {string}
   * @memberof QueryUserCourseRequest
   */
  courseManagementStatus?: string | null;
  /**
   * 課程類別編號
   * @type {string}
   * @memberof QueryUserCourseRequest
   */
  courseManagementTypeNo?: string | null;
  /**
   * 課程類別名稱
   * @type {string}
   * @memberof QueryUserCourseRequest
   */
  courseManagementTypeName?: string | null;
  /**
   * 開課狀態 : 0 - 未開，1 - 上課中，2 - 結束
   * @type {string}
   * @memberof QueryUserCourseRequest
   */
  courseStatus?: string | null;
  /**
   * 開課班級與時段
   * @type {string}
   * @memberof QueryUserCourseRequest
   */
  courseClassSchedule?: string | null;
  /**
   * 年度 屆別
   * @type {string}
   * @memberof QueryUserCourseRequest
   */
  year?: string | null;
  /**
   * 名稱
   * @type {string}
   * @memberof QueryUserCourseRequest
   */
  name?: string | null;
  /**
   * 梯次
   * @type {string}
   * @memberof QueryUserCourseRequest
   */
  classNum?: string | null;
  /**
   * 季
   * @type {string}
   * @memberof QueryUserCourseRequest
   */
  season?: string | null;
  /**
   * 開課日起
   * @type {string}
   * @memberof QueryUserCourseRequest
   */
  openDateS?: string | null;
  /**
   * 開課日迄
   * @type {string}
   * @memberof QueryUserCourseRequest
   */
  openDateE?: string | null;
  /**
   * 報名日期(線上)
   * @type {string}
   * @memberof QueryUserCourseRequest
   */
  signUpDateS?: string | null;
  /**
   * 報名截止日(線上)
   * @type {string}
   * @memberof QueryUserCourseRequest
   */
  signUpDateE?: string | null;
  /**
   * 報名日期(臨櫃)
   * @type {string}
   * @memberof QueryUserCourseRequest
   */
  counterSignUpDateS?: string | null;
  /**
   * 報名截止日(臨櫃)
   * @type {string}
   * @memberof QueryUserCourseRequest
   */
  counterSignUpDateE?: string | null;
  /**
   * 用戶 Id
   * @type {number}
   * @memberof QueryUserCourseRequest
   */
  userId?: number | null;
  /**
   * 查詢欄位排序
   * @type {Array<SortProperty>}
   * @memberof QueryUserCourseRequest
   */
  sortProperties: Array<SortProperty>;
  /**
   * 目前頁數
   * @type {number}
   * @memberof QueryUserCourseRequest
   */
  page: number;
  /**
   * 每頁筆數
   * @type {number}
   * @memberof QueryUserCourseRequest
   */
  size: number;
}
/**
 * 分頁查詢 UserExpertise
 * @export
 * @interface QueryUserExpertiseRequest
 */
export interface QueryUserExpertiseRequest {
  /**
   * Id
   * @type {number}
   * @memberof QueryUserExpertiseRequest
   */
  id?: number;
  /**
   * 建立 User.Id
   * @type {number}
   * @memberof QueryUserExpertiseRequest
   */
  userId?: number;
  /**
   * 專長描述
   * @type {string}
   * @memberof QueryUserExpertiseRequest
   */
  name?: string | null;
  /**
   * 查詢欄位排序
   * @type {Array<SortProperty>}
   * @memberof QueryUserExpertiseRequest
   */
  sortProperties: Array<SortProperty>;
  /**
   * 目前頁數
   * @type {number}
   * @memberof QueryUserExpertiseRequest
   */
  page: number;
  /**
   * 每頁筆數
   * @type {number}
   * @memberof QueryUserExpertiseRequest
   */
  size: number;
}
/**
 * 分頁查詢 UserFamily
 * @export
 * @interface QueryUserFamilyRequest
 */
export interface QueryUserFamilyRequest {
  /**
   * Id
   * @type {number}
   * @memberof QueryUserFamilyRequest
   */
  id?: number;
  /**
   * 建立時間 User.Id
   * @type {number}
   * @memberof QueryUserFamilyRequest
   */
  userId?: number;
  /**
   * 關係類別 對應SystemConfig        type=RelativeType       顯示 name       value存此欄位0：配偶1：父母2：子女
   * @type {string}
   * @memberof QueryUserFamilyRequest
   */
  relativeType?: string | null;
  /**
   * 姓名
   * @type {string}
   * @memberof QueryUserFamilyRequest
   */
  name?: string | null;
  /**
   * 查詢欄位排序
   * @type {Array<SortProperty>}
   * @memberof QueryUserFamilyRequest
   */
  sortProperties: Array<SortProperty>;
  /**
   * 目前頁數
   * @type {number}
   * @memberof QueryUserFamilyRequest
   */
  page: number;
  /**
   * 每頁筆數
   * @type {number}
   * @memberof QueryUserFamilyRequest
   */
  size: number;
}
/**
 * 分頁查詢 UserPastoralCare
 * @export
 * @interface QueryUserPastoralCareRequest
 */
export interface QueryUserPastoralCareRequest {
  /**
   * Id
   * @type {number}
   * @memberof QueryUserPastoralCareRequest
   */
  id?: number;
  /**
   * User.Id
   * @type {number}
   * @memberof QueryUserPastoralCareRequest
   */
  userId?: number;
  /**
   * 牧養類型 對應SystemConfig        type=CareType        顯示 name        value存此欄位 0：新進會員 1：移動 2：身分變更
   * @type {string}
   * @memberof QueryUserPastoralCareRequest
   */
  careType?: string | null;
  /**
   *
   * @type {string}
   * @memberof QueryUserPastoralCareRequest
   */
  pastoralTitle?: string | null;
  /**
   * 新區域
   * @type {string}
   * @memberof QueryUserPastoralCareRequest
   */
  newArea?: string | null;
  /**
   * 舊區域
   * @type {string}
   * @memberof QueryUserPastoralCareRequest
   */
  oldArea?: string | null;
  /**
   * 日期
   * @type {string}
   * @memberof QueryUserPastoralCareRequest
   */
  careDate?: string | null;
  /**
   * 異動日期啟日
   * @type {string}
   * @memberof QueryUserPastoralCareRequest
   */
  startDate?: string | null;
  /**
   * 異動日期迄日
   * @type {string}
   * @memberof QueryUserPastoralCareRequest
   */
  endDate?: string | null;
  /**
   * 查詢欄位排序
   * @type {Array<SortProperty>}
   * @memberof QueryUserPastoralCareRequest
   */
  sortProperties: Array<SortProperty>;
  /**
   * 目前頁數
   * @type {number}
   * @memberof QueryUserPastoralCareRequest
   */
  page: number;
  /**
   * 每頁筆數
   * @type {number}
   * @memberof QueryUserPastoralCareRequest
   */
  size: number;
}
/**
 * 分頁查詢 Privilege
 * @export
 * @interface QueryUserPrivilegeRequest
 */
export interface QueryUserPrivilegeRequest {
  /**
   *
   * @type {number}
   * @memberof QueryUserPrivilegeRequest
   */
  userId?: number | null;
  /**
   *
   * @type {string}
   * @memberof QueryUserPrivilegeRequest
   */
  name?: string | null;
  /**
   *
   * @type {number}
   * @memberof QueryUserPrivilegeRequest
   */
  limit?: number | null;
}
/**
 * 分頁查詢 UserQuestionnaire
 * @export
 * @interface QueryUserQuestionnaireRequest
 */
export interface QueryUserQuestionnaireRequest {
  /**
   * 會員填寫問卷.id
   * @type {number}
   * @memberof QueryUserQuestionnaireRequest
   */
  id?: number | null;
  /**
   * 問卷.id
   * @type {number}
   * @memberof QueryUserQuestionnaireRequest
   */
  questionnaireId?: number | null;
  /**
   * User.id
   * @type {number}
   * @memberof QueryUserQuestionnaireRequest
   */
  userId?: number | null;
  /**
   * 問卷產生預設0  問卷類型  type=QuestionnaireWriteType  顯示 name  value存此欄位  0：未填寫  1：已填寫
   * @type {string}
   * @memberof QueryUserQuestionnaireRequest
   */
  questionnaireWriteType?: string | null;
  /**
   * 居住區域  type=QuestionnaireGoArea  顯示 name  value存此欄位  0：台中  1：台北  2：高雄
   * @type {string}
   * @memberof QueryUserQuestionnaireRequest
   */
  questionnaireGoArea?: string | null;
  /**
   * 滿意度  type=Satisfaction  顯示 name  value存此欄位  1：1  2：2  3：3  4：4  5：5
   * @type {string}
   * @memberof QueryUserQuestionnaireRequest
   */
  satisfaction?: string | null;
  /**
   * 評價  type=Satisfaction  顯示 name  value存此欄位  1：1  2：2  3：3  4：4  5：5
   * @type {string}
   * @memberof QueryUserQuestionnaireRequest
   */
  evaluation?: string | null;
  /**
   * 填寫問卷日期
   * @type {string}
   * @memberof QueryUserQuestionnaireRequest
   */
  writeQuestionnaireDate?: string | null;
  /**
   * 問卷類型type=QuestionnaireType顯示 namevalue存此欄位0：課程問卷 1:服事徵召 2:一般問卷
   * @type {string}
   * @memberof QueryUserQuestionnaireRequest
   */
  questionnaireType?: string | null;
  /**
   * 查詢欄位排序
   * @type {Array<SortProperty>}
   * @memberof QueryUserQuestionnaireRequest
   */
  sortProperties: Array<SortProperty>;
  /**
   * 目前頁數
   * @type {number}
   * @memberof QueryUserQuestionnaireRequest
   */
  page: number;
  /**
   * 每頁筆數
   * @type {number}
   * @memberof QueryUserQuestionnaireRequest
   */
  size: number;
}
/**
 * 分頁查詢 User
 * @export
 * @interface QueryUserRequest
 */
export interface QueryUserRequest {
  /**
   * 使用者主檔
   * @type {number}
   * @memberof QueryUserRequest
   */
  id?: number;
  /**
   * aspnet_Membership.UserId
   * @type {string}
   * @memberof QueryUserRequest
   */
  userId?: string | null;
  /**
   * 所屬牧區id =>對應牧區身分類別
   * @type {number}
   * @memberof QueryUserRequest
   */
  pastoralId?: number | null;
  /**
   * 手機類型 對應SystemConfigtype=PhoneType顯示 namevalue存此欄位0：家長手機1：小孩手機
   * @type {string}
   * @memberof QueryUserRequest
   */
  phoneType?: string | null;
  /**
   * 姓
   * @type {string}
   * @memberof QueryUserRequest
   */
  firstName?: string | null;
  /**
   * 名
   * @type {string}
   * @memberof QueryUserRequest
   */
  lastName?: string | null;
  /**
   * 性別 對應SystemConfigtype=GenderType顯示 namevalue存此欄位0：女姓1：男性
   * @type {string}
   * @memberof QueryUserRequest
   */
  genderType?: string | null;
  /**
   * 居住國家
   * @type {string}
   * @memberof QueryUserRequest
   */
  liveCountry?: string | null;
  /**
   * 生日
   * @type {string}
   * @memberof QueryUserRequest
   */
  birthday?: string | null;
  /**
   * 身分證字號
   * @type {string}
   * @memberof QueryUserRequest
   */
  idNumber?: string | null;
  /**
   * 手機門號
   * @type {string}
   * @memberof QueryUserRequest
   */
  cellPhone?: string | null;
  /**
   * 城市
   * @type {string}
   * @memberof QueryUserRequest
   */
  liveCity?: string | null;
  /**
   * 郵遞區號
   * @type {string}
   * @memberof QueryUserRequest
   */
  liveZipCode?: string | null;
  /**
   * 地區
   * @type {string}
   * @memberof QueryUserRequest
   */
  liveZipArea?: string | null;
  /**
   * 詳細地址
   * @type {string}
   * @memberof QueryUserRequest
   */
  liveAddress?: string | null;
  /**
   * 地址2
   * @type {string}
   * @memberof QueryUserRequest
   */
  liveAddress2?: string | null;
  /**
   * 教會類別 對SystemConfigtype=ChurchType顯示 namevalue存此欄位0：其他1：旌旗教會
   * @type {string}
   * @memberof QueryUserRequest
   */
  churchType?: string | null;
  /**
   * 過去在哪個教會名稱
   * @type {string}
   * @memberof QueryUserRequest
   */
  anotherChurchName?: string | null;
  /**
   * 電話(市話)
   * @type {string}
   * @memberof QueryUserRequest
   */
  phone?: string | null;
  /**
   * 電話(手機)
   * @type {string}
   * @memberof QueryUserRequest
   */
  cellPhone1?: string | null;
  /**
   * 電話(手機2)
   * @type {string}
   * @memberof QueryUserRequest
   */
  cellPhone2?: string | null;
  /**
   * Email(主要)
   * @type {string}
   * @memberof QueryUserRequest
   */
  email1?: string | null;
  /**
   * Email(次要)
   * @type {string}
   * @memberof QueryUserRequest
   */
  email2?: string | null;
  /**
   * APP 對應SystemConfigtype=AppIDType顯示 namevalue存此欄位0：無1：LINE2：Instagram3：WeChat4：其他5：無
   * @type {string}
   * @memberof QueryUserRequest
   */
  appIDType?: string | null;
  /**
   * LINEId
   * @type {string}
   * @memberof QueryUserRequest
   */
  lineId?: string | null;
  /**
   * InstagramId
   * @type {string}
   * @memberof QueryUserRequest
   */
  instagramId?: string | null;
  /**
   * WeChatId
   * @type {string}
   * @memberof QueryUserRequest
   */
  weChatId?: string | null;
  /**
   * 其他APPId
   * @type {string}
   * @memberof QueryUserRequest
   */
  otherSocialId?: string | null;
  /**
   * 是否在旌旗小組對應SystemConfigtype=IsYN顯示 namevalue存此欄位0：N1：Y
   * @type {string}
   * @memberof QueryUserRequest
   */
  isChurchGroup?: string | null;
  /**
   *
   * @type {string}
   * @memberof QueryUserRequest
   */
  churchGroupNo?: string | null;
  /**
   * 是否願意加入旌旗小組對應SystemConfigtype=IsYN顯示 namevalue存此欄位0：N1：Y
   * @type {string}
   * @memberof QueryUserRequest
   */
  isJoinChurchGroup?: string | null;
  /**
   * 志願序1 實體 星期對應SystemConfigtype=JoinDate顯示 namevalue存此欄位1：星期一2：星期二3：星期三4：星期四5：星期五6：星期六7：星期日
   * @type {string}
   * @memberof QueryUserRequest
   */
  joinInPersonDate1?: string | null;
  /**
   * 志願序1 實體 時間type=JoinTime顯示 namevalue存此欄位1：上午2：下午
   * @type {string}
   * @memberof QueryUserRequest
   */
  joinInPersonTime1?: string | null;
  /**
   * 志願序1 實體 時間type=JoinLocation顯示 namevalue存此欄位1：堂點
   * @type {string}
   * @memberof QueryUserRequest
   */
  joinInPersonLocation1?: string | null;
  /**
   * 志願序2 實體 星期對應SystemConfigtype=JoinDate顯示 namevalue存此欄位1：星期一2：星期二3：星期三4：星期四5：星期五6：星期六7：星期日
   * @type {string}
   * @memberof QueryUserRequest
   */
  joinInPersonDate2?: string | null;
  /**
   * 志願序2 實體 時間type=JoinTime顯示 namevalue存此欄位1：上午2：下午
   * @type {string}
   * @memberof QueryUserRequest
   */
  joinInPersonTime2?: string | null;
  /**
   * 志願序2 實體 時間type=JoinLocation顯示 namevalue存此欄位1：堂點
   * @type {string}
   * @memberof QueryUserRequest
   */
  joinInPersonLocation2?: string | null;
  /**
   * 志願序3 實體 星期對應SystemConfigtype=JoinDate顯示 namevalue存此欄位1：星期一2：星期二3：星期三4：星期四5：星期五6：星期六7：星期日
   * @type {string}
   * @memberof QueryUserRequest
   */
  joinInPersonDate3?: string | null;
  /**
   * 志願序3實體 時間type=JoinTime顯示 namevalue存此欄位1：上午2：下午
   * @type {string}
   * @memberof QueryUserRequest
   */
  joinInPersonTime3?: string | null;
  /**
   * 志願序3 實體 時間type=JoinLocation顯示 namevalue存此欄位1：堂點
   * @type {string}
   * @memberof QueryUserRequest
   */
  joinInPersonLocation3?: string | null;
  /**
   * 志願序1 線上 星期對應SystemConfigtype=JoinDate顯示 namevalue存此欄位1：星期一2：星期二3：星期三4：星期四5：星期五6：星期六7：星期日
   * @type {string}
   * @memberof QueryUserRequest
   */
  joinOnlineDate1?: string | null;
  /**
   * 志願序1 線上 時間type=JoinTime顯示 namevalue存此欄位1：上午2：下午
   * @type {string}
   * @memberof QueryUserRequest
   */
  joinOnlineTime1?: string | null;
  /**
   * 志願序2 線上 星期對應SystemConfigtype=JoinDate顯示 namevalue存此欄位1：星期一2：星期二3：星期三4：星期四5：星期五6：星期六7：星期日
   * @type {string}
   * @memberof QueryUserRequest
   */
  joinOnlineDate2?: string | null;
  /**
   * 志願序2 線上 時間type=JoinTime顯示 namevalue存此欄位1：上午2：下午
   * @type {string}
   * @memberof QueryUserRequest
   */
  joinOnlineTime2?: string | null;
  /**
   * 志願序3 線上 星期對應SystemConfigtype=JoinDate顯示 namevalue存此欄位1：星期一2：星期二3：星期三4：星期四5：星期五6：星期六7：星期日
   * @type {string}
   * @memberof QueryUserRequest
   */
  joinOnlineDate3?: string | null;
  /**
   * 志願序3 線上 時間type=JoinTime顯示 namevalue存此欄位1：上午2：下午
   * @type {string}
   * @memberof QueryUserRequest
   */
  joinOnlineTime3?: string | null;
  /**
   * 會員類別type=MemberType顯示 namevalue存此欄位0：一般會員1：會友 2：講師
   * @type {string}
   * @memberof QueryUserRequest
   */
  memberType?: string | null;
  /**
   * 教育程度type=EduType顯示 namevalue存此欄位0：小學1：國中…..
   * @type {string}
   * @memberof QueryUserRequest
   */
  eduType?: string | null;
  /**
   * 職業type=EduType顯示 namevalue存此欄位0：老師1：家管…..
   * @type {string}
   * @memberof QueryUserRequest
   */
  professionType?: string | null;
  /**
   * 是否結婚對應SystemConfigtype=IsMarried顯示 namevalue存此欄位0：未婚1：已婚
   * @type {string}
   * @memberof QueryUserRequest
   */
  isMarried?: string | null;
  /**
   * 家長Id
   * @type {string}
   * @memberof QueryUserRequest
   */
  parentUserId?: string | null;
  /**
   * 國家代碼
   * @type {string}
   * @memberof QueryUserRequest
   */
  countryCode?: string | null;
  /**
   * 是否舊會員 Y是N否
   * @type {string}
   * @memberof QueryUserRequest
   */
  isOldMember?: string | null;
  /**
   * 密碼
   * @type {string}
   * @memberof QueryUserRequest
   */
  password?: string | null;
  /**
   * 令牌
   * @type {string}
   * @memberof QueryUserRequest
   */
  passwordsalt?: string | null;
  /**
   *
   * @type {boolean}
   * @memberof QueryUserRequest
   */
  isAdult?: boolean | null;
  /**
   * 中低收入戶 IsYN 0:否 1:是
   * @type {string}
   * @memberof QueryUserRequest
   */
  lowIncome?: string | null;
  /**
   * 姓名
   * @type {string}
   * @memberof QueryUserRequest
   */
  name?: string | null;
  /**
   * 帳號
   * @type {string}
   * @memberof QueryUserRequest
   */
  username?: string | null;
  /**
   * 帳號
   * @type {string}
   * @memberof QueryUserRequest
   */
  userNo?: string | null;
  /**
   * 聚會點Id
   * @type {number}
   * @memberof QueryUserRequest
   */
  meetingPointId?: number;
  /**
   * 備註欄位
   * @type {string}
   * @memberof QueryUserRequest
   */
  remark?: string | null;
  /**
   * 受洗 對應SystemConfig type=BaptizedType顯示 namevalue存此欄位0：未受洗1：已受洗2：其它
   * @type {string}
   * @memberof QueryUserRequest
   */
  baptizedType?: string | null;
  /**
   * Organization.Id
   * @type {number}
   * @memberof QueryUserRequest
   */
  organizationId?: number | null;
  /**
   * 查詢欄位排序
   * @type {Array<SortProperty>}
   * @memberof QueryUserRequest
   */
  sortProperties: Array<SortProperty>;
  /**
   * 目前頁數
   * @type {number}
   * @memberof QueryUserRequest
   */
  page: number;
  /**
   * 每頁筆數
   * @type {number}
   * @memberof QueryUserRequest
   */
  size: number;
}
/**
 * 分頁查詢 UserSociety
 * @export
 * @interface QueryUserSocietyRequest
 */
export interface QueryUserSocietyRequest {
  /**
   * Key
   * @type {number}
   * @memberof QueryUserSocietyRequest
   */
  id?: number;
  /**
   * User.Id
   * @type {number}
   * @memberof QueryUserSocietyRequest
   */
  userId?: number;
  /**
   * User.Name
   * @type {string}
   * @memberof QueryUserSocietyRequest
   */
  name?: string | null;
  /**
   * 查詢欄位排序
   * @type {Array<SortProperty>}
   * @memberof QueryUserSocietyRequest
   */
  sortProperties: Array<SortProperty>;
  /**
   * 目前頁數
   * @type {number}
   * @memberof QueryUserSocietyRequest
   */
  page: number;
  /**
   * 每頁筆數
   * @type {number}
   * @memberof QueryUserSocietyRequest
   */
  size: number;
}
/**
 * 分頁查詢 VwAreaSupervisor
 * @export
 * @interface QueryVwAreaSupervisorRequest
 */
export interface QueryVwAreaSupervisorRequest {
  /**
   *
   * @type {string}
   * @memberof QueryVwAreaSupervisorRequest
   */
  name?: string | null;
  /**
   * 查詢欄位排序
   * @type {Array<SortProperty>}
   * @memberof QueryVwAreaSupervisorRequest
   */
  sortProperties: Array<SortProperty>;
  /**
   * 目前頁數
   * @type {number}
   * @memberof QueryVwAreaSupervisorRequest
   */
  page: number;
  /**
   * 每頁筆數
   * @type {number}
   * @memberof QueryVwAreaSupervisorRequest
   */
  size: number;
}
/**
 * 分頁查詢 VwAspnetApplication
 * @export
 * @interface QueryVwAspnetApplicationRequest
 */
export interface QueryVwAspnetApplicationRequest {
  /**
   *
   * @type {string}
   * @memberof QueryVwAspnetApplicationRequest
   */
  name?: string | null;
  /**
   * 查詢欄位排序
   * @type {Array<SortProperty>}
   * @memberof QueryVwAspnetApplicationRequest
   */
  sortProperties: Array<SortProperty>;
  /**
   * 目前頁數
   * @type {number}
   * @memberof QueryVwAspnetApplicationRequest
   */
  page: number;
  /**
   * 每頁筆數
   * @type {number}
   * @memberof QueryVwAspnetApplicationRequest
   */
  size: number;
}
/**
 * 分頁查詢 VwAspnetMembershipuser
 * @export
 * @interface QueryVwAspnetMembershipuserRequest
 */
export interface QueryVwAspnetMembershipuserRequest {
  /**
   *
   * @type {string}
   * @memberof QueryVwAspnetMembershipuserRequest
   */
  name?: string | null;
  /**
   * 查詢欄位排序
   * @type {Array<SortProperty>}
   * @memberof QueryVwAspnetMembershipuserRequest
   */
  sortProperties: Array<SortProperty>;
  /**
   * 目前頁數
   * @type {number}
   * @memberof QueryVwAspnetMembershipuserRequest
   */
  page: number;
  /**
   * 每頁筆數
   * @type {number}
   * @memberof QueryVwAspnetMembershipuserRequest
   */
  size: number;
}
/**
 * 分頁查詢 VwAspnetProfile
 * @export
 * @interface QueryVwAspnetProfileRequest
 */
export interface QueryVwAspnetProfileRequest {
  /**
   *
   * @type {string}
   * @memberof QueryVwAspnetProfileRequest
   */
  name?: string | null;
  /**
   * 查詢欄位排序
   * @type {Array<SortProperty>}
   * @memberof QueryVwAspnetProfileRequest
   */
  sortProperties: Array<SortProperty>;
  /**
   * 目前頁數
   * @type {number}
   * @memberof QueryVwAspnetProfileRequest
   */
  page: number;
  /**
   * 每頁筆數
   * @type {number}
   * @memberof QueryVwAspnetProfileRequest
   */
  size: number;
}
/**
 * 分頁查詢 VwAspnetRole
 * @export
 * @interface QueryVwAspnetRoleRequest
 */
export interface QueryVwAspnetRoleRequest {
  /**
   *
   * @type {string}
   * @memberof QueryVwAspnetRoleRequest
   */
  name?: string | null;
  /**
   * 查詢欄位排序
   * @type {Array<SortProperty>}
   * @memberof QueryVwAspnetRoleRequest
   */
  sortProperties: Array<SortProperty>;
  /**
   * 目前頁數
   * @type {number}
   * @memberof QueryVwAspnetRoleRequest
   */
  page: number;
  /**
   * 每頁筆數
   * @type {number}
   * @memberof QueryVwAspnetRoleRequest
   */
  size: number;
}
/**
 * 分頁查詢 VwAspnetUser
 * @export
 * @interface QueryVwAspnetUserRequest
 */
export interface QueryVwAspnetUserRequest {
  /**
   *
   * @type {string}
   * @memberof QueryVwAspnetUserRequest
   */
  name?: string | null;
  /**
   * 查詢欄位排序
   * @type {Array<SortProperty>}
   * @memberof QueryVwAspnetUserRequest
   */
  sortProperties: Array<SortProperty>;
  /**
   * 目前頁數
   * @type {number}
   * @memberof QueryVwAspnetUserRequest
   */
  page: number;
  /**
   * 每頁筆數
   * @type {number}
   * @memberof QueryVwAspnetUserRequest
   */
  size: number;
}
/**
 * 分頁查詢 VwAspnetUsersInRole
 * @export
 * @interface QueryVwAspnetUsersInRoleRequest
 */
export interface QueryVwAspnetUsersInRoleRequest {
  /**
   *
   * @type {string}
   * @memberof QueryVwAspnetUsersInRoleRequest
   */
  name?: string | null;
  /**
   * 查詢欄位排序
   * @type {Array<SortProperty>}
   * @memberof QueryVwAspnetUsersInRoleRequest
   */
  sortProperties: Array<SortProperty>;
  /**
   * 目前頁數
   * @type {number}
   * @memberof QueryVwAspnetUsersInRoleRequest
   */
  page: number;
  /**
   * 每頁筆數
   * @type {number}
   * @memberof QueryVwAspnetUsersInRoleRequest
   */
  size: number;
}
/**
 * 分頁查詢 VwAspnetWebPartStatePath
 * @export
 * @interface QueryVwAspnetWebPartStatePathRequest
 */
export interface QueryVwAspnetWebPartStatePathRequest {
  /**
   *
   * @type {string}
   * @memberof QueryVwAspnetWebPartStatePathRequest
   */
  name?: string | null;
  /**
   * 查詢欄位排序
   * @type {Array<SortProperty>}
   * @memberof QueryVwAspnetWebPartStatePathRequest
   */
  sortProperties: Array<SortProperty>;
  /**
   * 目前頁數
   * @type {number}
   * @memberof QueryVwAspnetWebPartStatePathRequest
   */
  page: number;
  /**
   * 每頁筆數
   * @type {number}
   * @memberof QueryVwAspnetWebPartStatePathRequest
   */
  size: number;
}
/**
 * 分頁查詢 VwAspnetWebPartStateShared
 * @export
 * @interface QueryVwAspnetWebPartStateSharedRequest
 */
export interface QueryVwAspnetWebPartStateSharedRequest {
  /**
   *
   * @type {string}
   * @memberof QueryVwAspnetWebPartStateSharedRequest
   */
  name?: string | null;
  /**
   * 查詢欄位排序
   * @type {Array<SortProperty>}
   * @memberof QueryVwAspnetWebPartStateSharedRequest
   */
  sortProperties: Array<SortProperty>;
  /**
   * 目前頁數
   * @type {number}
   * @memberof QueryVwAspnetWebPartStateSharedRequest
   */
  page: number;
  /**
   * 每頁筆數
   * @type {number}
   * @memberof QueryVwAspnetWebPartStateSharedRequest
   */
  size: number;
}
/**
 * 分頁查詢 VwAspnetWebPartStateUser
 * @export
 * @interface QueryVwAspnetWebPartStateUserRequest
 */
export interface QueryVwAspnetWebPartStateUserRequest {
  /**
   *
   * @type {string}
   * @memberof QueryVwAspnetWebPartStateUserRequest
   */
  name?: string | null;
  /**
   * 查詢欄位排序
   * @type {Array<SortProperty>}
   * @memberof QueryVwAspnetWebPartStateUserRequest
   */
  sortProperties: Array<SortProperty>;
  /**
   * 目前頁數
   * @type {number}
   * @memberof QueryVwAspnetWebPartStateUserRequest
   */
  page: number;
  /**
   * 每頁筆數
   * @type {number}
   * @memberof QueryVwAspnetWebPartStateUserRequest
   */
  size: number;
}
/**
 * 分頁查詢 VwCampaignMember
 * @export
 * @interface QueryVwCampaignMemberRequest
 */
export interface QueryVwCampaignMemberRequest {
  /**
   *
   * @type {string}
   * @memberof QueryVwCampaignMemberRequest
   */
  name?: string | null;
  /**
   * 查詢欄位排序
   * @type {Array<SortProperty>}
   * @memberof QueryVwCampaignMemberRequest
   */
  sortProperties: Array<SortProperty>;
  /**
   * 目前頁數
   * @type {number}
   * @memberof QueryVwCampaignMemberRequest
   */
  page: number;
  /**
   * 每頁筆數
   * @type {number}
   * @memberof QueryVwCampaignMemberRequest
   */
  size: number;
}
/**
 * 分頁查詢 VwCheckInMemberClass
 * @export
 * @interface QueryVwCheckInMemberClassRequest
 */
export interface QueryVwCheckInMemberClassRequest {
  /**
   *
   * @type {string}
   * @memberof QueryVwCheckInMemberClassRequest
   */
  name?: string | null;
  /**
   * 查詢欄位排序
   * @type {Array<SortProperty>}
   * @memberof QueryVwCheckInMemberClassRequest
   */
  sortProperties: Array<SortProperty>;
  /**
   * 目前頁數
   * @type {number}
   * @memberof QueryVwCheckInMemberClassRequest
   */
  page: number;
  /**
   * 每頁筆數
   * @type {number}
   * @memberof QueryVwCheckInMemberClassRequest
   */
  size: number;
}
/**
 * 分頁查詢 VwExpGroup
 * @export
 * @interface QueryVwExpGroupRequest
 */
export interface QueryVwExpGroupRequest {
  /**
   *
   * @type {string}
   * @memberof QueryVwExpGroupRequest
   */
  name?: string | null;
  /**
   * 查詢欄位排序
   * @type {Array<SortProperty>}
   * @memberof QueryVwExpGroupRequest
   */
  sortProperties: Array<SortProperty>;
  /**
   * 目前頁數
   * @type {number}
   * @memberof QueryVwExpGroupRequest
   */
  page: number;
  /**
   * 每頁筆數
   * @type {number}
   * @memberof QueryVwExpGroupRequest
   */
  size: number;
}
/**
 * 分頁查詢 VwGroup
 * @export
 * @interface QueryVwGroupRequest
 */
export interface QueryVwGroupRequest {
  /**
   *
   * @type {string}
   * @memberof QueryVwGroupRequest
   */
  name?: string | null;
  /**
   * 查詢欄位排序
   * @type {Array<SortProperty>}
   * @memberof QueryVwGroupRequest
   */
  sortProperties: Array<SortProperty>;
  /**
   * 目前頁數
   * @type {number}
   * @memberof QueryVwGroupRequest
   */
  page: number;
  /**
   * 每頁筆數
   * @type {number}
   * @memberof QueryVwGroupRequest
   */
  size: number;
}
/**
 * 分頁查詢 VwMeetingMember
 * @export
 * @interface QueryVwMeetingMemberRequest
 */
export interface QueryVwMeetingMemberRequest {
  /**
   *
   * @type {string}
   * @memberof QueryVwMeetingMemberRequest
   */
  name?: string | null;
  /**
   * 查詢欄位排序
   * @type {Array<SortProperty>}
   * @memberof QueryVwMeetingMemberRequest
   */
  sortProperties: Array<SortProperty>;
  /**
   * 目前頁數
   * @type {number}
   * @memberof QueryVwMeetingMemberRequest
   */
  page: number;
  /**
   * 每頁筆數
   * @type {number}
   * @memberof QueryVwMeetingMemberRequest
   */
  size: number;
}
/**
 * 分頁查詢 VwMemberClass
 * @export
 * @interface QueryVwMemberClassRequest
 */
export interface QueryVwMemberClassRequest {
  /**
   *
   * @type {string}
   * @memberof QueryVwMemberClassRequest
   */
  name?: string | null;
  /**
   * 查詢欄位排序
   * @type {Array<SortProperty>}
   * @memberof QueryVwMemberClassRequest
   */
  sortProperties: Array<SortProperty>;
  /**
   * 目前頁數
   * @type {number}
   * @memberof QueryVwMemberClassRequest
   */
  page: number;
  /**
   * 每頁筆數
   * @type {number}
   * @memberof QueryVwMemberClassRequest
   */
  size: number;
}
/**
 * 分頁查詢 VwMemberMinister
 * @export
 * @interface QueryVwMemberMinisterRequest
 */
export interface QueryVwMemberMinisterRequest {
  /**
   *
   * @type {string}
   * @memberof QueryVwMemberMinisterRequest
   */
  name?: string | null;
  /**
   * 查詢欄位排序
   * @type {Array<SortProperty>}
   * @memberof QueryVwMemberMinisterRequest
   */
  sortProperties: Array<SortProperty>;
  /**
   * 目前頁數
   * @type {number}
   * @memberof QueryVwMemberMinisterRequest
   */
  page: number;
  /**
   * 每頁筆數
   * @type {number}
   * @memberof QueryVwMemberMinisterRequest
   */
  size: number;
}
/**
 * 分頁查詢 VwMemberSummary
 * @export
 * @interface QueryVwMemberSummaryRequest
 */
export interface QueryVwMemberSummaryRequest {
  /**
   *
   * @type {string}
   * @memberof QueryVwMemberSummaryRequest
   */
  name?: string | null;
  /**
   * 查詢欄位排序
   * @type {Array<SortProperty>}
   * @memberof QueryVwMemberSummaryRequest
   */
  sortProperties: Array<SortProperty>;
  /**
   * 目前頁數
   * @type {number}
   * @memberof QueryVwMemberSummaryRequest
   */
  page: number;
  /**
   * 每頁筆數
   * @type {number}
   * @memberof QueryVwMemberSummaryRequest
   */
  size: number;
}
/**
 * 分頁查詢 VwMemberTag
 * @export
 * @interface QueryVwMemberTagRequest
 */
export interface QueryVwMemberTagRequest {
  /**
   *
   * @type {string}
   * @memberof QueryVwMemberTagRequest
   */
  name?: string | null;
  /**
   * 查詢欄位排序
   * @type {Array<SortProperty>}
   * @memberof QueryVwMemberTagRequest
   */
  sortProperties: Array<SortProperty>;
  /**
   * 目前頁數
   * @type {number}
   * @memberof QueryVwMemberTagRequest
   */
  page: number;
  /**
   * 每頁筆數
   * @type {number}
   * @memberof QueryVwMemberTagRequest
   */
  size: number;
}
/**
 * 分頁查詢 VwOrderInvoice
 * @export
 * @interface QueryVwOrderInvoiceRequest
 */
export interface QueryVwOrderInvoiceRequest {
  /**
   *
   * @type {string}
   * @memberof QueryVwOrderInvoiceRequest
   */
  name?: string | null;
  /**
   * 查詢欄位排序
   * @type {Array<SortProperty>}
   * @memberof QueryVwOrderInvoiceRequest
   */
  sortProperties: Array<SortProperty>;
  /**
   * 目前頁數
   * @type {number}
   * @memberof QueryVwOrderInvoiceRequest
   */
  page: number;
  /**
   * 每頁筆數
   * @type {number}
   * @memberof QueryVwOrderInvoiceRequest
   */
  size: number;
}
/**
 * 分頁查詢 VwOrderRecord
 * @export
 * @interface QueryVwOrderRecordRequest
 */
export interface QueryVwOrderRecordRequest {
  /**
   *
   * @type {string}
   * @memberof QueryVwOrderRecordRequest
   */
  name?: string | null;
  /**
   * 查詢欄位排序
   * @type {Array<SortProperty>}
   * @memberof QueryVwOrderRecordRequest
   */
  sortProperties: Array<SortProperty>;
  /**
   * 目前頁數
   * @type {number}
   * @memberof QueryVwOrderRecordRequest
   */
  page: number;
  /**
   * 每頁筆數
   * @type {number}
   * @memberof QueryVwOrderRecordRequest
   */
  size: number;
}
/**
 * 分頁查詢 VwPreOrder
 * @export
 * @interface QueryVwPreOrderRequest
 */
export interface QueryVwPreOrderRequest {
  /**
   *
   * @type {string}
   * @memberof QueryVwPreOrderRequest
   */
  name?: string | null;
  /**
   * 查詢欄位排序
   * @type {Array<SortProperty>}
   * @memberof QueryVwPreOrderRequest
   */
  sortProperties: Array<SortProperty>;
  /**
   * 目前頁數
   * @type {number}
   * @memberof QueryVwPreOrderRequest
   */
  page: number;
  /**
   * 每頁筆數
   * @type {number}
   * @memberof QueryVwPreOrderRequest
   */
  size: number;
}
/**
 * 分頁查詢 VwRollCall
 * @export
 * @interface QueryVwRollCallRequest
 */
export interface QueryVwRollCallRequest {
  /**
   *
   * @type {string}
   * @memberof QueryVwRollCallRequest
   */
  name?: string | null;
  /**
   * 查詢欄位排序
   * @type {Array<SortProperty>}
   * @memberof QueryVwRollCallRequest
   */
  sortProperties: Array<SortProperty>;
  /**
   * 目前頁數
   * @type {number}
   * @memberof QueryVwRollCallRequest
   */
  page: number;
  /**
   * 每頁筆數
   * @type {number}
   * @memberof QueryVwRollCallRequest
   */
  size: number;
}
/**
 * 分頁查詢 VwWorkSignup
 * @export
 * @interface QueryVwWorkSignupRequest
 */
export interface QueryVwWorkSignupRequest {
  /**
   *
   * @type {string}
   * @memberof QueryVwWorkSignupRequest
   */
  name?: string | null;
  /**
   * 查詢欄位排序
   * @type {Array<SortProperty>}
   * @memberof QueryVwWorkSignupRequest
   */
  sortProperties: Array<SortProperty>;
  /**
   * 目前頁數
   * @type {number}
   * @memberof QueryVwWorkSignupRequest
   */
  page: number;
  /**
   * 每頁筆數
   * @type {number}
   * @memberof QueryVwWorkSignupRequest
   */
  size: number;
}
/**
 * 分頁查詢 VwZoneSupervisor
 * @export
 * @interface QueryVwZoneSupervisorRequest
 */
export interface QueryVwZoneSupervisorRequest {
  /**
   *
   * @type {string}
   * @memberof QueryVwZoneSupervisorRequest
   */
  name?: string | null;
  /**
   * 查詢欄位排序
   * @type {Array<SortProperty>}
   * @memberof QueryVwZoneSupervisorRequest
   */
  sortProperties: Array<SortProperty>;
  /**
   * 目前頁數
   * @type {number}
   * @memberof QueryVwZoneSupervisorRequest
   */
  page: number;
  /**
   * 每頁筆數
   * @type {number}
   * @memberof QueryVwZoneSupervisorRequest
   */
  size: number;
}
/**
 *
 * @export
 * @interface Questionnaire
 */
export interface Questionnaire {
  /**
   * 問卷Id
   * @type {number}
   * @memberof Questionnaire
   */
  id: number;
  /**
   * 問卷堂點類別        type=QuestionnaireJoinLocation       顯示 name     value存此欄位0：堂點
   * @type {string}
   * @memberof Questionnaire
   */
  questionnaireJoinLocation: string;
  /**
   * 問卷類型type=QuestionnaireType顯示 namevalue存此欄位0：課程問卷 1:服事徵召 2:一般問卷
   * @type {string}
   * @memberof Questionnaire
   */
  questionnaireType: string;
  /**
   * 問卷名稱
   * @type {string}
   * @memberof Questionnaire
   */
  name: string;
  /**
   * 問卷說明
   * @type {string}
   * @memberof Questionnaire
   */
  description: string;
  /**
   * 指定堂點
   * @type {number}
   * @memberof Questionnaire
   */
  organizationId: number;
  /**
   * 指定牧區
   * @type {number}
   * @memberof Questionnaire
   */
  pastoralId: number;
  /**
   * 指定課程分類
   * @type {number}
   * @memberof Questionnaire
   */
  courseManagementTypeId: number;
  /**
   * 指定課程名稱
   * @type {string}
   * @memberof Questionnaire
   */
  courseManagementName: string;
  /**
   * 指定年度
   * @type {string}
   * @memberof Questionnaire
   */
  courseYear: string;
  /**
   * 指定季
   * @type {string}
   * @memberof Questionnaire
   */
  courseSeason: string;
  /**
   * 指定梯次
   * @type {string}
   * @memberof Questionnaire
   */
  courseClassNum: string;
  /**
   * 指定課程代碼
   * @type {string}
   * @memberof Questionnaire
   */
  courseManagementNo: string;
  /**
   * 作業繳交日期
   * @type {string}
   * @memberof Questionnaire
   */
  courseHomeworkDate: string;
  /**
   *
   * @type {string}
   * @memberof Questionnaire
   */
  statusCd: string;
  /**
   * ApiLog HandledId
   * @type {string}
   * @memberof Questionnaire
   */
  handledId?: string | null;
  /**
   * 建立日期
   * @type {string}
   * @memberof Questionnaire
   */
  dateCreate?: string;
  /**
   * 建立人員
   * @type {string}
   * @memberof Questionnaire
   */
  userCreate?: string | null;
  /**
   * 最後修改日期
   * @type {string}
   * @memberof Questionnaire
   */
  dateUpdate?: string | null;
  /**
   * 最後修改人員
   * @type {string}
   * @memberof Questionnaire
   */
  userUpdate?: string | null;
  /**
   *
   * @type {string}
   * @memberof Questionnaire
   */
  rowVersion?: string | null;
}
/**
 *
 * @export
 * @interface QuestionnaireBase
 */
export interface QuestionnaireBase {
  /**
   * 問卷Id
   * @type {number}
   * @memberof QuestionnaireBase
   */
  id: number;
  /**
   * 問卷堂點類別        type=QuestionnaireJoinLocation       顯示 name     value存此欄位0：堂點
   * @type {string}
   * @memberof QuestionnaireBase
   */
  questionnaireJoinLocation: string;
  /**
   * 問卷類型type=QuestionnaireType顯示 namevalue存此欄位0：課程問卷 1:服事徵召 2:一般問卷
   * @type {string}
   * @memberof QuestionnaireBase
   */
  questionnaireType: string;
  /**
   * 問卷名稱
   * @type {string}
   * @memberof QuestionnaireBase
   */
  name: string;
  /**
   * 問卷說明
   * @type {string}
   * @memberof QuestionnaireBase
   */
  description: string;
  /**
   * 指定堂點
   * @type {number}
   * @memberof QuestionnaireBase
   */
  organizationId: number;
  /**
   * 指定牧區
   * @type {number}
   * @memberof QuestionnaireBase
   */
  pastoralId: number;
  /**
   * 指定課程分類
   * @type {number}
   * @memberof QuestionnaireBase
   */
  courseManagementTypeId: number;
  /**
   * 指定課程名稱
   * @type {string}
   * @memberof QuestionnaireBase
   */
  courseManagementName: string;
  /**
   * 指定年度
   * @type {string}
   * @memberof QuestionnaireBase
   */
  courseYear: string;
  /**
   * 指定季
   * @type {string}
   * @memberof QuestionnaireBase
   */
  courseSeason: string;
  /**
   * 指定梯次
   * @type {string}
   * @memberof QuestionnaireBase
   */
  courseClassNum: string;
  /**
   * 指定課程代碼
   * @type {string}
   * @memberof QuestionnaireBase
   */
  courseManagementNo: string;
  /**
   * 作業繳交日期
   * @type {string}
   * @memberof QuestionnaireBase
   */
  courseHomeworkDate: string;
  /**
   * Organization List When Query OrganizationId Condition
   * @type {Array<OrganizationView>}
   * @memberof QuestionnaireBase
   */
  organizationViews: Array<OrganizationView>;
  /**
   * Pastoral List When Query PastoralId Condition
   * @type {Array<PastoralView>}
   * @memberof QuestionnaireBase
   */
  pastoralViews: Array<PastoralView>;
  /**
   * QuestionnaireDetail List
   * @type {Array<QuestionnaireDetailView>}
   * @memberof QuestionnaireBase
   */
  questionnaireDetailsViews: Array<QuestionnaireDetailView>;
}
/**
 *
 * @export
 * @interface QuestionnaireDetail
 */
export interface QuestionnaireDetail {
  /**
   * 問卷明細Id
   * @type {number}
   * @memberof QuestionnaireDetail
   */
  id: number;
  /**
   * 問卷Id
   * @type {number}
   * @memberof QuestionnaireDetail
   */
  questionnaireId: number;
  /**
   * 上層問卷DetailId
   * @type {number}
   * @memberof QuestionnaireDetail
   */
  upperQuestionnaireDetailId: number;
  /**
   * 問卷內容類型type=QuestionnaireDetailType namevalue存此欄位0：區段標題1：題目2：選項
   * @type {string}
   * @memberof QuestionnaireDetail
   */
  questionnaireDetailType: string;
  /**
   * QuestionnaireDetailType=1才可選問卷內容類型type=ComponentType顯示 namevalue存此欄位0：選擇(單選)1：選擇(多選)2：是非3：簡答
   * @type {string}
   * @memberof QuestionnaireDetail
   */
  componentType: string;
  /**
   * 顯示排序
   * @type {number}
   * @memberof QuestionnaireDetail
   */
  sequence: number;
  /**
   * 元件描述假設QuestionnaireType=0此顯示區段標題假設QuestionnaireType=1此顯示該UpperQuestionnaireId.區段之Sequence題目名稱假設QuestionnaireType=2此顯示該UpperQuestionnaireId.區段之ComponentType選項之內容說明
   * @type {string}
   * @memberof QuestionnaireDetail
   */
  name: string;
  /**
   * 描述
   * @type {string}
   * @memberof QuestionnaireDetail
   */
  description: string;
  /**
   *
   * @type {string}
   * @memberof QuestionnaireDetail
   */
  statusCd: string;
  /**
   * ApiLog HandledId
   * @type {string}
   * @memberof QuestionnaireDetail
   */
  handledId?: string | null;
  /**
   * 建立日期
   * @type {string}
   * @memberof QuestionnaireDetail
   */
  dateCreate?: string;
  /**
   * 建立人員
   * @type {string}
   * @memberof QuestionnaireDetail
   */
  userCreate?: string | null;
  /**
   * 最後修改日期
   * @type {string}
   * @memberof QuestionnaireDetail
   */
  dateUpdate?: string | null;
  /**
   * 最後修改人員
   * @type {string}
   * @memberof QuestionnaireDetail
   */
  userUpdate?: string | null;
  /**
   *
   * @type {string}
   * @memberof QuestionnaireDetail
   */
  rowVersion?: string | null;
}
/**
 * 問卷明細
 * @export
 * @interface QuestionnaireDetailBase
 */
export interface QuestionnaireDetailBase {
  /**
   * 問卷明細Id
   * @type {number}
   * @memberof QuestionnaireDetailBase
   */
  id: number;
  /**
   * 問卷Id
   * @type {number}
   * @memberof QuestionnaireDetailBase
   */
  questionnaireId: number;
  /**
   * 上層問卷DetailId
   * @type {number}
   * @memberof QuestionnaireDetailBase
   */
  upperQuestionnaireDetailId: number;
  /**
   * 問卷內容類型type=QuestionnaireDetailType namevalue存此欄位0：區段標題1：題目2：選項
   * @type {string}
   * @memberof QuestionnaireDetailBase
   */
  questionnaireDetailType: string;
  /**
   * QuestionnaireType=1才可選問卷內容類型type=ComponentType顯示 namevalue存此欄位0：選擇(單選)1：選擇(多選)2：是非3：簡答
   * @type {string}
   * @memberof QuestionnaireDetailBase
   */
  componentType: string;
  /**
   * 顯示排序
   * @type {number}
   * @memberof QuestionnaireDetailBase
   */
  sequence: number;
  /**
   * 元件描述假設QuestionnaireType=0此顯示區段標題假設QuestionnaireType=1此顯示該UpperQuestionnaireId.區段之Sequence題目名稱假設QuestionnaireType=2此顯示該UpperQuestionnaireId.區段之ComponentType選項之內容說明
   * @type {string}
   * @memberof QuestionnaireDetailBase
   */
  name: string;
  /**
   * 描述
   * @type {string}
   * @memberof QuestionnaireDetailBase
   */
  description: string;
  /**
   *
   * @type {Array<QuestionnaireDetailView>}
   * @memberof QuestionnaireDetailBase
   */
  questionnaireDetailViews: Array<QuestionnaireDetailView>;
}
/**
 * QuestionnaireDetail
 * @export
 * @interface QuestionnaireDetailView
 */
export interface QuestionnaireDetailView {
  /**
   *
   * @type {string}
   * @memberof QuestionnaireDetailView
   */
  handledId?: string | null;
  /**
   *
   * @type {string}
   * @memberof QuestionnaireDetailView
   */
  dateCreate?: string;
  /**
   *
   * @type {string}
   * @memberof QuestionnaireDetailView
   */
  userCreate?: string | null;
  /**
   *
   * @type {string}
   * @memberof QuestionnaireDetailView
   */
  dateUpdate?: string | null;
  /**
   *
   * @type {string}
   * @memberof QuestionnaireDetailView
   */
  userUpdate?: string | null;
  /**
   * 問卷明細Id
   * @type {number}
   * @memberof QuestionnaireDetailView
   */
  id: number;
  /**
   * 問卷Id
   * @type {number}
   * @memberof QuestionnaireDetailView
   */
  questionnaireId: number;
  /**
   * 上層問卷DetailId
   * @type {number}
   * @memberof QuestionnaireDetailView
   */
  upperQuestionnaireDetailId: number;
  /**
   * 問卷內容類型type=QuestionnaireDetailType namevalue存此欄位0：區段標題1：題目2：選項
   * @type {string}
   * @memberof QuestionnaireDetailView
   */
  questionnaireDetailType: string;
  /**
   * QuestionnaireType=1才可選問卷內容類型type=ComponentType顯示 namevalue存此欄位0：選擇(單選)1：選擇(多選)2：是非3：簡答
   * @type {string}
   * @memberof QuestionnaireDetailView
   */
  componentType: string;
  /**
   * 顯示排序
   * @type {number}
   * @memberof QuestionnaireDetailView
   */
  sequence: number;
  /**
   * 元件描述假設QuestionnaireType=0此顯示區段標題假設QuestionnaireType=1此顯示該UpperQuestionnaireId.區段之Sequence題目名稱假設QuestionnaireType=2此顯示該UpperQuestionnaireId.區段之ComponentType選項之內容說明
   * @type {string}
   * @memberof QuestionnaireDetailView
   */
  name: string;
  /**
   * 描述
   * @type {string}
   * @memberof QuestionnaireDetailView
   */
  description: string;
  /**
   *
   * @type {Array<QuestionnaireDetailView>}
   * @memberof QuestionnaireDetailView
   */
  questionnaireDetailViews: Array<QuestionnaireDetailView>;
}
/**
 *
 * @export
 * @interface QuestionnaireDetailViewApiResponse
 */
export interface QuestionnaireDetailViewApiResponse {
  /**
   *
   * @type {string}
   * @memberof QuestionnaireDetailViewApiResponse
   */
  handledId?: string | null;
  /**
   * http-200  0000: 代表處理成功，其餘一律為失敗  http-4xx  Vxxxx: 資料驗證  Bxxxx: 詳見 message 欄位說明
   * @type {string}
   * @memberof QuestionnaireDetailViewApiResponse
   */
  code: string;
  /**
   * 回傳訊息
   * @type {string}
   * @memberof QuestionnaireDetailViewApiResponse
   */
  message: string;
  /**
   * 錯誤詳細資訊
   * @type {any}
   * @memberof QuestionnaireDetailViewApiResponse
   */
  detailMessage: any;
  /**
   *
   * @type {QuestionnaireDetailView}
   * @memberof QuestionnaireDetailViewApiResponse
   */
  data: QuestionnaireDetailView;
  /**
   * 交易時間
   * @type {string}
   * @memberof QuestionnaireDetailViewApiResponse
   */
  txnTime: string;
}
/**
 *
 * @export
 * @interface QuestionnaireDetailViewListApiResponse
 */
export interface QuestionnaireDetailViewListApiResponse {
  /**
   *
   * @type {string}
   * @memberof QuestionnaireDetailViewListApiResponse
   */
  handledId?: string | null;
  /**
   * http-200  0000: 代表處理成功，其餘一律為失敗  http-4xx  Vxxxx: 資料驗證  Bxxxx: 詳見 message 欄位說明
   * @type {string}
   * @memberof QuestionnaireDetailViewListApiResponse
   */
  code: string;
  /**
   * 回傳訊息
   * @type {string}
   * @memberof QuestionnaireDetailViewListApiResponse
   */
  message: string;
  /**
   * 錯誤詳細資訊
   * @type {any}
   * @memberof QuestionnaireDetailViewListApiResponse
   */
  detailMessage: any;
  /**
   * 回傳資料
   * @type {Array<QuestionnaireDetailView>}
   * @memberof QuestionnaireDetailViewListApiResponse
   */
  data: Array<QuestionnaireDetailView>;
  /**
   * 交易時間
   * @type {string}
   * @memberof QuestionnaireDetailViewListApiResponse
   */
  txnTime: string;
}
/**
 *
 * @export
 * @interface QuestionnaireDetailViewPage
 */
export interface QuestionnaireDetailViewPage {
  /**
   *
   * @type {number}
   * @memberof QuestionnaireDetailViewPage
   */
  totalCount: number;
  /**
   *
   * @type {number}
   * @memberof QuestionnaireDetailViewPage
   */
  pageCount: number;
  /**
   *
   * @type {number}
   * @memberof QuestionnaireDetailViewPage
   */
  currentPage: number;
  /**
   *
   * @type {number}
   * @memberof QuestionnaireDetailViewPage
   */
  size: number;
  /**
   *
   * @type {Array<QuestionnaireDetailView>}
   * @memberof QuestionnaireDetailViewPage
   */
  records: Array<QuestionnaireDetailView>;
  /**
   *
   * @type {number}
   * @memberof QuestionnaireDetailViewPage
   */
  pageSize: number;
  /**
   *
   * @type {boolean}
   * @memberof QuestionnaireDetailViewPage
   */
  hasPreviousPages: boolean;
  /**
   *
   * @type {boolean}
   * @memberof QuestionnaireDetailViewPage
   */
  hasNextPages: boolean;
  /**
   *
   * @type {number}
   * @memberof QuestionnaireDetailViewPage
   */
  previousLastPageNo: number;
  /**
   *
   * @type {number}
   * @memberof QuestionnaireDetailViewPage
   */
  nextStartPageNo: number;
  /**
   *
   * @type {Array<number>}
   * @memberof QuestionnaireDetailViewPage
   */
  navigationPages: Array<number>;
}
/**
 *
 * @export
 * @interface QuestionnaireDetailViewPageApiResponse
 */
export interface QuestionnaireDetailViewPageApiResponse {
  /**
   *
   * @type {string}
   * @memberof QuestionnaireDetailViewPageApiResponse
   */
  handledId?: string | null;
  /**
   * http-200  0000: 代表處理成功，其餘一律為失敗  http-4xx  Vxxxx: 資料驗證  Bxxxx: 詳見 message 欄位說明
   * @type {string}
   * @memberof QuestionnaireDetailViewPageApiResponse
   */
  code: string;
  /**
   * 回傳訊息
   * @type {string}
   * @memberof QuestionnaireDetailViewPageApiResponse
   */
  message: string;
  /**
   * 錯誤詳細資訊
   * @type {any}
   * @memberof QuestionnaireDetailViewPageApiResponse
   */
  detailMessage: any;
  /**
   *
   * @type {QuestionnaireDetailViewPage}
   * @memberof QuestionnaireDetailViewPageApiResponse
   */
  data: QuestionnaireDetailViewPage;
  /**
   * 交易時間
   * @type {string}
   * @memberof QuestionnaireDetailViewPageApiResponse
   */
  txnTime: string;
}
/**
 *
 * @export
 * @interface QuestionnaireSatisfyUser
 */
export interface QuestionnaireSatisfyUser {
  /**
   * 會員出席聚會狀態.id
   * @type {number}
   * @memberof QuestionnaireSatisfyUser
   */
  id: number;
  /**
   * Questionnaire.id 問卷Id
   * @type {number}
   * @memberof QuestionnaireSatisfyUser
   */
  questionnaireId: number;
  /**
   * User.Id
   * @type {number}
   * @memberof QuestionnaireSatisfyUser
   */
  userId: number;
  /**
   * 問卷產生預設0        問卷類型        type = QuestionnaireWriteType顯示 namevalue存此欄位0：未填寫1：已填寫
   * @type {string}
   * @memberof QuestionnaireSatisfyUser
   */
  questionnaireWriteType: string;
  /**
   * 居住區域        type=QuestionnaireGoArea        顯示 name        value存此欄位0：台中1：台北2：高雄
   * @type {string}
   * @memberof QuestionnaireSatisfyUser
   */
  questionnaireGoArea: string;
  /**
   * 滿意度        type=Satisfaction        顯示 name       value存此欄位1：1 2：2 3：3 4：4 5：5
   * @type {string}
   * @memberof QuestionnaireSatisfyUser
   */
  satisfaction: string;
  /**
   * 評價        type=Evaluation        顯示 name       value存此欄位1：1 2：2 3：3 4：4 5：5
   * @type {string}
   * @memberof QuestionnaireSatisfyUser
   */
  evaluation: string;
  /**
   * 問卷日期
   * @type {string}
   * @memberof QuestionnaireSatisfyUser
   */
  writeQuestionnaireDate: string;
  /**
   *
   * @type {string}
   * @memberof QuestionnaireSatisfyUser
   */
  attendanceDate: string;
  /**
   *
   * @type {string}
   * @memberof QuestionnaireSatisfyUser
   */
  memo: string;
  /**
   *
   * @type {string}
   * @memberof QuestionnaireSatisfyUser
   */
  statusCd: string;
  /**
   *
   * @type {User}
   * @memberof QuestionnaireSatisfyUser
   */
  user: User;
  /**
   * ApiLog HandledId
   * @type {string}
   * @memberof QuestionnaireSatisfyUser
   */
  handledId?: string | null;
  /**
   * 建立日期
   * @type {string}
   * @memberof QuestionnaireSatisfyUser
   */
  dateCreate?: string;
  /**
   * 建立人員
   * @type {string}
   * @memberof QuestionnaireSatisfyUser
   */
  userCreate?: string | null;
  /**
   * 最後修改日期
   * @type {string}
   * @memberof QuestionnaireSatisfyUser
   */
  dateUpdate?: string | null;
  /**
   * 最後修改人員
   * @type {string}
   * @memberof QuestionnaireSatisfyUser
   */
  userUpdate?: string | null;
  /**
   *
   * @type {string}
   * @memberof QuestionnaireSatisfyUser
   */
  rowVersion?: string | null;
}
/**
 * Questionnaire
 * @export
 * @interface QuestionnaireView
 */
export interface QuestionnaireView {
  /**
   *
   * @type {string}
   * @memberof QuestionnaireView
   */
  handledId?: string | null;
  /**
   *
   * @type {string}
   * @memberof QuestionnaireView
   */
  dateCreate?: string;
  /**
   *
   * @type {string}
   * @memberof QuestionnaireView
   */
  userCreate?: string | null;
  /**
   *
   * @type {string}
   * @memberof QuestionnaireView
   */
  dateUpdate?: string | null;
  /**
   *
   * @type {string}
   * @memberof QuestionnaireView
   */
  userUpdate?: string | null;
  /**
   * 問卷Id
   * @type {number}
   * @memberof QuestionnaireView
   */
  id: number;
  /**
   * 問卷堂點類別        type=QuestionnaireJoinLocation       顯示 name     value存此欄位0：堂點
   * @type {string}
   * @memberof QuestionnaireView
   */
  questionnaireJoinLocation: string;
  /**
   * 問卷類型type=QuestionnaireType顯示 namevalue存此欄位0：課程問卷 1:服事徵召 2:一般問卷
   * @type {string}
   * @memberof QuestionnaireView
   */
  questionnaireType: string;
  /**
   * 問卷名稱
   * @type {string}
   * @memberof QuestionnaireView
   */
  name: string;
  /**
   * 問卷說明
   * @type {string}
   * @memberof QuestionnaireView
   */
  description: string;
  /**
   * 指定堂點
   * @type {number}
   * @memberof QuestionnaireView
   */
  organizationId: number;
  /**
   * 指定牧區
   * @type {number}
   * @memberof QuestionnaireView
   */
  pastoralId: number;
  /**
   * 指定課程分類
   * @type {number}
   * @memberof QuestionnaireView
   */
  courseManagementTypeId: number;
  /**
   * 指定課程名稱
   * @type {string}
   * @memberof QuestionnaireView
   */
  courseManagementName: string;
  /**
   * 指定年度
   * @type {string}
   * @memberof QuestionnaireView
   */
  courseYear: string;
  /**
   * 指定季
   * @type {string}
   * @memberof QuestionnaireView
   */
  courseSeason: string;
  /**
   * 指定梯次
   * @type {string}
   * @memberof QuestionnaireView
   */
  courseClassNum: string;
  /**
   * 指定課程代碼
   * @type {string}
   * @memberof QuestionnaireView
   */
  courseManagementNo: string;
  /**
   * 作業繳交日期
   * @type {string}
   * @memberof QuestionnaireView
   */
  courseHomeworkDate: string;
  /**
   * Organization List When Query OrganizationId Condition
   * @type {Array<OrganizationView>}
   * @memberof QuestionnaireView
   */
  organizationViews: Array<OrganizationView>;
  /**
   * Pastoral List When Query PastoralId Condition
   * @type {Array<PastoralView>}
   * @memberof QuestionnaireView
   */
  pastoralViews: Array<PastoralView>;
  /**
   * QuestionnaireDetail List
   * @type {Array<QuestionnaireDetailView>}
   * @memberof QuestionnaireView
   */
  questionnaireDetailsViews: Array<QuestionnaireDetailView>;
}
/**
 *
 * @export
 * @interface QuestionnaireViewApiResponse
 */
export interface QuestionnaireViewApiResponse {
  /**
   *
   * @type {string}
   * @memberof QuestionnaireViewApiResponse
   */
  handledId?: string | null;
  /**
   * http-200  0000: 代表處理成功，其餘一律為失敗  http-4xx  Vxxxx: 資料驗證  Bxxxx: 詳見 message 欄位說明
   * @type {string}
   * @memberof QuestionnaireViewApiResponse
   */
  code: string;
  /**
   * 回傳訊息
   * @type {string}
   * @memberof QuestionnaireViewApiResponse
   */
  message: string;
  /**
   * 錯誤詳細資訊
   * @type {any}
   * @memberof QuestionnaireViewApiResponse
   */
  detailMessage: any;
  /**
   *
   * @type {QuestionnaireView}
   * @memberof QuestionnaireViewApiResponse
   */
  data: QuestionnaireView;
  /**
   * 交易時間
   * @type {string}
   * @memberof QuestionnaireViewApiResponse
   */
  txnTime: string;
}
/**
 *
 * @export
 * @interface QuestionnaireViewListApiResponse
 */
export interface QuestionnaireViewListApiResponse {
  /**
   *
   * @type {string}
   * @memberof QuestionnaireViewListApiResponse
   */
  handledId?: string | null;
  /**
   * http-200  0000: 代表處理成功，其餘一律為失敗  http-4xx  Vxxxx: 資料驗證  Bxxxx: 詳見 message 欄位說明
   * @type {string}
   * @memberof QuestionnaireViewListApiResponse
   */
  code: string;
  /**
   * 回傳訊息
   * @type {string}
   * @memberof QuestionnaireViewListApiResponse
   */
  message: string;
  /**
   * 錯誤詳細資訊
   * @type {any}
   * @memberof QuestionnaireViewListApiResponse
   */
  detailMessage: any;
  /**
   * 回傳資料
   * @type {Array<QuestionnaireView>}
   * @memberof QuestionnaireViewListApiResponse
   */
  data: Array<QuestionnaireView>;
  /**
   * 交易時間
   * @type {string}
   * @memberof QuestionnaireViewListApiResponse
   */
  txnTime: string;
}
/**
 *
 * @export
 * @interface QuestionnaireViewPage
 */
export interface QuestionnaireViewPage {
  /**
   *
   * @type {number}
   * @memberof QuestionnaireViewPage
   */
  totalCount: number;
  /**
   *
   * @type {number}
   * @memberof QuestionnaireViewPage
   */
  pageCount: number;
  /**
   *
   * @type {number}
   * @memberof QuestionnaireViewPage
   */
  currentPage: number;
  /**
   *
   * @type {number}
   * @memberof QuestionnaireViewPage
   */
  size: number;
  /**
   *
   * @type {Array<QuestionnaireView>}
   * @memberof QuestionnaireViewPage
   */
  records: Array<QuestionnaireView>;
  /**
   *
   * @type {number}
   * @memberof QuestionnaireViewPage
   */
  pageSize: number;
  /**
   *
   * @type {boolean}
   * @memberof QuestionnaireViewPage
   */
  hasPreviousPages: boolean;
  /**
   *
   * @type {boolean}
   * @memberof QuestionnaireViewPage
   */
  hasNextPages: boolean;
  /**
   *
   * @type {number}
   * @memberof QuestionnaireViewPage
   */
  previousLastPageNo: number;
  /**
   *
   * @type {number}
   * @memberof QuestionnaireViewPage
   */
  nextStartPageNo: number;
  /**
   *
   * @type {Array<number>}
   * @memberof QuestionnaireViewPage
   */
  navigationPages: Array<number>;
}
/**
 *
 * @export
 * @interface QuestionnaireViewPageApiResponse
 */
export interface QuestionnaireViewPageApiResponse {
  /**
   *
   * @type {string}
   * @memberof QuestionnaireViewPageApiResponse
   */
  handledId?: string | null;
  /**
   * http-200  0000: 代表處理成功，其餘一律為失敗  http-4xx  Vxxxx: 資料驗證  Bxxxx: 詳見 message 欄位說明
   * @type {string}
   * @memberof QuestionnaireViewPageApiResponse
   */
  code: string;
  /**
   * 回傳訊息
   * @type {string}
   * @memberof QuestionnaireViewPageApiResponse
   */
  message: string;
  /**
   * 錯誤詳細資訊
   * @type {any}
   * @memberof QuestionnaireViewPageApiResponse
   */
  detailMessage: any;
  /**
   *
   * @type {QuestionnaireViewPage}
   * @memberof QuestionnaireViewPageApiResponse
   */
  data: QuestionnaireViewPage;
  /**
   * 交易時間
   * @type {string}
   * @memberof QuestionnaireViewPageApiResponse
   */
  txnTime: string;
}
/**
 * 註冊
 * @export
 * @interface ResetPasswordCommand
 */
export interface ResetPasswordCommand {
  /**
   *
   * @type {string}
   * @memberof ResetPasswordCommand
   */
  account: string;
  /**
   *
   * @type {string}
   * @memberof ResetPasswordCommand
   */
  token: string;
  /**
   *
   * @type {string}
   * @memberof ResetPasswordCommand
   */
  password: string;
  /**
   * Old
   * @type {string}
   * @memberof ResetPasswordCommand
   */
  oldPassword: string;
  /**
   *
   * @type {string}
   * @memberof ResetPasswordCommand
   */
  cellPhone: string;
  /**
   *
   * @type {string}
   * @memberof ResetPasswordCommand
   */
  email1: string;
  /**
   *
   * @type {PasswordResetType}
   * @memberof ResetPasswordCommand
   */
  resetType: PasswordResetType;
}
/**
 * 尋找帳號結果
 * @export
 * @interface ResetPasswordCommandResponse
 */
export interface ResetPasswordCommandResponse {
  /**
   * 帳號
   * @type {boolean}
   * @memberof ResetPasswordCommandResponse
   */
  result: boolean;
}
/**
 *
 * @export
 * @interface ResetPasswordCommandResponseApiResponse
 */
export interface ResetPasswordCommandResponseApiResponse {
  /**
   *
   * @type {string}
   * @memberof ResetPasswordCommandResponseApiResponse
   */
  handledId?: string | null;
  /**
   * http-200  0000: 代表處理成功，其餘一律為失敗  http-4xx  Vxxxx: 資料驗證  Bxxxx: 詳見 message 欄位說明
   * @type {string}
   * @memberof ResetPasswordCommandResponseApiResponse
   */
  code: string;
  /**
   * 回傳訊息
   * @type {string}
   * @memberof ResetPasswordCommandResponseApiResponse
   */
  message: string;
  /**
   * 錯誤詳細資訊
   * @type {any}
   * @memberof ResetPasswordCommandResponseApiResponse
   */
  detailMessage: any;
  /**
   *
   * @type {ResetPasswordCommandResponse}
   * @memberof ResetPasswordCommandResponseApiResponse
   */
  data: ResetPasswordCommandResponse;
  /**
   * 交易時間
   * @type {string}
   * @memberof ResetPasswordCommandResponseApiResponse
   */
  txnTime: string;
}
/**
 *
 * @export
 * @interface Role
 */
export interface Role {
  /**
   * Id
   * @type {string}
   * @memberof Role
   */
  id: string;
  /**
   * 角色
   * @type {string}
   * @memberof Role
   */
  name: string;
  /**
   * ApiLog HandledId
   * @type {string}
   * @memberof Role
   */
  handledId?: string | null;
  /**
   * 建立日期
   * @type {string}
   * @memberof Role
   */
  dateCreate?: string;
  /**
   * 建立人員
   * @type {string}
   * @memberof Role
   */
  userCreate?: string | null;
  /**
   * 最後修改日期
   * @type {string}
   * @memberof Role
   */
  dateUpdate?: string | null;
  /**
   * 最後修改人員
   * @type {string}
   * @memberof Role
   */
  userUpdate?: string | null;
  /**
   *
   * @type {string}
   * @memberof Role
   */
  rowVersion?: string | null;
}
/**
 *
 * @export
 * @interface RoleBase
 */
export interface RoleBase {
  /**
   * Id
   * @type {string}
   * @memberof RoleBase
   */
  id: string;
  /**
   * 角色名稱
   * @type {string}
   * @memberof RoleBase
   */
  name: string;
  /**
   * 角色說明
   * @type {string}
   * @memberof RoleBase
   */
  roleDescriptions: string;
  /**
   * 角色資料階層
   * @type {number}
   * @memberof RoleBase
   */
  dataLevel: number;
  /**
   * HandledId
   * @type {string}
   * @memberof RoleBase
   */
  handledId?: string | null;
}
/**
 *
 * @export
 * @interface RolePrivilegeMapping
 */
export interface RolePrivilegeMapping {
  /**
   *
   * @type {string}
   * @memberof RolePrivilegeMapping
   */
  id: string;
  /**
   *
   * @type {string}
   * @memberof RolePrivilegeMapping
   */
  roleId: string;
  /**
   *
   * @type {string}
   * @memberof RolePrivilegeMapping
   */
  privilegeId: string;
  /**
   *
   * @type {boolean}
   * @memberof RolePrivilegeMapping
   */
  enable: boolean;
  /**
   *
   * @type {boolean}
   * @memberof RolePrivilegeMapping
   */
  viewGranted: boolean;
  /**
   *
   * @type {boolean}
   * @memberof RolePrivilegeMapping
   */
  modifyGranted: boolean;
  /**
   *
   * @type {boolean}
   * @memberof RolePrivilegeMapping
   */
  deleteGranted: boolean;
  /**
   *
   * @type {boolean}
   * @memberof RolePrivilegeMapping
   */
  uploadGranted: boolean;
  /**
   *
   * @type {boolean}
   * @memberof RolePrivilegeMapping
   */
  downloadGranted: boolean;
  /**
   * ApiLog HandledId
   * @type {string}
   * @memberof RolePrivilegeMapping
   */
  handledId?: string | null;
  /**
   * 建立日期
   * @type {string}
   * @memberof RolePrivilegeMapping
   */
  dateCreate?: string;
  /**
   * 建立人員
   * @type {string}
   * @memberof RolePrivilegeMapping
   */
  userCreate?: string | null;
  /**
   * 最後修改日期
   * @type {string}
   * @memberof RolePrivilegeMapping
   */
  dateUpdate?: string | null;
  /**
   * 最後修改人員
   * @type {string}
   * @memberof RolePrivilegeMapping
   */
  userUpdate?: string | null;
  /**
   *
   * @type {string}
   * @memberof RolePrivilegeMapping
   */
  rowVersion?: string | null;
}
/**
 * 角色功能對應資訊
 * @export
 * @interface RolePrivilegeMappingBase
 */
export interface RolePrivilegeMappingBase {
  /**
   * Id
   * @type {string}
   * @memberof RolePrivilegeMappingBase
   */
  id: string;
  /**
   * RoleId
   * @type {string}
   * @memberof RolePrivilegeMappingBase
   */
  roleId: string;
  /**
   * PrivilegeId
   * @type {string}
   * @memberof RolePrivilegeMappingBase
   */
  privilegeId: string;
  /**
   * PrivilegeId
   * @type {boolean}
   * @memberof RolePrivilegeMappingBase
   */
  enable: boolean;
  /**
   * 檢視
   * @type {boolean}
   * @memberof RolePrivilegeMappingBase
   */
  viewGranted: boolean;
  /**
   * 新增/編輯
   * @type {boolean}
   * @memberof RolePrivilegeMappingBase
   */
  modifyGranted: boolean;
  /**
   * 刪除
   * @type {boolean}
   * @memberof RolePrivilegeMappingBase
   */
  deleteGranted: boolean;
  /**
   * 上傳
   * @type {boolean}
   * @memberof RolePrivilegeMappingBase
   */
  uploadGranted: boolean;
  /**
   * 下載
   * @type {boolean}
   * @memberof RolePrivilegeMappingBase
   */
  downloadGranted: boolean;
}
/**
 * RolePrivilegeMapping
 * @export
 * @interface RolePrivilegeMappingView
 */
export interface RolePrivilegeMappingView {
  /**
   *
   * @type {string}
   * @memberof RolePrivilegeMappingView
   */
  handledId?: string | null;
  /**
   *
   * @type {string}
   * @memberof RolePrivilegeMappingView
   */
  dateCreate?: string;
  /**
   *
   * @type {string}
   * @memberof RolePrivilegeMappingView
   */
  userCreate?: string | null;
  /**
   *
   * @type {string}
   * @memberof RolePrivilegeMappingView
   */
  dateUpdate?: string | null;
  /**
   *
   * @type {string}
   * @memberof RolePrivilegeMappingView
   */
  userUpdate?: string | null;
  /**
   * Id
   * @type {string}
   * @memberof RolePrivilegeMappingView
   */
  id: string;
  /**
   * RoleId
   * @type {string}
   * @memberof RolePrivilegeMappingView
   */
  roleId: string;
  /**
   * PrivilegeId
   * @type {string}
   * @memberof RolePrivilegeMappingView
   */
  privilegeId: string;
  /**
   * PrivilegeId
   * @type {boolean}
   * @memberof RolePrivilegeMappingView
   */
  enable: boolean;
  /**
   * 檢視
   * @type {boolean}
   * @memberof RolePrivilegeMappingView
   */
  viewGranted: boolean;
  /**
   * 新增/編輯
   * @type {boolean}
   * @memberof RolePrivilegeMappingView
   */
  modifyGranted: boolean;
  /**
   * 刪除
   * @type {boolean}
   * @memberof RolePrivilegeMappingView
   */
  deleteGranted: boolean;
  /**
   * 上傳
   * @type {boolean}
   * @memberof RolePrivilegeMappingView
   */
  uploadGranted: boolean;
  /**
   * 下載
   * @type {boolean}
   * @memberof RolePrivilegeMappingView
   */
  downloadGranted: boolean;
}
/**
 *
 * @export
 * @interface RolePrivilegeMappingViewApiResponse
 */
export interface RolePrivilegeMappingViewApiResponse {
  /**
   *
   * @type {string}
   * @memberof RolePrivilegeMappingViewApiResponse
   */
  handledId?: string | null;
  /**
   * http-200  0000: 代表處理成功，其餘一律為失敗  http-4xx  Vxxxx: 資料驗證  Bxxxx: 詳見 message 欄位說明
   * @type {string}
   * @memberof RolePrivilegeMappingViewApiResponse
   */
  code: string;
  /**
   * 回傳訊息
   * @type {string}
   * @memberof RolePrivilegeMappingViewApiResponse
   */
  message: string;
  /**
   * 錯誤詳細資訊
   * @type {any}
   * @memberof RolePrivilegeMappingViewApiResponse
   */
  detailMessage: any;
  /**
   *
   * @type {RolePrivilegeMappingView}
   * @memberof RolePrivilegeMappingViewApiResponse
   */
  data: RolePrivilegeMappingView;
  /**
   * 交易時間
   * @type {string}
   * @memberof RolePrivilegeMappingViewApiResponse
   */
  txnTime: string;
}
/**
 *
 * @export
 * @interface RolePrivilegeMappingViewListApiResponse
 */
export interface RolePrivilegeMappingViewListApiResponse {
  /**
   *
   * @type {string}
   * @memberof RolePrivilegeMappingViewListApiResponse
   */
  handledId?: string | null;
  /**
   * http-200  0000: 代表處理成功，其餘一律為失敗  http-4xx  Vxxxx: 資料驗證  Bxxxx: 詳見 message 欄位說明
   * @type {string}
   * @memberof RolePrivilegeMappingViewListApiResponse
   */
  code: string;
  /**
   * 回傳訊息
   * @type {string}
   * @memberof RolePrivilegeMappingViewListApiResponse
   */
  message: string;
  /**
   * 錯誤詳細資訊
   * @type {any}
   * @memberof RolePrivilegeMappingViewListApiResponse
   */
  detailMessage: any;
  /**
   * 回傳資料
   * @type {Array<RolePrivilegeMappingView>}
   * @memberof RolePrivilegeMappingViewListApiResponse
   */
  data: Array<RolePrivilegeMappingView>;
  /**
   * 交易時間
   * @type {string}
   * @memberof RolePrivilegeMappingViewListApiResponse
   */
  txnTime: string;
}
/**
 *
 * @export
 * @interface RolePrivilegeMappingViewPage
 */
export interface RolePrivilegeMappingViewPage {
  /**
   *
   * @type {number}
   * @memberof RolePrivilegeMappingViewPage
   */
  totalCount: number;
  /**
   *
   * @type {number}
   * @memberof RolePrivilegeMappingViewPage
   */
  pageCount: number;
  /**
   *
   * @type {number}
   * @memberof RolePrivilegeMappingViewPage
   */
  currentPage: number;
  /**
   *
   * @type {number}
   * @memberof RolePrivilegeMappingViewPage
   */
  size: number;
  /**
   *
   * @type {Array<RolePrivilegeMappingView>}
   * @memberof RolePrivilegeMappingViewPage
   */
  records: Array<RolePrivilegeMappingView>;
  /**
   *
   * @type {number}
   * @memberof RolePrivilegeMappingViewPage
   */
  pageSize: number;
  /**
   *
   * @type {boolean}
   * @memberof RolePrivilegeMappingViewPage
   */
  hasPreviousPages: boolean;
  /**
   *
   * @type {boolean}
   * @memberof RolePrivilegeMappingViewPage
   */
  hasNextPages: boolean;
  /**
   *
   * @type {number}
   * @memberof RolePrivilegeMappingViewPage
   */
  previousLastPageNo: number;
  /**
   *
   * @type {number}
   * @memberof RolePrivilegeMappingViewPage
   */
  nextStartPageNo: number;
  /**
   *
   * @type {Array<number>}
   * @memberof RolePrivilegeMappingViewPage
   */
  navigationPages: Array<number>;
}
/**
 *
 * @export
 * @interface RolePrivilegeMappingViewPageApiResponse
 */
export interface RolePrivilegeMappingViewPageApiResponse {
  /**
   *
   * @type {string}
   * @memberof RolePrivilegeMappingViewPageApiResponse
   */
  handledId?: string | null;
  /**
   * http-200  0000: 代表處理成功，其餘一律為失敗  http-4xx  Vxxxx: 資料驗證  Bxxxx: 詳見 message 欄位說明
   * @type {string}
   * @memberof RolePrivilegeMappingViewPageApiResponse
   */
  code: string;
  /**
   * 回傳訊息
   * @type {string}
   * @memberof RolePrivilegeMappingViewPageApiResponse
   */
  message: string;
  /**
   * 錯誤詳細資訊
   * @type {any}
   * @memberof RolePrivilegeMappingViewPageApiResponse
   */
  detailMessage: any;
  /**
   *
   * @type {RolePrivilegeMappingViewPage}
   * @memberof RolePrivilegeMappingViewPageApiResponse
   */
  data: RolePrivilegeMappingViewPage;
  /**
   * 交易時間
   * @type {string}
   * @memberof RolePrivilegeMappingViewPageApiResponse
   */
  txnTime: string;
}
/**
 * one Account can have multiple roles
 * @export
 * @interface RoleUserMapping
 */
export interface RoleUserMapping {
  /**
   *
   * @type {string}
   * @memberof RoleUserMapping
   */
  id: string;
  /**
   *
   * @type {number}
   * @memberof RoleUserMapping
   */
  userId: number;
  /**
   *
   * @type {string}
   * @memberof RoleUserMapping
   */
  roleId: string;
  /**
   * ApiLog HandledId
   * @type {string}
   * @memberof RoleUserMapping
   */
  handledId?: string | null;
  /**
   * 建立日期
   * @type {string}
   * @memberof RoleUserMapping
   */
  dateCreate?: string;
  /**
   * 建立人員
   * @type {string}
   * @memberof RoleUserMapping
   */
  userCreate?: string | null;
  /**
   * 最後修改日期
   * @type {string}
   * @memberof RoleUserMapping
   */
  dateUpdate?: string | null;
  /**
   * 最後修改人員
   * @type {string}
   * @memberof RoleUserMapping
   */
  userUpdate?: string | null;
  /**
   *
   * @type {string}
   * @memberof RoleUserMapping
   */
  rowVersion?: string | null;
}
/**
 * one Account can have multiple roles
 * @export
 * @interface RoleUserMappingBase
 */
export interface RoleUserMappingBase {
  /**
   *
   * @type {string}
   * @memberof RoleUserMappingBase
   */
  id: string;
  /**
   *
   * @type {number}
   * @memberof RoleUserMappingBase
   */
  userId: number;
  /**
   *
   * @type {string}
   * @memberof RoleUserMappingBase
   */
  roleId: string;
}
/**
 * RoleUserMapping
 * @export
 * @interface RoleUserMappingView
 */
export interface RoleUserMappingView {
  /**
   *
   * @type {string}
   * @memberof RoleUserMappingView
   */
  handledId?: string | null;
  /**
   *
   * @type {string}
   * @memberof RoleUserMappingView
   */
  dateCreate?: string;
  /**
   *
   * @type {string}
   * @memberof RoleUserMappingView
   */
  userCreate?: string | null;
  /**
   *
   * @type {string}
   * @memberof RoleUserMappingView
   */
  dateUpdate?: string | null;
  /**
   *
   * @type {string}
   * @memberof RoleUserMappingView
   */
  userUpdate?: string | null;
  /**
   *
   * @type {string}
   * @memberof RoleUserMappingView
   */
  id: string;
  /**
   *
   * @type {number}
   * @memberof RoleUserMappingView
   */
  userId: number;
  /**
   *
   * @type {string}
   * @memberof RoleUserMappingView
   */
  roleId: string;
}
/**
 *
 * @export
 * @interface RoleUserMappingViewApiResponse
 */
export interface RoleUserMappingViewApiResponse {
  /**
   *
   * @type {string}
   * @memberof RoleUserMappingViewApiResponse
   */
  handledId?: string | null;
  /**
   * http-200  0000: 代表處理成功，其餘一律為失敗  http-4xx  Vxxxx: 資料驗證  Bxxxx: 詳見 message 欄位說明
   * @type {string}
   * @memberof RoleUserMappingViewApiResponse
   */
  code: string;
  /**
   * 回傳訊息
   * @type {string}
   * @memberof RoleUserMappingViewApiResponse
   */
  message: string;
  /**
   * 錯誤詳細資訊
   * @type {any}
   * @memberof RoleUserMappingViewApiResponse
   */
  detailMessage: any;
  /**
   *
   * @type {RoleUserMappingView}
   * @memberof RoleUserMappingViewApiResponse
   */
  data: RoleUserMappingView;
  /**
   * 交易時間
   * @type {string}
   * @memberof RoleUserMappingViewApiResponse
   */
  txnTime: string;
}
/**
 *
 * @export
 * @interface RoleUserMappingViewListApiResponse
 */
export interface RoleUserMappingViewListApiResponse {
  /**
   *
   * @type {string}
   * @memberof RoleUserMappingViewListApiResponse
   */
  handledId?: string | null;
  /**
   * http-200  0000: 代表處理成功，其餘一律為失敗  http-4xx  Vxxxx: 資料驗證  Bxxxx: 詳見 message 欄位說明
   * @type {string}
   * @memberof RoleUserMappingViewListApiResponse
   */
  code: string;
  /**
   * 回傳訊息
   * @type {string}
   * @memberof RoleUserMappingViewListApiResponse
   */
  message: string;
  /**
   * 錯誤詳細資訊
   * @type {any}
   * @memberof RoleUserMappingViewListApiResponse
   */
  detailMessage: any;
  /**
   * 回傳資料
   * @type {Array<RoleUserMappingView>}
   * @memberof RoleUserMappingViewListApiResponse
   */
  data: Array<RoleUserMappingView>;
  /**
   * 交易時間
   * @type {string}
   * @memberof RoleUserMappingViewListApiResponse
   */
  txnTime: string;
}
/**
 *
 * @export
 * @interface RoleUserMappingViewPage
 */
export interface RoleUserMappingViewPage {
  /**
   *
   * @type {number}
   * @memberof RoleUserMappingViewPage
   */
  totalCount: number;
  /**
   *
   * @type {number}
   * @memberof RoleUserMappingViewPage
   */
  pageCount: number;
  /**
   *
   * @type {number}
   * @memberof RoleUserMappingViewPage
   */
  currentPage: number;
  /**
   *
   * @type {number}
   * @memberof RoleUserMappingViewPage
   */
  size: number;
  /**
   *
   * @type {Array<RoleUserMappingView>}
   * @memberof RoleUserMappingViewPage
   */
  records: Array<RoleUserMappingView>;
  /**
   *
   * @type {number}
   * @memberof RoleUserMappingViewPage
   */
  pageSize: number;
  /**
   *
   * @type {boolean}
   * @memberof RoleUserMappingViewPage
   */
  hasPreviousPages: boolean;
  /**
   *
   * @type {boolean}
   * @memberof RoleUserMappingViewPage
   */
  hasNextPages: boolean;
  /**
   *
   * @type {number}
   * @memberof RoleUserMappingViewPage
   */
  previousLastPageNo: number;
  /**
   *
   * @type {number}
   * @memberof RoleUserMappingViewPage
   */
  nextStartPageNo: number;
  /**
   *
   * @type {Array<number>}
   * @memberof RoleUserMappingViewPage
   */
  navigationPages: Array<number>;
}
/**
 *
 * @export
 * @interface RoleUserMappingViewPageApiResponse
 */
export interface RoleUserMappingViewPageApiResponse {
  /**
   *
   * @type {string}
   * @memberof RoleUserMappingViewPageApiResponse
   */
  handledId?: string | null;
  /**
   * http-200  0000: 代表處理成功，其餘一律為失敗  http-4xx  Vxxxx: 資料驗證  Bxxxx: 詳見 message 欄位說明
   * @type {string}
   * @memberof RoleUserMappingViewPageApiResponse
   */
  code: string;
  /**
   * 回傳訊息
   * @type {string}
   * @memberof RoleUserMappingViewPageApiResponse
   */
  message: string;
  /**
   * 錯誤詳細資訊
   * @type {any}
   * @memberof RoleUserMappingViewPageApiResponse
   */
  detailMessage: any;
  /**
   *
   * @type {RoleUserMappingViewPage}
   * @memberof RoleUserMappingViewPageApiResponse
   */
  data: RoleUserMappingViewPage;
  /**
   * 交易時間
   * @type {string}
   * @memberof RoleUserMappingViewPageApiResponse
   */
  txnTime: string;
}
/**
 * Role
 * @export
 * @interface RoleView
 */
export interface RoleView {
  /**
   * Id
   * @type {string}
   * @memberof RoleView
   */
  id: string;
  /**
   *
   * @type {string}
   * @memberof RoleView
   */
  handledId?: string | null;
  /**
   *
   * @type {string}
   * @memberof RoleView
   */
  dateCreate?: string;
  /**
   *
   * @type {string}
   * @memberof RoleView
   */
  userCreate?: string | null;
  /**
   *
   * @type {string}
   * @memberof RoleView
   */
  dateUpdate?: string | null;
  /**
   *
   * @type {string}
   * @memberof RoleView
   */
  userUpdate?: string | null;
  /**
   * 角色名稱
   * @type {string}
   * @memberof RoleView
   */
  name: string;
  /**
   * 角色說明
   * @type {string}
   * @memberof RoleView
   */
  roleDescriptions: string;
  /**
   * 角色資料階層
   * @type {number}
   * @memberof RoleView
   */
  dataLevel: number;
}
/**
 *
 * @export
 * @interface RoleViewApiResponse
 */
export interface RoleViewApiResponse {
  /**
   *
   * @type {string}
   * @memberof RoleViewApiResponse
   */
  handledId?: string | null;
  /**
   * http-200  0000: 代表處理成功，其餘一律為失敗  http-4xx  Vxxxx: 資料驗證  Bxxxx: 詳見 message 欄位說明
   * @type {string}
   * @memberof RoleViewApiResponse
   */
  code: string;
  /**
   * 回傳訊息
   * @type {string}
   * @memberof RoleViewApiResponse
   */
  message: string;
  /**
   * 錯誤詳細資訊
   * @type {any}
   * @memberof RoleViewApiResponse
   */
  detailMessage: any;
  /**
   *
   * @type {RoleView}
   * @memberof RoleViewApiResponse
   */
  data: RoleView;
  /**
   * 交易時間
   * @type {string}
   * @memberof RoleViewApiResponse
   */
  txnTime: string;
}
/**
 *
 * @export
 * @interface RoleViewListApiResponse
 */
export interface RoleViewListApiResponse {
  /**
   *
   * @type {string}
   * @memberof RoleViewListApiResponse
   */
  handledId?: string | null;
  /**
   * http-200  0000: 代表處理成功，其餘一律為失敗  http-4xx  Vxxxx: 資料驗證  Bxxxx: 詳見 message 欄位說明
   * @type {string}
   * @memberof RoleViewListApiResponse
   */
  code: string;
  /**
   * 回傳訊息
   * @type {string}
   * @memberof RoleViewListApiResponse
   */
  message: string;
  /**
   * 錯誤詳細資訊
   * @type {any}
   * @memberof RoleViewListApiResponse
   */
  detailMessage: any;
  /**
   * 回傳資料
   * @type {Array<RoleView>}
   * @memberof RoleViewListApiResponse
   */
  data: Array<RoleView>;
  /**
   * 交易時間
   * @type {string}
   * @memberof RoleViewListApiResponse
   */
  txnTime: string;
}
/**
 *
 * @export
 * @interface RoleViewPage
 */
export interface RoleViewPage {
  /**
   *
   * @type {number}
   * @memberof RoleViewPage
   */
  totalCount: number;
  /**
   *
   * @type {number}
   * @memberof RoleViewPage
   */
  pageCount: number;
  /**
   *
   * @type {number}
   * @memberof RoleViewPage
   */
  currentPage: number;
  /**
   *
   * @type {number}
   * @memberof RoleViewPage
   */
  size: number;
  /**
   *
   * @type {Array<RoleView>}
   * @memberof RoleViewPage
   */
  records: Array<RoleView>;
  /**
   *
   * @type {number}
   * @memberof RoleViewPage
   */
  pageSize: number;
  /**
   *
   * @type {boolean}
   * @memberof RoleViewPage
   */
  hasPreviousPages: boolean;
  /**
   *
   * @type {boolean}
   * @memberof RoleViewPage
   */
  hasNextPages: boolean;
  /**
   *
   * @type {number}
   * @memberof RoleViewPage
   */
  previousLastPageNo: number;
  /**
   *
   * @type {number}
   * @memberof RoleViewPage
   */
  nextStartPageNo: number;
  /**
   *
   * @type {Array<number>}
   * @memberof RoleViewPage
   */
  navigationPages: Array<number>;
}
/**
 *
 * @export
 * @interface RoleViewPageApiResponse
 */
export interface RoleViewPageApiResponse {
  /**
   *
   * @type {string}
   * @memberof RoleViewPageApiResponse
   */
  handledId?: string | null;
  /**
   * http-200  0000: 代表處理成功，其餘一律為失敗  http-4xx  Vxxxx: 資料驗證  Bxxxx: 詳見 message 欄位說明
   * @type {string}
   * @memberof RoleViewPageApiResponse
   */
  code: string;
  /**
   * 回傳訊息
   * @type {string}
   * @memberof RoleViewPageApiResponse
   */
  message: string;
  /**
   * 錯誤詳細資訊
   * @type {any}
   * @memberof RoleViewPageApiResponse
   */
  detailMessage: any;
  /**
   *
   * @type {RoleViewPage}
   * @memberof RoleViewPageApiResponse
   */
  data: RoleViewPage;
  /**
   * 交易時間
   * @type {string}
   * @memberof RoleViewPageApiResponse
   */
  txnTime: string;
}
/**
 *
 * @export
 * @interface SendVerificationCodeRequest
 */
export interface SendVerificationCodeRequest {
  /**
   * Email 或 手機號碼
   * @type {string}
   * @memberof SendVerificationCodeRequest
   */
  account?: string | null;
  /**
   *
   * @type {PasswordResetType}
   * @memberof SendVerificationCodeRequest
   */
  resetType?: PasswordResetType;
}
/**
 * 尋找帳號結果
 * @export
 * @interface SendVerificationCodeResponse
 */
export interface SendVerificationCodeResponse {
  /**
   * 帳號
   * @type {string}
   * @memberof SendVerificationCodeResponse
   */
  token: string;
}
/**
 *
 * @export
 * @interface SendVerificationCodeResponseApiResponse
 */
export interface SendVerificationCodeResponseApiResponse {
  /**
   *
   * @type {string}
   * @memberof SendVerificationCodeResponseApiResponse
   */
  handledId?: string | null;
  /**
   * http-200  0000: 代表處理成功，其餘一律為失敗  http-4xx  Vxxxx: 資料驗證  Bxxxx: 詳見 message 欄位說明
   * @type {string}
   * @memberof SendVerificationCodeResponseApiResponse
   */
  code: string;
  /**
   * 回傳訊息
   * @type {string}
   * @memberof SendVerificationCodeResponseApiResponse
   */
  message: string;
  /**
   * 錯誤詳細資訊
   * @type {any}
   * @memberof SendVerificationCodeResponseApiResponse
   */
  detailMessage: any;
  /**
   *
   * @type {SendVerificationCodeResponse}
   * @memberof SendVerificationCodeResponseApiResponse
   */
  data: SendVerificationCodeResponse;
  /**
   * 交易時間
   * @type {string}
   * @memberof SendVerificationCodeResponseApiResponse
   */
  txnTime: string;
}
/**
 *
 * @export
 * @interface ShoppingCart
 */
export interface ShoppingCart {
  /**
   * id
   * @type {number}
   * @memberof ShoppingCart
   */
  id: number;
  /**
   * User.Id
   * @type {number}
   * @memberof ShoppingCart
   */
  userId: number;
  /**
   * 課程類別Course.Id
   * @type {number}
   * @memberof ShoppingCart
   */
  courseId: number;
  /**
   * 數量
   * @type {number}
   * @memberof ShoppingCart
   */
  count: number;
  /**
   * 出席狀態 對應SystemConfig內Type=ShoppingCartStatus 0:新增 1已轉入訂單 2:逾期課程清單(無法轉訂單) 3:數量不足
   * @type {string}
   * @memberof ShoppingCart
   */
  shoppingCartStatus: string;
  /**
   * 是否超過優惠日期後關閉對應type=IsYN顯示 namevalue存此欄0N1Yif1ThendataTimeCourse.DiscountSignUpDate關閉此選項
   * @type {string}
   * @memberof ShoppingCart
   */
  statusCd: string;
  /**
   * ApiLog HandledId
   * @type {string}
   * @memberof ShoppingCart
   */
  handledId?: string | null;
  /**
   * 建立日期
   * @type {string}
   * @memberof ShoppingCart
   */
  dateCreate?: string;
  /**
   * 建立人員
   * @type {string}
   * @memberof ShoppingCart
   */
  userCreate?: string | null;
  /**
   * 最後修改日期
   * @type {string}
   * @memberof ShoppingCart
   */
  dateUpdate?: string | null;
  /**
   * 最後修改人員
   * @type {string}
   * @memberof ShoppingCart
   */
  userUpdate?: string | null;
  /**
   *
   * @type {string}
   * @memberof ShoppingCart
   */
  rowVersion?: string | null;
}
/**
 *
 * @export
 * @interface ShoppingCartBase
 */
export interface ShoppingCartBase {
  /**
   * id
   * @type {number}
   * @memberof ShoppingCartBase
   */
  id: number;
  /**
   * User.Id
   * @type {number}
   * @memberof ShoppingCartBase
   */
  userId: number;
  /**
   * 課程類別Course.Id
   * @type {number}
   * @memberof ShoppingCartBase
   */
  courseId: number;
  /**
   * 數量
   * @type {number}
   * @memberof ShoppingCartBase
   */
  count: number;
  /**
   * 出席狀態 對應SystemConfig內Type=ShoppingCartStatus 0:新增 1已轉入訂單 2:逾期課程清單(無法轉訂單) 3:數量不足
   * @type {string}
   * @memberof ShoppingCartBase
   */
  shoppingCartStatus: string;
}
/**
 * ShoppingCart
 * @export
 * @interface ShoppingCartView
 */
export interface ShoppingCartView {
  /**
   *
   * @type {string}
   * @memberof ShoppingCartView
   */
  handledId?: string | null;
  /**
   *
   * @type {string}
   * @memberof ShoppingCartView
   */
  dateCreate?: string;
  /**
   *
   * @type {string}
   * @memberof ShoppingCartView
   */
  userCreate?: string | null;
  /**
   *
   * @type {string}
   * @memberof ShoppingCartView
   */
  dateUpdate?: string | null;
  /**
   *
   * @type {string}
   * @memberof ShoppingCartView
   */
  userUpdate?: string | null;
  /**
   * id
   * @type {number}
   * @memberof ShoppingCartView
   */
  id: number;
  /**
   * User.Id
   * @type {number}
   * @memberof ShoppingCartView
   */
  userId: number;
  /**
   * 課程類別Course.Id
   * @type {number}
   * @memberof ShoppingCartView
   */
  courseId: number;
  /**
   * 數量
   * @type {number}
   * @memberof ShoppingCartView
   */
  count: number;
  /**
   * 出席狀態 對應SystemConfig內Type=ShoppingCartStatus 0:新增 1已轉入訂單 2:逾期課程清單(無法轉訂單) 3:數量不足
   * @type {string}
   * @memberof ShoppingCartView
   */
  shoppingCartStatus: string;
}
/**
 *
 * @export
 * @interface ShoppingCartViewApiResponse
 */
export interface ShoppingCartViewApiResponse {
  /**
   *
   * @type {string}
   * @memberof ShoppingCartViewApiResponse
   */
  handledId?: string | null;
  /**
   * http-200  0000: 代表處理成功，其餘一律為失敗  http-4xx  Vxxxx: 資料驗證  Bxxxx: 詳見 message 欄位說明
   * @type {string}
   * @memberof ShoppingCartViewApiResponse
   */
  code: string;
  /**
   * 回傳訊息
   * @type {string}
   * @memberof ShoppingCartViewApiResponse
   */
  message: string;
  /**
   * 錯誤詳細資訊
   * @type {any}
   * @memberof ShoppingCartViewApiResponse
   */
  detailMessage: any;
  /**
   *
   * @type {ShoppingCartView}
   * @memberof ShoppingCartViewApiResponse
   */
  data: ShoppingCartView;
  /**
   * 交易時間
   * @type {string}
   * @memberof ShoppingCartViewApiResponse
   */
  txnTime: string;
}
/**
 *
 * @export
 * @interface ShoppingCartViewListApiResponse
 */
export interface ShoppingCartViewListApiResponse {
  /**
   *
   * @type {string}
   * @memberof ShoppingCartViewListApiResponse
   */
  handledId?: string | null;
  /**
   * http-200  0000: 代表處理成功，其餘一律為失敗  http-4xx  Vxxxx: 資料驗證  Bxxxx: 詳見 message 欄位說明
   * @type {string}
   * @memberof ShoppingCartViewListApiResponse
   */
  code: string;
  /**
   * 回傳訊息
   * @type {string}
   * @memberof ShoppingCartViewListApiResponse
   */
  message: string;
  /**
   * 錯誤詳細資訊
   * @type {any}
   * @memberof ShoppingCartViewListApiResponse
   */
  detailMessage: any;
  /**
   * 回傳資料
   * @type {Array<ShoppingCartView>}
   * @memberof ShoppingCartViewListApiResponse
   */
  data: Array<ShoppingCartView>;
  /**
   * 交易時間
   * @type {string}
   * @memberof ShoppingCartViewListApiResponse
   */
  txnTime: string;
}
/**
 *
 * @export
 * @interface ShoppingCartViewPage
 */
export interface ShoppingCartViewPage {
  /**
   *
   * @type {number}
   * @memberof ShoppingCartViewPage
   */
  totalCount: number;
  /**
   *
   * @type {number}
   * @memberof ShoppingCartViewPage
   */
  pageCount: number;
  /**
   *
   * @type {number}
   * @memberof ShoppingCartViewPage
   */
  currentPage: number;
  /**
   *
   * @type {number}
   * @memberof ShoppingCartViewPage
   */
  size: number;
  /**
   *
   * @type {Array<ShoppingCartView>}
   * @memberof ShoppingCartViewPage
   */
  records: Array<ShoppingCartView>;
  /**
   *
   * @type {number}
   * @memberof ShoppingCartViewPage
   */
  pageSize: number;
  /**
   *
   * @type {boolean}
   * @memberof ShoppingCartViewPage
   */
  hasPreviousPages: boolean;
  /**
   *
   * @type {boolean}
   * @memberof ShoppingCartViewPage
   */
  hasNextPages: boolean;
  /**
   *
   * @type {number}
   * @memberof ShoppingCartViewPage
   */
  previousLastPageNo: number;
  /**
   *
   * @type {number}
   * @memberof ShoppingCartViewPage
   */
  nextStartPageNo: number;
  /**
   *
   * @type {Array<number>}
   * @memberof ShoppingCartViewPage
   */
  navigationPages: Array<number>;
}
/**
 *
 * @export
 * @interface ShoppingCartViewPageApiResponse
 */
export interface ShoppingCartViewPageApiResponse {
  /**
   *
   * @type {string}
   * @memberof ShoppingCartViewPageApiResponse
   */
  handledId?: string | null;
  /**
   * http-200  0000: 代表處理成功，其餘一律為失敗  http-4xx  Vxxxx: 資料驗證  Bxxxx: 詳見 message 欄位說明
   * @type {string}
   * @memberof ShoppingCartViewPageApiResponse
   */
  code: string;
  /**
   * 回傳訊息
   * @type {string}
   * @memberof ShoppingCartViewPageApiResponse
   */
  message: string;
  /**
   * 錯誤詳細資訊
   * @type {any}
   * @memberof ShoppingCartViewPageApiResponse
   */
  detailMessage: any;
  /**
   *
   * @type {ShoppingCartViewPage}
   * @memberof ShoppingCartViewPageApiResponse
   */
  data: ShoppingCartViewPage;
  /**
   * 交易時間
   * @type {string}
   * @memberof ShoppingCartViewPageApiResponse
   */
  txnTime: string;
}
/**
 *
 * @export
 * @interface ShoppingOrder
 */
export interface ShoppingOrder {
  /**
   * 訂單主檔Id
   * @type {number}
   * @memberof ShoppingOrder
   */
  id: number;
  /**
   * User.Id
   * @type {number}
   * @memberof ShoppingOrder
   */
  userId: number;
  /**
   * 訂單總金額
   * @type {number}
   * @memberof ShoppingOrder
   */
  totalAmount: number;
  /**
   * 付款總金額
   * @type {number}
   * @memberof ShoppingOrder
   */
  paymentAmount: number;
  /**
   * 退款總金額
   * @type {number}
   * @memberof ShoppingOrder
   */
  refundAmount: number;
  /**
   * 出席狀態 對應SystemConfig內Type=OrderStatus 0:尚未付款 1已付款 2:款項確認 3:異常
   * @type {string}
   * @memberof ShoppingOrder
   */
  orderPayStatus: string;
  /**
   * 付款交易序號
   * @type {string}
   * @memberof ShoppingOrder
   */
  paymentTransactionNo: string;
  /**
   * 付款交易時間
   * @type {string}
   * @memberof ShoppingOrder
   */
  paymentTransactionDate: string;
  /**
   * 付款備註
   * @type {string}
   * @memberof ShoppingOrder
   */
  paymentTransactionDescription: string;
  /**
   * 付款方式 對應SystemConfig內Type=PaymentType 0:臨櫃現金 1:ATM 2:刷卡 3:其他
   * @type {string}
   * @memberof ShoppingOrder
   */
  paymentType: string;
  /**
   * 退款交易序號
   * @type {string}
   * @memberof ShoppingOrder
   */
  refundTransactionNo: string;
  /**
   * 退款交易時間
   * @type {string}
   * @memberof ShoppingOrder
   */
  refundTransactionDate: string;
  /**
   * 退款方式 對應SystemConfig內Type=PaymentType 0:臨櫃現金 1:ATM 2:刷退 3:其他
   * @type {string}
   * @memberof ShoppingOrder
   */
  refundType: string;
  /**
   * 退款備註
   * @type {string}
   * @memberof ShoppingOrder
   */
  refundDescription: string;
  /**
   * 出席狀態 對應SystemConfig內Type=OrderStatus 0:訂單成立(待付款)1:訂單對帳2:訂單已確認3:訂單已結案4:訂單取消申請5:訂單取消審核中6:訂單取消已確認7:訂單取消已駁回8:訂單取消退款中9:訂單取消已退款
   * @type {string}
   * @memberof ShoppingOrder
   */
  orderStatus: string;
  /**
   * 電子收據
   * @type {string}
   * @memberof ShoppingOrder
   */
  receipt: string;
  /**
   * 實收金額
   * @type {number}
   * @memberof ShoppingOrder
   */
  actuallyAmount: number;
  /**
   * 收款人員 對應user.Id
   * @type {number}
   * @memberof ShoppingOrder
   */
  receiveUserId: number;
  /**
   *
   * @type {string}
   * @memberof ShoppingOrder
   */
  statusCd: string;
  /**
   * 訂購人資料-姓名
   * @type {string}
   * @memberof ShoppingOrder
   */
  userName: string;
  /**
   * 訂購人資料-通信地址
   * @type {string}
   * @memberof ShoppingOrder
   */
  userAddress: string;
  /**
   * 訂購人資料-行動電話
   * @type {string}
   * @memberof ShoppingOrder
   */
  userCellPhone: string;
  /**
   * 訂購人資料-聯絡電話
   * @type {string}
   * @memberof ShoppingOrder
   */
  userPhone: string;
  /**
   * 訂購人資料-Email
   * @type {string}
   * @memberof ShoppingOrder
   */
  userEmail: string;
  /**
   * ApiLog HandledId
   * @type {string}
   * @memberof ShoppingOrder
   */
  handledId?: string | null;
  /**
   * 建立日期
   * @type {string}
   * @memberof ShoppingOrder
   */
  dateCreate?: string;
  /**
   * 建立人員
   * @type {string}
   * @memberof ShoppingOrder
   */
  userCreate?: string | null;
  /**
   * 最後修改日期
   * @type {string}
   * @memberof ShoppingOrder
   */
  dateUpdate?: string | null;
  /**
   * 最後修改人員
   * @type {string}
   * @memberof ShoppingOrder
   */
  userUpdate?: string | null;
  /**
   *
   * @type {string}
   * @memberof ShoppingOrder
   */
  rowVersion?: string | null;
}
/**
 *
 * @export
 * @interface ShoppingOrderBase
 */
export interface ShoppingOrderBase {
  /**
   * 訂單主檔Id
   * @type {number}
   * @memberof ShoppingOrderBase
   */
  id: number;
  /**
   * User.Id
   * @type {number}
   * @memberof ShoppingOrderBase
   */
  userId: number;
  /**
   * 訂單總金額
   * @type {number}
   * @memberof ShoppingOrderBase
   */
  totalAmount: number;
  /**
   * 付款總金額
   * @type {number}
   * @memberof ShoppingOrderBase
   */
  paymentAmount: number;
  /**
   * 退款總金額
   * @type {number}
   * @memberof ShoppingOrderBase
   */
  refundAmount: number;
  /**
   * 出席狀態 對應SystemConfig內Type=OrderStatus 0:尚未付款 1已付款 2:款項確認 3:異常 4：訂單逾期取消付款
   * @type {string}
   * @memberof ShoppingOrderBase
   */
  orderPayStatus: string;
  /**
   * 付款交易序號
   * @type {string}
   * @memberof ShoppingOrderBase
   */
  paymentTransactionNo: string;
  /**
   * 付款交易時間
   * @type {string}
   * @memberof ShoppingOrderBase
   */
  paymentTransactionDate: string;
  /**
   * 付款備註
   * @type {string}
   * @memberof ShoppingOrderBase
   */
  paymentTransactionDescription: string;
  /**
   * 付款方式 對應SystemConfig內Type=PaymentType 0:臨櫃現金 1:ATM 2:刷卡 3:其他
   * @type {string}
   * @memberof ShoppingOrderBase
   */
  paymentType: string;
  /**
   * 退款交易序號
   * @type {string}
   * @memberof ShoppingOrderBase
   */
  refundTransactionNo: string;
  /**
   * 退款交易時間
   * @type {string}
   * @memberof ShoppingOrderBase
   */
  refundTransactionDate: string;
  /**
   * 退款方式 對應SystemConfig內Type=PaymentType 0:臨櫃現金 1:ATM 2:刷退 3:其他
   * @type {string}
   * @memberof ShoppingOrderBase
   */
  refundType: string;
  /**
   * 退款備註
   * @type {string}
   * @memberof ShoppingOrderBase
   */
  refundDescription: string;
  /**
   * 出席狀態 對應SystemConfig內Type=OrderStatus 0:訂單成立(待付款)1:訂單對帳2:訂單已確認3:訂單已結案4:訂單取消申請5:訂單取消審核中6:訂單取消已確認7:訂單取消已駁回8:訂單取消退款中9:訂單取消已退款
   * @type {string}
   * @memberof ShoppingOrderBase
   */
  orderStatus: string;
  /**
   * 電子收據
   * @type {string}
   * @memberof ShoppingOrderBase
   */
  receipt: string;
  /**
   * 實收金額
   * @type {number}
   * @memberof ShoppingOrderBase
   */
  actuallyAmount: number;
  /**
   * 收款人員 對應user.Id
   * @type {number}
   * @memberof ShoppingOrderBase
   */
  receiveUserId: number;
  /**
   * 訂購人資料-姓名
   * @type {string}
   * @memberof ShoppingOrderBase
   */
  userName: string;
  /**
   * 訂購人資料-通信地址
   * @type {string}
   * @memberof ShoppingOrderBase
   */
  userAddress: string;
  /**
   * 訂購人資料-行動電話
   * @type {string}
   * @memberof ShoppingOrderBase
   */
  userCellPhone: string;
  /**
   * 訂購人資料-聯絡電話
   * @type {string}
   * @memberof ShoppingOrderBase
   */
  userPhone: string;
  /**
   * 訂購人資料-Email
   * @type {string}
   * @memberof ShoppingOrderBase
   */
  userEmail: string;
}
/**
 *
 * @export
 * @interface ShoppingOrderDetail
 */
export interface ShoppingOrderDetail {
  /**
   * 訂單明細主檔Id
   * @type {number}
   * @memberof ShoppingOrderDetail
   */
  id: number;
  /**
   * ShoppingOrder.Id
   * @type {number}
   * @memberof ShoppingOrderDetail
   */
  shoppingOrderId: number;
  /**
   * Course.Id 課程Id
   * @type {number}
   * @memberof ShoppingOrderDetail
   */
  courseId: number;
  /**
   * 單價
   * @type {number}
   * @memberof ShoppingOrderDetail
   */
  price: number;
  /**
   * 購買數量
   * @type {number}
   * @memberof ShoppingOrderDetail
   */
  count: number;
  /**
   * 總金額
   * @type {number}
   * @memberof ShoppingOrderDetail
   */
  amount: number;
  /**
   * 付款方式 對應SystemConfig內Type=OrderDetailStatus 0:尚未付款 1:已付款 2:付款完成 3:退款申請 4:退款完成 5：逾期未付款
   * @type {string}
   * @memberof ShoppingOrderDetail
   */
  orderDetailStatus: string;
  /**
   *
   * @type {string}
   * @memberof ShoppingOrderDetail
   */
  statusCd: string;
  /**
   * 是否素食 SystemConfig內Type=IsYN 0:否 1:是
   * @type {string}
   * @memberof ShoppingOrderDetail
   */
  isViggieHelp: string;
  /**
   * 是否行動不便 SystemConfig內Type=IsYN 0:否 1:是
   * @type {string}
   * @memberof ShoppingOrderDetail
   */
  isMoveHelp: string;
  /**
   * 是否懷孕 SystemConfig內Type=IsYN 0:否 1:是
   * @type {string}
   * @memberof ShoppingOrderDetail
   */
  isPregnancyHelp: string;
  /**
   * 是否其他需要幫助 SystemConfig內Type=IsYN 0:否 1:是
   * @type {string}
   * @memberof ShoppingOrderDetail
   */
  isOthersHelp: string;
  /**
   * 其他需要幫助說明
   * @type {string}
   * @memberof ShoppingOrderDetail
   */
  isOthersHelpInformations: string;
  /**
   * 是否同班夫妻幫助 SystemConfig內Type=IsYN 0:否 1:是
   * @type {string}
   * @memberof ShoppingOrderDetail
   */
  isCoupleSameClassHelp: string;
  /**
   * 同班夫妻配偶姓名
   * @type {string}
   * @memberof ShoppingOrderDetail
   */
  isCoupleSameClassInformations: string;
  /**
   * ApiLog HandledId
   * @type {string}
   * @memberof ShoppingOrderDetail
   */
  handledId?: string | null;
  /**
   * 建立日期
   * @type {string}
   * @memberof ShoppingOrderDetail
   */
  dateCreate?: string;
  /**
   * 建立人員
   * @type {string}
   * @memberof ShoppingOrderDetail
   */
  userCreate?: string | null;
  /**
   * 最後修改日期
   * @type {string}
   * @memberof ShoppingOrderDetail
   */
  dateUpdate?: string | null;
  /**
   * 最後修改人員
   * @type {string}
   * @memberof ShoppingOrderDetail
   */
  userUpdate?: string | null;
  /**
   *
   * @type {string}
   * @memberof ShoppingOrderDetail
   */
  rowVersion?: string | null;
}
/**
 *
 * @export
 * @interface ShoppingOrderDetailBase
 */
export interface ShoppingOrderDetailBase {
  /**
   * 訂單明細主檔Id
   * @type {number}
   * @memberof ShoppingOrderDetailBase
   */
  id: number;
  /**
   * ShoppingOrder.Id
   * @type {number}
   * @memberof ShoppingOrderDetailBase
   */
  shoppingOrderId: number;
  /**
   * Course.Id 課程Id
   * @type {number}
   * @memberof ShoppingOrderDetailBase
   */
  courseId: number;
  /**
   * 單價
   * @type {number}
   * @memberof ShoppingOrderDetailBase
   */
  price: number;
  /**
   * 購買數量
   * @type {number}
   * @memberof ShoppingOrderDetailBase
   */
  count: number;
  /**
   * 總金額
   * @type {number}
   * @memberof ShoppingOrderDetailBase
   */
  amount: number;
  /**
   * 付款方式 對應SystemConfig內Type=OrderDetailStatus 0:尚未付款 1:已付款 2:付款完成 3:退款申請 4:退款完成
   * @type {string}
   * @memberof ShoppingOrderDetailBase
   */
  orderDetailStatus: string;
  /**
   * 是否素食 SystemConfig內Type=IsYN 0:否 1:是
   * @type {string}
   * @memberof ShoppingOrderDetailBase
   */
  isViggieHelp: string;
  /**
   * 是否行動不便 SystemConfig內Type=IsYN 0:否 1:是
   * @type {string}
   * @memberof ShoppingOrderDetailBase
   */
  isMoveHelp: string;
  /**
   * 是否懷孕 SystemConfig內Type=IsYN 0:否 1:是
   * @type {string}
   * @memberof ShoppingOrderDetailBase
   */
  isPregnancyHelp: string;
  /**
   * 是否其他需要幫助 SystemConfig內Type=IsYN 0:否 1:是
   * @type {string}
   * @memberof ShoppingOrderDetailBase
   */
  isOthersHelp: string;
  /**
   * 其他需要幫助說明
   * @type {string}
   * @memberof ShoppingOrderDetailBase
   */
  isOthersHelpInformations: string;
  /**
   * 是否同班夫妻幫助 SystemConfig內Type=IsYN 0:否 1:是
   * @type {string}
   * @memberof ShoppingOrderDetailBase
   */
  isCoupleSameClassHelp: string;
  /**
   * 同班夫妻配偶姓名
   * @type {string}
   * @memberof ShoppingOrderDetailBase
   */
  isCoupleSameClassInformations: string;
}
/**
 * ShoppingOrderDetail
 * @export
 * @interface ShoppingOrderDetailView
 */
export interface ShoppingOrderDetailView {
  /**
   *
   * @type {Array<CourseView>}
   * @memberof ShoppingOrderDetailView
   */
  courseViews: Array<CourseView>;
  /**
   *
   * @type {string}
   * @memberof ShoppingOrderDetailView
   */
  handledId?: string | null;
  /**
   *
   * @type {string}
   * @memberof ShoppingOrderDetailView
   */
  dateCreate?: string;
  /**
   *
   * @type {string}
   * @memberof ShoppingOrderDetailView
   */
  userCreate?: string | null;
  /**
   *
   * @type {string}
   * @memberof ShoppingOrderDetailView
   */
  dateUpdate?: string | null;
  /**
   *
   * @type {string}
   * @memberof ShoppingOrderDetailView
   */
  userUpdate?: string | null;
  /**
   * 訂單明細主檔Id
   * @type {number}
   * @memberof ShoppingOrderDetailView
   */
  id: number;
  /**
   * ShoppingOrder.Id
   * @type {number}
   * @memberof ShoppingOrderDetailView
   */
  shoppingOrderId: number;
  /**
   * Course.Id 課程Id
   * @type {number}
   * @memberof ShoppingOrderDetailView
   */
  courseId: number;
  /**
   * 單價
   * @type {number}
   * @memberof ShoppingOrderDetailView
   */
  price: number;
  /**
   * 購買數量
   * @type {number}
   * @memberof ShoppingOrderDetailView
   */
  count: number;
  /**
   * 總金額
   * @type {number}
   * @memberof ShoppingOrderDetailView
   */
  amount: number;
  /**
   * 付款方式 對應SystemConfig內Type=OrderDetailStatus 0:尚未付款 1:已付款 2:付款完成 3:退款申請 4:退款完成
   * @type {string}
   * @memberof ShoppingOrderDetailView
   */
  orderDetailStatus: string;
  /**
   * 是否素食 SystemConfig內Type=IsYN 0:否 1:是
   * @type {string}
   * @memberof ShoppingOrderDetailView
   */
  isViggieHelp: string;
  /**
   * 是否行動不便 SystemConfig內Type=IsYN 0:否 1:是
   * @type {string}
   * @memberof ShoppingOrderDetailView
   */
  isMoveHelp: string;
  /**
   * 是否懷孕 SystemConfig內Type=IsYN 0:否 1:是
   * @type {string}
   * @memberof ShoppingOrderDetailView
   */
  isPregnancyHelp: string;
  /**
   * 是否其他需要幫助 SystemConfig內Type=IsYN 0:否 1:是
   * @type {string}
   * @memberof ShoppingOrderDetailView
   */
  isOthersHelp: string;
  /**
   * 其他需要幫助說明
   * @type {string}
   * @memberof ShoppingOrderDetailView
   */
  isOthersHelpInformations: string;
  /**
   * 是否同班夫妻幫助 SystemConfig內Type=IsYN 0:否 1:是
   * @type {string}
   * @memberof ShoppingOrderDetailView
   */
  isCoupleSameClassHelp: string;
  /**
   * 同班夫妻配偶姓名
   * @type {string}
   * @memberof ShoppingOrderDetailView
   */
  isCoupleSameClassInformations: string;
}
/**
 *
 * @export
 * @interface ShoppingOrderDetailViewApiResponse
 */
export interface ShoppingOrderDetailViewApiResponse {
  /**
   *
   * @type {string}
   * @memberof ShoppingOrderDetailViewApiResponse
   */
  handledId?: string | null;
  /**
   * http-200  0000: 代表處理成功，其餘一律為失敗  http-4xx  Vxxxx: 資料驗證  Bxxxx: 詳見 message 欄位說明
   * @type {string}
   * @memberof ShoppingOrderDetailViewApiResponse
   */
  code: string;
  /**
   * 回傳訊息
   * @type {string}
   * @memberof ShoppingOrderDetailViewApiResponse
   */
  message: string;
  /**
   * 錯誤詳細資訊
   * @type {any}
   * @memberof ShoppingOrderDetailViewApiResponse
   */
  detailMessage: any;
  /**
   *
   * @type {ShoppingOrderDetailView}
   * @memberof ShoppingOrderDetailViewApiResponse
   */
  data: ShoppingOrderDetailView;
  /**
   * 交易時間
   * @type {string}
   * @memberof ShoppingOrderDetailViewApiResponse
   */
  txnTime: string;
}
/**
 *
 * @export
 * @interface ShoppingOrderDetailViewListApiResponse
 */
export interface ShoppingOrderDetailViewListApiResponse {
  /**
   *
   * @type {string}
   * @memberof ShoppingOrderDetailViewListApiResponse
   */
  handledId?: string | null;
  /**
   * http-200  0000: 代表處理成功，其餘一律為失敗  http-4xx  Vxxxx: 資料驗證  Bxxxx: 詳見 message 欄位說明
   * @type {string}
   * @memberof ShoppingOrderDetailViewListApiResponse
   */
  code: string;
  /**
   * 回傳訊息
   * @type {string}
   * @memberof ShoppingOrderDetailViewListApiResponse
   */
  message: string;
  /**
   * 錯誤詳細資訊
   * @type {any}
   * @memberof ShoppingOrderDetailViewListApiResponse
   */
  detailMessage: any;
  /**
   * 回傳資料
   * @type {Array<ShoppingOrderDetailView>}
   * @memberof ShoppingOrderDetailViewListApiResponse
   */
  data: Array<ShoppingOrderDetailView>;
  /**
   * 交易時間
   * @type {string}
   * @memberof ShoppingOrderDetailViewListApiResponse
   */
  txnTime: string;
}
/**
 *
 * @export
 * @interface ShoppingOrderDetailViewPage
 */
export interface ShoppingOrderDetailViewPage {
  /**
   *
   * @type {number}
   * @memberof ShoppingOrderDetailViewPage
   */
  totalCount: number;
  /**
   *
   * @type {number}
   * @memberof ShoppingOrderDetailViewPage
   */
  pageCount: number;
  /**
   *
   * @type {number}
   * @memberof ShoppingOrderDetailViewPage
   */
  currentPage: number;
  /**
   *
   * @type {number}
   * @memberof ShoppingOrderDetailViewPage
   */
  size: number;
  /**
   *
   * @type {Array<ShoppingOrderDetailView>}
   * @memberof ShoppingOrderDetailViewPage
   */
  records: Array<ShoppingOrderDetailView>;
  /**
   *
   * @type {number}
   * @memberof ShoppingOrderDetailViewPage
   */
  pageSize: number;
  /**
   *
   * @type {boolean}
   * @memberof ShoppingOrderDetailViewPage
   */
  hasPreviousPages: boolean;
  /**
   *
   * @type {boolean}
   * @memberof ShoppingOrderDetailViewPage
   */
  hasNextPages: boolean;
  /**
   *
   * @type {number}
   * @memberof ShoppingOrderDetailViewPage
   */
  previousLastPageNo: number;
  /**
   *
   * @type {number}
   * @memberof ShoppingOrderDetailViewPage
   */
  nextStartPageNo: number;
  /**
   *
   * @type {Array<number>}
   * @memberof ShoppingOrderDetailViewPage
   */
  navigationPages: Array<number>;
}
/**
 *
 * @export
 * @interface ShoppingOrderDetailViewPageApiResponse
 */
export interface ShoppingOrderDetailViewPageApiResponse {
  /**
   *
   * @type {string}
   * @memberof ShoppingOrderDetailViewPageApiResponse
   */
  handledId?: string | null;
  /**
   * http-200  0000: 代表處理成功，其餘一律為失敗  http-4xx  Vxxxx: 資料驗證  Bxxxx: 詳見 message 欄位說明
   * @type {string}
   * @memberof ShoppingOrderDetailViewPageApiResponse
   */
  code: string;
  /**
   * 回傳訊息
   * @type {string}
   * @memberof ShoppingOrderDetailViewPageApiResponse
   */
  message: string;
  /**
   * 錯誤詳細資訊
   * @type {any}
   * @memberof ShoppingOrderDetailViewPageApiResponse
   */
  detailMessage: any;
  /**
   *
   * @type {ShoppingOrderDetailViewPage}
   * @memberof ShoppingOrderDetailViewPageApiResponse
   */
  data: ShoppingOrderDetailViewPage;
  /**
   * 交易時間
   * @type {string}
   * @memberof ShoppingOrderDetailViewPageApiResponse
   */
  txnTime: string;
}
/**
 * ShoppingOrder
 * @export
 * @interface ShoppingOrderView
 */
export interface ShoppingOrderView {
  /**
   * ShoppingOrderDetailView
   * @type {Array<ShoppingOrderDetailView>}
   * @memberof ShoppingOrderView
   */
  shoppingOrderDetailViews: Array<ShoppingOrderDetailView>;
  /**
   *
   * @type {string}
   * @memberof ShoppingOrderView
   */
  handledId?: string | null;
  /**
   *
   * @type {string}
   * @memberof ShoppingOrderView
   */
  dateCreate?: string;
  /**
   *
   * @type {string}
   * @memberof ShoppingOrderView
   */
  userCreate?: string | null;
  /**
   *
   * @type {string}
   * @memberof ShoppingOrderView
   */
  dateUpdate?: string | null;
  /**
   *
   * @type {string}
   * @memberof ShoppingOrderView
   */
  userUpdate?: string | null;
  /**
   * 訂單主檔Id
   * @type {number}
   * @memberof ShoppingOrderView
   */
  id: number;
  /**
   * User.Id
   * @type {number}
   * @memberof ShoppingOrderView
   */
  userId: number;
  /**
   * 訂單總金額
   * @type {number}
   * @memberof ShoppingOrderView
   */
  totalAmount: number;
  /**
   * 付款總金額
   * @type {number}
   * @memberof ShoppingOrderView
   */
  paymentAmount: number;
  /**
   * 退款總金額
   * @type {number}
   * @memberof ShoppingOrderView
   */
  refundAmount: number;
  /**
   * 出席狀態 對應SystemConfig內Type=OrderStatus 0:尚未付款 1已付款 2:款項確認 3:異常 4：訂單逾期取消付款
   * @type {string}
   * @memberof ShoppingOrderView
   */
  orderPayStatus: string;
  /**
   * 付款交易序號
   * @type {string}
   * @memberof ShoppingOrderView
   */
  paymentTransactionNo: string;
  /**
   * 付款交易時間
   * @type {string}
   * @memberof ShoppingOrderView
   */
  paymentTransactionDate: string;
  /**
   * 付款備註
   * @type {string}
   * @memberof ShoppingOrderView
   */
  paymentTransactionDescription: string;
  /**
   * 付款方式 對應SystemConfig內Type=PaymentType 0:臨櫃現金 1:ATM 2:刷卡 3:其他
   * @type {string}
   * @memberof ShoppingOrderView
   */
  paymentType: string;
  /**
   * 退款交易序號
   * @type {string}
   * @memberof ShoppingOrderView
   */
  refundTransactionNo: string;
  /**
   * 退款交易時間
   * @type {string}
   * @memberof ShoppingOrderView
   */
  refundTransactionDate: string;
  /**
   * 退款方式 對應SystemConfig內Type=PaymentType 0:臨櫃現金 1:ATM 2:刷退 3:其他
   * @type {string}
   * @memberof ShoppingOrderView
   */
  refundType: string;
  /**
   * 退款備註
   * @type {string}
   * @memberof ShoppingOrderView
   */
  refundDescription: string;
  /**
   * 出席狀態 對應SystemConfig內Type=OrderStatus 0:訂單成立(待付款)1:訂單對帳2:訂單已確認3:訂單已結案4:訂單取消申請5:訂單取消審核中6:訂單取消已確認7:訂單取消已駁回8:訂單取消退款中9:訂單取消已退款
   * @type {string}
   * @memberof ShoppingOrderView
   */
  orderStatus: string;
  /**
   * 電子收據
   * @type {string}
   * @memberof ShoppingOrderView
   */
  receipt: string;
  /**
   * 實收金額
   * @type {number}
   * @memberof ShoppingOrderView
   */
  actuallyAmount: number;
  /**
   * 收款人員 對應user.Id
   * @type {number}
   * @memberof ShoppingOrderView
   */
  receiveUserId: number;
  /**
   * 訂購人資料-姓名
   * @type {string}
   * @memberof ShoppingOrderView
   */
  userName: string;
  /**
   * 訂購人資料-通信地址
   * @type {string}
   * @memberof ShoppingOrderView
   */
  userAddress: string;
  /**
   * 訂購人資料-行動電話
   * @type {string}
   * @memberof ShoppingOrderView
   */
  userCellPhone: string;
  /**
   * 訂購人資料-聯絡電話
   * @type {string}
   * @memberof ShoppingOrderView
   */
  userPhone: string;
  /**
   * 訂購人資料-Email
   * @type {string}
   * @memberof ShoppingOrderView
   */
  userEmail: string;
}
/**
 *
 * @export
 * @interface ShoppingOrderViewApiResponse
 */
export interface ShoppingOrderViewApiResponse {
  /**
   *
   * @type {string}
   * @memberof ShoppingOrderViewApiResponse
   */
  handledId?: string | null;
  /**
   * http-200  0000: 代表處理成功，其餘一律為失敗  http-4xx  Vxxxx: 資料驗證  Bxxxx: 詳見 message 欄位說明
   * @type {string}
   * @memberof ShoppingOrderViewApiResponse
   */
  code: string;
  /**
   * 回傳訊息
   * @type {string}
   * @memberof ShoppingOrderViewApiResponse
   */
  message: string;
  /**
   * 錯誤詳細資訊
   * @type {any}
   * @memberof ShoppingOrderViewApiResponse
   */
  detailMessage: any;
  /**
   *
   * @type {ShoppingOrderView}
   * @memberof ShoppingOrderViewApiResponse
   */
  data: ShoppingOrderView;
  /**
   * 交易時間
   * @type {string}
   * @memberof ShoppingOrderViewApiResponse
   */
  txnTime: string;
}
/**
 *
 * @export
 * @interface ShoppingOrderViewListApiResponse
 */
export interface ShoppingOrderViewListApiResponse {
  /**
   *
   * @type {string}
   * @memberof ShoppingOrderViewListApiResponse
   */
  handledId?: string | null;
  /**
   * http-200  0000: 代表處理成功，其餘一律為失敗  http-4xx  Vxxxx: 資料驗證  Bxxxx: 詳見 message 欄位說明
   * @type {string}
   * @memberof ShoppingOrderViewListApiResponse
   */
  code: string;
  /**
   * 回傳訊息
   * @type {string}
   * @memberof ShoppingOrderViewListApiResponse
   */
  message: string;
  /**
   * 錯誤詳細資訊
   * @type {any}
   * @memberof ShoppingOrderViewListApiResponse
   */
  detailMessage: any;
  /**
   * 回傳資料
   * @type {Array<ShoppingOrderView>}
   * @memberof ShoppingOrderViewListApiResponse
   */
  data: Array<ShoppingOrderView>;
  /**
   * 交易時間
   * @type {string}
   * @memberof ShoppingOrderViewListApiResponse
   */
  txnTime: string;
}
/**
 *
 * @export
 * @interface ShoppingOrderViewPage
 */
export interface ShoppingOrderViewPage {
  /**
   *
   * @type {number}
   * @memberof ShoppingOrderViewPage
   */
  totalCount: number;
  /**
   *
   * @type {number}
   * @memberof ShoppingOrderViewPage
   */
  pageCount: number;
  /**
   *
   * @type {number}
   * @memberof ShoppingOrderViewPage
   */
  currentPage: number;
  /**
   *
   * @type {number}
   * @memberof ShoppingOrderViewPage
   */
  size: number;
  /**
   *
   * @type {Array<ShoppingOrderView>}
   * @memberof ShoppingOrderViewPage
   */
  records: Array<ShoppingOrderView>;
  /**
   *
   * @type {number}
   * @memberof ShoppingOrderViewPage
   */
  pageSize: number;
  /**
   *
   * @type {boolean}
   * @memberof ShoppingOrderViewPage
   */
  hasPreviousPages: boolean;
  /**
   *
   * @type {boolean}
   * @memberof ShoppingOrderViewPage
   */
  hasNextPages: boolean;
  /**
   *
   * @type {number}
   * @memberof ShoppingOrderViewPage
   */
  previousLastPageNo: number;
  /**
   *
   * @type {number}
   * @memberof ShoppingOrderViewPage
   */
  nextStartPageNo: number;
  /**
   *
   * @type {Array<number>}
   * @memberof ShoppingOrderViewPage
   */
  navigationPages: Array<number>;
}
/**
 *
 * @export
 * @interface ShoppingOrderViewPageApiResponse
 */
export interface ShoppingOrderViewPageApiResponse {
  /**
   *
   * @type {string}
   * @memberof ShoppingOrderViewPageApiResponse
   */
  handledId?: string | null;
  /**
   * http-200  0000: 代表處理成功，其餘一律為失敗  http-4xx  Vxxxx: 資料驗證  Bxxxx: 詳見 message 欄位說明
   * @type {string}
   * @memberof ShoppingOrderViewPageApiResponse
   */
  code: string;
  /**
   * 回傳訊息
   * @type {string}
   * @memberof ShoppingOrderViewPageApiResponse
   */
  message: string;
  /**
   * 錯誤詳細資訊
   * @type {any}
   * @memberof ShoppingOrderViewPageApiResponse
   */
  detailMessage: any;
  /**
   *
   * @type {ShoppingOrderViewPage}
   * @memberof ShoppingOrderViewPageApiResponse
   */
  data: ShoppingOrderViewPage;
  /**
   * 交易時間
   * @type {string}
   * @memberof ShoppingOrderViewPageApiResponse
   */
  txnTime: string;
}
/**
 *
 * @export
 * @interface ShoppingTrack
 */
export interface ShoppingTrack {
  /**
   * id
   * @type {number}
   * @memberof ShoppingTrack
   */
  id: number;
  /**
   * User.Id
   * @type {number}
   * @memberof ShoppingTrack
   */
  userId: number;
  /**
   * 課程類別Course.Id
   * @type {number}
   * @memberof ShoppingTrack
   */
  courseId: number;
  /**
   *
   * @type {string}
   * @memberof ShoppingTrack
   */
  statusCd: string;
  /**
   * ApiLog HandledId
   * @type {string}
   * @memberof ShoppingTrack
   */
  handledId?: string | null;
  /**
   * 建立日期
   * @type {string}
   * @memberof ShoppingTrack
   */
  dateCreate?: string;
  /**
   * 建立人員
   * @type {string}
   * @memberof ShoppingTrack
   */
  userCreate?: string | null;
  /**
   * 最後修改日期
   * @type {string}
   * @memberof ShoppingTrack
   */
  dateUpdate?: string | null;
  /**
   * 最後修改人員
   * @type {string}
   * @memberof ShoppingTrack
   */
  userUpdate?: string | null;
  /**
   *
   * @type {string}
   * @memberof ShoppingTrack
   */
  rowVersion?: string | null;
}
/**
 * 追蹤清單
 * @export
 * @interface ShoppingTrackBase
 */
export interface ShoppingTrackBase {
  /**
   * id
   * @type {number}
   * @memberof ShoppingTrackBase
   */
  id: number;
  /**
   * User.Id
   * @type {number}
   * @memberof ShoppingTrackBase
   */
  userId: number;
  /**
   * 課程類別Course.Id
   * @type {number}
   * @memberof ShoppingTrackBase
   */
  courseId: number;
}
/**
 * ShoppingTrack
 * @export
 * @interface ShoppingTrackView
 */
export interface ShoppingTrackView {
  /**
   * Id
   * @type {number}
   * @memberof ShoppingTrackView
   */
  id: number;
  /**
   *
   * @type {string}
   * @memberof ShoppingTrackView
   */
  handledId?: string | null;
  /**
   *
   * @type {string}
   * @memberof ShoppingTrackView
   */
  dateCreate?: string;
  /**
   *
   * @type {string}
   * @memberof ShoppingTrackView
   */
  userCreate?: string | null;
  /**
   *
   * @type {string}
   * @memberof ShoppingTrackView
   */
  dateUpdate?: string | null;
  /**
   *
   * @type {string}
   * @memberof ShoppingTrackView
   */
  userUpdate?: string | null;
  /**
   * User.Id
   * @type {number}
   * @memberof ShoppingTrackView
   */
  userId: number;
  /**
   * 課程類別Course.Id
   * @type {number}
   * @memberof ShoppingTrackView
   */
  courseId: number;
}
/**
 *
 * @export
 * @interface ShoppingTrackViewApiResponse
 */
export interface ShoppingTrackViewApiResponse {
  /**
   *
   * @type {string}
   * @memberof ShoppingTrackViewApiResponse
   */
  handledId?: string | null;
  /**
   * http-200  0000: 代表處理成功，其餘一律為失敗  http-4xx  Vxxxx: 資料驗證  Bxxxx: 詳見 message 欄位說明
   * @type {string}
   * @memberof ShoppingTrackViewApiResponse
   */
  code: string;
  /**
   * 回傳訊息
   * @type {string}
   * @memberof ShoppingTrackViewApiResponse
   */
  message: string;
  /**
   * 錯誤詳細資訊
   * @type {any}
   * @memberof ShoppingTrackViewApiResponse
   */
  detailMessage: any;
  /**
   *
   * @type {ShoppingTrackView}
   * @memberof ShoppingTrackViewApiResponse
   */
  data: ShoppingTrackView;
  /**
   * 交易時間
   * @type {string}
   * @memberof ShoppingTrackViewApiResponse
   */
  txnTime: string;
}
/**
 *
 * @export
 * @interface ShoppingTrackViewListApiResponse
 */
export interface ShoppingTrackViewListApiResponse {
  /**
   *
   * @type {string}
   * @memberof ShoppingTrackViewListApiResponse
   */
  handledId?: string | null;
  /**
   * http-200  0000: 代表處理成功，其餘一律為失敗  http-4xx  Vxxxx: 資料驗證  Bxxxx: 詳見 message 欄位說明
   * @type {string}
   * @memberof ShoppingTrackViewListApiResponse
   */
  code: string;
  /**
   * 回傳訊息
   * @type {string}
   * @memberof ShoppingTrackViewListApiResponse
   */
  message: string;
  /**
   * 錯誤詳細資訊
   * @type {any}
   * @memberof ShoppingTrackViewListApiResponse
   */
  detailMessage: any;
  /**
   * 回傳資料
   * @type {Array<ShoppingTrackView>}
   * @memberof ShoppingTrackViewListApiResponse
   */
  data: Array<ShoppingTrackView>;
  /**
   * 交易時間
   * @type {string}
   * @memberof ShoppingTrackViewListApiResponse
   */
  txnTime: string;
}
/**
 *
 * @export
 * @interface ShoppingTrackViewPage
 */
export interface ShoppingTrackViewPage {
  /**
   *
   * @type {number}
   * @memberof ShoppingTrackViewPage
   */
  totalCount: number;
  /**
   *
   * @type {number}
   * @memberof ShoppingTrackViewPage
   */
  pageCount: number;
  /**
   *
   * @type {number}
   * @memberof ShoppingTrackViewPage
   */
  currentPage: number;
  /**
   *
   * @type {number}
   * @memberof ShoppingTrackViewPage
   */
  size: number;
  /**
   *
   * @type {Array<ShoppingTrackView>}
   * @memberof ShoppingTrackViewPage
   */
  records: Array<ShoppingTrackView>;
  /**
   *
   * @type {number}
   * @memberof ShoppingTrackViewPage
   */
  pageSize: number;
  /**
   *
   * @type {boolean}
   * @memberof ShoppingTrackViewPage
   */
  hasPreviousPages: boolean;
  /**
   *
   * @type {boolean}
   * @memberof ShoppingTrackViewPage
   */
  hasNextPages: boolean;
  /**
   *
   * @type {number}
   * @memberof ShoppingTrackViewPage
   */
  previousLastPageNo: number;
  /**
   *
   * @type {number}
   * @memberof ShoppingTrackViewPage
   */
  nextStartPageNo: number;
  /**
   *
   * @type {Array<number>}
   * @memberof ShoppingTrackViewPage
   */
  navigationPages: Array<number>;
}
/**
 *
 * @export
 * @interface ShoppingTrackViewPageApiResponse
 */
export interface ShoppingTrackViewPageApiResponse {
  /**
   *
   * @type {string}
   * @memberof ShoppingTrackViewPageApiResponse
   */
  handledId?: string | null;
  /**
   * http-200  0000: 代表處理成功，其餘一律為失敗  http-4xx  Vxxxx: 資料驗證  Bxxxx: 詳見 message 欄位說明
   * @type {string}
   * @memberof ShoppingTrackViewPageApiResponse
   */
  code: string;
  /**
   * 回傳訊息
   * @type {string}
   * @memberof ShoppingTrackViewPageApiResponse
   */
  message: string;
  /**
   * 錯誤詳細資訊
   * @type {any}
   * @memberof ShoppingTrackViewPageApiResponse
   */
  detailMessage: any;
  /**
   *
   * @type {ShoppingTrackViewPage}
   * @memberof ShoppingTrackViewPageApiResponse
   */
  data: ShoppingTrackViewPage;
  /**
   * 交易時間
   * @type {string}
   * @memberof ShoppingTrackViewPageApiResponse
   */
  txnTime: string;
}
/**
 *
 * @export
 * @interface SignInCommand
 */
export interface SignInCommand {
  /**
   * 帳號
   * @type {string}
   * @memberof SignInCommand
   */
  account: string;
  /**
   * 密碼
   * @type {string}
   * @memberof SignInCommand
   */
  password: string;
  /**
   * 驗證碼
   * @type {string}
   * @memberof SignInCommand
   */
  verificationCode: string;
  /**
   * 驗證碼 Token
   * @type {string}
   * @memberof SignInCommand
   */
  verificationToken: string;
}
/**
 *
 * @export
 * @interface SignInResponse
 */
export interface SignInResponse {
  /**
   *
   * @type {string}
   * @memberof SignInResponse
   */
  jwt: string;
  /**
   *
   * @type {UserProfile}
   * @memberof SignInResponse
   */
  user: UserProfile;
}
/**
 *
 * @export
 * @interface SignInResponseApiResponse
 */
export interface SignInResponseApiResponse {
  /**
   *
   * @type {string}
   * @memberof SignInResponseApiResponse
   */
  handledId?: string | null;
  /**
   * http-200  0000: 代表處理成功，其餘一律為失敗  http-4xx  Vxxxx: 資料驗證  Bxxxx: 詳見 message 欄位說明
   * @type {string}
   * @memberof SignInResponseApiResponse
   */
  code: string;
  /**
   * 回傳訊息
   * @type {string}
   * @memberof SignInResponseApiResponse
   */
  message: string;
  /**
   * 錯誤詳細資訊
   * @type {any}
   * @memberof SignInResponseApiResponse
   */
  detailMessage: any;
  /**
   *
   * @type {SignInResponse}
   * @memberof SignInResponseApiResponse
   */
  data: SignInResponse;
  /**
   * 交易時間
   * @type {string}
   * @memberof SignInResponseApiResponse
   */
  txnTime: string;
}
/**
 * 註冊
 * @export
 * @interface SignUpCommand
 */
export interface SignUpCommand {
  /**
   *
   * @type {number}
   * @memberof SignUpCommand
   */
  id: number;
  /**
   * 聯絡方式
   * @type {Array<CreateUserContactCommand>}
   * @memberof SignUpCommand
   */
  userContacts: Array<CreateUserContactCommand>;
  /**
   * 家庭成员
   * @type {Array<CreateUserFamilyCommand>}
   * @memberof SignUpCommand
   */
  userFamilies: Array<CreateUserFamilyCommand>;
  /**
   * 銀行帳號
   * @type {Array<CreateUserBankAccountCommand>}
   * @memberof SignUpCommand
   */
  userBankAccounts: Array<CreateUserBankAccountCommand>;
  /**
   * 專長
   * @type {Array<CreateUserExpertiseCommand>}
   * @memberof SignUpCommand
   */
  userExpertises: Array<CreateUserExpertiseCommand>;
  /**
   * 外部社團 / 工會
   * @type {Array<CreateUserSocietyCommand>}
   * @memberof SignUpCommand
   */
  userSocieties: Array<CreateUserSocietyCommand>;
  /**
   * 所屬牧區id =>對應牧區身分類別
   * @type {number}
   * @memberof SignUpCommand
   */
  pastoralId: number;
  /**
   * 姓名
   * @type {string}
   * @memberof SignUpCommand
   */
  name: string;
  /**
   * 聚會點Id
   * @type {number}
   * @memberof SignUpCommand
   */
  meetingPointId: number;
  /**
   * 帳號
   * @type {string}
   * @memberof SignUpCommand
   */
  userNo: string;
  /**
   * 密碼
   * @type {string}
   * @memberof SignUpCommand
   */
  password: string;
  /**
   * 令牌
   * @type {string}
   * @memberof SignUpCommand
   */
  passwordSalt: string;
  /**
   * 手機類型 對應SystemConfig type=PhoneType 顯示 name value存此欄位 0：家長手機 1：小孩手機
   * @type {string}
   * @memberof SignUpCommand
   */
  phoneType: string;
  /**
   * 姓
   * @type {string}
   * @memberof SignUpCommand
   */
  firstName: string;
  /**
   * 名
   * @type {string}
   * @memberof SignUpCommand
   */
  lastName: string;
  /**
   * 性別 對應SystemConfig type=GenderType 顯示 name value存此欄位0：女姓 1：男性\"
   * @type {string}
   * @memberof SignUpCommand
   */
  genderType: string;
  /**
   * 居住國家
   * @type {string}
   * @memberof SignUpCommand
   */
  liveCountry: string;
  /**
   * 生日
   * @type {string}
   * @memberof SignUpCommand
   */
  birthday: string;
  /**
   * 身分證字號
   * @type {string}
   * @memberof SignUpCommand
   */
  idNumber: string;
  /**
   * 手機國碼
   * @type {string}
   * @memberof SignUpCommand
   */
  cellAreaCode: string;
  /**
   * 手機門號
   * @type {string}
   * @memberof SignUpCommand
   */
  cellPhone: string;
  /**
   * 城市
   * @type {string}
   * @memberof SignUpCommand
   */
  liveCity: string;
  /**
   * 郵遞區號
   * @type {string}
   * @memberof SignUpCommand
   */
  liveZipCode: string;
  /**
   * 地區
   * @type {string}
   * @memberof SignUpCommand
   */
  liveZipArea: string;
  /**
   * 詳細地址
   * @type {string}
   * @memberof SignUpCommand
   */
  liveAddress: string;
  /**
   * 地址2
   * @type {string}
   * @memberof SignUpCommand
   */
  liveAddress2: string;
  /**
   * 受洗 對應SystemConfig type=BaptizedType顯示 namevalue存此欄位0：未受洗1：已受洗2：其它
   * @type {string}
   * @memberof SignUpCommand
   */
  baptizedType: string;
  /**
   * 受洗時間
   * @type {string}
   * @memberof SignUpCommand
   */
  baptizedTime: string;
  /**
   * 教會施洗者 (若為旌旗教會者)
   * @type {string}
   * @memberof SignUpCommand
   */
  baptizedPerson: string;
  /**
   * 教會類別 對應SystemConfigtype=ChurchType顯示 namevalue存此欄位0：其他1：旌旗教會
   * @type {string}
   * @memberof SignUpCommand
   */
  churchType: string;
  /**
   * 會友所屬堂點 DDL對應Organization.Name
   * @type {string}
   * @memberof SignUpCommand
   */
  churchName: string;
  /**
   * 過去在哪個教會名稱
   * @type {string}
   * @memberof SignUpCommand
   */
  anotherChurchName: string;
  /**
   * 電話(市話)
   * @type {string}
   * @memberof SignUpCommand
   */
  phone: string;
  /**
   * 手機國碼1
   * @type {string}
   * @memberof SignUpCommand
   */
  cellAreaCode1: string;
  /**
   * 電話(手機)
   * @type {string}
   * @memberof SignUpCommand
   */
  cellPhone1: string;
  /**
   * 手機國碼2
   * @type {string}
   * @memberof SignUpCommand
   */
  cellAreaCode2: string;
  /**
   * 電話(手機2)
   * @type {string}
   * @memberof SignUpCommand
   */
  cellPhone2: string;
  /**
   * Email(主要)
   * @type {string}
   * @memberof SignUpCommand
   */
  email1: string;
  /**
   * Email(次要)
   * @type {string}
   * @memberof SignUpCommand
   */
  email2: string;
  /**
   * InstagramId
   * @type {string}
   * @memberof SignUpCommand
   */
  instagramId: string;
  /**
   * LineId
   * @type {string}
   * @memberof SignUpCommand
   */
  lineId: string;
  /**
   * WeChatId
   * @type {string}
   * @memberof SignUpCommand
   */
  weChatId: string;
  /**
   * 其他APPID
   * @type {string}
   * @memberof SignUpCommand
   */
  otherSocialId: string;
  /**
   * 是否在旌旗小組對應SystemConfigtype = isYN顯示 namevalue存此欄位0：N1：Y\"
   * @type {string}
   * @memberof SignUpCommand
   */
  isChurchGroup: string;
  /**
   * Id
   * @type {string}
   * @memberof SignUpCommand
   */
  churchGroupNo: string;
  /**
   * 是否願意加入旌旗小組對應SystemConfigtype = isYN顯示 namevalue存此欄位0：N1：Y\"
   * @type {string}
   * @memberof SignUpCommand
   */
  isJoinChurchGroup: string;
  /**
   * 志願序1 實體 星期對應SystemConfigtype = JoinSequenceType0顯示 namevalue存此欄位1：星期一2：星期二3：星期三4：星期四5：星期五6：星期六7：星期日
   * @type {string}
   * @memberof SignUpCommand
   */
  joinInPersonDate1: string;
  /**
   * 志願序1 實體 時間type=JoinSequenceType1顯示 namevalue存此欄位1：上午2：下午
   * @type {string}
   * @memberof SignUpCommand
   */
  joinInPersonTime1: string;
  /**
   * 志願序1 實體 時間type=JoinSequenceType2顯示 namevalue存此欄位1：堂點
   * @type {string}
   * @memberof SignUpCommand
   */
  joinInPersonLocation1: string;
  /**
   * 志願序2 實體 星期對應SystemConfigtype = JoinSequenceType0顯示 namevalue存此欄位1：星期一2：星期二3：星期三4：星期四5：星期五6：星期六7：星期日
   * @type {string}
   * @memberof SignUpCommand
   */
  joinInPersonDate2: string;
  /**
   * 志願序2 實體 時間type=JoinSequenceType1顯示 namevalue存此欄位1：上午2：下午
   * @type {string}
   * @memberof SignUpCommand
   */
  joinInPersonTime2: string;
  /**
   * 志願序2 實體 時間type=JoinSequenceType2顯示 namevalue存此欄位1：堂點
   * @type {string}
   * @memberof SignUpCommand
   */
  joinInPersonLocation2: string;
  /**
   * 志願序3 實體 星期對應SystemConfigtype = JoinSequenceType0顯示 namevalue存此欄位1：星期一2：星期二3：星期三4：星期四5：星期五6：星期六7：星期日
   * @type {string}
   * @memberof SignUpCommand
   */
  joinInPersonDate3: string;
  /**
   * 志願序3 實體 時間type=JoinSequenceType1顯示 namevalue存此欄位1：上午2：下午
   * @type {string}
   * @memberof SignUpCommand
   */
  joinInPersonTime3: string;
  /**
   * 志願序3 實體 時間type=JoinSequenceType2顯示 namevalue存此欄位1：堂點
   * @type {string}
   * @memberof SignUpCommand
   */
  joinInPersonLocation3: string;
  /**
   * 志願序1 線上 星期
   * @type {string}
   * @memberof SignUpCommand
   */
  joinOnlineDate1: string;
  /**
   * 志願序1 線上 時間
   * @type {string}
   * @memberof SignUpCommand
   */
  joinOnlineTime1: string;
  /**
   * 志願序2 線上 星期
   * @type {string}
   * @memberof SignUpCommand
   */
  joinOnlineDate2: string;
  /**
   * 志願序2 線上 時間
   * @type {string}
   * @memberof SignUpCommand
   */
  joinOnlineTime2: string;
  /**
   * 志願序3 線上 星期
   * @type {string}
   * @memberof SignUpCommand
   */
  joinOnlineDate3: string;
  /**
   * 志願序3 線上 時間
   * @type {string}
   * @memberof SignUpCommand
   */
  joinOnlineTime3: string;
  /**
   * Id
   * @type {string}
   * @memberof SignUpCommand
   */
  memberType: string;
  /**
   * 教育程度type=EduType顯示 namevalue存此欄位0：小學1：國中…
   * @type {string}
   * @memberof SignUpCommand
   */
  eduType: string;
  /**
   * 職業type=EduType顯示 namevalue存此欄位0：老師1：家管…
   * @type {string}
   * @memberof SignUpCommand
   */
  professionType: string;
  /**
   * 是否結婚對應SystemConfigtype = IsMarried顯示 namevalue存此欄位0：未婚1：已婚
   * @type {string}
   * @memberof SignUpCommand
   */
  isMarried: string;
  /**
   * 國碼
   * @type {string}
   * @memberof SignUpCommand
   */
  countryCode: string;
  /**
   * 是否舊會員 Y是N否
   * @type {string}
   * @memberof SignUpCommand
   */
  isOldMember: string;
  /**
   * 勾選合約
   * @type {string}
   * @memberof SignUpCommand
   */
  isTerm: string;
  /**
   * 是否受洗
   * @type {string}
   * @memberof SignUpCommand
   */
  isBaptize: string;
  /**
   * 受洗類別 0:未知 1: 本教會受洗 2: 其他教會受洗 3: 未受洗
   * @type {string}
   * @memberof SignUpCommand
   */
  baptizeTypeId: string;
  /**
   * 受洗日期
   * @type {string}
   * @memberof SignUpCommand
   */
  baptizeday: string;
  /**
   * 受洗教會
   * @type {string}
   * @memberof SignUpCommand
   */
  baptizeOrgName: string;
  /**
   * 受洗教會
   * @type {string}
   * @memberof SignUpCommand
   */
  baptizeGroup: string;
  /**
   * 施洗人
   * @type {string}
   * @memberof SignUpCommand
   */
  baptizer: string;
  /**
   * 使用者家長Id
   * @type {number}
   * @memberof SignUpCommand
   */
  parentUserId: number;
  /**
   * 是否會員
   * @type {string}
   * @memberof SignUpCommand
   */
  isMember: string;
  /**
   * 同工角色類別 對應SystemConfig type=GroupMemberType 顯示 name value存此欄位 0：無 1：核心同工 2：儲備同工
   * @type {string}
   * @memberof SignUpCommand
   */
  groupMemberType: string;
  /**
   * 中低收入戶 IsYN 0:否 1:是
   * @type {string}
   * @memberof SignUpCommand
   */
  lowIncome: string;
  /**
   * 備註欄位
   * @type {string}
   * @memberof SignUpCommand
   */
  remark: string;
  /**
   * 狀態
   * @type {string}
   * @memberof SignUpCommand
   */
  statusCd: string;
}
/**
 * 尋找帳號結果
 * @export
 * @interface SignUpCommandResponse
 */
export interface SignUpCommandResponse {
  /**
   * 帳號
   * @type {string}
   * @memberof SignUpCommandResponse
   */
  account: string;
}
/**
 *
 * @export
 * @interface SignUpCommandResponseApiResponse
 */
export interface SignUpCommandResponseApiResponse {
  /**
   *
   * @type {string}
   * @memberof SignUpCommandResponseApiResponse
   */
  handledId?: string | null;
  /**
   * http-200  0000: 代表處理成功，其餘一律為失敗  http-4xx  Vxxxx: 資料驗證  Bxxxx: 詳見 message 欄位說明
   * @type {string}
   * @memberof SignUpCommandResponseApiResponse
   */
  code: string;
  /**
   * 回傳訊息
   * @type {string}
   * @memberof SignUpCommandResponseApiResponse
   */
  message: string;
  /**
   * 錯誤詳細資訊
   * @type {any}
   * @memberof SignUpCommandResponseApiResponse
   */
  detailMessage: any;
  /**
   *
   * @type {SignUpCommandResponse}
   * @memberof SignUpCommandResponseApiResponse
   */
  data: SignUpCommandResponse;
  /**
   * 交易時間
   * @type {string}
   * @memberof SignUpCommandResponseApiResponse
   */
  txnTime: string;
}
/**
 *
 * @export
 * @enum {string}
 */

export enum SortOrder {
  None = "None",
  Asc = "Asc",
  Desc = "Desc",
}

/**
 *
 * @export
 * @interface SortProperty
 */
export interface SortProperty {
  /**
   *
   * @type {string}
   * @memberof SortProperty
   */
  propertyName: string;
  /**
   *
   * @type {SortOrder}
   * @memberof SortProperty
   */
  sortOrder: SortOrder;
}
/**
 *
 * @export
 * @interface StringApiResponse
 */
export interface StringApiResponse {
  /**
   *
   * @type {string}
   * @memberof StringApiResponse
   */
  handledId?: string | null;
  /**
   * http-200  0000: 代表處理成功，其餘一律為失敗  http-4xx  Vxxxx: 資料驗證  Bxxxx: 詳見 message 欄位說明
   * @type {string}
   * @memberof StringApiResponse
   */
  code: string;
  /**
   * 回傳訊息
   * @type {string}
   * @memberof StringApiResponse
   */
  message: string;
  /**
   * 錯誤詳細資訊
   * @type {any}
   * @memberof StringApiResponse
   */
  detailMessage: any;
  /**
   * 回傳資料
   * @type {string}
   * @memberof StringApiResponse
   */
  data: string;
  /**
   * 交易時間
   * @type {string}
   * @memberof StringApiResponse
   */
  txnTime: string;
}
/**
 *
 * @export
 * @interface SystemConfig
 */
export interface SystemConfig {
  /**
   *
   * @type {number}
   * @memberof SystemConfig
   */
  id: number;
  /**
   *
   * @type {string}
   * @memberof SystemConfig
   */
  type: string;
  /**
   *
   * @type {string}
   * @memberof SystemConfig
   */
  value: string;
  /**
   *
   * @type {string}
   * @memberof SystemConfig
   */
  name: string;
  /**
   *
   * @type {string}
   * @memberof SystemConfig
   */
  memo: string;
  /**
   * ApiLog HandledId
   * @type {string}
   * @memberof SystemConfig
   */
  handledId?: string | null;
  /**
   * 建立日期
   * @type {string}
   * @memberof SystemConfig
   */
  dateCreate?: string;
  /**
   * 建立人員
   * @type {string}
   * @memberof SystemConfig
   */
  userCreate?: string | null;
  /**
   * 最後修改日期
   * @type {string}
   * @memberof SystemConfig
   */
  dateUpdate?: string | null;
  /**
   * 最後修改人員
   * @type {string}
   * @memberof SystemConfig
   */
  userUpdate?: string | null;
  /**
   *
   * @type {string}
   * @memberof SystemConfig
   */
  rowVersion?: string | null;
}
/**
 *
 * @export
 * @interface SystemConfigBase
 */
export interface SystemConfigBase {
  /**
   *
   * @type {number}
   * @memberof SystemConfigBase
   */
  id: number;
  /**
   *
   * @type {string}
   * @memberof SystemConfigBase
   */
  type: string;
  /**
   *
   * @type {string}
   * @memberof SystemConfigBase
   */
  value: string;
  /**
   *
   * @type {string}
   * @memberof SystemConfigBase
   */
  name: string;
  /**
   *
   * @type {string}
   * @memberof SystemConfigBase
   */
  memo: string;
}
/**
 * SystemConfig
 * @export
 * @interface SystemConfigView
 */
export interface SystemConfigView {
  /**
   *
   * @type {string}
   * @memberof SystemConfigView
   */
  handledId?: string | null;
  /**
   *
   * @type {string}
   * @memberof SystemConfigView
   */
  dateCreate?: string;
  /**
   *
   * @type {string}
   * @memberof SystemConfigView
   */
  userCreate?: string | null;
  /**
   *
   * @type {string}
   * @memberof SystemConfigView
   */
  dateUpdate?: string | null;
  /**
   *
   * @type {string}
   * @memberof SystemConfigView
   */
  userUpdate?: string | null;
  /**
   *
   * @type {number}
   * @memberof SystemConfigView
   */
  id: number;
  /**
   *
   * @type {string}
   * @memberof SystemConfigView
   */
  type: string;
  /**
   *
   * @type {string}
   * @memberof SystemConfigView
   */
  value: string;
  /**
   *
   * @type {string}
   * @memberof SystemConfigView
   */
  name: string;
  /**
   *
   * @type {string}
   * @memberof SystemConfigView
   */
  memo: string;
}
/**
 *
 * @export
 * @interface SystemConfigViewListApiResponse
 */
export interface SystemConfigViewListApiResponse {
  /**
   *
   * @type {string}
   * @memberof SystemConfigViewListApiResponse
   */
  handledId?: string | null;
  /**
   * http-200  0000: 代表處理成功，其餘一律為失敗  http-4xx  Vxxxx: 資料驗證  Bxxxx: 詳見 message 欄位說明
   * @type {string}
   * @memberof SystemConfigViewListApiResponse
   */
  code: string;
  /**
   * 回傳訊息
   * @type {string}
   * @memberof SystemConfigViewListApiResponse
   */
  message: string;
  /**
   * 錯誤詳細資訊
   * @type {any}
   * @memberof SystemConfigViewListApiResponse
   */
  detailMessage: any;
  /**
   * 回傳資料
   * @type {Array<SystemConfigView>}
   * @memberof SystemConfigViewListApiResponse
   */
  data: Array<SystemConfigView>;
  /**
   * 交易時間
   * @type {string}
   * @memberof SystemConfigViewListApiResponse
   */
  txnTime: string;
}
/**
 *
 * @export
 * @interface Teacher
 */
export interface Teacher {
  /**
   * id
   * @type {number}
   * @memberof Teacher
   */
  id: number;
  /**
   * 組識主檔.Id
   * @type {number}
   * @memberof Teacher
   */
  organizationId: number;
  /**
   * userId 講師對應使用者主檔Id
   * @type {number}
   * @memberof Teacher
   */
  userId: number;
  /**
   * 講師姓名
   * @type {string}
   * @memberof Teacher
   */
  teacherName: string;
  /**
   * 連絡電話
   * @type {string}
   * @memberof Teacher
   */
  contactPhone: string;
  /**
   * 聯絡手機
   * @type {string}
   * @memberof Teacher
   */
  contactCellPhone: string;
  /**
   * 聯絡Email
   * @type {string}
   * @memberof Teacher
   */
  contactEmail: string;
  /**
   * 備註
   * @type {string}
   * @memberof Teacher
   */
  comment: string;
  /**
   *
   * @type {string}
   * @memberof Teacher
   */
  statusCd: string;
  /**
   * ApiLog HandledId
   * @type {string}
   * @memberof Teacher
   */
  handledId?: string | null;
  /**
   * 建立日期
   * @type {string}
   * @memberof Teacher
   */
  dateCreate?: string;
  /**
   * 建立人員
   * @type {string}
   * @memberof Teacher
   */
  userCreate?: string | null;
  /**
   * 最後修改日期
   * @type {string}
   * @memberof Teacher
   */
  dateUpdate?: string | null;
  /**
   * 最後修改人員
   * @type {string}
   * @memberof Teacher
   */
  userUpdate?: string | null;
  /**
   *
   * @type {string}
   * @memberof Teacher
   */
  rowVersion?: string | null;
}
/**
 *
 * @export
 * @interface UMinistryCommandResponseApiResponse
 */
export interface UMinistryCommandResponseApiResponse {
  /**
   *
   * @type {string}
   * @memberof UMinistryCommandResponseApiResponse
   */
  handledId?: string | null;
  /**
   * http-200  0000: 代表處理成功，其餘一律為失敗  http-4xx  Vxxxx: 資料驗證  Bxxxx: 詳見 message 欄位說明
   * @type {string}
   * @memberof UMinistryCommandResponseApiResponse
   */
  code: string;
  /**
   * 回傳訊息
   * @type {string}
   * @memberof UMinistryCommandResponseApiResponse
   */
  message: string;
  /**
   * 錯誤詳細資訊
   * @type {any}
   * @memberof UMinistryCommandResponseApiResponse
   */
  detailMessage: any;
  /**
   *
   * @type {AddMinistryCommandResponse}
   * @memberof UMinistryCommandResponseApiResponse
   */
  data: AddMinistryCommandResponse;
  /**
   * 交易時間
   * @type {string}
   * @memberof UMinistryCommandResponseApiResponse
   */
  txnTime: string;
}
/**
 *
 * @export
 * @interface UMinistryUpdateCommand
 */
export interface UMinistryUpdateCommand {
  /**
   * 事工團職分明細
   * @type {Array<CreateMinistryRespCommand>}
   * @memberof UMinistryUpdateCommand
   */
  ministryResps: Array<CreateMinistryRespCommand>;
  /**
   * id
   * @type {number}
   * @memberof UMinistryUpdateCommand
   */
  id: number;
  /**
   * Organization.Id
   * @type {number}
   * @memberof UMinistryUpdateCommand
   */
  organizationId: number;
  /**
   * 組織名稱
   * @type {string}
   * @memberof UMinistryUpdateCommand
   */
  organizationName: string;
  /**
   * 事工團分類id
   * @type {number}
   * @memberof UMinistryUpdateCommand
   */
  ministryDefId: number;
  /**
   * 事工團編號
   * @type {string}
   * @memberof UMinistryUpdateCommand
   */
  ministryNo: string;
  /**
   * 事工團名稱
   * @type {string}
   * @memberof UMinistryUpdateCommand
   */
  name: string;
  /**
   * 是否兒童事工團
   * @type {string}
   * @memberof UMinistryUpdateCommand
   */
  childMinistry: string;
  /**
   * 事工團狀態
   * @type {string}
   * @memberof UMinistryUpdateCommand
   */
  ministryStatus: string;
  /**
   * 性質
   * @type {string}
   * @memberof UMinistryUpdateCommand
   */
  nature: string;
  /**
   * id
   * @type {string}
   * @memberof UMinistryUpdateCommand
   */
  statusCd: string;
  /**
   *
   * @type {string}
   * @memberof UMinistryUpdateCommand
   */
  comment: string;
  /**
   *
   * @type {string}
   * @memberof UMinistryUpdateCommand
   */
  dateCreate?: string | null;
  /**
   *
   * @type {string}
   * @memberof UMinistryUpdateCommand
   */
  userCreate?: string | null;
  /**
   *
   * @type {string}
   * @memberof UMinistryUpdateCommand
   */
  dateUpdate?: string | null;
  /**
   *
   * @type {string}
   * @memberof UMinistryUpdateCommand
   */
  userUpdate?: string | null;
}
/**
 * 更新  CourseAppendix
 * @export
 * @interface UpdateCourseAppendixCommand
 */
export interface UpdateCourseAppendixCommand {
  /**
   * id
   * @type {number}
   * @memberof UpdateCourseAppendixCommand
   */
  id: number;
  /**
   * 課程類別CourseManagement.Id
   * @type {number}
   * @memberof UpdateCourseAppendixCommand
   */
  courseId: number;
  /**
   * 附件類別對應type=AppendixType顯示 namevalue存此欄位 0：文件 1：影音 2：表單 3：圖片 4：Title圖片
   * @type {string}
   * @memberof UpdateCourseAppendixCommand
   */
  appendixType: string;
  /**
   * 存放網路路徑  UploadFile.FileKey
   * @type {string}
   * @memberof UpdateCourseAppendixCommand
   */
  path: string;
}
/**
 * 更新  Course
 * @export
 * @interface UpdateCourseCommand
 */
export interface UpdateCourseCommand {
  /**
   *
   * @type {UpdateCourseManagementFilterCommand}
   * @memberof UpdateCourseCommand
   */
  courseManagementFilter: UpdateCourseManagementFilterCommand;
  /**
   * id
   * @type {number}
   * @memberof UpdateCourseCommand
   */
  id: number;
  /**
   * 課程類別CourseManagement.Id
   * @type {number}
   * @memberof UpdateCourseCommand
   */
  courseManagementId: number;
  /**
   * Organization.Id
   * @type {number}
   * @memberof UpdateCourseCommand
   */
  organizationId: number;
  /**
   * Questionnaire.Id 問卷Id
   * @type {number}
   * @memberof UpdateCourseCommand
   */
  questionnaireId: number;
  /**
   * 年度 屆別
   * @type {string}
   * @memberof UpdateCourseCommand
   */
  year: string;
  /**
   * 名稱
   * @type {string}
   * @memberof UpdateCourseCommand
   */
  name: string;
  /**
   * 梯次
   * @type {string}
   * @memberof UpdateCourseCommand
   */
  classNum: string;
  /**
   * 季
   * @type {string}
   * @memberof UpdateCourseCommand
   */
  season: string;
  /**
   * 開課日
   * @type {string}
   * @memberof UpdateCourseCommand
   */
  openDateS: string;
  /**
   * 開課日
   * @type {string}
   * @memberof UpdateCourseCommand
   */
  openDateE: string;
  /**
   * 開課日
   * @type {string}
   * @memberof UpdateCourseCommand
   */
  openDate: string;
  /**
   * 報名日期(線上)
   * @type {string}
   * @memberof UpdateCourseCommand
   */
  signUpDateS: string;
  /**
   * 報名截止日(線上)
   * @type {string}
   * @memberof UpdateCourseCommand
   */
  signUpDateE: string;
  /**
   * 報名日期(臨櫃)
   * @type {string}
   * @memberof UpdateCourseCommand
   */
  counterSignUpDateS: string;
  /**
   * 報名截止日(臨櫃)
   * @type {string}
   * @memberof UpdateCourseCommand
   */
  counterSignUpDateE: string;
  /**
   * 優惠報名截止日
   * @type {string}
   * @memberof UpdateCourseCommand
   */
  discountSignUpDate: string;
  /**
   * 報名方式對應type=CourseSignUpType顯示 namevalue存此欄位0：一般臨櫃1：網路報名
   * @type {string}
   * @memberof UpdateCourseCommand
   */
  courseSignUpType: string;
  /**
   * 最少志願數
   * @type {number}
   * @memberof UpdateCourseCommand
   */
  wishCount: number;
  /**
   * 是否需要推薦對應type=IsYN顯示 namevalue存此欄位0：N1：Y
   * @type {string}
   * @memberof UpdateCourseCommand
   */
  needRecommend: string;
  /**
   * 新朋友可報名對應type=IsYN顯示 namevalue存此欄位0：N1：Y
   * @type {string}
   * @memberof UpdateCourseCommand
   */
  acceptNewMember: string;
  /**
   * 課程說明/資格
   * @type {string}
   * @memberof UpdateCourseCommand
   */
  description: string;
  /**
   * 上課堂數
   * @type {number}
   * @memberof UpdateCourseCommand
   */
  classCount: number;
  /**
   * 報名名額
   * @type {number}
   * @memberof UpdateCourseCommand
   */
  quota: number;
  /**
   * 結業狀態對應type=GraduationType顯示 namevalue存此欄位0：未結業1：已結業 2:-
   * @type {string}
   * @memberof UpdateCourseCommand
   */
  graduationType: string;
  /**
   * 前台特殊需求
   * @type {string}
   * @memberof UpdateCourseCommand
   */
  specialRequirement: string;
  /**
   * 對象資格說明
   * @type {string}
   * @memberof UpdateCourseCommand
   */
  basicQualification: string;
  /**
   * 結業資格說明
   * @type {string}
   * @memberof UpdateCourseCommand
   */
  graduationQualification: string;
  /**
   * 課程內容
   * @type {string}
   * @memberof UpdateCourseCommand
   */
  courseContext: string;
  /**
   * 注意事項
   * @type {string}
   * @memberof UpdateCourseCommand
   */
  courseNoticeDesc: string;
  /**
   * 退費原則
   * @type {string}
   * @memberof UpdateCourseCommand
   */
  courseRefundDesc: string;
  /**
   * 作業繳交日期
   * @type {string}
   * @memberof UpdateCourseCommand
   */
  homeworkDate: string;
  /**
   * 狀態
   * @type {string}
   * @memberof UpdateCourseCommand
   */
  statusCd: string;
  /**
   * 課程過濾主檔Id CourseManagementFilter.Id
   * @type {number}
   * @memberof UpdateCourseCommand
   */
  courseManagementFilterId: number;
  /**
   * 課程圖片上傳
   * @type {Array<CourseAppendixBase | CourseAppendixView | UpdateCourseAppendixCommand | CreateCourseAppendixCommand>}
   * @memberof UpdateCourseCommand
   */
  courseAppendices: Array<
    CourseAppendixBase | CourseAppendixView | UpdateCourseAppendixCommand | CreateCourseAppendixCommand
  >;
}
/**
 * 更新  CourseManagementAppendix
 * @export
 * @interface UpdateCourseManagementAppendixCommand
 */
export interface UpdateCourseManagementAppendixCommand {
  /**
   * id
   * @type {number}
   * @memberof UpdateCourseManagementAppendixCommand
   */
  id: number;
  /**
   * 課程類別CourseManagement.Id
   * @type {number}
   * @memberof UpdateCourseManagementAppendixCommand
   */
  courseManagementId: number;
  /**
   * 附件類別對應type=AppendixType顯示 namevalue存此欄位0：文件1：影音
   * @type {string}
   * @memberof UpdateCourseManagementAppendixCommand
   */
  appendixType: string;
  /**
   * 存放網路路徑
   * @type {string}
   * @memberof UpdateCourseManagementAppendixCommand
   */
  path: string;
}
/**
 * 更新  CourseManagement
 * @export
 * @interface UpdateCourseManagementCommand
 */
export interface UpdateCourseManagementCommand {
  /**
   * id
   * @type {number}
   * @memberof UpdateCourseManagementCommand
   */
  id: number;
  /**
   * 課程類別CourseManagementType.Id
   * @type {number}
   * @memberof UpdateCourseManagementCommand
   */
  courseManagementTypeId: number;
  /**
   * 堂點Id Organization.Id
   * @type {number}
   * @memberof UpdateCourseManagementCommand
   */
  organizationId: number;
  /**
   * 課程代碼
   * @type {string}
   * @memberof UpdateCourseManagementCommand
   */
  courseManagementNo: string;
  /**
   * 課程標題
   * @type {string}
   * @memberof UpdateCourseManagementCommand
   */
  title: string;
  /**
   * 課程內容描述
   * @type {string}
   * @memberof UpdateCourseManagementCommand
   */
  description: string;
  /**
   * 課程狀態對應type=CourseManagementStatus顯示 namevalue存此欄位0：關閉1：開啟
   * @type {string}
   * @memberof UpdateCourseManagementCommand
   */
  courseManagementStatus: string;
  /**
   * 對象資格說明
   * @type {string}
   * @memberof UpdateCourseManagementCommand
   */
  basicQualification: string;
  /**
   * 結業資格說明
   * @type {string}
   * @memberof UpdateCourseManagementCommand
   */
  graduationQualification: string;
  /**
   * 課程類別 0實體 1線上 2網路學校
   * @type {string}
   * @memberof UpdateCourseManagementCommand
   */
  courseType: string;
  /**
   * 狀態
   * @type {string}
   * @memberof UpdateCourseManagementCommand
   */
  statusCd: string;
  /**
   * 課程過濾主檔
   * @type {Array<CourseManagementFilterBase | CourseManagementFilterView | UpdateCourseManagementFilterCommand | CreateCourseManagementFilterCommand>}
   * @memberof UpdateCourseManagementCommand
   */
  courseManagementFilters: Array<
    | CourseManagementFilterBase
    | CourseManagementFilterView
    | UpdateCourseManagementFilterCommand
    | CreateCourseManagementFilterCommand
  >;
  /**
   * 課程過濾主檔_課程必修
   * @type {Array<CourseManagementFilterCourseBase | CourseManagementFilterCourseView | UpdateCourseManagementFilterCourseCommand | CreateCourseManagementFilterCourseCommand>}
   * @memberof UpdateCourseManagementCommand
   */
  courseManagementFilterCourses: Array<
    | CourseManagementFilterCourseBase
    | CourseManagementFilterCourseView
    | UpdateCourseManagementFilterCourseCommand
    | CreateCourseManagementFilterCourseCommand
  >;
  /**
   * 課程樣版過濾牧場主檔
   * @type {Array<CourseManagementFilterPastoralBase | CourseManagementFilterPastoralView | UpdateCourseManagementFilterPastoralCommand | CreateCourseManagementFilterPastoralCommand>}
   * @memberof UpdateCourseManagementCommand
   */
  courseManagementFilterPastorals: Array<
    | CourseManagementFilterPastoralBase
    | CourseManagementFilterPastoralView
    | UpdateCourseManagementFilterPastoralCommand
    | CreateCourseManagementFilterPastoralCommand
  >;
  /**
   * 課程樣版過濾職份主檔
   * @type {Array<CourseManagementFilterRespBase | CourseManagementFilterRespView | UpdateCourseManagementFilterRespCommand | CreateCourseManagementFilterRespCommand>}
   * @memberof UpdateCourseManagementCommand
   */
  courseManagementFilterResps: Array<
    | CourseManagementFilterRespBase
    | CourseManagementFilterRespView
    | UpdateCourseManagementFilterRespCommand
    | CreateCourseManagementFilterRespCommand
  >;
  /**
   * 課程樣版過濾會員
   * @type {Array<CourseManagementFilterUserBase | CourseManagementFilterUserView | UpdateCourseManagementFilterUserCommand | CreateCourseManagementFilterUserCommand>}
   * @memberof UpdateCourseManagementCommand
   */
  courseManagementFilterUsers: Array<
    | CourseManagementFilterUserBase
    | CourseManagementFilterUserView
    | UpdateCourseManagementFilterUserCommand
    | CreateCourseManagementFilterUserCommand
  >;
}
/**
 * 更新  CourseManagementFilter
 * @export
 * @interface UpdateCourseManagementFilterCommand
 */
export interface UpdateCourseManagementFilterCommand {
  /**
   * id
   * @type {number}
   * @memberof UpdateCourseManagementFilterCommand
   */
  id: number;
  /**
   * 課程樣板CourseManagement.Id
   * @type {number}
   * @memberof UpdateCourseManagementFilterCommand
   */
  courseManagementId: number;
  /**
   * 堂點Id Organization.Id
   * @type {number}
   * @memberof UpdateCourseManagementFilterCommand
   */
  organizationId: number;
  /**
   * 課程性別限制
   * @type {string}
   * @memberof UpdateCourseManagementFilterCommand
   */
  courseSex: string;
  /**
   * 年齡門檻上
   * @type {number}
   * @memberof UpdateCourseManagementFilterCommand
   */
  ageUp: number;
  /**
   * 年齡門檻下
   * @type {number}
   * @memberof UpdateCourseManagementFilterCommand
   */
  ageDown: number;
}
/**
 * 更新  CourseManagementFilterCourse
 * @export
 * @interface UpdateCourseManagementFilterCourseCommand
 */
export interface UpdateCourseManagementFilterCourseCommand {
  /**
   * id
   * @type {number}
   * @memberof UpdateCourseManagementFilterCourseCommand
   */
  id: number;
  /**
   * 課程樣板過濾CourseManagementFilter.Id
   * @type {number}
   * @memberof UpdateCourseManagementFilterCourseCommand
   */
  courseManagementFilterId: number;
  /**
   * CourseManagement.Id
   * @type {number}
   * @memberof UpdateCourseManagementFilterCourseCommand
   */
  courseManagementId: number;
}
/**
 * 更新  CourseManagementFilterPastoral
 * @export
 * @interface UpdateCourseManagementFilterPastoralCommand
 */
export interface UpdateCourseManagementFilterPastoralCommand {
  /**
   * id
   * @type {number}
   * @memberof UpdateCourseManagementFilterPastoralCommand
   */
  id: number;
  /**
   * 課程樣板過濾CourseManagementFilter.Id
   * @type {number}
   * @memberof UpdateCourseManagementFilterPastoralCommand
   */
  courseManagementFilterId: number;
  /**
   * Pastoral.Id
   * @type {number}
   * @memberof UpdateCourseManagementFilterPastoralCommand
   */
  pastoralId: number;
}
/**
 * 更新  CourseManagementFilterResp
 * @export
 * @interface UpdateCourseManagementFilterRespCommand
 */
export interface UpdateCourseManagementFilterRespCommand {
  /**
   * id
   * @type {number}
   * @memberof UpdateCourseManagementFilterRespCommand
   */
  id: number;
  /**
   * 課程樣板過濾CourseManagementFilter.Id
   * @type {number}
   * @memberof UpdateCourseManagementFilterRespCommand
   */
  courseManagementFilterId: number;
  /**
   * MinistryResp.Id
   * @type {number}
   * @memberof UpdateCourseManagementFilterRespCommand
   */
  ministryRespId: number;
}
/**
 * 更新  CourseManagementFilterUser
 * @export
 * @interface UpdateCourseManagementFilterUserCommand
 */
export interface UpdateCourseManagementFilterUserCommand {
  /**
   * id
   * @type {number}
   * @memberof UpdateCourseManagementFilterUserCommand
   */
  id: number;
  /**
   * 課程樣板過濾CourseManagementFilter.Id
   * @type {number}
   * @memberof UpdateCourseManagementFilterUserCommand
   */
  courseManagementFilterId: number;
  /**
   * User.Id
   * @type {number}
   * @memberof UpdateCourseManagementFilterUserCommand
   */
  userId: number;
}
/**
 * 更新  CourseManagementType
 * @export
 * @interface UpdateCourseManagementTypeCommand
 */
export interface UpdateCourseManagementTypeCommand {
  /**
   * id
   * @type {number}
   * @memberof UpdateCourseManagementTypeCommand
   */
  id: number;
  /**
   * 課程類別編號
   * @type {string}
   * @memberof UpdateCourseManagementTypeCommand
   */
  courseManagementTypeNo: string;
  /**
   * 課程類別名稱
   * @type {string}
   * @memberof UpdateCourseManagementTypeCommand
   */
  name: string;
  /**
   * 備註
   * @type {string}
   * @memberof UpdateCourseManagementTypeCommand
   */
  remark: string;
  /**
   * 狀態
   * @type {string}
   * @memberof UpdateCourseManagementTypeCommand
   */
  statusCd: string;
}
/**
 * 更新  CourseOrganization
 * @export
 * @interface UpdateCourseOrganizationCommand
 */
export interface UpdateCourseOrganizationCommand {
  /**
   * id
   * @type {number}
   * @memberof UpdateCourseOrganizationCommand
   */
  id: number;
  /**
   * 課程類別Course.Id
   * @type {number}
   * @memberof UpdateCourseOrganizationCommand
   */
  courseId: number;
  /**
   * Organization.Id
   * @type {number}
   * @memberof UpdateCourseOrganizationCommand
   */
  organizationId: number;
}
/**
 * 更新  CoursePrice
 * @export
 * @interface UpdateCoursePriceCommand
 */
export interface UpdateCoursePriceCommand {
  /**
   * id
   * @type {number}
   * @memberof UpdateCoursePriceCommand
   */
  id: number;
  /**
   * 課程類別Course.Id
   * @type {number}
   * @memberof UpdateCoursePriceCommand
   */
  courseId: number;
  /**
   * 價格名稱
   * @type {string}
   * @memberof UpdateCoursePriceCommand
   */
  priceName: string;
  /**
   * 價格
   * @type {number}
   * @memberof UpdateCoursePriceCommand
   */
  price: number;
  /**
   * 是否公開對應type=IsYN顯示 namevalue存此欄位0：N1：Y
   * @type {string}
   * @memberof UpdateCoursePriceCommand
   */
  isPublic: string;
  /**
   * 是否超過優惠日期後關閉對應type=IsYN顯示 namevalue存此欄0N1Yif1ThendataTimeCourse.DiscountSignUpDate關閉此選項
   * @type {string}
   * @memberof UpdateCoursePriceCommand
   */
  isDueDate: string;
}
/**
 * 更新  CourseTimeSchedule
 * @export
 * @interface UpdateCourseTimeScheduleCommand
 */
export interface UpdateCourseTimeScheduleCommand {
  /**
   * id
   * @type {number}
   * @memberof UpdateCourseTimeScheduleCommand
   */
  id: number;
  /**
   * 課程類別Course.Id
   * @type {number}
   * @memberof UpdateCourseTimeScheduleCommand
   */
  courseId: number;
  /**
   * 代號/梯次
   * @type {string}
   * @memberof UpdateCourseTimeScheduleCommand
   */
  scheduleNo: string;
  /**
   * 附件類別對應type=ClassDay顯示 namevalue存此欄位1：一2：二….
   * @type {string}
   * @memberof UpdateCourseTimeScheduleCommand
   */
  classDay: string;
  /**
   * 開始時間
   * @type {string}
   * @memberof UpdateCourseTimeScheduleCommand
   */
  classTimeS: string;
  /**
   * 結束時間
   * @type {string}
   * @memberof UpdateCourseTimeScheduleCommand
   */
  classTimeE: string;
  /**
   * 地點
   * @type {string}
   * @memberof UpdateCourseTimeScheduleCommand
   */
  place: string;
}
/**
 * 更新  CourseTimeScheduleTeacher
 * @export
 * @interface UpdateCourseTimeScheduleTeacherCommand
 */
export interface UpdateCourseTimeScheduleTeacherCommand {
  /**
   * id
   * @type {number}
   * @memberof UpdateCourseTimeScheduleTeacherCommand
   */
  id: number;
  /**
   * 課程時段CourseTimeSchedule.Id
   * @type {number}
   * @memberof UpdateCourseTimeScheduleTeacherCommand
   */
  courseTimeScheduleId: number;
  /**
   * 代號/梯次
   * @type {string}
   * @memberof UpdateCourseTimeScheduleTeacherCommand
   */
  scheduleNo: string;
  /**
   * Teacher.Id
   * @type {number}
   * @memberof UpdateCourseTimeScheduleTeacherCommand
   */
  teacherId: number;
  /**
   * 實際上課日
   * @type {string}
   * @memberof UpdateCourseTimeScheduleTeacherCommand
   */
  realClassDate: string;
}
/**
 * 更新  CourseTimeScheduleUser
 * @export
 * @interface UpdateCourseTimeScheduleUserCommand
 */
export interface UpdateCourseTimeScheduleUserCommand {
  /**
   * id
   * @type {number}
   * @memberof UpdateCourseTimeScheduleUserCommand
   */
  id: number;
  /**
   * 課程時段CourseTimeSchedule.Id
   * @type {number}
   * @memberof UpdateCourseTimeScheduleUserCommand
   */
  courseTimeScheduleId: number;
  /**
   * 代號/梯次
   * @type {string}
   * @memberof UpdateCourseTimeScheduleUserCommand
   */
  scheduleNo: string;
  /**
   * User.Id
   * @type {number}
   * @memberof UpdateCourseTimeScheduleUserCommand
   */
  userId: number;
  /**
   * 出席狀態
   * @type {string}
   * @memberof UpdateCourseTimeScheduleUserCommand
   */
  attendanceType: string;
}
/**
 * 更新  Dept
 * @export
 * @interface UpdateDeptCommand
 */
export interface UpdateDeptCommand {
  /**
   * Id
   * @type {number}
   * @memberof UpdateDeptCommand
   */
  id: number;
  /**
   * 舊的Id
   * @type {number}
   * @memberof UpdateDeptCommand
   */
  upperDeptId: number;
  /**
   * 部門名稱
   * @type {string}
   * @memberof UpdateDeptCommand
   */
  name: string;
  /**
   * 部門主管職稱
   * @type {string}
   * @memberof UpdateDeptCommand
   */
  title: string;
  /**
   *
   * @type {string}
   * @memberof UpdateDeptCommand
   */
  comment: string;
  /**
   *
   * @type {string}
   * @memberof UpdateDeptCommand
   */
  dateCreate?: string | null;
  /**
   *
   * @type {string}
   * @memberof UpdateDeptCommand
   */
  userCreate?: string | null;
  /**
   *
   * @type {string}
   * @memberof UpdateDeptCommand
   */
  dateUpdate?: string | null;
  /**
   *
   * @type {string}
   * @memberof UpdateDeptCommand
   */
  userUpdate?: string | null;
}
/**
 * 更新  MeetingPoint
 * @export
 * @interface UpdateMeetingPointCommand
 */
export interface UpdateMeetingPointCommand {
  /**
   * id
   * @type {number}
   * @memberof UpdateMeetingPointCommand
   */
  id: number;
  /**
   * 聚會點名稱
   * @type {string}
   * @memberof UpdateMeetingPointCommand
   */
  name: string;
  /**
   * id
   * @type {string}
   * @memberof UpdateMeetingPointCommand
   */
  statusCd: string;
  /**
   *
   * @type {string}
   * @memberof UpdateMeetingPointCommand
   */
  comment: string;
  /**
   *
   * @type {string}
   * @memberof UpdateMeetingPointCommand
   */
  dateCreate?: string | null;
  /**
   *
   * @type {string}
   * @memberof UpdateMeetingPointCommand
   */
  userCreate?: string | null;
  /**
   *
   * @type {string}
   * @memberof UpdateMeetingPointCommand
   */
  dateUpdate?: string | null;
  /**
   *
   * @type {string}
   * @memberof UpdateMeetingPointCommand
   */
  userUpdate?: string | null;
  /**
   *
   * @type {number}
   * @memberof UpdateMeetingPointCommand
   */
  isActivated: number;
}
/**
 * 更新  MessageInformation
 * @export
 * @interface UpdateMessageInformationCommand
 */
export interface UpdateMessageInformationCommand {
  /**
   * id
   * @type {number}
   * @memberof UpdateMessageInformationCommand
   */
  id: number;
  /**
   * Organization.Id 旌旗id
   * @type {number}
   * @memberof UpdateMessageInformationCommand
   */
  organizationId: number;
  /**
   * MeetingPoint.Id 聚會點id
   * @type {number}
   * @memberof UpdateMessageInformationCommand
   */
  meetingPointId: number;
  /**
   * Pastoral.Id 牧養組織id
   * @type {number}
   * @memberof UpdateMessageInformationCommand
   */
  pastoralId: number;
  /**
   * MinistryResp.Id 牧養身分
   * @type {number}
   * @memberof UpdateMessageInformationCommand
   */
  ministryRespId: number;
  /**
   * Ministry.Id 事工團
   * @type {number}
   * @memberof UpdateMessageInformationCommand
   */
  ministryId: number;
  /**
   * CourseId 課程名稱 課程代碼
   * @type {number}
   * @memberof UpdateMessageInformationCommand
   */
  courseId: number;
  /**
   * 性別 對應SystemConfigtype=GenderType顯示 namevalue存此欄位0：女姓1：男性
   * @type {string}
   * @memberof UpdateMessageInformationCommand
   */
  genderType: string;
  /**
   * 性別 對應SystemConfigtype=BirthdayYearRange顯示 namevalue存此欄位0：1920   1：1930  2:1940  3:1950  4:1960  5:1970   6:1980  7:1990  8:2000   9:2010   10:2020
   * @type {string}
   * @memberof UpdateMessageInformationCommand
   */
  birthdayYearRange: string;
  /**
   * 職業type=EduType顯示 namevalue存此欄位0：老師1：家管…
   * @type {string}
   * @memberof UpdateMessageInformationCommand
   */
  professionType: string;
  /**
   * 推播訊息描述
   * @type {string}
   * @memberof UpdateMessageInformationCommand
   */
  title: string;
  /**
   * 推播訊息內容
   * @type {string}
   * @memberof UpdateMessageInformationCommand
   */
  descriptions: string;
  /**
   * 職業type=MessageSendType namevalue存此欄位0：尚未推播    1：已推播
   * @type {string}
   * @memberof UpdateMessageInformationCommand
   */
  messageSendType: string;
  /**
   * 發送數量Line
   * @type {number}
   * @memberof UpdateMessageInformationCommand
   */
  sendLineCounter: number;
  /**
   * 發送數量Email
   * @type {number}
   * @memberof UpdateMessageInformationCommand
   */
  sendEmailCounter: number;
  /**
   * 發送數量SMS
   * @type {number}
   * @memberof UpdateMessageInformationCommand
   */
  sendSMSCounter: number;
  /**
   * 備註
   * @type {string}
   * @memberof UpdateMessageInformationCommand
   */
  remark: string;
  /**
   * 狀態
   * @type {string}
   * @memberof UpdateMessageInformationCommand
   */
  statusCd: string;
}
/**
 * 更新  MessageInformationUser
 * @export
 * @interface UpdateMessageInformationUserCommand
 */
export interface UpdateMessageInformationUserCommand {
  /**
   * id
   * @type {number}
   * @memberof UpdateMessageInformationUserCommand
   */
  id: number;
  /**
   * MessageInformation.Id MessageInformationid
   * @type {number}
   * @memberof UpdateMessageInformationUserCommand
   */
  messageInformationId: number;
  /**
   * User.Id Userid
   * @type {number}
   * @memberof UpdateMessageInformationUserCommand
   */
  userId: number;
  /**
   * User.LineId
   * @type {string}
   * @memberof UpdateMessageInformationUserCommand
   */
  lineId: string;
  /**
   * User.Email1
   * @type {string}
   * @memberof UpdateMessageInformationUserCommand
   */
  email: string;
  /**
   * User.CellPhone
   * @type {string}
   * @memberof UpdateMessageInformationUserCommand
   */
  sms: string;
  /**
   * 狀態
   * @type {string}
   * @memberof UpdateMessageInformationUserCommand
   */
  statusCd: string;
}
/**
 * 更新  Ministry
 * @export
 * @interface UpdateMinistryCommand
 */
export interface UpdateMinistryCommand {
  /**
   * id
   * @type {number}
   * @memberof UpdateMinistryCommand
   */
  id: number;
  /**
   * Organization.Id
   * @type {number}
   * @memberof UpdateMinistryCommand
   */
  organizationId: number;
  /**
   * 組織名稱
   * @type {string}
   * @memberof UpdateMinistryCommand
   */
  organizationName: string;
  /**
   * 事工團分類id
   * @type {number}
   * @memberof UpdateMinistryCommand
   */
  ministryDefId: number;
  /**
   * 事工團編號
   * @type {string}
   * @memberof UpdateMinistryCommand
   */
  ministryNo: string;
  /**
   * 事工團名稱
   * @type {string}
   * @memberof UpdateMinistryCommand
   */
  name: string;
  /**
   * 是否兒童事工團
   * @type {string}
   * @memberof UpdateMinistryCommand
   */
  childMinistry: string;
  /**
   * 事工團狀態
   * @type {string}
   * @memberof UpdateMinistryCommand
   */
  ministryStatus: string;
  /**
   * 性質
   * @type {string}
   * @memberof UpdateMinistryCommand
   */
  nature: string;
  /**
   * id
   * @type {string}
   * @memberof UpdateMinistryCommand
   */
  statusCd: string;
  /**
   *
   * @type {string}
   * @memberof UpdateMinistryCommand
   */
  comment: string;
  /**
   *
   * @type {string}
   * @memberof UpdateMinistryCommand
   */
  dateCreate?: string | null;
  /**
   *
   * @type {string}
   * @memberof UpdateMinistryCommand
   */
  userCreate?: string | null;
  /**
   *
   * @type {string}
   * @memberof UpdateMinistryCommand
   */
  dateUpdate?: string | null;
  /**
   *
   * @type {string}
   * @memberof UpdateMinistryCommand
   */
  userUpdate?: string | null;
}
/**
 * 更新  MinistryDef
 * @export
 * @interface UpdateMinistryDefCommand
 */
export interface UpdateMinistryDefCommand {
  /**
   * id
   * @type {number}
   * @memberof UpdateMinistryDefCommand
   */
  id: number;
  /**
   * 事工團分類代碼
   * @type {string}
   * @memberof UpdateMinistryDefCommand
   */
  ministryDefNo: string;
  /**
   * 事工團分類名稱
   * @type {string}
   * @memberof UpdateMinistryDefCommand
   */
  name: string;
  /**
   * 事工團類別狀態
   * @type {string}
   * @memberof UpdateMinistryDefCommand
   */
  ministryDefStatus: string;
  /**
   * 事工團類別  MinistryDefType 0一般事工團   1小組
   * @type {string}
   * @memberof UpdateMinistryDefCommand
   */
  ministryDefType: string;
  /**
   * id
   * @type {string}
   * @memberof UpdateMinistryDefCommand
   */
  statusCd: string;
  /**
   *
   * @type {string}
   * @memberof UpdateMinistryDefCommand
   */
  comment: string;
  /**
   *
   * @type {string}
   * @memberof UpdateMinistryDefCommand
   */
  dateCreate?: string | null;
  /**
   *
   * @type {string}
   * @memberof UpdateMinistryDefCommand
   */
  userCreate?: string | null;
  /**
   *
   * @type {string}
   * @memberof UpdateMinistryDefCommand
   */
  dateUpdate?: string | null;
  /**
   *
   * @type {string}
   * @memberof UpdateMinistryDefCommand
   */
  userUpdate?: string | null;
  /**
   *
   * @type {number}
   * @memberof UpdateMinistryDefCommand
   */
  isActivated: number;
}
/**
 * 更新  MinistryMeeting
 * @export
 * @interface UpdateMinistryMeetingCommand
 */
export interface UpdateMinistryMeetingCommand {
  /**
   *
   * @type {number}
   * @memberof UpdateMinistryMeetingCommand
   */
  id: number;
  /**
   * Ministry.Id
   * @type {number}
   * @memberof UpdateMinistryMeetingCommand
   */
  ministryId: number;
  /**
   * 小組聚會每周哪一天
   * @type {string}
   * @memberof UpdateMinistryMeetingCommand
   */
  meetingDayOfWeek: string;
  /**
   * 聚會時間
   * @type {string}
   * @memberof UpdateMinistryMeetingCommand
   */
  meetingTime: string;
  /**
   * 聚會地點
   * @type {string}
   * @memberof UpdateMinistryMeetingCommand
   */
  meetingAddress: string;
  /**
   * 聚會日期
   * @type {string}
   * @memberof UpdateMinistryMeetingCommand
   */
  meetingDay: string;
  /**
   * 是否為外展對應SystemConfigtype=IsNY顯示 namevalue存此欄位0：N1：Y
   * @type {string}
   * @memberof UpdateMinistryMeetingCommand
   */
  isExp: string;
  /**
   * 是否可查詢，否表示隱藏小組
   * @type {string}
   * @memberof UpdateMinistryMeetingCommand
   */
  isSearchable: string;
  /**
   * 聚會狀態對應SystemConfigtype=MeetType顯示 namevalue存此欄位0：尚未開始1：正常舉行2：停辦
   * @type {string}
   * @memberof UpdateMinistryMeetingCommand
   */
  meetType: string;
}
/**
 * 更新  MinistryMeetingUser
 * @export
 * @interface UpdateMinistryMeetingUserCommand
 */
export interface UpdateMinistryMeetingUserCommand {
  /**
   *
   * @type {number}
   * @memberof UpdateMinistryMeetingUserCommand
   */
  id: number;
  /**
   * MinistryMeeting.Id
   * @type {number}
   * @memberof UpdateMinistryMeetingUserCommand
   */
  ministryMeetingId: number;
  /**
   * User.Id
   * @type {number}
   * @memberof UpdateMinistryMeetingUserCommand
   */
  userId: number;
  /**
   * 是否聚會出席狀態        對應SystemConfig        type = MeetAttendanceType顯示 namevalue存此欄位0：尚未開課1：已出席2:未出席
   * @type {number}
   * @memberof UpdateMinistryMeetingUserCommand
   */
  meetAttendanceType: number;
  /**
   * MinistryDef.Name
   * @type {string}
   * @memberof UpdateMinistryMeetingUserCommand
   */
  ministryDefName: string;
  /**
   * Ministry.Name
   * @type {string}
   * @memberof UpdateMinistryMeetingUserCommand
   */
  ministryName: string;
  /**
   * MinistryResp.Name
   * @type {string}
   * @memberof UpdateMinistryMeetingUserCommand
   */
  ministryRespName: string;
}
/**
 * 更新  MinistryResp
 * @export
 * @interface UpdateMinistryRespCommand
 */
export interface UpdateMinistryRespCommand {
  /**
   * 事工團職分明細
   * @type {Array<UpdateMinistryRespUserCommand>}
   * @memberof UpdateMinistryRespCommand
   */
  ministryRespUsers: Array<UpdateMinistryRespUserCommand>;
  /**
   * id
   * @type {number}
   * @memberof UpdateMinistryRespCommand
   */
  id: number;
  /**
   * 事工團.Id
   * @type {number}
   * @memberof UpdateMinistryRespCommand
   */
  ministryId: number;
  /**
   * 順序
   * @type {number}
   * @memberof UpdateMinistryRespCommand
   */
  seq: number;
  /**
   * 事工團職份名稱
   * @type {string}
   * @memberof UpdateMinistryRespCommand
   */
  name: string;
  /**
   * 是否管理職是否管理職        對應type=IsYN        顯示 name        value存此欄位 0：N 1：Y
   * @type {string}
   * @memberof UpdateMinistryRespCommand
   */
  manageType: string;
  /**
   * id
   * @type {string}
   * @memberof UpdateMinistryRespCommand
   */
  statusCd: string;
  /**
   *
   * @type {string}
   * @memberof UpdateMinistryRespCommand
   */
  comment: string;
  /**
   *
   * @type {number}
   * @memberof UpdateMinistryRespCommand
   */
  isActivated: number;
}
/**
 * 更新  MinistryRespUser
 * @export
 * @interface UpdateMinistryRespUserCommand
 */
export interface UpdateMinistryRespUserCommand {
  /**
   * id
   * @type {number}
   * @memberof UpdateMinistryRespUserCommand
   */
  id: number;
  /**
   * 事工團職分明細主檔id
   * @type {number}
   * @memberof UpdateMinistryRespUserCommand
   */
  ministryRespId: number;
  /**
   * User.Id
   * @type {number}
   * @memberof UpdateMinistryRespUserCommand
   */
  userId: number;
  /**
   * 異動記錄
   * @type {number}
   * @memberof UpdateMinistryRespUserCommand
   */
  ministryRespUserStatus: number;
  /**
   *
   * @type {string}
   * @memberof UpdateMinistryRespUserCommand
   */
  statusCd: string;
  /**
   *
   * @type {string}
   * @memberof UpdateMinistryRespUserCommand
   */
  comment: string;
  /**
   *
   * @type {number}
   * @memberof UpdateMinistryRespUserCommand
   */
  isActivated: number;
}
/**
 * 更新  MinistrySchedule
 * @export
 * @interface UpdateMinistryScheduleCommand
 */
export interface UpdateMinistryScheduleCommand {
  /**
   *
   * @type {Array<CreateMinistryScheduleDetailCommand>}
   * @memberof UpdateMinistryScheduleCommand
   */
  ministryScheduleDetails: Array<CreateMinistryScheduleDetailCommand>;
  /**
   * Id
   * @type {number}
   * @memberof UpdateMinistryScheduleCommand
   */
  id: number;
  /**
   * Ministry.Id
   * @type {number}
   * @memberof UpdateMinistryScheduleCommand
   */
  ministryId: number;
  /**
   * 排程名稱
   * @type {string}
   * @memberof UpdateMinistryScheduleCommand
   */
  name: string;
  /**
   * 週期類別        對應type=CycleType        顯示 name         value存此欄位 0：固定週期 1：非固定週期(偶發類型)
   * @type {string}
   * @memberof UpdateMinistryScheduleCommand
   */
  cycleType: string;
  /**
   * 重複間隔
   * @type {string}
   * @memberof UpdateMinistryScheduleCommand
   */
  repeatTime: string;
  /**
   * 重複間隔單位        對應type=RepeatTimeUnit        顯示 name        value存此欄位 0：日 1：週 2：月 3：年
   * @type {string}
   * @memberof UpdateMinistryScheduleCommand
   */
  repeatTimeUnit: string;
  /**
   * 結束時間類別        對應type=EndDateType        顯示 name        value存此欄位 0：持續不停 1：於 2：重複
   * @type {string}
   * @memberof UpdateMinistryScheduleCommand
   */
  endDateType: string;
  /**
   * 結束時間日期
   * @type {string}
   * @memberof UpdateMinistryScheduleCommand
   */
  endDate: string;
  /**
   * 結束時間日期
   * @type {string}
   * @memberof UpdateMinistryScheduleCommand
   */
  repeaTimes: string;
}
/**
 * 更新  MinistryScheduleDetail
 * @export
 * @interface UpdateMinistryScheduleDetailCommand
 */
export interface UpdateMinistryScheduleDetailCommand {
  /**
   * 排程明細id
   * @type {number}
   * @memberof UpdateMinistryScheduleDetailCommand
   */
  id: number;
  /**
   * MinistrySchedule.Id
   * @type {number}
   * @memberof UpdateMinistryScheduleDetailCommand
   */
  ministryScheduleId: number;
  /**
   * 堂表名稱 例如：第一堂
   * @type {string}
   * @memberof UpdateMinistryScheduleDetailCommand
   */
  name: string;
  /**
   * 描述  例如 09:00~10:00
   * @type {string}
   * @memberof UpdateMinistryScheduleDetailCommand
   */
  description: string;
}
/**
 * 更新  ModMember
 * @export
 * @interface UpdateModMemberCommand
 */
export interface UpdateModMemberCommand {
  /**
   *
   * @type {number}
   * @memberof UpdateModMemberCommand
   */
  id: number;
  /**
   *
   * @type {string}
   * @memberof UpdateModMemberCommand
   */
  portalId: string;
  /**
   *
   * @type {string}
   * @memberof UpdateModMemberCommand
   */
  name: string;
  /**
   *
   * @type {string}
   * @memberof UpdateModMemberCommand
   */
  engName: string;
  /**
   *
   * @type {string}
   * @memberof UpdateModMemberCommand
   */
  userId: string;
  /**
   *
   * @type {number}
   * @memberof UpdateModMemberCommand
   */
  categoryId: number;
  /**
   *
   * @type {string}
   * @memberof UpdateModMemberCommand
   */
  identifier: string;
  /**
   *
   * @type {string}
   * @memberof UpdateModMemberCommand
   */
  idnumber: string;
  /**
   *
   * @type {string}
   * @memberof UpdateModMemberCommand
   */
  email: string;
  /**
   *
   * @type {string}
   * @memberof UpdateModMemberCommand
   */
  contactPhone: string;
  /**
   *
   * @type {string}
   * @memberof UpdateModMemberCommand
   */
  contactCellPhone: string;
  /**
   *
   * @type {string}
   * @memberof UpdateModMemberCommand
   */
  contactCellPhone2: string;
  /**
   *
   * @type {string}
   * @memberof UpdateModMemberCommand
   */
  contactCity: string;
  /**
   *
   * @type {string}
   * @memberof UpdateModMemberCommand
   */
  contactZipCode: string;
  /**
   *
   * @type {string}
   * @memberof UpdateModMemberCommand
   */
  contactAddress: string;
  /**
   *
   * @type {string}
   * @memberof UpdateModMemberCommand
   */
  homeAddress: string;
  /**
   *
   * @type {string}
   * @memberof UpdateModMemberCommand
   */
  bizPhone: string;
  /**
   *
   * @type {string}
   * @memberof UpdateModMemberCommand
   */
  fax: string;
  /**
   *
   * @type {string}
   * @memberof UpdateModMemberCommand
   */
  gender: string;
  /**
   *
   * @type {string}
   * @memberof UpdateModMemberCommand
   */
  birthday: string;
  /**
   *
   * @type {string}
   * @memberof UpdateModMemberCommand
   */
  introducer: string;
  /**
   *
   * @type {string}
   * @memberof UpdateModMemberCommand
   */
  introducerGroup: string;
  /**
   *
   * @type {string}
   * @memberof UpdateModMemberCommand
   */
  relativeName: string;
  /**
   *
   * @type {string}
   * @memberof UpdateModMemberCommand
   */
  relativeRelation: string;
  /**
   *
   * @type {string}
   * @memberof UpdateModMemberCommand
   */
  relativeCellPhone: string;
  /**
   *
   * @type {boolean}
   * @memberof UpdateModMemberCommand
   */
  isHasCommitment: boolean;
  /**
   *
   * @type {boolean}
   * @memberof UpdateModMemberCommand
   */
  isBaptize: boolean;
  /**
   *
   * @type {number}
   * @memberof UpdateModMemberCommand
   */
  baptizeTypeId: number;
  /**
   *
   * @type {string}
   * @memberof UpdateModMemberCommand
   */
  baptizeday: string;
  /**
   *
   * @type {string}
   * @memberof UpdateModMemberCommand
   */
  baptizeOrgName: string;
  /**
   *
   * @type {string}
   * @memberof UpdateModMemberCommand
   */
  baptizeGroup: string;
  /**
   *
   * @type {string}
   * @memberof UpdateModMemberCommand
   */
  baptizer: string;
  /**
   *
   * @type {string}
   * @memberof UpdateModMemberCommand
   */
  firstSermon: string;
  /**
   *
   * @type {string}
   * @memberof UpdateModMemberCommand
   */
  firstGroupMeeting: string;
  /**
   *
   * @type {string}
   * @memberof UpdateModMemberCommand
   */
  settleDate: string;
  /**
   *
   * @type {string}
   * @memberof UpdateModMemberCommand
   */
  lastMovedDate: string;
  /**
   *
   * @type {boolean}
   * @memberof UpdateModMemberCommand
   */
  isContact: boolean;
  /**
   *
   * @type {boolean}
   * @memberof UpdateModMemberCommand
   */
  isGranted: boolean;
  /**
   *
   * @type {string}
   * @memberof UpdateModMemberCommand
   */
  grantedDate: string;
  /**
   *
   * @type {boolean}
   * @memberof UpdateModMemberCommand
   */
  isFromExp: boolean;
  /**
   *
   * @type {string}
   * @memberof UpdateModMemberCommand
   */
  sourceCd: string;
  /**
   *
   * @type {string}
   * @memberof UpdateModMemberCommand
   */
  groupLeaderDate: string;
  /**
   *
   * @type {boolean}
   * @memberof UpdateModMemberCommand
   */
  isAllowLession: boolean;
  /**
   *
   * @type {string}
   * @memberof UpdateModMemberCommand
   */
  career: string;
  /**
   *
   * @type {string}
   * @memberof UpdateModMemberCommand
   */
  careerComment: string;
  /**
   *
   * @type {string}
   * @memberof UpdateModMemberCommand
   */
  interests: string;
  /**
   *
   * @type {string}
   * @memberof UpdateModMemberCommand
   */
  minister: string;
  /**
   *
   * @type {boolean}
   * @memberof UpdateModMemberCommand
   */
  isEducation: boolean;
  /**
   *
   * @type {string}
   * @memberof UpdateModMemberCommand
   */
  levelofEducation: string;
  /**
   *
   * @type {number}
   * @memberof UpdateModMemberCommand
   */
  educationGrade: number;
  /**
   *
   * @type {string}
   * @memberof UpdateModMemberCommand
   */
  educationSchool: string;
  /**
   *
   * @type {string}
   * @memberof UpdateModMemberCommand
   */
  schoolTimeCd: string;
  /**
   *
   * @type {number}
   * @memberof UpdateModMemberCommand
   */
  marriageId: number;
  /**
   *
   * @type {string}
   * @memberof UpdateModMemberCommand
   */
  spouse: string;
  /**
   *
   * @type {string}
   * @memberof UpdateModMemberCommand
   */
  child1: string;
  /**
   *
   * @type {string}
   * @memberof UpdateModMemberCommand
   */
  child2: string;
  /**
   *
   * @type {string}
   * @memberof UpdateModMemberCommand
   */
  child3: string;
  /**
   *
   * @type {string}
   * @memberof UpdateModMemberCommand
   */
  child4: string;
  /**
   *
   * @type {string}
   * @memberof UpdateModMemberCommand
   */
  father: string;
  /**
   *
   * @type {string}
   * @memberof UpdateModMemberCommand
   */
  mother: string;
  /**
   *
   * @type {string}
   * @memberof UpdateModMemberCommand
   */
  contactTimes: string;
  /**
   *
   * @type {string}
   * @memberof UpdateModMemberCommand
   */
  orgName: string;
  /**
   *
   * @type {string}
   * @memberof UpdateModMemberCommand
   */
  department: string;
  /**
   *
   * @type {string}
   * @memberof UpdateModMemberCommand
   */
  area: string;
  /**
   *
   * @type {string}
   * @memberof UpdateModMemberCommand
   */
  zone: string;
  /**
   *
   * @type {string}
   * @memberof UpdateModMemberCommand
   */
  group: string;
  /**
   *
   * @type {string}
   * @memberof UpdateModMemberCommand
   */
  orgPriest: string;
  /**
   *
   * @type {string}
   * @memberof UpdateModMemberCommand
   */
  orgTitle: string;
  /**
   *
   * @type {number}
   * @memberof UpdateModMemberCommand
   */
  groupId: number;
  /**
   *
   * @type {number}
   * @memberof UpdateModMemberCommand
   */
  zoneId: number;
  /**
   *
   * @type {number}
   * @memberof UpdateModMemberCommand
   */
  areaId: number;
  /**
   *
   * @type {boolean}
   * @memberof UpdateModMemberCommand
   */
  isE1: boolean;
  /**
   *
   * @type {boolean}
   * @memberof UpdateModMemberCommand
   */
  isE2: boolean;
  /**
   *
   * @type {boolean}
   * @memberof UpdateModMemberCommand
   */
  isE3: boolean;
  /**
   *
   * @type {boolean}
   * @memberof UpdateModMemberCommand
   */
  isE4: boolean;
  /**
   *
   * @type {boolean}
   * @memberof UpdateModMemberCommand
   */
  isReserved: boolean;
  /**
   *
   * @type {boolean}
   * @memberof UpdateModMemberCommand
   */
  isTerm: boolean;
  /**
   *
   * @type {boolean}
   * @memberof UpdateModMemberCommand
   */
  isGroupAttendExpected: boolean;
  /**
   *
   * @type {boolean}
   * @memberof UpdateModMemberCommand
   */
  isWorshipAttendExpected: boolean;
  /**
   *
   * @type {string}
   * @memberof UpdateModMemberCommand
   */
  statusCd: string;
  /**
   *
   * @type {string}
   * @memberof UpdateModMemberCommand
   */
  comment: string;
  /**
   *
   * @type {string}
   * @memberof UpdateModMemberCommand
   */
  dateCreate?: string | null;
  /**
   *
   * @type {string}
   * @memberof UpdateModMemberCommand
   */
  userCreate?: string | null;
  /**
   *
   * @type {string}
   * @memberof UpdateModMemberCommand
   */
  dateUpdate?: string | null;
  /**
   *
   * @type {string}
   * @memberof UpdateModMemberCommand
   */
  userUpdate?: string | null;
}
/**
 * 更新  Organization
 * @export
 * @interface UpdateOrganizationCommand
 */
export interface UpdateOrganizationCommand {
  /**
   * Id
   * @type {number}
   * @memberof UpdateOrganizationCommand
   */
  id: number;
  /**
   * 組織部門Id
   * @type {number}
   * @memberof UpdateOrganizationCommand
   */
  deptId: number;
  /**
   * 上層的Id
   * @type {number}
   * @memberof UpdateOrganizationCommand
   */
  upperOrganizationId: number;
  /**
   * 舊欄位對應部門id Portal.Id
   * @type {number}
   * @memberof UpdateOrganizationCommand
   */
  portalId: number;
  /**
   * 組織名稱
   * @type {string}
   * @memberof UpdateOrganizationCommand
   */
  name: string;
  /**
   * 主任牧師名稱
   * @type {string}
   * @memberof UpdateOrganizationCommand
   */
  pastorName: string;
  /**
   * 主任牧師User.Id
   * @type {number}
   * @memberof UpdateOrganizationCommand
   */
  pastorId: number;
  /**
   * 主任牧師身分證
   * @type {string}
   * @memberof UpdateOrganizationCommand
   */
  pastor: string;
  /**
   * 主任牧師電話
   * @type {string}
   * @memberof UpdateOrganizationCommand
   */
  pastorphone: string;
  /**
   *
   * @type {string}
   * @memberof UpdateOrganizationCommand
   */
  phone: string;
  /**
   * 教會電話
   * @type {string}
   * @memberof UpdateOrganizationCommand
   */
  fax: string;
  /**
   * 教會傳真
   * @type {string}
   * @memberof UpdateOrganizationCommand
   */
  email: string;
  /**
   * 教會Email
   * @type {string}
   * @memberof UpdateOrganizationCommand
   */
  site: string;
  /**
   * 教會網址
   * @type {string}
   * @memberof UpdateOrganizationCommand
   */
  zip: string;
  /**
   * 教會郵遞區號
   * @type {string}
   * @memberof UpdateOrganizationCommand
   */
  address: string;
  /**
   * 教會地址
   * @type {string}
   * @memberof UpdateOrganizationCommand
   */
  invoiceIdentifier: string;
  /**
   * 教會統一編號抬頭
   * @type {string}
   * @memberof UpdateOrganizationCommand
   */
  invoiceTitle: string;
  /**
   * 是否需要發票抬頭        對應SystemConfig        type = IsYN顯示 namevalue存此欄位0：N1：Y
   * @type {string}
   * @memberof UpdateOrganizationCommand
   */
  isInvoiceTitle: string;
  /**
   * 組織狀態        對應SystemConfig        type =OrgStatus顯示 namevalue存此欄位0：停用 1：正常
   * @type {string}
   * @memberof UpdateOrganizationCommand
   */
  orgStatus: string;
  /**
   * LineToken
   * @type {string}
   * @memberof UpdateOrganizationCommand
   */
  lineToken: string;
  /**
   *
   * @type {string}
   * @memberof UpdateOrganizationCommand
   */
  comment: string;
  /**
   *
   * @type {string}
   * @memberof UpdateOrganizationCommand
   */
  dateCreate?: string | null;
  /**
   *
   * @type {string}
   * @memberof UpdateOrganizationCommand
   */
  userCreate?: string | null;
  /**
   *
   * @type {string}
   * @memberof UpdateOrganizationCommand
   */
  dateUpdate?: string | null;
  /**
   *
   * @type {string}
   * @memberof UpdateOrganizationCommand
   */
  userUpdate?: string | null;
}
/**
 * 修改密碼
 * @export
 * @interface UpdatePasswordCommand
 */
export interface UpdatePasswordCommand {
  /**
   *
   * @type {number}
   * @memberof UpdatePasswordCommand
   */
  userId: number;
  /**
   * 新密碼
   * @type {string}
   * @memberof UpdatePasswordCommand
   */
  password: string;
}
/**
 * 結果
 * @export
 * @interface UpdatePasswordCommandResponse
 */
export interface UpdatePasswordCommandResponse {
  /**
   * 帳號
   * @type {boolean}
   * @memberof UpdatePasswordCommandResponse
   */
  result: boolean;
}
/**
 *
 * @export
 * @interface UpdatePasswordCommandResponseApiResponse
 */
export interface UpdatePasswordCommandResponseApiResponse {
  /**
   *
   * @type {string}
   * @memberof UpdatePasswordCommandResponseApiResponse
   */
  handledId?: string | null;
  /**
   * http-200  0000: 代表處理成功，其餘一律為失敗  http-4xx  Vxxxx: 資料驗證  Bxxxx: 詳見 message 欄位說明
   * @type {string}
   * @memberof UpdatePasswordCommandResponseApiResponse
   */
  code: string;
  /**
   * 回傳訊息
   * @type {string}
   * @memberof UpdatePasswordCommandResponseApiResponse
   */
  message: string;
  /**
   * 錯誤詳細資訊
   * @type {any}
   * @memberof UpdatePasswordCommandResponseApiResponse
   */
  detailMessage: any;
  /**
   *
   * @type {UpdatePasswordCommandResponse}
   * @memberof UpdatePasswordCommandResponseApiResponse
   */
  data: UpdatePasswordCommandResponse;
  /**
   * 交易時間
   * @type {string}
   * @memberof UpdatePasswordCommandResponseApiResponse
   */
  txnTime: string;
}
/**
 * 更新  Pastoral
 * @export
 * @interface UpdatePastoralCommand
 */
export interface UpdatePastoralCommand {
  /**
   * 組織部門Id
   * @type {number}
   * @memberof UpdatePastoralCommand
   */
  deptId: number;
  /**
   * id
   * @type {number}
   * @memberof UpdatePastoralCommand
   */
  id: number;
  /**
   * 組織上層Id (分多階層)        堂點       牧區 督區 區 小組
   * @type {number}
   * @memberof UpdatePastoralCommand
   */
  upperPastoralId: number;
  /**
   * 分組區域名稱
   * @type {string}
   * @memberof UpdatePastoralCommand
   */
  name: string;
  /**
   * 分組區域職稱
   * @type {string}
   * @memberof UpdatePastoralCommand
   */
  title: string;
  /**
   * 小組編號//八碼數字 系統自動產生(為小組時才需填入)
   * @type {string}
   * @memberof UpdatePastoralCommand
   */
  groupNo: string;
  /**
   * 領導人 UserId
   * @type {number}
   * @memberof UpdatePastoralCommand
   */
  leaderId: number;
  /**
   * 領導人身分證
   * @type {string}
   * @memberof UpdatePastoralCommand
   */
  leaderIdnumber: string;
  /**
   * 領導人2 UserId
   * @type {number}
   * @memberof UpdatePastoralCommand
   */
  leader2Id: number;
  /**
   * 領導人2身分證
   * @type {string}
   * @memberof UpdatePastoralCommand
   */
  leader2Idnumber: string;
  /**
   * 領導人3 UserId
   * @type {number}
   * @memberof UpdatePastoralCommand
   */
  leader3Id: number;
  /**
   * 領導人3身分證
   * @type {string}
   * @memberof UpdatePastoralCommand
   */
  leader3Idnumber: string;
  /**
   * 最大權限人UserId
   * @type {number}
   * @memberof UpdatePastoralCommand
   */
  supervisorId: number;
  /**
   * LineToken
   * @type {string}
   * @memberof UpdatePastoralCommand
   */
  lineToken: string;
  /**
   *
   * @type {number}
   * @memberof UpdatePastoralCommand
   */
  upperOrganizationId: number;
  /**
   *
   * @type {number}
   * @memberof UpdatePastoralCommand
   */
  orgId: number;
  /**
   *
   * @type {string}
   * @memberof UpdatePastoralCommand
   */
  typeId: string;
  /**
   *
   * @type {string}
   * @memberof UpdatePastoralCommand
   */
  statusCd: string;
  /**
   *
   * @type {string}
   * @memberof UpdatePastoralCommand
   */
  comment: string;
  /**
   *
   * @type {string}
   * @memberof UpdatePastoralCommand
   */
  dateCreate?: string | null;
  /**
   *
   * @type {string}
   * @memberof UpdatePastoralCommand
   */
  userCreate?: string | null;
  /**
   *
   * @type {string}
   * @memberof UpdatePastoralCommand
   */
  dateUpdate?: string | null;
  /**
   *
   * @type {string}
   * @memberof UpdatePastoralCommand
   */
  userUpdate?: string | null;
  /**
   *
   * @type {number}
   * @memberof UpdatePastoralCommand
   */
  isActivated: number;
}
/**
 * 更新  PastoralMeeting
 * @export
 * @interface UpdatePastoralMeetingCommand
 */
export interface UpdatePastoralMeetingCommand {
  /**
   * id
   * @type {number}
   * @memberof UpdatePastoralMeetingCommand
   */
  id: number;
  /**
   * Pastoral.Id
   * @type {number}
   * @memberof UpdatePastoralMeetingCommand
   */
  pastoralId: number;
  /**
   * 小組聚會每周哪一天
   * @type {string}
   * @memberof UpdatePastoralMeetingCommand
   */
  meetingDayOfWeek: string;
  /**
   * 聚會時間
   * @type {string}
   * @memberof UpdatePastoralMeetingCommand
   */
  meetingTime: string;
  /**
   * 聚會地點
   * @type {string}
   * @memberof UpdatePastoralMeetingCommand
   */
  meetingAddress: string;
  /**
   * 聚會日期
   * @type {string}
   * @memberof UpdatePastoralMeetingCommand
   */
  meetingDay: string;
  /**
   * 是否為外展對應SystemConfigtype=IsNY顯示 namevalue存此欄位0：N1：Y
   * @type {string}
   * @memberof UpdatePastoralMeetingCommand
   */
  isExp: string;
  /**
   * 是否可查詢，否表示隱藏小組
   * @type {string}
   * @memberof UpdatePastoralMeetingCommand
   */
  isSearchable: string;
  /**
   * 聚會狀態對應SystemConfigtype=MeetType顯示 namevalue存此欄位0：尚未開始1：正常舉行2：停辦
   * @type {string}
   * @memberof UpdatePastoralMeetingCommand
   */
  meetType: string;
}
/**
 * 更新  PastoralMeetingUser
 * @export
 * @interface UpdatePastoralMeetingUserCommand
 */
export interface UpdatePastoralMeetingUserCommand {
  /**
   * id
   * @type {number}
   * @memberof UpdatePastoralMeetingUserCommand
   */
  id: number;
  /**
   * PastoralMeeting.Id
   * @type {number}
   * @memberof UpdatePastoralMeetingUserCommand
   */
  pastoralMeetingId: number;
  /**
   * User.Id
   * @type {number}
   * @memberof UpdatePastoralMeetingUserCommand
   */
  userId: number;
  /**
   * 是否聚會出席狀態        對應SystemConfig        type = MeetAttendanceType顯示 namevalue存此欄位0：尚未開課1：已出席2:未出席
   * @type {number}
   * @memberof UpdatePastoralMeetingUserCommand
   */
  meetAttendanceType: number;
}
/**
 * 更新  Privilege
 * @export
 * @interface UpdatePrivilegeCommand
 */
export interface UpdatePrivilegeCommand {
  /**
   *
   * @type {string}
   * @memberof UpdatePrivilegeCommand
   */
  id: string;
  /**
   * 6 碼 ABCD1234
   * @type {string}
   * @memberof UpdatePrivilegeCommand
   */
  functionId: string;
  /**
   * 父層功能 Id
   * @type {string}
   * @memberof UpdatePrivilegeCommand
   */
  parentFunctionId: string;
  /**
   * 功能名稱
   * @type {string}
   * @memberof UpdatePrivilegeCommand
   */
  name: string;
  /**
   * 排序
   * @type {number}
   * @memberof UpdatePrivilegeCommand
   */
  sort: number;
  /**
   *
   * @type {PrivilegeNodeType}
   * @memberof UpdatePrivilegeCommand
   */
  linkType: PrivilegeNodeType;
  /**
   * QueryParams
   * @type {string}
   * @memberof UpdatePrivilegeCommand
   */
  queryParams: string;
  /**
   * 圖示
   * @type {string}
   * @memberof UpdatePrivilegeCommand
   */
  icon: string;
  /**
   * 檢視
   * @type {boolean}
   * @memberof UpdatePrivilegeCommand
   */
  viewGranted: boolean;
  /**
   * 新增/編輯
   * @type {boolean}
   * @memberof UpdatePrivilegeCommand
   */
  modifyGranted: boolean;
  /**
   * 刪除
   * @type {boolean}
   * @memberof UpdatePrivilegeCommand
   */
  deleteGranted: boolean;
  /**
   * 上傳
   * @type {boolean}
   * @memberof UpdatePrivilegeCommand
   */
  uploadGranted: boolean;
  /**
   * 下載
   * @type {boolean}
   * @memberof UpdatePrivilegeCommand
   */
  downloadGranted: boolean;
  /**
   *
   * @type {string}
   * @memberof UpdatePrivilegeCommand
   */
  comment: string;
}
/**
 * 更新  QrCode
 * @export
 * @interface UpdateQrCodeCommand
 */
export interface UpdateQrCodeCommand {
  /**
   *
   * @type {number}
   * @memberof UpdateQrCodeCommand
   */
  id: number;
  /**
   * 報到類別對應 systemconfig.Type=RefferenceType 0:兒童個人報到專用 1:小組報到 2:主日報到 3:領袖之夜報到 4:課程報到 5:事工團報到 6:問卷填寫
   * @type {number}
   * @memberof UpdateQrCodeCommand
   */
  referenceType: number;
  /**
   * 對應報到類別主擋Id
   * @type {number}
   * @memberof UpdateQrCodeCommand
   */
  referenceId: number;
  /**
   * 報到使用者Id
   * @type {number}
   * @memberof UpdateQrCodeCommand
   */
  userId: number;
  /**
   * Id+RefferenceType+UserId 產生唯一值
   * @type {string}
   * @memberof UpdateQrCodeCommand
   */
  generateCode: string;
  /**
   * 付款方式 對應SystemConfig內Type=RegisterStatus 0:尚未報到 1:已報到
   * @type {number}
   * @memberof UpdateQrCodeCommand
   */
  registerStatus: number;
  /**
   * 報到時間
   * @type {string}
   * @memberof UpdateQrCodeCommand
   */
  registerTime: string;
}
/**
 * 更新  Questionnaire
 * @export
 * @interface UpdateQuestionnaireCommand
 */
export interface UpdateQuestionnaireCommand {
  /**
   * 問卷Id
   * @type {number}
   * @memberof UpdateQuestionnaireCommand
   */
  id: number;
  /**
   * 問卷堂點類別        type=QuestionnaireJoinLocation       顯示 name     value存此欄位0：堂點
   * @type {string}
   * @memberof UpdateQuestionnaireCommand
   */
  questionnaireJoinLocation: string;
  /**
   * 問卷類型type=QuestionnaireType顯示 namevalue存此欄位0：課程問卷 1:服事徵召 2:一般問卷
   * @type {string}
   * @memberof UpdateQuestionnaireCommand
   */
  questionnaireType: string;
  /**
   * 問卷名稱
   * @type {string}
   * @memberof UpdateQuestionnaireCommand
   */
  name: string;
  /**
   * 問卷說明
   * @type {string}
   * @memberof UpdateQuestionnaireCommand
   */
  description: string;
  /**
   * 指定堂點
   * @type {number}
   * @memberof UpdateQuestionnaireCommand
   */
  organizationId: number;
  /**
   * 指定牧區
   * @type {number}
   * @memberof UpdateQuestionnaireCommand
   */
  pastoralId: number;
  /**
   * 指定課程分類
   * @type {number}
   * @memberof UpdateQuestionnaireCommand
   */
  courseManagementTypeId: number;
  /**
   * 指定課程名稱
   * @type {string}
   * @memberof UpdateQuestionnaireCommand
   */
  courseManagementName: string;
  /**
   * 指定年度
   * @type {string}
   * @memberof UpdateQuestionnaireCommand
   */
  courseYear: string;
  /**
   * 指定季
   * @type {string}
   * @memberof UpdateQuestionnaireCommand
   */
  courseSeason: string;
  /**
   * 指定梯次
   * @type {string}
   * @memberof UpdateQuestionnaireCommand
   */
  courseClassNum: string;
  /**
   * 指定課程代碼
   * @type {string}
   * @memberof UpdateQuestionnaireCommand
   */
  courseManagementNo: string;
  /**
   * 作業繳交日期
   * @type {string}
   * @memberof UpdateQuestionnaireCommand
   */
  courseHomeworkDate: string;
  /**
   * Organization List When Query OrganizationId Condition
   * @type {Array<OrganizationView>}
   * @memberof UpdateQuestionnaireCommand
   */
  organizationViews: Array<OrganizationView>;
  /**
   * Pastoral List When Query PastoralId Condition
   * @type {Array<PastoralView>}
   * @memberof UpdateQuestionnaireCommand
   */
  pastoralViews: Array<PastoralView>;
  /**
   * QuestionnaireDetail List
   * @type {Array<QuestionnaireDetailView>}
   * @memberof UpdateQuestionnaireCommand
   */
  questionnaireDetailsViews: Array<QuestionnaireDetailView>;
}
/**
 * 更新  QuestionnaireDetail
 * @export
 * @interface UpdateQuestionnaireDetailCommand
 */
export interface UpdateQuestionnaireDetailCommand {
  /**
   * 問卷明細Id
   * @type {number}
   * @memberof UpdateQuestionnaireDetailCommand
   */
  id: number;
  /**
   * 問卷Id
   * @type {number}
   * @memberof UpdateQuestionnaireDetailCommand
   */
  questionnaireId: number;
  /**
   * 上層問卷DetailId
   * @type {number}
   * @memberof UpdateQuestionnaireDetailCommand
   */
  upperQuestionnaireDetailId: number;
  /**
   * 問卷內容類型type=QuestionnaireDetailType namevalue存此欄位0：區段標題1：題目2：選項
   * @type {string}
   * @memberof UpdateQuestionnaireDetailCommand
   */
  questionnaireDetailType: string;
  /**
   * QuestionnaireType=1才可選問卷內容類型type=ComponentType顯示 namevalue存此欄位0：選擇(單選)1：選擇(多選)2：是非3：簡答
   * @type {string}
   * @memberof UpdateQuestionnaireDetailCommand
   */
  componentType: string;
  /**
   * 顯示排序
   * @type {number}
   * @memberof UpdateQuestionnaireDetailCommand
   */
  sequence: number;
  /**
   * 元件描述假設QuestionnaireType=0此顯示區段標題假設QuestionnaireType=1此顯示該UpperQuestionnaireId.區段之Sequence題目名稱假設QuestionnaireType=2此顯示該UpperQuestionnaireId.區段之ComponentType選項之內容說明
   * @type {string}
   * @memberof UpdateQuestionnaireDetailCommand
   */
  name: string;
  /**
   * 描述
   * @type {string}
   * @memberof UpdateQuestionnaireDetailCommand
   */
  description: string;
  /**
   *
   * @type {Array<QuestionnaireDetailView>}
   * @memberof UpdateQuestionnaireDetailCommand
   */
  questionnaireDetailViews: Array<QuestionnaireDetailView>;
}
/**
 * 更新  Role
 * @export
 * @interface UpdateRoleCommand
 */
export interface UpdateRoleCommand {
  /**
   *
   * @type {string}
   * @memberof UpdateRoleCommand
   */
  id: string;
  /**
   * 角色與功能Menu列表
   * @type {Array<CreateRolePrivilegeMappingCommand>}
   * @memberof UpdateRoleCommand
   */
  rolePrivilegeList: Array<CreateRolePrivilegeMappingCommand>;
  /**
   * 角色名稱
   * @type {string}
   * @memberof UpdateRoleCommand
   */
  name: string;
  /**
   * 角色說明
   * @type {string}
   * @memberof UpdateRoleCommand
   */
  roleDescriptions: string;
  /**
   * 角色資料階層
   * @type {number}
   * @memberof UpdateRoleCommand
   */
  dataLevel: number;
  /**
   * HandledId
   * @type {string}
   * @memberof UpdateRoleCommand
   */
  handledId?: string | null;
}
/**
 * 更新  RolePrivilegeMapping
 * @export
 * @interface UpdateRolePrivilegeMappingCommand
 */
export interface UpdateRolePrivilegeMappingCommand {
  /**
   *
   * @type {number}
   * @memberof UpdateRolePrivilegeMappingCommand
   */
  id: number;
  /**
   * RoleId
   * @type {string}
   * @memberof UpdateRolePrivilegeMappingCommand
   */
  roleId: string;
  /**
   * PrivilegeId
   * @type {string}
   * @memberof UpdateRolePrivilegeMappingCommand
   */
  privilegeId: string;
  /**
   * PrivilegeId
   * @type {boolean}
   * @memberof UpdateRolePrivilegeMappingCommand
   */
  enable: boolean;
  /**
   * 檢視
   * @type {boolean}
   * @memberof UpdateRolePrivilegeMappingCommand
   */
  viewGranted: boolean;
  /**
   * 新增/編輯
   * @type {boolean}
   * @memberof UpdateRolePrivilegeMappingCommand
   */
  modifyGranted: boolean;
  /**
   * 刪除
   * @type {boolean}
   * @memberof UpdateRolePrivilegeMappingCommand
   */
  deleteGranted: boolean;
  /**
   * 上傳
   * @type {boolean}
   * @memberof UpdateRolePrivilegeMappingCommand
   */
  uploadGranted: boolean;
  /**
   * 下載
   * @type {boolean}
   * @memberof UpdateRolePrivilegeMappingCommand
   */
  downloadGranted: boolean;
}
/**
 * 更新  RoleUserMapping
 * @export
 * @interface UpdateRoleUserMappingCommand
 */
export interface UpdateRoleUserMappingCommand {
  /**
   *
   * @type {string}
   * @memberof UpdateRoleUserMappingCommand
   */
  id: string;
  /**
   *
   * @type {number}
   * @memberof UpdateRoleUserMappingCommand
   */
  userId: number;
  /**
   *
   * @type {string}
   * @memberof UpdateRoleUserMappingCommand
   */
  roleId: string;
}
/**
 * 更新  ShoppingCart
 * @export
 * @interface UpdateShoppingCartCommand
 */
export interface UpdateShoppingCartCommand {
  /**
   * id
   * @type {number}
   * @memberof UpdateShoppingCartCommand
   */
  id: number;
  /**
   * User.Id
   * @type {number}
   * @memberof UpdateShoppingCartCommand
   */
  userId: number;
  /**
   * 課程類別Course.Id
   * @type {number}
   * @memberof UpdateShoppingCartCommand
   */
  courseId: number;
  /**
   * 數量
   * @type {number}
   * @memberof UpdateShoppingCartCommand
   */
  count: number;
  /**
   * 出席狀態 對應SystemConfig內Type=ShoppingCartStatus 0:新增 1已轉入訂單 2:逾期課程清單(無法轉訂單) 3:數量不足
   * @type {string}
   * @memberof UpdateShoppingCartCommand
   */
  shoppingCartStatus: string;
}
/**
 * 更新  ShoppingOrder
 * @export
 * @interface UpdateShoppingOrderCommand
 */
export interface UpdateShoppingOrderCommand {
  /**
   * 訂單主檔Id
   * @type {number}
   * @memberof UpdateShoppingOrderCommand
   */
  id: number;
  /**
   * User.Id
   * @type {number}
   * @memberof UpdateShoppingOrderCommand
   */
  userId: number;
  /**
   * 訂單總金額
   * @type {number}
   * @memberof UpdateShoppingOrderCommand
   */
  totalAmount: number;
  /**
   * 付款總金額
   * @type {number}
   * @memberof UpdateShoppingOrderCommand
   */
  paymentAmount: number;
  /**
   * 退款總金額
   * @type {number}
   * @memberof UpdateShoppingOrderCommand
   */
  refundAmount: number;
  /**
   * 出席狀態 對應SystemConfig內Type=OrderStatus 0:尚未付款 1已付款 2:款項確認 3:異常 4：訂單逾期取消付款
   * @type {string}
   * @memberof UpdateShoppingOrderCommand
   */
  orderPayStatus: string;
  /**
   * 付款交易序號
   * @type {string}
   * @memberof UpdateShoppingOrderCommand
   */
  paymentTransactionNo: string;
  /**
   * 付款交易時間
   * @type {string}
   * @memberof UpdateShoppingOrderCommand
   */
  paymentTransactionDate: string;
  /**
   * 付款備註
   * @type {string}
   * @memberof UpdateShoppingOrderCommand
   */
  paymentTransactionDescription: string;
  /**
   * 付款方式 對應SystemConfig內Type=PaymentType 0:臨櫃現金 1:ATM 2:刷卡 3:其他
   * @type {string}
   * @memberof UpdateShoppingOrderCommand
   */
  paymentType: string;
  /**
   * 退款交易序號
   * @type {string}
   * @memberof UpdateShoppingOrderCommand
   */
  refundTransactionNo: string;
  /**
   * 退款交易時間
   * @type {string}
   * @memberof UpdateShoppingOrderCommand
   */
  refundTransactionDate: string;
  /**
   * 退款方式 對應SystemConfig內Type=PaymentType 0:臨櫃現金 1:ATM 2:刷退 3:其他
   * @type {string}
   * @memberof UpdateShoppingOrderCommand
   */
  refundType: string;
  /**
   * 退款備註
   * @type {string}
   * @memberof UpdateShoppingOrderCommand
   */
  refundDescription: string;
  /**
   * 出席狀態 對應SystemConfig內Type=OrderStatus 0:訂單成立(待付款)1:訂單對帳2:訂單已確認3:訂單已結案4:訂單取消申請5:訂單取消審核中6:訂單取消已確認7:訂單取消已駁回8:訂單取消退款中9:訂單取消已退款
   * @type {string}
   * @memberof UpdateShoppingOrderCommand
   */
  orderStatus: string;
  /**
   * 電子收據
   * @type {string}
   * @memberof UpdateShoppingOrderCommand
   */
  receipt: string;
  /**
   * 實收金額
   * @type {number}
   * @memberof UpdateShoppingOrderCommand
   */
  actuallyAmount: number;
  /**
   * 收款人員 對應user.Id
   * @type {number}
   * @memberof UpdateShoppingOrderCommand
   */
  receiveUserId: number;
  /**
   * 訂購人資料-姓名
   * @type {string}
   * @memberof UpdateShoppingOrderCommand
   */
  userName: string;
  /**
   * 訂購人資料-通信地址
   * @type {string}
   * @memberof UpdateShoppingOrderCommand
   */
  userAddress: string;
  /**
   * 訂購人資料-行動電話
   * @type {string}
   * @memberof UpdateShoppingOrderCommand
   */
  userCellPhone: string;
  /**
   * 訂購人資料-聯絡電話
   * @type {string}
   * @memberof UpdateShoppingOrderCommand
   */
  userPhone: string;
  /**
   * 訂購人資料-Email
   * @type {string}
   * @memberof UpdateShoppingOrderCommand
   */
  userEmail: string;
}
/**
 * 更新  ShoppingOrderDetail
 * @export
 * @interface UpdateShoppingOrderDetailCommand
 */
export interface UpdateShoppingOrderDetailCommand {
  /**
   * 訂單明細主檔Id
   * @type {number}
   * @memberof UpdateShoppingOrderDetailCommand
   */
  id: number;
  /**
   * ShoppingOrder.Id
   * @type {number}
   * @memberof UpdateShoppingOrderDetailCommand
   */
  shoppingOrderId: number;
  /**
   * Course.Id 課程Id
   * @type {number}
   * @memberof UpdateShoppingOrderDetailCommand
   */
  courseId: number;
  /**
   * 單價
   * @type {number}
   * @memberof UpdateShoppingOrderDetailCommand
   */
  price: number;
  /**
   * 購買數量
   * @type {number}
   * @memberof UpdateShoppingOrderDetailCommand
   */
  count: number;
  /**
   * 總金額
   * @type {number}
   * @memberof UpdateShoppingOrderDetailCommand
   */
  amount: number;
  /**
   * 付款方式 對應SystemConfig內Type=OrderDetailStatus 0:尚未付款 1:已付款 2:付款完成 3:退款申請 4:退款完成
   * @type {string}
   * @memberof UpdateShoppingOrderDetailCommand
   */
  orderDetailStatus: string;
  /**
   * 是否素食 SystemConfig內Type=IsYN 0:否 1:是
   * @type {string}
   * @memberof UpdateShoppingOrderDetailCommand
   */
  isViggieHelp: string;
  /**
   * 是否行動不便 SystemConfig內Type=IsYN 0:否 1:是
   * @type {string}
   * @memberof UpdateShoppingOrderDetailCommand
   */
  isMoveHelp: string;
  /**
   * 是否懷孕 SystemConfig內Type=IsYN 0:否 1:是
   * @type {string}
   * @memberof UpdateShoppingOrderDetailCommand
   */
  isPregnancyHelp: string;
  /**
   * 是否其他需要幫助 SystemConfig內Type=IsYN 0:否 1:是
   * @type {string}
   * @memberof UpdateShoppingOrderDetailCommand
   */
  isOthersHelp: string;
  /**
   * 其他需要幫助說明
   * @type {string}
   * @memberof UpdateShoppingOrderDetailCommand
   */
  isOthersHelpInformations: string;
  /**
   * 是否同班夫妻幫助 SystemConfig內Type=IsYN 0:否 1:是
   * @type {string}
   * @memberof UpdateShoppingOrderDetailCommand
   */
  isCoupleSameClassHelp: string;
  /**
   * 同班夫妻配偶姓名
   * @type {string}
   * @memberof UpdateShoppingOrderDetailCommand
   */
  isCoupleSameClassInformations: string;
}
/**
 * 更新  ShoppingTrack
 * @export
 * @interface UpdateShoppingTrackCommand
 */
export interface UpdateShoppingTrackCommand {
  /**
   *
   * @type {number}
   * @memberof UpdateShoppingTrackCommand
   */
  id: number;
  /**
   * User.Id
   * @type {number}
   * @memberof UpdateShoppingTrackCommand
   */
  userId: number;
  /**
   * 課程類別Course.Id
   * @type {number}
   * @memberof UpdateShoppingTrackCommand
   */
  courseId: number;
}
/**
 * 更新  SystemConfig
 * @export
 * @interface UpdateSystemConfigCommand
 */
export interface UpdateSystemConfigCommand {
  /**
   *
   * @type {number}
   * @memberof UpdateSystemConfigCommand
   */
  id: number;
  /**
   *
   * @type {string}
   * @memberof UpdateSystemConfigCommand
   */
  type: string;
  /**
   *
   * @type {string}
   * @memberof UpdateSystemConfigCommand
   */
  value: string;
  /**
   *
   * @type {string}
   * @memberof UpdateSystemConfigCommand
   */
  name: string;
  /**
   *
   * @type {string}
   * @memberof UpdateSystemConfigCommand
   */
  memo: string;
}
/**
 * 更新  UserBankAccount
 * @export
 * @interface UpdateUserBankAccountCommand
 */
export interface UpdateUserBankAccountCommand {
  /**
   * Id
   * @type {number}
   * @memberof UpdateUserBankAccountCommand
   */
  id: number;
  /**
   * 建立 User.Id
   * @type {number}
   * @memberof UpdateUserBankAccountCommand
   */
  userId: number;
  /**
   * 戶名
   * @type {string}
   * @memberof UpdateUserBankAccountCommand
   */
  bankName: string;
  /**
   * 銀行代號
   * @type {string}
   * @memberof UpdateUserBankAccountCommand
   */
  bankCode: string;
  /**
   * 分行代號
   * @type {string}
   * @memberof UpdateUserBankAccountCommand
   */
  branchCode: string;
  /**
   * 銀行帳戶
   * @type {string}
   * @memberof UpdateUserBankAccountCommand
   */
  account: string;
}
/**
 * 更新  User
 * @export
 * @interface UpdateUserCommand
 */
export interface UpdateUserCommand {
  /**
   *
   * @type {number}
   * @memberof UpdateUserCommand
   */
  id: number;
  /**
   * 所屬牧區id =>對應牧區身分類別
   * @type {number}
   * @memberof UpdateUserCommand
   */
  pastoralId: number;
  /**
   * 姓名
   * @type {string}
   * @memberof UpdateUserCommand
   */
  name: string;
  /**
   * 聚會點Id
   * @type {number}
   * @memberof UpdateUserCommand
   */
  meetingPointId: number;
  /**
   * 帳號
   * @type {string}
   * @memberof UpdateUserCommand
   */
  userNo: string;
  /**
   * 密碼
   * @type {string}
   * @memberof UpdateUserCommand
   */
  password: string;
  /**
   * 令牌
   * @type {string}
   * @memberof UpdateUserCommand
   */
  passwordSalt: string;
  /**
   * 手機類型 對應SystemConfig type=PhoneType 顯示 name value存此欄位 0：家長手機 1：小孩手機
   * @type {string}
   * @memberof UpdateUserCommand
   */
  phoneType: string;
  /**
   * 姓
   * @type {string}
   * @memberof UpdateUserCommand
   */
  firstName: string;
  /**
   * 名
   * @type {string}
   * @memberof UpdateUserCommand
   */
  lastName: string;
  /**
   * 性別 對應SystemConfig type=GenderType 顯示 name value存此欄位0：女姓 1：男性\"
   * @type {string}
   * @memberof UpdateUserCommand
   */
  genderType: string;
  /**
   * 居住國家
   * @type {string}
   * @memberof UpdateUserCommand
   */
  liveCountry: string;
  /**
   * 生日
   * @type {string}
   * @memberof UpdateUserCommand
   */
  birthday: string;
  /**
   * 身分證字號
   * @type {string}
   * @memberof UpdateUserCommand
   */
  idNumber: string;
  /**
   * 手機國碼
   * @type {string}
   * @memberof UpdateUserCommand
   */
  cellAreaCode: string;
  /**
   * 手機門號
   * @type {string}
   * @memberof UpdateUserCommand
   */
  cellPhone: string;
  /**
   * 城市
   * @type {string}
   * @memberof UpdateUserCommand
   */
  liveCity: string;
  /**
   * 郵遞區號
   * @type {string}
   * @memberof UpdateUserCommand
   */
  liveZipCode: string;
  /**
   * 地區
   * @type {string}
   * @memberof UpdateUserCommand
   */
  liveZipArea: string;
  /**
   * 詳細地址
   * @type {string}
   * @memberof UpdateUserCommand
   */
  liveAddress: string;
  /**
   * 地址2
   * @type {string}
   * @memberof UpdateUserCommand
   */
  liveAddress2: string;
  /**
   * 受洗 對應SystemConfig type=BaptizedType顯示 namevalue存此欄位0：未受洗1：已受洗2：其它
   * @type {string}
   * @memberof UpdateUserCommand
   */
  baptizedType: string;
  /**
   * 受洗時間
   * @type {string}
   * @memberof UpdateUserCommand
   */
  baptizedTime: string;
  /**
   * 教會施洗者 (若為旌旗教會者)
   * @type {string}
   * @memberof UpdateUserCommand
   */
  baptizedPerson: string;
  /**
   * 教會類別 對應SystemConfigtype=ChurchType顯示 namevalue存此欄位0：其他1：旌旗教會
   * @type {string}
   * @memberof UpdateUserCommand
   */
  churchType: string;
  /**
   * 會友所屬堂點 DDL對應Organization.Name
   * @type {string}
   * @memberof UpdateUserCommand
   */
  churchName: string;
  /**
   * 過去在哪個教會名稱
   * @type {string}
   * @memberof UpdateUserCommand
   */
  anotherChurchName: string;
  /**
   * 電話(市話)
   * @type {string}
   * @memberof UpdateUserCommand
   */
  phone: string;
  /**
   * 手機國碼1
   * @type {string}
   * @memberof UpdateUserCommand
   */
  cellAreaCode1: string;
  /**
   * 電話(手機)
   * @type {string}
   * @memberof UpdateUserCommand
   */
  cellPhone1: string;
  /**
   * 手機國碼2
   * @type {string}
   * @memberof UpdateUserCommand
   */
  cellAreaCode2: string;
  /**
   * 電話(手機2)
   * @type {string}
   * @memberof UpdateUserCommand
   */
  cellPhone2: string;
  /**
   * Email(主要)
   * @type {string}
   * @memberof UpdateUserCommand
   */
  email1: string;
  /**
   * Email(次要)
   * @type {string}
   * @memberof UpdateUserCommand
   */
  email2: string;
  /**
   * InstagramId
   * @type {string}
   * @memberof UpdateUserCommand
   */
  instagramId: string;
  /**
   * LineId
   * @type {string}
   * @memberof UpdateUserCommand
   */
  lineId: string;
  /**
   * WeChatId
   * @type {string}
   * @memberof UpdateUserCommand
   */
  weChatId: string;
  /**
   * 其他APPID
   * @type {string}
   * @memberof UpdateUserCommand
   */
  otherSocialId: string;
  /**
   * 是否在旌旗小組對應SystemConfigtype = isYN顯示 namevalue存此欄位0：N1：Y\"
   * @type {string}
   * @memberof UpdateUserCommand
   */
  isChurchGroup: string;
  /**
   * Id
   * @type {string}
   * @memberof UpdateUserCommand
   */
  churchGroupNo: string;
  /**
   * 是否願意加入旌旗小組對應SystemConfigtype = isYN顯示 namevalue存此欄位0：N1：Y\"
   * @type {string}
   * @memberof UpdateUserCommand
   */
  isJoinChurchGroup: string;
  /**
   * 志願序1 實體 星期對應SystemConfigtype = JoinSequenceType0顯示 namevalue存此欄位1：星期一2：星期二3：星期三4：星期四5：星期五6：星期六7：星期日
   * @type {string}
   * @memberof UpdateUserCommand
   */
  joinInPersonDate1: string;
  /**
   * 志願序1 實體 時間type=JoinSequenceType1顯示 namevalue存此欄位1：上午2：下午
   * @type {string}
   * @memberof UpdateUserCommand
   */
  joinInPersonTime1: string;
  /**
   * 志願序1 實體 時間type=JoinSequenceType2顯示 namevalue存此欄位1：堂點
   * @type {string}
   * @memberof UpdateUserCommand
   */
  joinInPersonLocation1: string;
  /**
   * 志願序2 實體 星期對應SystemConfigtype = JoinSequenceType0顯示 namevalue存此欄位1：星期一2：星期二3：星期三4：星期四5：星期五6：星期六7：星期日
   * @type {string}
   * @memberof UpdateUserCommand
   */
  joinInPersonDate2: string;
  /**
   * 志願序2 實體 時間type=JoinSequenceType1顯示 namevalue存此欄位1：上午2：下午
   * @type {string}
   * @memberof UpdateUserCommand
   */
  joinInPersonTime2: string;
  /**
   * 志願序2 實體 時間type=JoinSequenceType2顯示 namevalue存此欄位1：堂點
   * @type {string}
   * @memberof UpdateUserCommand
   */
  joinInPersonLocation2: string;
  /**
   * 志願序3 實體 星期對應SystemConfigtype = JoinSequenceType0顯示 namevalue存此欄位1：星期一2：星期二3：星期三4：星期四5：星期五6：星期六7：星期日
   * @type {string}
   * @memberof UpdateUserCommand
   */
  joinInPersonDate3: string;
  /**
   * 志願序3 實體 時間type=JoinSequenceType1顯示 namevalue存此欄位1：上午2：下午
   * @type {string}
   * @memberof UpdateUserCommand
   */
  joinInPersonTime3: string;
  /**
   * 志願序3 實體 時間type=JoinSequenceType2顯示 namevalue存此欄位1：堂點
   * @type {string}
   * @memberof UpdateUserCommand
   */
  joinInPersonLocation3: string;
  /**
   * 志願序1 線上 星期
   * @type {string}
   * @memberof UpdateUserCommand
   */
  joinOnlineDate1: string;
  /**
   * 志願序1 線上 時間
   * @type {string}
   * @memberof UpdateUserCommand
   */
  joinOnlineTime1: string;
  /**
   * 志願序2 線上 星期
   * @type {string}
   * @memberof UpdateUserCommand
   */
  joinOnlineDate2: string;
  /**
   * 志願序2 線上 時間
   * @type {string}
   * @memberof UpdateUserCommand
   */
  joinOnlineTime2: string;
  /**
   * 志願序3 線上 星期
   * @type {string}
   * @memberof UpdateUserCommand
   */
  joinOnlineDate3: string;
  /**
   * 志願序3 線上 時間
   * @type {string}
   * @memberof UpdateUserCommand
   */
  joinOnlineTime3: string;
  /**
   * Id
   * @type {string}
   * @memberof UpdateUserCommand
   */
  memberType: string;
  /**
   * 教育程度type=EduType顯示 namevalue存此欄位0：小學1：國中…
   * @type {string}
   * @memberof UpdateUserCommand
   */
  eduType: string;
  /**
   * 職業type=EduType顯示 namevalue存此欄位0：老師1：家管…
   * @type {string}
   * @memberof UpdateUserCommand
   */
  professionType: string;
  /**
   * 是否結婚對應SystemConfigtype = IsMarried顯示 namevalue存此欄位0：未婚1：已婚
   * @type {string}
   * @memberof UpdateUserCommand
   */
  isMarried: string;
  /**
   * 國碼
   * @type {string}
   * @memberof UpdateUserCommand
   */
  countryCode: string;
  /**
   * 是否舊會員 Y是N否
   * @type {string}
   * @memberof UpdateUserCommand
   */
  isOldMember: string;
  /**
   * 勾選合約
   * @type {string}
   * @memberof UpdateUserCommand
   */
  isTerm: string;
  /**
   * 是否受洗
   * @type {string}
   * @memberof UpdateUserCommand
   */
  isBaptize: string;
  /**
   * 受洗類別 0:未知 1: 本教會受洗 2: 其他教會受洗 3: 未受洗
   * @type {string}
   * @memberof UpdateUserCommand
   */
  baptizeTypeId: string;
  /**
   * 受洗日期
   * @type {string}
   * @memberof UpdateUserCommand
   */
  baptizeday: string;
  /**
   * 受洗教會
   * @type {string}
   * @memberof UpdateUserCommand
   */
  baptizeOrgName: string;
  /**
   * 受洗教會
   * @type {string}
   * @memberof UpdateUserCommand
   */
  baptizeGroup: string;
  /**
   * 施洗人
   * @type {string}
   * @memberof UpdateUserCommand
   */
  baptizer: string;
  /**
   * 使用者家長Id
   * @type {number}
   * @memberof UpdateUserCommand
   */
  parentUserId: number;
  /**
   * 是否會員
   * @type {string}
   * @memberof UpdateUserCommand
   */
  isMember: string;
  /**
   * 同工角色類別 對應SystemConfig type=GroupMemberType 顯示 name value存此欄位 0：無 1：核心同工 2：儲備同工
   * @type {string}
   * @memberof UpdateUserCommand
   */
  groupMemberType: string;
  /**
   * 中低收入戶 IsYN 0:否 1:是
   * @type {string}
   * @memberof UpdateUserCommand
   */
  lowIncome: string;
  /**
   * 備註欄位
   * @type {string}
   * @memberof UpdateUserCommand
   */
  remark: string;
  /**
   * 狀態
   * @type {string}
   * @memberof UpdateUserCommand
   */
  statusCd: string;
}
/**
 * 更新  UserContact
 * @export
 * @interface UpdateUserContactCommand
 */
export interface UpdateUserContactCommand {
  /**
   *
   * @type {string}
   * @memberof UpdateUserContactCommand
   */
  relative: string;
  /**
   *
   * @type {string}
   * @memberof UpdateUserContactCommand
   */
  memo: string;
  /**
   * Id
   * @type {number}
   * @memberof UpdateUserContactCommand
   */
  id: number;
  /**
   * 建立 User.Id
   * @type {number}
   * @memberof UpdateUserContactCommand
   */
  userId: number;
  /**
   * 姓名
   * @type {string}
   * @memberof UpdateUserContactCommand
   */
  name: string;
  /**
   * 電話
   * @type {string}
   * @memberof UpdateUserContactCommand
   */
  phone: string;
}
/**
 * 更新  UserCourse
 * @export
 * @interface UpdateUserCourseCommand
 */
export interface UpdateUserCourseCommand {
  /**
   * id
   * @type {number}
   * @memberof UpdateUserCourseCommand
   */
  id: number;
  /**
   * User.Id
   * @type {number}
   * @memberof UpdateUserCourseCommand
   */
  userId: number;
  /**
   * Course.Id
   * @type {number}
   * @memberof UpdateUserCourseCommand
   */
  courseId: number;
  /**
   * 出席狀態 對應SystemConfig內Type=AttendanceType 0:未出席 1已出席 2:尚未開課
   * @type {string}
   * @memberof UpdateUserCourseCommand
   */
  attendanceType: string;
  /**
   *
   * @type {string}
   * @memberof UpdateUserCourseCommand
   */
  attendanceDate: string;
  /**
   * 备注
   * @type {string}
   * @memberof UpdateUserCourseCommand
   */
  memo: string;
}
/**
 * 更新  UserExpertise
 * @export
 * @interface UpdateUserExpertiseCommand
 */
export interface UpdateUserExpertiseCommand {
  /**
   *
   * @type {string}
   * @memberof UpdateUserExpertiseCommand
   */
  memo: string;
  /**
   * Id
   * @type {number}
   * @memberof UpdateUserExpertiseCommand
   */
  id: number;
  /**
   * 建立 User.Id
   * @type {number}
   * @memberof UpdateUserExpertiseCommand
   */
  userId: number;
  /**
   * 專長描述
   * @type {string}
   * @memberof UpdateUserExpertiseCommand
   */
  name: string;
}
/**
 * 更新  UserFamily
 * @export
 * @interface UpdateUserFamilyCommand
 */
export interface UpdateUserFamilyCommand {
  /**
   *
   * @type {string}
   * @memberof UpdateUserFamilyCommand
   */
  memo: string;
  /**
   * Id
   * @type {number}
   * @memberof UpdateUserFamilyCommand
   */
  id: number;
  /**
   * 建立時間 User.Id
   * @type {string}
   * @memberof UpdateUserFamilyCommand
   */
  userId: string;
  /**
   * 關係類別 對應SystemConfig        type=RelativeType       顯示 name       value存此欄位0：配偶1：父母2：子女
   * @type {string}
   * @memberof UpdateUserFamilyCommand
   */
  relativeType: string;
  /**
   * 請輸入連絡電話
   * @type {string}
   * @memberof UpdateUserFamilyCommand
   */
  name: string;
}
/**
 * 更新  UserPastoralCare
 * @export
 * @interface UpdateUserPastoralCareCommand
 */
export interface UpdateUserPastoralCareCommand {
  /**
   * Id
   * @type {number}
   * @memberof UpdateUserPastoralCareCommand
   */
  id: number;
  /**
   * User.Id
   * @type {number}
   * @memberof UpdateUserPastoralCareCommand
   */
  userId: number;
  /**
   * 牧養類型 對應SystemConfig        type=CareType        顯示 name        value存此欄位 0：新進會員 1：移動 2：身分變更
   * @type {string}
   * @memberof UpdateUserPastoralCareCommand
   */
  careType: string;
  /**
   *
   * @type {string}
   * @memberof UpdateUserPastoralCareCommand
   */
  pastoralTitle: string;
  /**
   * 新區域
   * @type {string}
   * @memberof UpdateUserPastoralCareCommand
   */
  newArea: string;
  /**
   * 舊區域
   * @type {string}
   * @memberof UpdateUserPastoralCareCommand
   */
  oldArea: string;
  /**
   * 日期
   * @type {string}
   * @memberof UpdateUserPastoralCareCommand
   */
  careDate: string;
}
/**
 * 更新  UserQuestionnaire
 * @export
 * @interface UpdateUserQuestionnaireCommand
 */
export interface UpdateUserQuestionnaireCommand {
  /**
   *
   * @type {number}
   * @memberof UpdateUserQuestionnaireCommand
   */
  id: number;
  /**
   * 問卷.id
   * @type {number}
   * @memberof UpdateUserQuestionnaireCommand
   */
  questionnaireId: number;
  /**
   * User.id
   * @type {number}
   * @memberof UpdateUserQuestionnaireCommand
   */
  userId: number;
  /**
   * 問卷產生預設0  問卷類型  type=QuestionnaireWriteType  顯示 name  value存此欄位  0：未填寫  1：已填寫
   * @type {string}
   * @memberof UpdateUserQuestionnaireCommand
   */
  questionnaireWriteType: string;
  /**
   * 居住區域  type=QuestionnaireGoArea  顯示 name  value存此欄位  0：台中  1：台北  2：高雄
   * @type {string}
   * @memberof UpdateUserQuestionnaireCommand
   */
  questionnaireGoArea: string;
  /**
   * 滿意度  type=Satisfaction  顯示 name  value存此欄位  1：1  2：2  3：3  4：4  5：5
   * @type {string}
   * @memberof UpdateUserQuestionnaireCommand
   */
  satisfaction: string;
  /**
   * 評價  type=Satisfaction  顯示 name  value存此欄位  1：1  2：2  3：3  4：4  5：5
   * @type {string}
   * @memberof UpdateUserQuestionnaireCommand
   */
  evaluation: string;
  /**
   * 填寫問卷日期
   * @type {string}
   * @memberof UpdateUserQuestionnaireCommand
   */
  writeQuestionnaireDate: string;
  /**
   * 說明
   * @type {string}
   * @memberof UpdateUserQuestionnaireCommand
   */
  comment: string;
}
/**
 * 更新  UserSociety
 * @export
 * @interface UpdateUserSocietyCommand
 */
export interface UpdateUserSocietyCommand {
  /**
   * Key
   * @type {number}
   * @memberof UpdateUserSocietyCommand
   */
  id: number;
  /**
   * User.Id
   * @type {number}
   * @memberof UpdateUserSocietyCommand
   */
  userId: number;
  /**
   * User.Name
   * @type {string}
   * @memberof UpdateUserSocietyCommand
   */
  name: string;
  /**
   *
   * @type {User}
   * @memberof UpdateUserSocietyCommand
   */
  user: User;
}
/**
 * 檔案上傳
 * @export
 * @interface UploadFile
 */
export interface UploadFile {
  /**
   *
   * @type {number}
   * @memberof UploadFile
   */
  id: number;
  /**
   * 供 Owner 綁定 key
   * @type {string}
   * @memberof UploadFile
   */
  fileKey: string;
  /**
   * 擁有者關聯 table
   * @type {string}
   * @memberof UploadFile
   */
  ownerEntity: string;
  /**
   * 檔名
   * @type {string}
   * @memberof UploadFile
   */
  filename: string;
  /**
   * 副檔名
   * @type {string}
   * @memberof UploadFile
   */
  fileExtension: string;
  /**
   * 檔案存放相對路徑
   * @type {string}
   * @memberof UploadFile
   */
  relativeFilepath: string;
  /**
   * 檔案大小 (bit)
   * @type {number}
   * @memberof UploadFile
   */
  fileSize: number;
  /**
   * 是否已綁定
   * @type {boolean}
   * @memberof UploadFile
   */
  bound: boolean;
  /**
   * ApiLog HandledId
   * @type {string}
   * @memberof UploadFile
   */
  handledId?: string | null;
  /**
   * 建立日期
   * @type {string}
   * @memberof UploadFile
   */
  dateCreate?: string;
  /**
   * 建立人員
   * @type {string}
   * @memberof UploadFile
   */
  userCreate?: string | null;
  /**
   * 最後修改日期
   * @type {string}
   * @memberof UploadFile
   */
  dateUpdate?: string | null;
  /**
   * 最後修改人員
   * @type {string}
   * @memberof UploadFile
   */
  userUpdate?: string | null;
  /**
   *
   * @type {string}
   * @memberof UploadFile
   */
  rowVersion?: string | null;
}
/**
 *
 * @export
 * @interface UploadFileBase
 */
export interface UploadFileBase {
  /**
   * 供 Owner 綁定 key
   * @type {string}
   * @memberof UploadFileBase
   */
  fileKey: string;
  /**
   * 擁有者關聯 table
   * @type {string}
   * @memberof UploadFileBase
   */
  ownerEntity: string;
  /**
   * 檔名
   * @type {string}
   * @memberof UploadFileBase
   */
  filename: string;
  /**
   * 副檔名
   * @type {string}
   * @memberof UploadFileBase
   */
  fileExtension: string;
  /**
   * 檔案大小 (bit)
   * @type {number}
   * @memberof UploadFileBase
   */
  filesize: number;
  /**
   * 是否已綁定
   * @type {boolean}
   * @memberof UploadFileBase
   */
  bound: boolean;
}
/**
 * UploadFile
 * @export
 * @interface UploadFileView
 */
export interface UploadFileView {
  /**
   *
   * @type {number}
   * @memberof UploadFileView
   */
  id: number;
  /**
   * 供 Owner 綁定 key
   * @type {string}
   * @memberof UploadFileView
   */
  fileKey: string;
  /**
   * 擁有者關聯 table
   * @type {string}
   * @memberof UploadFileView
   */
  ownerEntity: string;
  /**
   * 檔名
   * @type {string}
   * @memberof UploadFileView
   */
  filename: string;
  /**
   * 副檔名
   * @type {string}
   * @memberof UploadFileView
   */
  fileExtension: string;
  /**
   * 檔案大小 (bit)
   * @type {number}
   * @memberof UploadFileView
   */
  filesize: number;
  /**
   * 是否已綁定
   * @type {boolean}
   * @memberof UploadFileView
   */
  bound: boolean;
}
/**
 *
 * @export
 * @interface UploadFileViewApiResponse
 */
export interface UploadFileViewApiResponse {
  /**
   *
   * @type {string}
   * @memberof UploadFileViewApiResponse
   */
  handledId?: string | null;
  /**
   * http-200  0000: 代表處理成功，其餘一律為失敗  http-4xx  Vxxxx: 資料驗證  Bxxxx: 詳見 message 欄位說明
   * @type {string}
   * @memberof UploadFileViewApiResponse
   */
  code: string;
  /**
   * 回傳訊息
   * @type {string}
   * @memberof UploadFileViewApiResponse
   */
  message: string;
  /**
   * 錯誤詳細資訊
   * @type {any}
   * @memberof UploadFileViewApiResponse
   */
  detailMessage: any;
  /**
   *
   * @type {UploadFileView}
   * @memberof UploadFileViewApiResponse
   */
  data: UploadFileView;
  /**
   * 交易時間
   * @type {string}
   * @memberof UploadFileViewApiResponse
   */
  txnTime: string;
}
/**
 *
 * @export
 * @interface User
 */
export interface User {
  /**
   *
   * @type {number}
   * @memberof User
   */
  id: number;
  /**
   *
   * @type {string}
   * @memberof User
   */
  userId: string;
  /**
   *
   * @type {number}
   * @memberof User
   */
  pastoralId: number;
  /**
   *
   * @type {number}
   * @memberof User
   */
  meetingPointId: number;
  /**
   *
   * @type {string}
   * @memberof User
   */
  name: string;
  /**
   *
   * @type {string}
   * @memberof User
   */
  userNo: string;
  /**
   *
   * @type {string}
   * @memberof User
   */
  password: string;
  /**
   *
   * @type {string}
   * @memberof User
   */
  passwordSalt: string;
  /**
   *
   * @type {string}
   * @memberof User
   */
  phoneType: string;
  /**
   *
   * @type {string}
   * @memberof User
   */
  firstName: string;
  /**
   *
   * @type {string}
   * @memberof User
   */
  lastName: string;
  /**
   *
   * @type {string}
   * @memberof User
   */
  genderType: string;
  /**
   *
   * @type {string}
   * @memberof User
   */
  liveCountry: string;
  /**
   *
   * @type {string}
   * @memberof User
   */
  birthday: string;
  /**
   *
   * @type {string}
   * @memberof User
   */
  idNumber: string;
  /**
   *
   * @type {string}
   * @memberof User
   */
  cellPhone: string;
  /**
   *
   * @type {string}
   * @memberof User
   */
  liveCity: string;
  /**
   *
   * @type {string}
   * @memberof User
   */
  liveZipCode: string;
  /**
   *
   * @type {string}
   * @memberof User
   */
  liveZipArea: string;
  /**
   *
   * @type {string}
   * @memberof User
   */
  liveAddress: string;
  /**
   *
   * @type {string}
   * @memberof User
   */
  liveAddress2: string;
  /**
   *
   * @type {string}
   * @memberof User
   */
  baptizedType: string;
  /**
   *
   * @type {string}
   * @memberof User
   */
  baptizedTime: string;
  /**
   *
   * @type {string}
   * @memberof User
   */
  baptizedPerson: string;
  /**
   *
   * @type {string}
   * @memberof User
   */
  churchType: string;
  /**
   *
   * @type {string}
   * @memberof User
   */
  churchName: string;
  /**
   *
   * @type {string}
   * @memberof User
   */
  anotherChurchName: string;
  /**
   *
   * @type {string}
   * @memberof User
   */
  phone: string;
  /**
   *
   * @type {string}
   * @memberof User
   */
  cellPhone1: string;
  /**
   *
   * @type {string}
   * @memberof User
   */
  cellPhone2: string;
  /**
   *
   * @type {string}
   * @memberof User
   */
  email1: string;
  /**
   *
   * @type {string}
   * @memberof User
   */
  email2: string;
  /**
   *
   * @type {string}
   * @memberof User
   */
  instagramId: string;
  /**
   *
   * @type {string}
   * @memberof User
   */
  lineId: string;
  /**
   *
   * @type {string}
   * @memberof User
   */
  weChatId: string;
  /**
   *
   * @type {string}
   * @memberof User
   */
  otherSocialId: string;
  /**
   *
   * @type {string}
   * @memberof User
   */
  isChurchGroup: string;
  /**
   *
   * @type {string}
   * @memberof User
   */
  churchGroupNo: string;
  /**
   *
   * @type {string}
   * @memberof User
   */
  isJoinChurchGroup: string;
  /**
   *
   * @type {string}
   * @memberof User
   */
  joinInPersonDate1: string;
  /**
   *
   * @type {string}
   * @memberof User
   */
  joinInPersonTime1: string;
  /**
   *
   * @type {string}
   * @memberof User
   */
  joinInPersonLocation1: string;
  /**
   *
   * @type {string}
   * @memberof User
   */
  joinInPersonDate2: string;
  /**
   *
   * @type {string}
   * @memberof User
   */
  joinInPersonTime2: string;
  /**
   *
   * @type {string}
   * @memberof User
   */
  joinInPersonLocation2: string;
  /**
   *
   * @type {string}
   * @memberof User
   */
  joinInPersonDate3: string;
  /**
   *
   * @type {string}
   * @memberof User
   */
  joinInPersonTime3: string;
  /**
   *
   * @type {string}
   * @memberof User
   */
  joinInPersonLocation3: string;
  /**
   *
   * @type {string}
   * @memberof User
   */
  joinOnlineDate1: string;
  /**
   *
   * @type {string}
   * @memberof User
   */
  joinOnlineTime1: string;
  /**
   *
   * @type {string}
   * @memberof User
   */
  joinOnlineDate2: string;
  /**
   *
   * @type {string}
   * @memberof User
   */
  joinOnlineTime2: string;
  /**
   *
   * @type {string}
   * @memberof User
   */
  joinOnlineDate3: string;
  /**
   *
   * @type {string}
   * @memberof User
   */
  joinOnlineTime3: string;
  /**
   *
   * @type {string}
   * @memberof User
   */
  memberType: string;
  /**
   *
   * @type {string}
   * @memberof User
   */
  eduType: string;
  /**
   *
   * @type {string}
   * @memberof User
   */
  professionType: string;
  /**
   *
   * @type {string}
   * @memberof User
   */
  isMarried: string;
  /**
   *
   * @type {string}
   * @memberof User
   */
  lastLogin: string;
  /**
   *
   * @type {number}
   * @memberof User
   */
  parentUserId: number;
  /**
   *
   * @type {string}
   * @memberof User
   */
  isOldMember: string;
  /**
   *
   * @type {string}
   * @memberof User
   */
  countryCode: string;
  /**
   *
   * @type {string}
   * @memberof User
   */
  cellAreaCode1: string;
  /**
   *
   * @type {string}
   * @memberof User
   */
  cellAreaCode2: string;
  /**
   * 中低收入戶 IsYN 0:否 1:是
   * @type {string}
   * @memberof User
   */
  lowIncome: string;
  /**
   * 備註欄位
   * @type {string}
   * @memberof User
   */
  remark: string;
  /**
   *
   * @type {string}
   * @memberof User
   */
  statusCd: string;
  /**
   * 是否會員
   * @type {string}
   * @memberof User
   */
  isMember: string;
  /**
   * 同工角色類別 對應SystemConfig type=GroupMemberType 顯示 name value存此欄位 0：無 1：核心同工 2：儲備同工
   * @type {string}
   * @memberof User
   */
  groupMemberType: string;
  /**
   *
   * @type {Array<UserBankAccount>}
   * @memberof User
   */
  userBankAccounts: Array<UserBankAccount>;
  /**
   *
   * @type {Array<UserContact>}
   * @memberof User
   */
  userContacts: Array<UserContact>;
  /**
   *
   * @type {Array<UserCourse>}
   * @memberof User
   */
  userCourses: Array<UserCourse>;
  /**
   *
   * @type {Array<UserExpertise>}
   * @memberof User
   */
  userExpertises: Array<UserExpertise>;
  /**
   *
   * @type {Array<UserFamily>}
   * @memberof User
   */
  userFamilies: Array<UserFamily>;
  /**
   *
   * @type {Array<UserPastoralCare>}
   * @memberof User
   */
  userPastoralCares: Array<UserPastoralCare>;
  /**
   *
   * @type {Array<UserQuestionnaire>}
   * @memberof User
   */
  userQuestionnaires: Array<UserQuestionnaire>;
  /**
   *
   * @type {Array<UserSociety>}
   * @memberof User
   */
  userSocieties: Array<UserSociety>;
  /**
   * ApiLog HandledId
   * @type {string}
   * @memberof User
   */
  handledId?: string | null;
  /**
   * 建立日期
   * @type {string}
   * @memberof User
   */
  dateCreate?: string;
  /**
   * 建立人員
   * @type {string}
   * @memberof User
   */
  userCreate?: string | null;
  /**
   * 最後修改日期
   * @type {string}
   * @memberof User
   */
  dateUpdate?: string | null;
  /**
   * 最後修改人員
   * @type {string}
   * @memberof User
   */
  userUpdate?: string | null;
  /**
   *
   * @type {string}
   * @memberof User
   */
  rowVersion?: string | null;
}
/**
 *
 * @export
 * @interface UserBankAccount
 */
export interface UserBankAccount {
  /**
   *
   * @type {number}
   * @memberof UserBankAccount
   */
  id: number;
  /**
   *
   * @type {number}
   * @memberof UserBankAccount
   */
  userId: number;
  /**
   *
   * @type {string}
   * @memberof UserBankAccount
   */
  bankName: string;
  /**
   *
   * @type {string}
   * @memberof UserBankAccount
   */
  bankCode: string;
  /**
   *
   * @type {string}
   * @memberof UserBankAccount
   */
  branchCode: string;
  /**
   *
   * @type {string}
   * @memberof UserBankAccount
   */
  account: string;
  /**
   *
   * @type {string}
   * @memberof UserBankAccount
   */
  memo: string;
  /**
   *
   * @type {string}
   * @memberof UserBankAccount
   */
  statusCd: string;
  /**
   *
   * @type {User}
   * @memberof UserBankAccount
   */
  user: User;
  /**
   * ApiLog HandledId
   * @type {string}
   * @memberof UserBankAccount
   */
  handledId?: string | null;
  /**
   * 建立日期
   * @type {string}
   * @memberof UserBankAccount
   */
  dateCreate?: string;
  /**
   * 建立人員
   * @type {string}
   * @memberof UserBankAccount
   */
  userCreate?: string | null;
  /**
   * 最後修改日期
   * @type {string}
   * @memberof UserBankAccount
   */
  dateUpdate?: string | null;
  /**
   * 最後修改人員
   * @type {string}
   * @memberof UserBankAccount
   */
  userUpdate?: string | null;
  /**
   *
   * @type {string}
   * @memberof UserBankAccount
   */
  rowVersion?: string | null;
}
/**
 * 銀行帳戶
 * @export
 * @interface UserBankAccountBase
 */
export interface UserBankAccountBase {
  /**
   * Id
   * @type {number}
   * @memberof UserBankAccountBase
   */
  id: number;
  /**
   * 建立 User.Id
   * @type {number}
   * @memberof UserBankAccountBase
   */
  userId: number;
  /**
   * 戶名
   * @type {string}
   * @memberof UserBankAccountBase
   */
  bankName: string;
  /**
   * 銀行代號
   * @type {string}
   * @memberof UserBankAccountBase
   */
  bankCode: string;
  /**
   * 分行代號
   * @type {string}
   * @memberof UserBankAccountBase
   */
  branchCode: string;
  /**
   * 銀行帳戶
   * @type {string}
   * @memberof UserBankAccountBase
   */
  account: string;
}
/**
 * UserBankAccount
 * @export
 * @interface UserBankAccountView
 */
export interface UserBankAccountView {
  /**
   *
   * @type {string}
   * @memberof UserBankAccountView
   */
  modifiedUserId: string;
  /**
   *
   * @type {string}
   * @memberof UserBankAccountView
   */
  handledId?: string | null;
  /**
   *
   * @type {string}
   * @memberof UserBankAccountView
   */
  dateCreate?: string;
  /**
   *
   * @type {string}
   * @memberof UserBankAccountView
   */
  userCreate?: string | null;
  /**
   *
   * @type {string}
   * @memberof UserBankAccountView
   */
  dateUpdate?: string | null;
  /**
   *
   * @type {string}
   * @memberof UserBankAccountView
   */
  userUpdate?: string | null;
  /**
   * Id
   * @type {number}
   * @memberof UserBankAccountView
   */
  id: number;
  /**
   * 建立 User.Id
   * @type {number}
   * @memberof UserBankAccountView
   */
  userId: number;
  /**
   * 戶名
   * @type {string}
   * @memberof UserBankAccountView
   */
  bankName: string;
  /**
   * 銀行代號
   * @type {string}
   * @memberof UserBankAccountView
   */
  bankCode: string;
  /**
   * 分行代號
   * @type {string}
   * @memberof UserBankAccountView
   */
  branchCode: string;
  /**
   * 銀行帳戶
   * @type {string}
   * @memberof UserBankAccountView
   */
  account: string;
}
/**
 * User DTO base class
 * @export
 * @interface UserBase
 */
export interface UserBase {
  /**
   * 所屬牧區id =>對應牧區身分類別
   * @type {number}
   * @memberof UserBase
   */
  pastoralId: number;
  /**
   * 姓名
   * @type {string}
   * @memberof UserBase
   */
  name: string;
  /**
   * 聚會點Id
   * @type {number}
   * @memberof UserBase
   */
  meetingPointId: number;
  /**
   * 帳號
   * @type {string}
   * @memberof UserBase
   */
  userNo: string;
  /**
   * 密碼
   * @type {string}
   * @memberof UserBase
   */
  password: string;
  /**
   * 令牌
   * @type {string}
   * @memberof UserBase
   */
  passwordSalt: string;
  /**
   * 手機類型 對應SystemConfig type=PhoneType 顯示 name value存此欄位 0：家長手機 1：小孩手機
   * @type {string}
   * @memberof UserBase
   */
  phoneType: string;
  /**
   * 姓
   * @type {string}
   * @memberof UserBase
   */
  firstName: string;
  /**
   * 名
   * @type {string}
   * @memberof UserBase
   */
  lastName: string;
  /**
   * 性別 對應SystemConfig type=GenderType 顯示 name value存此欄位0：女姓 1：男性\"
   * @type {string}
   * @memberof UserBase
   */
  genderType: string;
  /**
   * 居住國家
   * @type {string}
   * @memberof UserBase
   */
  liveCountry: string;
  /**
   * 生日
   * @type {string}
   * @memberof UserBase
   */
  birthday: string;
  /**
   * 身分證字號
   * @type {string}
   * @memberof UserBase
   */
  idNumber: string;
  /**
   * 手機國碼
   * @type {string}
   * @memberof UserBase
   */
  cellAreaCode: string;
  /**
   * 手機門號
   * @type {string}
   * @memberof UserBase
   */
  cellPhone: string;
  /**
   * 城市
   * @type {string}
   * @memberof UserBase
   */
  liveCity: string;
  /**
   * 郵遞區號
   * @type {string}
   * @memberof UserBase
   */
  liveZipCode: string;
  /**
   * 地區
   * @type {string}
   * @memberof UserBase
   */
  liveZipArea: string;
  /**
   * 詳細地址
   * @type {string}
   * @memberof UserBase
   */
  liveAddress: string;
  /**
   * 地址2
   * @type {string}
   * @memberof UserBase
   */
  liveAddress2: string;
  /**
   * 受洗 對應SystemConfig type=BaptizedType顯示 namevalue存此欄位0：未受洗1：已受洗2：其它
   * @type {string}
   * @memberof UserBase
   */
  baptizedType: string;
  /**
   * 受洗時間
   * @type {string}
   * @memberof UserBase
   */
  baptizedTime: string;
  /**
   * 教會施洗者 (若為旌旗教會者)
   * @type {string}
   * @memberof UserBase
   */
  baptizedPerson: string;
  /**
   * 教會類別 對應SystemConfigtype=ChurchType顯示 namevalue存此欄位0：其他1：旌旗教會
   * @type {string}
   * @memberof UserBase
   */
  churchType: string;
  /**
   * 會友所屬堂點 DDL對應Organization.Name
   * @type {string}
   * @memberof UserBase
   */
  churchName: string;
  /**
   * 過去在哪個教會名稱
   * @type {string}
   * @memberof UserBase
   */
  anotherChurchName: string;
  /**
   * 電話(市話)
   * @type {string}
   * @memberof UserBase
   */
  phone: string;
  /**
   * 手機國碼1
   * @type {string}
   * @memberof UserBase
   */
  cellAreaCode1: string;
  /**
   * 電話(手機)
   * @type {string}
   * @memberof UserBase
   */
  cellPhone1: string;
  /**
   * 手機國碼2
   * @type {string}
   * @memberof UserBase
   */
  cellAreaCode2: string;
  /**
   * 電話(手機2)
   * @type {string}
   * @memberof UserBase
   */
  cellPhone2: string;
  /**
   * Email(主要)
   * @type {string}
   * @memberof UserBase
   */
  email1: string;
  /**
   * Email(次要)
   * @type {string}
   * @memberof UserBase
   */
  email2: string;
  /**
   * InstagramId
   * @type {string}
   * @memberof UserBase
   */
  instagramId: string;
  /**
   * LineId
   * @type {string}
   * @memberof UserBase
   */
  lineId: string;
  /**
   * WeChatId
   * @type {string}
   * @memberof UserBase
   */
  weChatId: string;
  /**
   * 其他APPID
   * @type {string}
   * @memberof UserBase
   */
  otherSocialId: string;
  /**
   * 是否在旌旗小組對應SystemConfigtype = isYN顯示 namevalue存此欄位0：N1：Y\"
   * @type {string}
   * @memberof UserBase
   */
  isChurchGroup: string;
  /**
   * Id
   * @type {string}
   * @memberof UserBase
   */
  churchGroupNo: string;
  /**
   * 是否願意加入旌旗小組對應SystemConfigtype = isYN顯示 namevalue存此欄位0：N1：Y\"
   * @type {string}
   * @memberof UserBase
   */
  isJoinChurchGroup: string;
  /**
   * 志願序1 實體 星期對應SystemConfigtype = JoinSequenceType0顯示 namevalue存此欄位1：星期一2：星期二3：星期三4：星期四5：星期五6：星期六7：星期日
   * @type {string}
   * @memberof UserBase
   */
  joinInPersonDate1: string;
  /**
   * 志願序1 實體 時間type=JoinSequenceType1顯示 namevalue存此欄位1：上午2：下午
   * @type {string}
   * @memberof UserBase
   */
  joinInPersonTime1: string;
  /**
   * 志願序1 實體 時間type=JoinSequenceType2顯示 namevalue存此欄位1：堂點
   * @type {string}
   * @memberof UserBase
   */
  joinInPersonLocation1: string;
  /**
   * 志願序2 實體 星期對應SystemConfigtype = JoinSequenceType0顯示 namevalue存此欄位1：星期一2：星期二3：星期三4：星期四5：星期五6：星期六7：星期日
   * @type {string}
   * @memberof UserBase
   */
  joinInPersonDate2: string;
  /**
   * 志願序2 實體 時間type=JoinSequenceType1顯示 namevalue存此欄位1：上午2：下午
   * @type {string}
   * @memberof UserBase
   */
  joinInPersonTime2: string;
  /**
   * 志願序2 實體 時間type=JoinSequenceType2顯示 namevalue存此欄位1：堂點
   * @type {string}
   * @memberof UserBase
   */
  joinInPersonLocation2: string;
  /**
   * 志願序3 實體 星期對應SystemConfigtype = JoinSequenceType0顯示 namevalue存此欄位1：星期一2：星期二3：星期三4：星期四5：星期五6：星期六7：星期日
   * @type {string}
   * @memberof UserBase
   */
  joinInPersonDate3: string;
  /**
   * 志願序3 實體 時間type=JoinSequenceType1顯示 namevalue存此欄位1：上午2：下午
   * @type {string}
   * @memberof UserBase
   */
  joinInPersonTime3: string;
  /**
   * 志願序3 實體 時間type=JoinSequenceType2顯示 namevalue存此欄位1：堂點
   * @type {string}
   * @memberof UserBase
   */
  joinInPersonLocation3: string;
  /**
   * 志願序1 線上 星期
   * @type {string}
   * @memberof UserBase
   */
  joinOnlineDate1: string;
  /**
   * 志願序1 線上 時間
   * @type {string}
   * @memberof UserBase
   */
  joinOnlineTime1: string;
  /**
   * 志願序2 線上 星期
   * @type {string}
   * @memberof UserBase
   */
  joinOnlineDate2: string;
  /**
   * 志願序2 線上 時間
   * @type {string}
   * @memberof UserBase
   */
  joinOnlineTime2: string;
  /**
   * 志願序3 線上 星期
   * @type {string}
   * @memberof UserBase
   */
  joinOnlineDate3: string;
  /**
   * 志願序3 線上 時間
   * @type {string}
   * @memberof UserBase
   */
  joinOnlineTime3: string;
  /**
   * Id
   * @type {string}
   * @memberof UserBase
   */
  memberType: string;
  /**
   * 教育程度type=EduType顯示 namevalue存此欄位0：小學1：國中…
   * @type {string}
   * @memberof UserBase
   */
  eduType: string;
  /**
   * 職業type=EduType顯示 namevalue存此欄位0：老師1：家管…
   * @type {string}
   * @memberof UserBase
   */
  professionType: string;
  /**
   * 是否結婚對應SystemConfigtype = IsMarried顯示 namevalue存此欄位0：未婚1：已婚
   * @type {string}
   * @memberof UserBase
   */
  isMarried: string;
  /**
   * 國碼
   * @type {string}
   * @memberof UserBase
   */
  countryCode: string;
  /**
   * 是否舊會員 Y是N否
   * @type {string}
   * @memberof UserBase
   */
  isOldMember: string;
  /**
   * 勾選合約
   * @type {string}
   * @memberof UserBase
   */
  isTerm: string;
  /**
   * 是否受洗
   * @type {string}
   * @memberof UserBase
   */
  isBaptize: string;
  /**
   * 受洗類別 0:未知 1: 本教會受洗 2: 其他教會受洗 3: 未受洗
   * @type {string}
   * @memberof UserBase
   */
  baptizeTypeId: string;
  /**
   * 受洗日期
   * @type {string}
   * @memberof UserBase
   */
  baptizeday: string;
  /**
   * 受洗教會
   * @type {string}
   * @memberof UserBase
   */
  baptizeOrgName: string;
  /**
   * 受洗教會
   * @type {string}
   * @memberof UserBase
   */
  baptizeGroup: string;
  /**
   * 施洗人
   * @type {string}
   * @memberof UserBase
   */
  baptizer: string;
  /**
   * 使用者家長Id
   * @type {number}
   * @memberof UserBase
   */
  parentUserId: number;
  /**
   * 是否會員
   * @type {string}
   * @memberof UserBase
   */
  isMember: string;
  /**
   * 同工角色類別 對應SystemConfig type=GroupMemberType 顯示 name value存此欄位 0：無 1：核心同工 2：儲備同工
   * @type {string}
   * @memberof UserBase
   */
  groupMemberType: string;
  /**
   * 中低收入戶 IsYN 0:否 1:是
   * @type {string}
   * @memberof UserBase
   */
  lowIncome: string;
  /**
   * 備註欄位
   * @type {string}
   * @memberof UserBase
   */
  remark: string;
  /**
   * 狀態
   * @type {string}
   * @memberof UserBase
   */
  statusCd: string;
}
/**
 *
 * @export
 * @interface UserContact
 */
export interface UserContact {
  /**
   *
   * @type {number}
   * @memberof UserContact
   */
  id: number;
  /**
   *
   * @type {number}
   * @memberof UserContact
   */
  userId: number;
  /**
   *
   * @type {string}
   * @memberof UserContact
   */
  name: string;
  /**
   *
   * @type {string}
   * @memberof UserContact
   */
  relative: string;
  /**
   *
   * @type {string}
   * @memberof UserContact
   */
  phone: string;
  /**
   *
   * @type {string}
   * @memberof UserContact
   */
  memo: string;
  /**
   *
   * @type {string}
   * @memberof UserContact
   */
  statusCd: string;
  /**
   *
   * @type {User}
   * @memberof UserContact
   */
  user: User;
  /**
   * ApiLog HandledId
   * @type {string}
   * @memberof UserContact
   */
  handledId?: string | null;
  /**
   * 建立日期
   * @type {string}
   * @memberof UserContact
   */
  dateCreate?: string;
  /**
   * 建立人員
   * @type {string}
   * @memberof UserContact
   */
  userCreate?: string | null;
  /**
   * 最後修改日期
   * @type {string}
   * @memberof UserContact
   */
  dateUpdate?: string | null;
  /**
   * 最後修改人員
   * @type {string}
   * @memberof UserContact
   */
  userUpdate?: string | null;
  /**
   *
   * @type {string}
   * @memberof UserContact
   */
  rowVersion?: string | null;
}
/**
 *
 * @export
 * @interface UserContactBase
 */
export interface UserContactBase {
  /**
   * Id
   * @type {number}
   * @memberof UserContactBase
   */
  id: number;
  /**
   * 建立 User.Id
   * @type {number}
   * @memberof UserContactBase
   */
  userId: number;
  /**
   * 姓名
   * @type {string}
   * @memberof UserContactBase
   */
  name: string;
  /**
   * 關係類別
   * @type {string}
   * @memberof UserContactBase
   */
  relative: string;
  /**
   * 電話
   * @type {string}
   * @memberof UserContactBase
   */
  phone: string;
}
/**
 * UserContact
 * @export
 * @interface UserContactView
 */
export interface UserContactView {
  /**
   *
   * @type {string}
   * @memberof UserContactView
   */
  handledId?: string | null;
  /**
   *
   * @type {string}
   * @memberof UserContactView
   */
  dateCreate?: string;
  /**
   *
   * @type {string}
   * @memberof UserContactView
   */
  userCreate?: string | null;
  /**
   *
   * @type {string}
   * @memberof UserContactView
   */
  dateUpdate?: string | null;
  /**
   *
   * @type {string}
   * @memberof UserContactView
   */
  userUpdate?: string | null;
  /**
   * Id
   * @type {number}
   * @memberof UserContactView
   */
  id: number;
  /**
   * 建立 User.Id
   * @type {number}
   * @memberof UserContactView
   */
  userId: number;
  /**
   * 姓名
   * @type {string}
   * @memberof UserContactView
   */
  name: string;
  /**
   * 關係類別
   * @type {string}
   * @memberof UserContactView
   */
  relative: string;
  /**
   * 電話
   * @type {string}
   * @memberof UserContactView
   */
  phone: string;
}
/**
 *
 * @export
 * @interface UserCourse
 */
export interface UserCourse {
  /**
   * id
   * @type {number}
   * @memberof UserCourse
   */
  id: number;
  /**
   * User.Id
   * @type {number}
   * @memberof UserCourse
   */
  userId: number;
  /**
   * Course.Id
   * @type {number}
   * @memberof UserCourse
   */
  courseId: number;
  /**
   * 出席狀態 對應SystemConfig內Type=AttendanceType 0:未出席 1已出席 2:尚未開課
   * @type {string}
   * @memberof UserCourse
   */
  attendanceType: string;
  /**
   *
   * @type {string}
   * @memberof UserCourse
   */
  attendanceDate: string;
  /**
   *
   * @type {string}
   * @memberof UserCourse
   */
  memo: string;
  /**
   *
   * @type {string}
   * @memberof UserCourse
   */
  statusCd: string;
  /**
   *
   * @type {User}
   * @memberof UserCourse
   */
  user: User;
  /**
   * ApiLog HandledId
   * @type {string}
   * @memberof UserCourse
   */
  handledId?: string | null;
  /**
   * 建立日期
   * @type {string}
   * @memberof UserCourse
   */
  dateCreate?: string;
  /**
   * 建立人員
   * @type {string}
   * @memberof UserCourse
   */
  userCreate?: string | null;
  /**
   * 最後修改日期
   * @type {string}
   * @memberof UserCourse
   */
  dateUpdate?: string | null;
  /**
   * 最後修改人員
   * @type {string}
   * @memberof UserCourse
   */
  userUpdate?: string | null;
  /**
   *
   * @type {string}
   * @memberof UserCourse
   */
  rowVersion?: string | null;
}
/**
 *
 * @export
 * @interface UserCourseBase
 */
export interface UserCourseBase {
  /**
   * id
   * @type {number}
   * @memberof UserCourseBase
   */
  id: number;
  /**
   * User.Id
   * @type {number}
   * @memberof UserCourseBase
   */
  userId: number;
  /**
   * Course.Id
   * @type {number}
   * @memberof UserCourseBase
   */
  courseId: number;
  /**
   * 出席狀態 對應SystemConfig內Type=AttendanceType 0:未出席 1已出席 2:尚未開課
   * @type {string}
   * @memberof UserCourseBase
   */
  attendanceType: string;
  /**
   *
   * @type {string}
   * @memberof UserCourseBase
   */
  attendanceDate: string;
  /**
   * 备注
   * @type {string}
   * @memberof UserCourseBase
   */
  memo: string;
}
/**
 * UserCourse
 * @export
 * @interface UserCourseView
 */
export interface UserCourseView {
  /**
   * 課程名稱
   * @type {string}
   * @memberof UserCourseView
   */
  courseName: string;
  /**
   * Organization.Id
   * @type {number}
   * @memberof UserCourseView
   */
  organizationId: number;
  /**
   * 組織名稱
   * @type {string}
   * @memberof UserCourseView
   */
  organizationName: string;
  /**
   * 主任牧師名稱
   * @type {string}
   * @memberof UserCourseView
   */
  pastorName: string;
  /**
   * 代號/梯次
   * @type {string}
   * @memberof UserCourseView
   */
  scheduleNo: string;
  /**
   * 附件類別對應type=ClassDay顯示 namevalue存此欄位1：一2：二….
   * @type {string}
   * @memberof UserCourseView
   */
  classDay: string;
  /**
   * 開始時間
   * @type {string}
   * @memberof UserCourseView
   */
  classTimeS: string;
  /**
   * 結束時間
   * @type {string}
   * @memberof UserCourseView
   */
  classTimeE: string;
  /**
   * 地點
   * @type {string}
   * @memberof UserCourseView
   */
  place: string;
  /**
   * 課程類別CourseManagementType.Id
   * @type {number}
   * @memberof UserCourseView
   */
  courseManagementTypeId: number;
  /**
   * 課程代碼
   * @type {string}
   * @memberof UserCourseView
   */
  courseManagementNo: string;
  /**
   * 課程作業繳交日期
   * @type {string}
   * @memberof UserCourseView
   */
  homeworkDate: string;
  /**
   * 課程標題
   * @type {string}
   * @memberof UserCourseView
   */
  title: string;
  /**
   * 課程內容描述
   * @type {string}
   * @memberof UserCourseView
   */
  description: string;
  /**
   * 課程狀態對應type=CourseManagementStatus顯示 namevalue存此欄位0：關閉1：開啟
   * @type {string}
   * @memberof UserCourseView
   */
  courseManagementStatus: string;
  /**
   * 課程類別編號
   * @type {string}
   * @memberof UserCourseView
   */
  courseManagementTypeNo: string;
  /**
   * 課程類別名稱
   * @type {string}
   * @memberof UserCourseView
   */
  courseManagementTypeName: string;
  /**
   * 開課狀態 : 0 - 未開，1 - 上課中，2 - 結束
   * @type {string}
   * @memberof UserCourseView
   */
  courseStatus: string;
  /**
   * 開課班級與時段
   * @type {string}
   * @memberof UserCourseView
   */
  courseClassSchedule: string;
  /**
   * 年度 屆別
   * @type {string}
   * @memberof UserCourseView
   */
  year: string;
  /**
   * 名稱
   * @type {string}
   * @memberof UserCourseView
   */
  name: string;
  /**
   * 梯次
   * @type {string}
   * @memberof UserCourseView
   */
  classNum: string;
  /**
   * 課程時間Id
   * @type {number}
   * @memberof UserCourseView
   */
  courseTimeScheduleId: number;
  /**
   * 季
   * @type {string}
   * @memberof UserCourseView
   */
  season: string;
  /**
   * 開課日起
   * @type {string}
   * @memberof UserCourseView
   */
  openDateS: string;
  /**
   * 開課日迄
   * @type {string}
   * @memberof UserCourseView
   */
  openDateE: string;
  /**
   * 報名日期(線上)
   * @type {string}
   * @memberof UserCourseView
   */
  signUpDateS: string;
  /**
   * 報名截止日(線上)
   * @type {string}
   * @memberof UserCourseView
   */
  signUpDateE: string;
  /**
   * 報名日期(臨櫃)
   * @type {string}
   * @memberof UserCourseView
   */
  counterSignUpDateS: string;
  /**
   * 報名截止日(臨櫃)
   * @type {string}
   * @memberof UserCourseView
   */
  counterSignUpDateE: string;
  /**
   *
   * @type {string}
   * @memberof UserCourseView
   */
  handledId?: string | null;
  /**
   *
   * @type {string}
   * @memberof UserCourseView
   */
  dateCreate?: string;
  /**
   *
   * @type {string}
   * @memberof UserCourseView
   */
  userCreate?: string | null;
  /**
   *
   * @type {string}
   * @memberof UserCourseView
   */
  dateUpdate?: string | null;
  /**
   *
   * @type {string}
   * @memberof UserCourseView
   */
  userUpdate?: string | null;
  /**
   * id
   * @type {number}
   * @memberof UserCourseView
   */
  id: number;
  /**
   * User.Id
   * @type {number}
   * @memberof UserCourseView
   */
  userId: number;
  /**
   * Course.Id
   * @type {number}
   * @memberof UserCourseView
   */
  courseId: number;
  /**
   * 出席狀態 對應SystemConfig內Type=AttendanceType 0:未出席 1已出席 2:尚未開課
   * @type {string}
   * @memberof UserCourseView
   */
  attendanceType: string;
  /**
   *
   * @type {string}
   * @memberof UserCourseView
   */
  attendanceDate: string;
  /**
   * 备注
   * @type {string}
   * @memberof UserCourseView
   */
  memo: string;
}
/**
 *
 * @export
 * @interface UserCourseViewApiResponse
 */
export interface UserCourseViewApiResponse {
  /**
   *
   * @type {string}
   * @memberof UserCourseViewApiResponse
   */
  handledId?: string | null;
  /**
   * http-200  0000: 代表處理成功，其餘一律為失敗  http-4xx  Vxxxx: 資料驗證  Bxxxx: 詳見 message 欄位說明
   * @type {string}
   * @memberof UserCourseViewApiResponse
   */
  code: string;
  /**
   * 回傳訊息
   * @type {string}
   * @memberof UserCourseViewApiResponse
   */
  message: string;
  /**
   * 錯誤詳細資訊
   * @type {any}
   * @memberof UserCourseViewApiResponse
   */
  detailMessage: any;
  /**
   *
   * @type {UserCourseView}
   * @memberof UserCourseViewApiResponse
   */
  data: UserCourseView;
  /**
   * 交易時間
   * @type {string}
   * @memberof UserCourseViewApiResponse
   */
  txnTime: string;
}
/**
 *
 * @export
 * @interface UserCourseViewListApiResponse
 */
export interface UserCourseViewListApiResponse {
  /**
   *
   * @type {string}
   * @memberof UserCourseViewListApiResponse
   */
  handledId?: string | null;
  /**
   * http-200  0000: 代表處理成功，其餘一律為失敗  http-4xx  Vxxxx: 資料驗證  Bxxxx: 詳見 message 欄位說明
   * @type {string}
   * @memberof UserCourseViewListApiResponse
   */
  code: string;
  /**
   * 回傳訊息
   * @type {string}
   * @memberof UserCourseViewListApiResponse
   */
  message: string;
  /**
   * 錯誤詳細資訊
   * @type {any}
   * @memberof UserCourseViewListApiResponse
   */
  detailMessage: any;
  /**
   * 回傳資料
   * @type {Array<UserCourseView>}
   * @memberof UserCourseViewListApiResponse
   */
  data: Array<UserCourseView>;
  /**
   * 交易時間
   * @type {string}
   * @memberof UserCourseViewListApiResponse
   */
  txnTime: string;
}
/**
 *
 * @export
 * @interface UserCourseViewPage
 */
export interface UserCourseViewPage {
  /**
   *
   * @type {number}
   * @memberof UserCourseViewPage
   */
  totalCount: number;
  /**
   *
   * @type {number}
   * @memberof UserCourseViewPage
   */
  pageCount: number;
  /**
   *
   * @type {number}
   * @memberof UserCourseViewPage
   */
  currentPage: number;
  /**
   *
   * @type {number}
   * @memberof UserCourseViewPage
   */
  size: number;
  /**
   *
   * @type {Array<UserCourseView>}
   * @memberof UserCourseViewPage
   */
  records: Array<UserCourseView>;
  /**
   *
   * @type {number}
   * @memberof UserCourseViewPage
   */
  pageSize: number;
  /**
   *
   * @type {boolean}
   * @memberof UserCourseViewPage
   */
  hasPreviousPages: boolean;
  /**
   *
   * @type {boolean}
   * @memberof UserCourseViewPage
   */
  hasNextPages: boolean;
  /**
   *
   * @type {number}
   * @memberof UserCourseViewPage
   */
  previousLastPageNo: number;
  /**
   *
   * @type {number}
   * @memberof UserCourseViewPage
   */
  nextStartPageNo: number;
  /**
   *
   * @type {Array<number>}
   * @memberof UserCourseViewPage
   */
  navigationPages: Array<number>;
}
/**
 *
 * @export
 * @interface UserCourseViewPageApiResponse
 */
export interface UserCourseViewPageApiResponse {
  /**
   *
   * @type {string}
   * @memberof UserCourseViewPageApiResponse
   */
  handledId?: string | null;
  /**
   * http-200  0000: 代表處理成功，其餘一律為失敗  http-4xx  Vxxxx: 資料驗證  Bxxxx: 詳見 message 欄位說明
   * @type {string}
   * @memberof UserCourseViewPageApiResponse
   */
  code: string;
  /**
   * 回傳訊息
   * @type {string}
   * @memberof UserCourseViewPageApiResponse
   */
  message: string;
  /**
   * 錯誤詳細資訊
   * @type {any}
   * @memberof UserCourseViewPageApiResponse
   */
  detailMessage: any;
  /**
   *
   * @type {UserCourseViewPage}
   * @memberof UserCourseViewPageApiResponse
   */
  data: UserCourseViewPage;
  /**
   * 交易時間
   * @type {string}
   * @memberof UserCourseViewPageApiResponse
   */
  txnTime: string;
}
/**
 *
 * @export
 * @interface UserExpertise
 */
export interface UserExpertise {
  /**
   *
   * @type {number}
   * @memberof UserExpertise
   */
  id: number;
  /**
   *
   * @type {number}
   * @memberof UserExpertise
   */
  userId: number;
  /**
   *
   * @type {string}
   * @memberof UserExpertise
   */
  name: string;
  /**
   *
   * @type {string}
   * @memberof UserExpertise
   */
  memo: string;
  /**
   *
   * @type {string}
   * @memberof UserExpertise
   */
  statusCd: string;
  /**
   *
   * @type {User}
   * @memberof UserExpertise
   */
  user: User;
  /**
   * ApiLog HandledId
   * @type {string}
   * @memberof UserExpertise
   */
  handledId?: string | null;
  /**
   * 建立日期
   * @type {string}
   * @memberof UserExpertise
   */
  dateCreate?: string;
  /**
   * 建立人員
   * @type {string}
   * @memberof UserExpertise
   */
  userCreate?: string | null;
  /**
   * 最後修改日期
   * @type {string}
   * @memberof UserExpertise
   */
  dateUpdate?: string | null;
  /**
   * 最後修改人員
   * @type {string}
   * @memberof UserExpertise
   */
  userUpdate?: string | null;
  /**
   *
   * @type {string}
   * @memberof UserExpertise
   */
  rowVersion?: string | null;
}
/**
 *
 * @export
 * @interface UserExpertiseBase
 */
export interface UserExpertiseBase {
  /**
   * Id
   * @type {number}
   * @memberof UserExpertiseBase
   */
  id: number;
  /**
   * 建立 User.Id
   * @type {number}
   * @memberof UserExpertiseBase
   */
  userId: number;
  /**
   * 專長描述
   * @type {string}
   * @memberof UserExpertiseBase
   */
  name: string;
}
/**
 * UserExpertise
 * @export
 * @interface UserExpertiseView
 */
export interface UserExpertiseView {
  /**
   *
   * @type {string}
   * @memberof UserExpertiseView
   */
  handledId?: string | null;
  /**
   *
   * @type {string}
   * @memberof UserExpertiseView
   */
  dateCreate?: string;
  /**
   *
   * @type {string}
   * @memberof UserExpertiseView
   */
  userCreate?: string | null;
  /**
   *
   * @type {string}
   * @memberof UserExpertiseView
   */
  dateUpdate?: string | null;
  /**
   *
   * @type {string}
   * @memberof UserExpertiseView
   */
  userUpdate?: string | null;
  /**
   * Id
   * @type {number}
   * @memberof UserExpertiseView
   */
  id: number;
  /**
   * 建立 User.Id
   * @type {number}
   * @memberof UserExpertiseView
   */
  userId: number;
  /**
   * 專長描述
   * @type {string}
   * @memberof UserExpertiseView
   */
  name: string;
}
/**
 *
 * @export
 * @interface UserFamily
 */
export interface UserFamily {
  /**
   *
   * @type {number}
   * @memberof UserFamily
   */
  id: number;
  /**
   *
   * @type {number}
   * @memberof UserFamily
   */
  userId: number;
  /**
   *
   * @type {string}
   * @memberof UserFamily
   */
  relativeType: string;
  /**
   *
   * @type {string}
   * @memberof UserFamily
   */
  name: string;
  /**
   *
   * @type {string}
   * @memberof UserFamily
   */
  memo: string;
  /**
   *
   * @type {string}
   * @memberof UserFamily
   */
  statusCd: string;
  /**
   *
   * @type {User}
   * @memberof UserFamily
   */
  user: User;
  /**
   * ApiLog HandledId
   * @type {string}
   * @memberof UserFamily
   */
  handledId?: string | null;
  /**
   * 建立日期
   * @type {string}
   * @memberof UserFamily
   */
  dateCreate?: string;
  /**
   * 建立人員
   * @type {string}
   * @memberof UserFamily
   */
  userCreate?: string | null;
  /**
   * 最後修改日期
   * @type {string}
   * @memberof UserFamily
   */
  dateUpdate?: string | null;
  /**
   * 最後修改人員
   * @type {string}
   * @memberof UserFamily
   */
  userUpdate?: string | null;
  /**
   *
   * @type {string}
   * @memberof UserFamily
   */
  rowVersion?: string | null;
}
/**
 *
 * @export
 * @interface UserFamilyBase
 */
export interface UserFamilyBase {
  /**
   * Id
   * @type {number}
   * @memberof UserFamilyBase
   */
  id: number;
  /**
   * 建立時間 User.Id
   * @type {string}
   * @memberof UserFamilyBase
   */
  userId: string;
  /**
   * 關係類別 對應SystemConfig        type=RelativeType       顯示 name       value存此欄位0：配偶1：父母2：子女
   * @type {string}
   * @memberof UserFamilyBase
   */
  relativeType: string;
  /**
   * 請輸入連絡電話
   * @type {string}
   * @memberof UserFamilyBase
   */
  name: string;
  /**
   * 帳號或註記
   * @type {string}
   * @memberof UserFamilyBase
   */
  memo: string;
}
/**
 * UserFamily
 * @export
 * @interface UserFamilyView
 */
export interface UserFamilyView {
  /**
   *
   * @type {string}
   * @memberof UserFamilyView
   */
  handledId?: string | null;
  /**
   *
   * @type {string}
   * @memberof UserFamilyView
   */
  dateCreate?: string;
  /**
   *
   * @type {string}
   * @memberof UserFamilyView
   */
  userCreate?: string | null;
  /**
   *
   * @type {string}
   * @memberof UserFamilyView
   */
  dateUpdate?: string | null;
  /**
   *
   * @type {string}
   * @memberof UserFamilyView
   */
  userUpdate?: string | null;
  /**
   * Id
   * @type {number}
   * @memberof UserFamilyView
   */
  id: number;
  /**
   * 建立時間 User.Id
   * @type {string}
   * @memberof UserFamilyView
   */
  userId: string;
  /**
   * 關係類別 對應SystemConfig        type=RelativeType       顯示 name       value存此欄位0：配偶1：父母2：子女
   * @type {string}
   * @memberof UserFamilyView
   */
  relativeType: string;
  /**
   * 請輸入連絡電話
   * @type {string}
   * @memberof UserFamilyView
   */
  name: string;
  /**
   * 帳號或註記
   * @type {string}
   * @memberof UserFamilyView
   */
  memo: string;
}
/**
 *
 * @export
 * @interface UserFamilyViewApiResponse
 */
export interface UserFamilyViewApiResponse {
  /**
   *
   * @type {string}
   * @memberof UserFamilyViewApiResponse
   */
  handledId?: string | null;
  /**
   * http-200  0000: 代表處理成功，其餘一律為失敗  http-4xx  Vxxxx: 資料驗證  Bxxxx: 詳見 message 欄位說明
   * @type {string}
   * @memberof UserFamilyViewApiResponse
   */
  code: string;
  /**
   * 回傳訊息
   * @type {string}
   * @memberof UserFamilyViewApiResponse
   */
  message: string;
  /**
   * 錯誤詳細資訊
   * @type {any}
   * @memberof UserFamilyViewApiResponse
   */
  detailMessage: any;
  /**
   *
   * @type {UserFamilyView}
   * @memberof UserFamilyViewApiResponse
   */
  data: UserFamilyView;
  /**
   * 交易時間
   * @type {string}
   * @memberof UserFamilyViewApiResponse
   */
  txnTime: string;
}
/**
 *
 * @export
 * @interface UserFamilyViewListApiResponse
 */
export interface UserFamilyViewListApiResponse {
  /**
   *
   * @type {string}
   * @memberof UserFamilyViewListApiResponse
   */
  handledId?: string | null;
  /**
   * http-200  0000: 代表處理成功，其餘一律為失敗  http-4xx  Vxxxx: 資料驗證  Bxxxx: 詳見 message 欄位說明
   * @type {string}
   * @memberof UserFamilyViewListApiResponse
   */
  code: string;
  /**
   * 回傳訊息
   * @type {string}
   * @memberof UserFamilyViewListApiResponse
   */
  message: string;
  /**
   * 錯誤詳細資訊
   * @type {any}
   * @memberof UserFamilyViewListApiResponse
   */
  detailMessage: any;
  /**
   * 回傳資料
   * @type {Array<UserFamilyView>}
   * @memberof UserFamilyViewListApiResponse
   */
  data: Array<UserFamilyView>;
  /**
   * 交易時間
   * @type {string}
   * @memberof UserFamilyViewListApiResponse
   */
  txnTime: string;
}
/**
 *
 * @export
 * @interface UserFamilyViewPage
 */
export interface UserFamilyViewPage {
  /**
   *
   * @type {number}
   * @memberof UserFamilyViewPage
   */
  totalCount: number;
  /**
   *
   * @type {number}
   * @memberof UserFamilyViewPage
   */
  pageCount: number;
  /**
   *
   * @type {number}
   * @memberof UserFamilyViewPage
   */
  currentPage: number;
  /**
   *
   * @type {number}
   * @memberof UserFamilyViewPage
   */
  size: number;
  /**
   *
   * @type {Array<UserFamilyView>}
   * @memberof UserFamilyViewPage
   */
  records: Array<UserFamilyView>;
  /**
   *
   * @type {number}
   * @memberof UserFamilyViewPage
   */
  pageSize: number;
  /**
   *
   * @type {boolean}
   * @memberof UserFamilyViewPage
   */
  hasPreviousPages: boolean;
  /**
   *
   * @type {boolean}
   * @memberof UserFamilyViewPage
   */
  hasNextPages: boolean;
  /**
   *
   * @type {number}
   * @memberof UserFamilyViewPage
   */
  previousLastPageNo: number;
  /**
   *
   * @type {number}
   * @memberof UserFamilyViewPage
   */
  nextStartPageNo: number;
  /**
   *
   * @type {Array<number>}
   * @memberof UserFamilyViewPage
   */
  navigationPages: Array<number>;
}
/**
 *
 * @export
 * @interface UserFamilyViewPageApiResponse
 */
export interface UserFamilyViewPageApiResponse {
  /**
   *
   * @type {string}
   * @memberof UserFamilyViewPageApiResponse
   */
  handledId?: string | null;
  /**
   * http-200  0000: 代表處理成功，其餘一律為失敗  http-4xx  Vxxxx: 資料驗證  Bxxxx: 詳見 message 欄位說明
   * @type {string}
   * @memberof UserFamilyViewPageApiResponse
   */
  code: string;
  /**
   * 回傳訊息
   * @type {string}
   * @memberof UserFamilyViewPageApiResponse
   */
  message: string;
  /**
   * 錯誤詳細資訊
   * @type {any}
   * @memberof UserFamilyViewPageApiResponse
   */
  detailMessage: any;
  /**
   *
   * @type {UserFamilyViewPage}
   * @memberof UserFamilyViewPageApiResponse
   */
  data: UserFamilyViewPage;
  /**
   * 交易時間
   * @type {string}
   * @memberof UserFamilyViewPageApiResponse
   */
  txnTime: string;
}
/**
 *
 * @export
 * @interface UserPastoralCare
 */
export interface UserPastoralCare {
  /**
   *
   * @type {number}
   * @memberof UserPastoralCare
   */
  id: number;
  /**
   *
   * @type {number}
   * @memberof UserPastoralCare
   */
  userId: number;
  /**
   *
   * @type {string}
   * @memberof UserPastoralCare
   */
  careType: string;
  /**
   *
   * @type {string}
   * @memberof UserPastoralCare
   */
  pastoralTitle: string;
  /**
   *
   * @type {string}
   * @memberof UserPastoralCare
   */
  newArea: string;
  /**
   *
   * @type {string}
   * @memberof UserPastoralCare
   */
  oldArea: string;
  /**
   *
   * @type {string}
   * @memberof UserPastoralCare
   */
  careDate: string;
  /**
   *
   * @type {string}
   * @memberof UserPastoralCare
   */
  comment: string;
  /**
   *
   * @type {string}
   * @memberof UserPastoralCare
   */
  statusCd: string;
  /**
   *
   * @type {User}
   * @memberof UserPastoralCare
   */
  user: User;
  /**
   * ApiLog HandledId
   * @type {string}
   * @memberof UserPastoralCare
   */
  handledId?: string | null;
  /**
   * 建立日期
   * @type {string}
   * @memberof UserPastoralCare
   */
  dateCreate?: string;
  /**
   * 建立人員
   * @type {string}
   * @memberof UserPastoralCare
   */
  userCreate?: string | null;
  /**
   * 最後修改日期
   * @type {string}
   * @memberof UserPastoralCare
   */
  dateUpdate?: string | null;
  /**
   * 最後修改人員
   * @type {string}
   * @memberof UserPastoralCare
   */
  userUpdate?: string | null;
  /**
   *
   * @type {string}
   * @memberof UserPastoralCare
   */
  rowVersion?: string | null;
}
/**
 *
 * @export
 * @interface UserPastoralCareBase
 */
export interface UserPastoralCareBase {
  /**
   * Id
   * @type {number}
   * @memberof UserPastoralCareBase
   */
  id: number;
  /**
   * User.Id
   * @type {number}
   * @memberof UserPastoralCareBase
   */
  userId: number;
  /**
   * 牧養類型 對應SystemConfig        type=CareType        顯示 name        value存此欄位 0：新進會員 1：移動 2：身分變更
   * @type {string}
   * @memberof UserPastoralCareBase
   */
  careType: string;
  /**
   *
   * @type {string}
   * @memberof UserPastoralCareBase
   */
  pastoralTitle: string;
  /**
   * 新區域
   * @type {string}
   * @memberof UserPastoralCareBase
   */
  newArea: string;
  /**
   * 舊區域
   * @type {string}
   * @memberof UserPastoralCareBase
   */
  oldArea: string;
  /**
   * 日期
   * @type {string}
   * @memberof UserPastoralCareBase
   */
  careDate: string;
}
/**
 * UserPastoralCare
 * @export
 * @interface UserPastoralCareView
 */
export interface UserPastoralCareView {
  /**
   *
   * @type {string}
   * @memberof UserPastoralCareView
   */
  handledId?: string | null;
  /**
   *
   * @type {string}
   * @memberof UserPastoralCareView
   */
  dateCreate?: string;
  /**
   *
   * @type {string}
   * @memberof UserPastoralCareView
   */
  userCreate?: string | null;
  /**
   *
   * @type {string}
   * @memberof UserPastoralCareView
   */
  dateUpdate?: string | null;
  /**
   *
   * @type {string}
   * @memberof UserPastoralCareView
   */
  userUpdate?: string | null;
  /**
   * Id
   * @type {number}
   * @memberof UserPastoralCareView
   */
  id: number;
  /**
   * User.Id
   * @type {number}
   * @memberof UserPastoralCareView
   */
  userId: number;
  /**
   * 牧養類型 對應SystemConfig        type=CareType        顯示 name        value存此欄位 0：新進會員 1：移動 2：身分變更
   * @type {string}
   * @memberof UserPastoralCareView
   */
  careType: string;
  /**
   *
   * @type {string}
   * @memberof UserPastoralCareView
   */
  pastoralTitle: string;
  /**
   * 新區域
   * @type {string}
   * @memberof UserPastoralCareView
   */
  newArea: string;
  /**
   * 舊區域
   * @type {string}
   * @memberof UserPastoralCareView
   */
  oldArea: string;
  /**
   * 日期
   * @type {string}
   * @memberof UserPastoralCareView
   */
  careDate: string;
}
/**
 *
 * @export
 * @interface UserPastoralCareViewApiResponse
 */
export interface UserPastoralCareViewApiResponse {
  /**
   *
   * @type {string}
   * @memberof UserPastoralCareViewApiResponse
   */
  handledId?: string | null;
  /**
   * http-200  0000: 代表處理成功，其餘一律為失敗  http-4xx  Vxxxx: 資料驗證  Bxxxx: 詳見 message 欄位說明
   * @type {string}
   * @memberof UserPastoralCareViewApiResponse
   */
  code: string;
  /**
   * 回傳訊息
   * @type {string}
   * @memberof UserPastoralCareViewApiResponse
   */
  message: string;
  /**
   * 錯誤詳細資訊
   * @type {any}
   * @memberof UserPastoralCareViewApiResponse
   */
  detailMessage: any;
  /**
   *
   * @type {UserPastoralCareView}
   * @memberof UserPastoralCareViewApiResponse
   */
  data: UserPastoralCareView;
  /**
   * 交易時間
   * @type {string}
   * @memberof UserPastoralCareViewApiResponse
   */
  txnTime: string;
}
/**
 *
 * @export
 * @interface UserPastoralCareViewListApiResponse
 */
export interface UserPastoralCareViewListApiResponse {
  /**
   *
   * @type {string}
   * @memberof UserPastoralCareViewListApiResponse
   */
  handledId?: string | null;
  /**
   * http-200  0000: 代表處理成功，其餘一律為失敗  http-4xx  Vxxxx: 資料驗證  Bxxxx: 詳見 message 欄位說明
   * @type {string}
   * @memberof UserPastoralCareViewListApiResponse
   */
  code: string;
  /**
   * 回傳訊息
   * @type {string}
   * @memberof UserPastoralCareViewListApiResponse
   */
  message: string;
  /**
   * 錯誤詳細資訊
   * @type {any}
   * @memberof UserPastoralCareViewListApiResponse
   */
  detailMessage: any;
  /**
   * 回傳資料
   * @type {Array<UserPastoralCareView>}
   * @memberof UserPastoralCareViewListApiResponse
   */
  data: Array<UserPastoralCareView>;
  /**
   * 交易時間
   * @type {string}
   * @memberof UserPastoralCareViewListApiResponse
   */
  txnTime: string;
}
/**
 *
 * @export
 * @interface UserPastoralCareViewPage
 */
export interface UserPastoralCareViewPage {
  /**
   *
   * @type {number}
   * @memberof UserPastoralCareViewPage
   */
  totalCount: number;
  /**
   *
   * @type {number}
   * @memberof UserPastoralCareViewPage
   */
  pageCount: number;
  /**
   *
   * @type {number}
   * @memberof UserPastoralCareViewPage
   */
  currentPage: number;
  /**
   *
   * @type {number}
   * @memberof UserPastoralCareViewPage
   */
  size: number;
  /**
   *
   * @type {Array<UserPastoralCareView>}
   * @memberof UserPastoralCareViewPage
   */
  records: Array<UserPastoralCareView>;
  /**
   *
   * @type {number}
   * @memberof UserPastoralCareViewPage
   */
  pageSize: number;
  /**
   *
   * @type {boolean}
   * @memberof UserPastoralCareViewPage
   */
  hasPreviousPages: boolean;
  /**
   *
   * @type {boolean}
   * @memberof UserPastoralCareViewPage
   */
  hasNextPages: boolean;
  /**
   *
   * @type {number}
   * @memberof UserPastoralCareViewPage
   */
  previousLastPageNo: number;
  /**
   *
   * @type {number}
   * @memberof UserPastoralCareViewPage
   */
  nextStartPageNo: number;
  /**
   *
   * @type {Array<number>}
   * @memberof UserPastoralCareViewPage
   */
  navigationPages: Array<number>;
}
/**
 *
 * @export
 * @interface UserPastoralCareViewPageApiResponse
 */
export interface UserPastoralCareViewPageApiResponse {
  /**
   *
   * @type {string}
   * @memberof UserPastoralCareViewPageApiResponse
   */
  handledId?: string | null;
  /**
   * http-200  0000: 代表處理成功，其餘一律為失敗  http-4xx  Vxxxx: 資料驗證  Bxxxx: 詳見 message 欄位說明
   * @type {string}
   * @memberof UserPastoralCareViewPageApiResponse
   */
  code: string;
  /**
   * 回傳訊息
   * @type {string}
   * @memberof UserPastoralCareViewPageApiResponse
   */
  message: string;
  /**
   * 錯誤詳細資訊
   * @type {any}
   * @memberof UserPastoralCareViewPageApiResponse
   */
  detailMessage: any;
  /**
   *
   * @type {UserPastoralCareViewPage}
   * @memberof UserPastoralCareViewPageApiResponse
   */
  data: UserPastoralCareViewPage;
  /**
   * 交易時間
   * @type {string}
   * @memberof UserPastoralCareViewPageApiResponse
   */
  txnTime: string;
}
/**
 *
 * @export
 * @interface UserProfile
 */
export interface UserProfile {
  /**
   * Id
   * @type {number}
   * @memberof UserProfile
   */
  id: number;
  /**
   * 帳戶
   * @type {string}
   * @memberof UserProfile
   */
  account: string;
  /**
   *
   * @type {string}
   * @memberof UserProfile
   */
  name: string;
  /**
   * 同帳號 (如果是模擬身分，則會取得 模擬者的 員編)
   * @type {string}
   * @memberof UserProfile
   */
  employeeNo: string;
  /**
   *
   * @type {string}
   * @memberof UserProfile
   */
  deptName: string;
  /**
   *
   * @type {string}
   * @memberof UserProfile
   */
  deptId: string;
  /**
   *
   * @type {string}
   * @memberof UserProfile
   */
  lastLoginIp: string;
  /**
   * 是否為模擬身分
   * @type {boolean}
   * @memberof UserProfile
   */
  mocked: boolean;
  /**
   * 實際使用者員編
   * @type {string}
   * @memberof UserProfile
   */
  actualEmpNo: string;
  /**
   *
   * @type {boolean}
   * @memberof UserProfile
   */
  isAdmin: boolean;
}
/**
 *
 * @export
 * @interface UserQuestionnaire
 */
export interface UserQuestionnaire {
  /**
   * 會員填寫問卷.id
   * @type {number}
   * @memberof UserQuestionnaire
   */
  id: number;
  /**
   * 問卷.id
   * @type {number}
   * @memberof UserQuestionnaire
   */
  questionnaireId: number;
  /**
   * User.id
   * @type {number}
   * @memberof UserQuestionnaire
   */
  userId: number;
  /**
   * 問卷產生預設0  問卷類型  type=QuestionnaireWriteType  顯示 name  value存此欄位  0：未填寫  1：已填寫
   * @type {string}
   * @memberof UserQuestionnaire
   */
  questionnaireWriteType: string;
  /**
   * 居住區域  type=QuestionnaireGoArea  顯示 name  value存此欄位  0：台中  1：台北  2：高雄
   * @type {string}
   * @memberof UserQuestionnaire
   */
  questionnaireGoArea: string;
  /**
   * 滿意度  type=Satisfaction  顯示 name  value存此欄位  1：1  2：2  3：3  4：4  5：5
   * @type {string}
   * @memberof UserQuestionnaire
   */
  satisfaction: string;
  /**
   * 評價  type=Satisfaction  顯示 name  value存此欄位  1：1  2：2  3：3  4：4  5：5
   * @type {string}
   * @memberof UserQuestionnaire
   */
  evaluation: string;
  /**
   * 填寫問卷日期
   * @type {string}
   * @memberof UserQuestionnaire
   */
  writeQuestionnaireDate: string;
  /**
   *
   * @type {string}
   * @memberof UserQuestionnaire
   */
  comment: string;
  /**
   *
   * @type {string}
   * @memberof UserQuestionnaire
   */
  statusCd: string;
  /**
   *
   * @type {User}
   * @memberof UserQuestionnaire
   */
  user: User;
  /**
   * ApiLog HandledId
   * @type {string}
   * @memberof UserQuestionnaire
   */
  handledId?: string | null;
  /**
   * 建立日期
   * @type {string}
   * @memberof UserQuestionnaire
   */
  dateCreate?: string;
  /**
   * 建立人員
   * @type {string}
   * @memberof UserQuestionnaire
   */
  userCreate?: string | null;
  /**
   * 最後修改日期
   * @type {string}
   * @memberof UserQuestionnaire
   */
  dateUpdate?: string | null;
  /**
   * 最後修改人員
   * @type {string}
   * @memberof UserQuestionnaire
   */
  userUpdate?: string | null;
  /**
   *
   * @type {string}
   * @memberof UserQuestionnaire
   */
  rowVersion?: string | null;
}
/**
 *
 * @export
 * @interface UserQuestionnaireBase
 */
export interface UserQuestionnaireBase {
  /**
   * 會員填寫問卷.id
   * @type {number}
   * @memberof UserQuestionnaireBase
   */
  id: number;
  /**
   * 問卷.id
   * @type {number}
   * @memberof UserQuestionnaireBase
   */
  questionnaireId: number;
  /**
   * User.id
   * @type {number}
   * @memberof UserQuestionnaireBase
   */
  userId: number;
  /**
   * 問卷產生預設0  問卷類型  type=QuestionnaireWriteType  顯示 name  value存此欄位  0：未填寫  1：已填寫
   * @type {string}
   * @memberof UserQuestionnaireBase
   */
  questionnaireWriteType: string;
  /**
   * 居住區域  type=QuestionnaireGoArea  顯示 name  value存此欄位  0：台中  1：台北  2：高雄
   * @type {string}
   * @memberof UserQuestionnaireBase
   */
  questionnaireGoArea: string;
  /**
   * 滿意度  type=Satisfaction  顯示 name  value存此欄位  1：1  2：2  3：3  4：4  5：5
   * @type {string}
   * @memberof UserQuestionnaireBase
   */
  satisfaction: string;
  /**
   * 評價  type=Satisfaction  顯示 name  value存此欄位  1：1  2：2  3：3  4：4  5：5
   * @type {string}
   * @memberof UserQuestionnaireBase
   */
  evaluation: string;
  /**
   * 填寫問卷日期
   * @type {string}
   * @memberof UserQuestionnaireBase
   */
  writeQuestionnaireDate: string;
  /**
   * 說明
   * @type {string}
   * @memberof UserQuestionnaireBase
   */
  comment: string;
}
/**
 * UserQuestionnaire
 * @export
 * @interface UserQuestionnaireView
 */
export interface UserQuestionnaireView {
  /**
   *
   * @type {QuestionnaireView}
   * @memberof UserQuestionnaireView
   */
  questionnaire: QuestionnaireView;
  /**
   *
   * @type {string}
   * @memberof UserQuestionnaireView
   */
  handledId?: string | null;
  /**
   *
   * @type {string}
   * @memberof UserQuestionnaireView
   */
  dateCreate?: string;
  /**
   *
   * @type {string}
   * @memberof UserQuestionnaireView
   */
  userCreate?: string | null;
  /**
   *
   * @type {string}
   * @memberof UserQuestionnaireView
   */
  dateUpdate?: string | null;
  /**
   *
   * @type {string}
   * @memberof UserQuestionnaireView
   */
  userUpdate?: string | null;
  /**
   * 會員填寫問卷.id
   * @type {number}
   * @memberof UserQuestionnaireView
   */
  id: number;
  /**
   * 問卷.id
   * @type {number}
   * @memberof UserQuestionnaireView
   */
  questionnaireId: number;
  /**
   * User.id
   * @type {number}
   * @memberof UserQuestionnaireView
   */
  userId: number;
  /**
   * 問卷產生預設0  問卷類型  type=QuestionnaireWriteType  顯示 name  value存此欄位  0：未填寫  1：已填寫
   * @type {string}
   * @memberof UserQuestionnaireView
   */
  questionnaireWriteType: string;
  /**
   * 居住區域  type=QuestionnaireGoArea  顯示 name  value存此欄位  0：台中  1：台北  2：高雄
   * @type {string}
   * @memberof UserQuestionnaireView
   */
  questionnaireGoArea: string;
  /**
   * 滿意度  type=Satisfaction  顯示 name  value存此欄位  1：1  2：2  3：3  4：4  5：5
   * @type {string}
   * @memberof UserQuestionnaireView
   */
  satisfaction: string;
  /**
   * 評價  type=Satisfaction  顯示 name  value存此欄位  1：1  2：2  3：3  4：4  5：5
   * @type {string}
   * @memberof UserQuestionnaireView
   */
  evaluation: string;
  /**
   * 填寫問卷日期
   * @type {string}
   * @memberof UserQuestionnaireView
   */
  writeQuestionnaireDate: string;
  /**
   * 說明
   * @type {string}
   * @memberof UserQuestionnaireView
   */
  comment: string;
}
/**
 *
 * @export
 * @interface UserQuestionnaireViewApiResponse
 */
export interface UserQuestionnaireViewApiResponse {
  /**
   *
   * @type {string}
   * @memberof UserQuestionnaireViewApiResponse
   */
  handledId?: string | null;
  /**
   * http-200  0000: 代表處理成功，其餘一律為失敗  http-4xx  Vxxxx: 資料驗證  Bxxxx: 詳見 message 欄位說明
   * @type {string}
   * @memberof UserQuestionnaireViewApiResponse
   */
  code: string;
  /**
   * 回傳訊息
   * @type {string}
   * @memberof UserQuestionnaireViewApiResponse
   */
  message: string;
  /**
   * 錯誤詳細資訊
   * @type {any}
   * @memberof UserQuestionnaireViewApiResponse
   */
  detailMessage: any;
  /**
   *
   * @type {UserQuestionnaireView}
   * @memberof UserQuestionnaireViewApiResponse
   */
  data: UserQuestionnaireView;
  /**
   * 交易時間
   * @type {string}
   * @memberof UserQuestionnaireViewApiResponse
   */
  txnTime: string;
}
/**
 *
 * @export
 * @interface UserQuestionnaireViewListApiResponse
 */
export interface UserQuestionnaireViewListApiResponse {
  /**
   *
   * @type {string}
   * @memberof UserQuestionnaireViewListApiResponse
   */
  handledId?: string | null;
  /**
   * http-200  0000: 代表處理成功，其餘一律為失敗  http-4xx  Vxxxx: 資料驗證  Bxxxx: 詳見 message 欄位說明
   * @type {string}
   * @memberof UserQuestionnaireViewListApiResponse
   */
  code: string;
  /**
   * 回傳訊息
   * @type {string}
   * @memberof UserQuestionnaireViewListApiResponse
   */
  message: string;
  /**
   * 錯誤詳細資訊
   * @type {any}
   * @memberof UserQuestionnaireViewListApiResponse
   */
  detailMessage: any;
  /**
   * 回傳資料
   * @type {Array<UserQuestionnaireView>}
   * @memberof UserQuestionnaireViewListApiResponse
   */
  data: Array<UserQuestionnaireView>;
  /**
   * 交易時間
   * @type {string}
   * @memberof UserQuestionnaireViewListApiResponse
   */
  txnTime: string;
}
/**
 *
 * @export
 * @interface UserQuestionnaireViewPage
 */
export interface UserQuestionnaireViewPage {
  /**
   *
   * @type {number}
   * @memberof UserQuestionnaireViewPage
   */
  totalCount: number;
  /**
   *
   * @type {number}
   * @memberof UserQuestionnaireViewPage
   */
  pageCount: number;
  /**
   *
   * @type {number}
   * @memberof UserQuestionnaireViewPage
   */
  currentPage: number;
  /**
   *
   * @type {number}
   * @memberof UserQuestionnaireViewPage
   */
  size: number;
  /**
   *
   * @type {Array<UserQuestionnaireView>}
   * @memberof UserQuestionnaireViewPage
   */
  records: Array<UserQuestionnaireView>;
  /**
   *
   * @type {number}
   * @memberof UserQuestionnaireViewPage
   */
  pageSize: number;
  /**
   *
   * @type {boolean}
   * @memberof UserQuestionnaireViewPage
   */
  hasPreviousPages: boolean;
  /**
   *
   * @type {boolean}
   * @memberof UserQuestionnaireViewPage
   */
  hasNextPages: boolean;
  /**
   *
   * @type {number}
   * @memberof UserQuestionnaireViewPage
   */
  previousLastPageNo: number;
  /**
   *
   * @type {number}
   * @memberof UserQuestionnaireViewPage
   */
  nextStartPageNo: number;
  /**
   *
   * @type {Array<number>}
   * @memberof UserQuestionnaireViewPage
   */
  navigationPages: Array<number>;
}
/**
 *
 * @export
 * @interface UserQuestionnaireViewPageApiResponse
 */
export interface UserQuestionnaireViewPageApiResponse {
  /**
   *
   * @type {string}
   * @memberof UserQuestionnaireViewPageApiResponse
   */
  handledId?: string | null;
  /**
   * http-200  0000: 代表處理成功，其餘一律為失敗  http-4xx  Vxxxx: 資料驗證  Bxxxx: 詳見 message 欄位說明
   * @type {string}
   * @memberof UserQuestionnaireViewPageApiResponse
   */
  code: string;
  /**
   * 回傳訊息
   * @type {string}
   * @memberof UserQuestionnaireViewPageApiResponse
   */
  message: string;
  /**
   * 錯誤詳細資訊
   * @type {any}
   * @memberof UserQuestionnaireViewPageApiResponse
   */
  detailMessage: any;
  /**
   *
   * @type {UserQuestionnaireViewPage}
   * @memberof UserQuestionnaireViewPageApiResponse
   */
  data: UserQuestionnaireViewPage;
  /**
   * 交易時間
   * @type {string}
   * @memberof UserQuestionnaireViewPageApiResponse
   */
  txnTime: string;
}
/**
 *
 * @export
 * @interface UserSociety
 */
export interface UserSociety {
  /**
   *
   * @type {number}
   * @memberof UserSociety
   */
  id: number;
  /**
   *
   * @type {number}
   * @memberof UserSociety
   */
  userId: number;
  /**
   *
   * @type {string}
   * @memberof UserSociety
   */
  name: string;
  /**
   *
   * @type {string}
   * @memberof UserSociety
   */
  comment: string;
  /**
   *
   * @type {string}
   * @memberof UserSociety
   */
  statusCd: string;
  /**
   *
   * @type {User}
   * @memberof UserSociety
   */
  user: User;
  /**
   * ApiLog HandledId
   * @type {string}
   * @memberof UserSociety
   */
  handledId?: string | null;
  /**
   * 建立日期
   * @type {string}
   * @memberof UserSociety
   */
  dateCreate?: string;
  /**
   * 建立人員
   * @type {string}
   * @memberof UserSociety
   */
  userCreate?: string | null;
  /**
   * 最後修改日期
   * @type {string}
   * @memberof UserSociety
   */
  dateUpdate?: string | null;
  /**
   * 最後修改人員
   * @type {string}
   * @memberof UserSociety
   */
  userUpdate?: string | null;
  /**
   *
   * @type {string}
   * @memberof UserSociety
   */
  rowVersion?: string | null;
}
/**
 *
 * @export
 * @interface UserSocietyBase
 */
export interface UserSocietyBase {
  /**
   * Key
   * @type {number}
   * @memberof UserSocietyBase
   */
  id: number;
  /**
   * User.Id
   * @type {number}
   * @memberof UserSocietyBase
   */
  userId: number;
  /**
   * User.Name
   * @type {string}
   * @memberof UserSocietyBase
   */
  name: string;
  /**
   *
   * @type {User}
   * @memberof UserSocietyBase
   */
  user: User;
}
/**
 * UserSociety
 * @export
 * @interface UserSocietyView
 */
export interface UserSocietyView {
  /**
   *
   * @type {string}
   * @memberof UserSocietyView
   */
  handledId?: string | null;
  /**
   *
   * @type {string}
   * @memberof UserSocietyView
   */
  dateCreate?: string;
  /**
   *
   * @type {string}
   * @memberof UserSocietyView
   */
  userCreate?: string | null;
  /**
   *
   * @type {string}
   * @memberof UserSocietyView
   */
  dateUpdate?: string | null;
  /**
   *
   * @type {string}
   * @memberof UserSocietyView
   */
  userUpdate?: string | null;
  /**
   * Key
   * @type {number}
   * @memberof UserSocietyView
   */
  id: number;
  /**
   * User.Id
   * @type {number}
   * @memberof UserSocietyView
   */
  userId: number;
  /**
   * User.Name
   * @type {string}
   * @memberof UserSocietyView
   */
  name: string;
  /**
   *
   * @type {User}
   * @memberof UserSocietyView
   */
  user: User;
}
/**
 *
 * @export
 * @interface UserSocietyViewApiResponse
 */
export interface UserSocietyViewApiResponse {
  /**
   *
   * @type {string}
   * @memberof UserSocietyViewApiResponse
   */
  handledId?: string | null;
  /**
   * http-200  0000: 代表處理成功，其餘一律為失敗  http-4xx  Vxxxx: 資料驗證  Bxxxx: 詳見 message 欄位說明
   * @type {string}
   * @memberof UserSocietyViewApiResponse
   */
  code: string;
  /**
   * 回傳訊息
   * @type {string}
   * @memberof UserSocietyViewApiResponse
   */
  message: string;
  /**
   * 錯誤詳細資訊
   * @type {any}
   * @memberof UserSocietyViewApiResponse
   */
  detailMessage: any;
  /**
   *
   * @type {UserSocietyView}
   * @memberof UserSocietyViewApiResponse
   */
  data: UserSocietyView;
  /**
   * 交易時間
   * @type {string}
   * @memberof UserSocietyViewApiResponse
   */
  txnTime: string;
}
/**
 *
 * @export
 * @interface UserSocietyViewListApiResponse
 */
export interface UserSocietyViewListApiResponse {
  /**
   *
   * @type {string}
   * @memberof UserSocietyViewListApiResponse
   */
  handledId?: string | null;
  /**
   * http-200  0000: 代表處理成功，其餘一律為失敗  http-4xx  Vxxxx: 資料驗證  Bxxxx: 詳見 message 欄位說明
   * @type {string}
   * @memberof UserSocietyViewListApiResponse
   */
  code: string;
  /**
   * 回傳訊息
   * @type {string}
   * @memberof UserSocietyViewListApiResponse
   */
  message: string;
  /**
   * 錯誤詳細資訊
   * @type {any}
   * @memberof UserSocietyViewListApiResponse
   */
  detailMessage: any;
  /**
   * 回傳資料
   * @type {Array<UserSocietyView>}
   * @memberof UserSocietyViewListApiResponse
   */
  data: Array<UserSocietyView>;
  /**
   * 交易時間
   * @type {string}
   * @memberof UserSocietyViewListApiResponse
   */
  txnTime: string;
}
/**
 *
 * @export
 * @interface UserSocietyViewPage
 */
export interface UserSocietyViewPage {
  /**
   *
   * @type {number}
   * @memberof UserSocietyViewPage
   */
  totalCount: number;
  /**
   *
   * @type {number}
   * @memberof UserSocietyViewPage
   */
  pageCount: number;
  /**
   *
   * @type {number}
   * @memberof UserSocietyViewPage
   */
  currentPage: number;
  /**
   *
   * @type {number}
   * @memberof UserSocietyViewPage
   */
  size: number;
  /**
   *
   * @type {Array<UserSocietyView>}
   * @memberof UserSocietyViewPage
   */
  records: Array<UserSocietyView>;
  /**
   *
   * @type {number}
   * @memberof UserSocietyViewPage
   */
  pageSize: number;
  /**
   *
   * @type {boolean}
   * @memberof UserSocietyViewPage
   */
  hasPreviousPages: boolean;
  /**
   *
   * @type {boolean}
   * @memberof UserSocietyViewPage
   */
  hasNextPages: boolean;
  /**
   *
   * @type {number}
   * @memberof UserSocietyViewPage
   */
  previousLastPageNo: number;
  /**
   *
   * @type {number}
   * @memberof UserSocietyViewPage
   */
  nextStartPageNo: number;
  /**
   *
   * @type {Array<number>}
   * @memberof UserSocietyViewPage
   */
  navigationPages: Array<number>;
}
/**
 *
 * @export
 * @interface UserSocietyViewPageApiResponse
 */
export interface UserSocietyViewPageApiResponse {
  /**
   *
   * @type {string}
   * @memberof UserSocietyViewPageApiResponse
   */
  handledId?: string | null;
  /**
   * http-200  0000: 代表處理成功，其餘一律為失敗  http-4xx  Vxxxx: 資料驗證  Bxxxx: 詳見 message 欄位說明
   * @type {string}
   * @memberof UserSocietyViewPageApiResponse
   */
  code: string;
  /**
   * 回傳訊息
   * @type {string}
   * @memberof UserSocietyViewPageApiResponse
   */
  message: string;
  /**
   * 錯誤詳細資訊
   * @type {any}
   * @memberof UserSocietyViewPageApiResponse
   */
  detailMessage: any;
  /**
   *
   * @type {UserSocietyViewPage}
   * @memberof UserSocietyViewPageApiResponse
   */
  data: UserSocietyViewPage;
  /**
   * 交易時間
   * @type {string}
   * @memberof UserSocietyViewPageApiResponse
   */
  txnTime: string;
}
/**
 * User
 * @export
 * @interface UserView
 */
export interface UserView {
  /**
   * Id
   * @type {number}
   * @memberof UserView
   */
  id: number;
  /**
   * Id
   * @type {string}
   * @memberof UserView
   */
  lastLogin: string;
  /**
   * 角色 id
   * @type {string}
   * @memberof UserView
   */
  roleId: string;
  /**
   * 父母的配偶名字
   * @type {string}
   * @memberof UserView
   */
  parentSpouseName: string;
  /**
   *
   * @type {string}
   * @memberof UserView
   */
  handledId?: string | null;
  /**
   *
   * @type {string}
   * @memberof UserView
   */
  dateCreate?: string;
  /**
   *
   * @type {string}
   * @memberof UserView
   */
  userCreate?: string | null;
  /**
   *
   * @type {string}
   * @memberof UserView
   */
  dateUpdate?: string | null;
  /**
   *
   * @type {string}
   * @memberof UserView
   */
  userUpdate?: string | null;
  /**
   * 家庭成員
   * @type {Array<UserFamilyView>}
   * @memberof UserView
   */
  userFamilies: Array<UserFamilyView>;
  /**
   * 緊急聯絡人
   * @type {Array<UserContactView>}
   * @memberof UserView
   */
  userContacts: Array<UserContactView>;
  /**
   * 銀行帳戶
   * @type {Array<UserBankAccountView>}
   * @memberof UserView
   */
  userBankAccounts: Array<UserBankAccountView>;
  /**
   * 專長
   * @type {Array<UserExpertiseView>}
   * @memberof UserView
   */
  userExpertises: Array<UserExpertiseView>;
  /**
   * 社團/工會描述
   * @type {Array<UserSocietyView>}
   * @memberof UserView
   */
  userSocieties: Array<UserSocietyView>;
  /**
   * 課程歷程
   * @type {Array<UserCourseView>}
   * @memberof UserView
   */
  userCourses: Array<UserCourseView>;
  /**
   *
   * @type {Array<OrganizationView>}
   * @memberof UserView
   */
  organizationTree: Array<OrganizationView>;
  /**
   *
   * @type {Array<PastoralView>}
   * @memberof UserView
   */
  pastoralTree: Array<PastoralView>;
  /**
   * 使用者角色權限
   * @type {Array<RoleUserMappingView>}
   * @memberof UserView
   */
  roleUserMappingViews: Array<RoleUserMappingView>;
  /**
   * 所屬牧區id =>對應牧區身分類別
   * @type {number}
   * @memberof UserView
   */
  pastoralId: number;
  /**
   * 姓名
   * @type {string}
   * @memberof UserView
   */
  name: string;
  /**
   * 聚會點Id
   * @type {number}
   * @memberof UserView
   */
  meetingPointId: number;
  /**
   * 帳號
   * @type {string}
   * @memberof UserView
   */
  userNo: string;
  /**
   * 密碼
   * @type {string}
   * @memberof UserView
   */
  password: string;
  /**
   * 令牌
   * @type {string}
   * @memberof UserView
   */
  passwordSalt: string;
  /**
   * 手機類型 對應SystemConfig type=PhoneType 顯示 name value存此欄位 0：家長手機 1：小孩手機
   * @type {string}
   * @memberof UserView
   */
  phoneType: string;
  /**
   * 姓
   * @type {string}
   * @memberof UserView
   */
  firstName: string;
  /**
   * 名
   * @type {string}
   * @memberof UserView
   */
  lastName: string;
  /**
   * 性別 對應SystemConfig type=GenderType 顯示 name value存此欄位0：女姓 1：男性\"
   * @type {string}
   * @memberof UserView
   */
  genderType: string;
  /**
   * 居住國家
   * @type {string}
   * @memberof UserView
   */
  liveCountry: string;
  /**
   * 生日
   * @type {string}
   * @memberof UserView
   */
  birthday: string;
  /**
   * 身分證字號
   * @type {string}
   * @memberof UserView
   */
  idNumber: string;
  /**
   * 手機國碼
   * @type {string}
   * @memberof UserView
   */
  cellAreaCode: string;
  /**
   * 手機門號
   * @type {string}
   * @memberof UserView
   */
  cellPhone: string;
  /**
   * 城市
   * @type {string}
   * @memberof UserView
   */
  liveCity: string;
  /**
   * 郵遞區號
   * @type {string}
   * @memberof UserView
   */
  liveZipCode: string;
  /**
   * 地區
   * @type {string}
   * @memberof UserView
   */
  liveZipArea: string;
  /**
   * 詳細地址
   * @type {string}
   * @memberof UserView
   */
  liveAddress: string;
  /**
   * 地址2
   * @type {string}
   * @memberof UserView
   */
  liveAddress2: string;
  /**
   * 受洗 對應SystemConfig type=BaptizedType顯示 namevalue存此欄位0：未受洗1：已受洗2：其它
   * @type {string}
   * @memberof UserView
   */
  baptizedType: string;
  /**
   * 受洗時間
   * @type {string}
   * @memberof UserView
   */
  baptizedTime: string;
  /**
   * 教會施洗者 (若為旌旗教會者)
   * @type {string}
   * @memberof UserView
   */
  baptizedPerson: string;
  /**
   * 教會類別 對應SystemConfigtype=ChurchType顯示 namevalue存此欄位0：其他1：旌旗教會
   * @type {string}
   * @memberof UserView
   */
  churchType: string;
  /**
   * 會友所屬堂點 DDL對應Organization.Name
   * @type {string}
   * @memberof UserView
   */
  churchName: string;
  /**
   * 過去在哪個教會名稱
   * @type {string}
   * @memberof UserView
   */
  anotherChurchName: string;
  /**
   * 電話(市話)
   * @type {string}
   * @memberof UserView
   */
  phone: string;
  /**
   * 手機國碼1
   * @type {string}
   * @memberof UserView
   */
  cellAreaCode1: string;
  /**
   * 電話(手機)
   * @type {string}
   * @memberof UserView
   */
  cellPhone1: string;
  /**
   * 手機國碼2
   * @type {string}
   * @memberof UserView
   */
  cellAreaCode2: string;
  /**
   * 電話(手機2)
   * @type {string}
   * @memberof UserView
   */
  cellPhone2: string;
  /**
   * Email(主要)
   * @type {string}
   * @memberof UserView
   */
  email1: string;
  /**
   * Email(次要)
   * @type {string}
   * @memberof UserView
   */
  email2: string;
  /**
   * InstagramId
   * @type {string}
   * @memberof UserView
   */
  instagramId: string;
  /**
   * LineId
   * @type {string}
   * @memberof UserView
   */
  lineId: string;
  /**
   * WeChatId
   * @type {string}
   * @memberof UserView
   */
  weChatId: string;
  /**
   * 其他APPID
   * @type {string}
   * @memberof UserView
   */
  otherSocialId: string;
  /**
   * 是否在旌旗小組對應SystemConfigtype = isYN顯示 namevalue存此欄位0：N1：Y\"
   * @type {string}
   * @memberof UserView
   */
  isChurchGroup: string;
  /**
   * Id
   * @type {string}
   * @memberof UserView
   */
  churchGroupNo: string;
  /**
   * 是否願意加入旌旗小組對應SystemConfigtype = isYN顯示 namevalue存此欄位0：N1：Y\"
   * @type {string}
   * @memberof UserView
   */
  isJoinChurchGroup: string;
  /**
   * 志願序1 實體 星期對應SystemConfigtype = JoinSequenceType0顯示 namevalue存此欄位1：星期一2：星期二3：星期三4：星期四5：星期五6：星期六7：星期日
   * @type {string}
   * @memberof UserView
   */
  joinInPersonDate1: string;
  /**
   * 志願序1 實體 時間type=JoinSequenceType1顯示 namevalue存此欄位1：上午2：下午
   * @type {string}
   * @memberof UserView
   */
  joinInPersonTime1: string;
  /**
   * 志願序1 實體 時間type=JoinSequenceType2顯示 namevalue存此欄位1：堂點
   * @type {string}
   * @memberof UserView
   */
  joinInPersonLocation1: string;
  /**
   * 志願序2 實體 星期對應SystemConfigtype = JoinSequenceType0顯示 namevalue存此欄位1：星期一2：星期二3：星期三4：星期四5：星期五6：星期六7：星期日
   * @type {string}
   * @memberof UserView
   */
  joinInPersonDate2: string;
  /**
   * 志願序2 實體 時間type=JoinSequenceType1顯示 namevalue存此欄位1：上午2：下午
   * @type {string}
   * @memberof UserView
   */
  joinInPersonTime2: string;
  /**
   * 志願序2 實體 時間type=JoinSequenceType2顯示 namevalue存此欄位1：堂點
   * @type {string}
   * @memberof UserView
   */
  joinInPersonLocation2: string;
  /**
   * 志願序3 實體 星期對應SystemConfigtype = JoinSequenceType0顯示 namevalue存此欄位1：星期一2：星期二3：星期三4：星期四5：星期五6：星期六7：星期日
   * @type {string}
   * @memberof UserView
   */
  joinInPersonDate3: string;
  /**
   * 志願序3 實體 時間type=JoinSequenceType1顯示 namevalue存此欄位1：上午2：下午
   * @type {string}
   * @memberof UserView
   */
  joinInPersonTime3: string;
  /**
   * 志願序3 實體 時間type=JoinSequenceType2顯示 namevalue存此欄位1：堂點
   * @type {string}
   * @memberof UserView
   */
  joinInPersonLocation3: string;
  /**
   * 志願序1 線上 星期
   * @type {string}
   * @memberof UserView
   */
  joinOnlineDate1: string;
  /**
   * 志願序1 線上 時間
   * @type {string}
   * @memberof UserView
   */
  joinOnlineTime1: string;
  /**
   * 志願序2 線上 星期
   * @type {string}
   * @memberof UserView
   */
  joinOnlineDate2: string;
  /**
   * 志願序2 線上 時間
   * @type {string}
   * @memberof UserView
   */
  joinOnlineTime2: string;
  /**
   * 志願序3 線上 星期
   * @type {string}
   * @memberof UserView
   */
  joinOnlineDate3: string;
  /**
   * 志願序3 線上 時間
   * @type {string}
   * @memberof UserView
   */
  joinOnlineTime3: string;
  /**
   * Id
   * @type {string}
   * @memberof UserView
   */
  memberType: string;
  /**
   * 教育程度type=EduType顯示 namevalue存此欄位0：小學1：國中…
   * @type {string}
   * @memberof UserView
   */
  eduType: string;
  /**
   * 職業type=EduType顯示 namevalue存此欄位0：老師1：家管…
   * @type {string}
   * @memberof UserView
   */
  professionType: string;
  /**
   * 是否結婚對應SystemConfigtype = IsMarried顯示 namevalue存此欄位0：未婚1：已婚
   * @type {string}
   * @memberof UserView
   */
  isMarried: string;
  /**
   * 國碼
   * @type {string}
   * @memberof UserView
   */
  countryCode: string;
  /**
   * 是否舊會員 Y是N否
   * @type {string}
   * @memberof UserView
   */
  isOldMember: string;
  /**
   * 勾選合約
   * @type {string}
   * @memberof UserView
   */
  isTerm: string;
  /**
   * 是否受洗
   * @type {string}
   * @memberof UserView
   */
  isBaptize: string;
  /**
   * 受洗類別 0:未知 1: 本教會受洗 2: 其他教會受洗 3: 未受洗
   * @type {string}
   * @memberof UserView
   */
  baptizeTypeId: string;
  /**
   * 受洗日期
   * @type {string}
   * @memberof UserView
   */
  baptizeday: string;
  /**
   * 受洗教會
   * @type {string}
   * @memberof UserView
   */
  baptizeOrgName: string;
  /**
   * 受洗教會
   * @type {string}
   * @memberof UserView
   */
  baptizeGroup: string;
  /**
   * 施洗人
   * @type {string}
   * @memberof UserView
   */
  baptizer: string;
  /**
   * 使用者家長Id
   * @type {number}
   * @memberof UserView
   */
  parentUserId: number;
  /**
   * 是否會員
   * @type {string}
   * @memberof UserView
   */
  isMember: string;
  /**
   * 同工角色類別 對應SystemConfig type=GroupMemberType 顯示 name value存此欄位 0：無 1：核心同工 2：儲備同工
   * @type {string}
   * @memberof UserView
   */
  groupMemberType: string;
  /**
   * 中低收入戶 IsYN 0:否 1:是
   * @type {string}
   * @memberof UserView
   */
  lowIncome: string;
  /**
   * 備註欄位
   * @type {string}
   * @memberof UserView
   */
  remark: string;
  /**
   * 狀態
   * @type {string}
   * @memberof UserView
   */
  statusCd: string;
}
/**
 *
 * @export
 * @interface UserViewApiResponse
 */
export interface UserViewApiResponse {
  /**
   *
   * @type {string}
   * @memberof UserViewApiResponse
   */
  handledId?: string | null;
  /**
   * http-200  0000: 代表處理成功，其餘一律為失敗  http-4xx  Vxxxx: 資料驗證  Bxxxx: 詳見 message 欄位說明
   * @type {string}
   * @memberof UserViewApiResponse
   */
  code: string;
  /**
   * 回傳訊息
   * @type {string}
   * @memberof UserViewApiResponse
   */
  message: string;
  /**
   * 錯誤詳細資訊
   * @type {any}
   * @memberof UserViewApiResponse
   */
  detailMessage: any;
  /**
   *
   * @type {UserView}
   * @memberof UserViewApiResponse
   */
  data: UserView;
  /**
   * 交易時間
   * @type {string}
   * @memberof UserViewApiResponse
   */
  txnTime: string;
}
/**
 *
 * @export
 * @interface UserViewListApiResponse
 */
export interface UserViewListApiResponse {
  /**
   *
   * @type {string}
   * @memberof UserViewListApiResponse
   */
  handledId?: string | null;
  /**
   * http-200  0000: 代表處理成功，其餘一律為失敗  http-4xx  Vxxxx: 資料驗證  Bxxxx: 詳見 message 欄位說明
   * @type {string}
   * @memberof UserViewListApiResponse
   */
  code: string;
  /**
   * 回傳訊息
   * @type {string}
   * @memberof UserViewListApiResponse
   */
  message: string;
  /**
   * 錯誤詳細資訊
   * @type {any}
   * @memberof UserViewListApiResponse
   */
  detailMessage: any;
  /**
   * 回傳資料
   * @type {Array<UserView>}
   * @memberof UserViewListApiResponse
   */
  data: Array<UserView>;
  /**
   * 交易時間
   * @type {string}
   * @memberof UserViewListApiResponse
   */
  txnTime: string;
}
/**
 *
 * @export
 * @interface UserViewPage
 */
export interface UserViewPage {
  /**
   *
   * @type {number}
   * @memberof UserViewPage
   */
  totalCount: number;
  /**
   *
   * @type {number}
   * @memberof UserViewPage
   */
  pageCount: number;
  /**
   *
   * @type {number}
   * @memberof UserViewPage
   */
  currentPage: number;
  /**
   *
   * @type {number}
   * @memberof UserViewPage
   */
  size: number;
  /**
   *
   * @type {Array<UserView>}
   * @memberof UserViewPage
   */
  records: Array<UserView>;
  /**
   *
   * @type {number}
   * @memberof UserViewPage
   */
  pageSize: number;
  /**
   *
   * @type {boolean}
   * @memberof UserViewPage
   */
  hasPreviousPages: boolean;
  /**
   *
   * @type {boolean}
   * @memberof UserViewPage
   */
  hasNextPages: boolean;
  /**
   *
   * @type {number}
   * @memberof UserViewPage
   */
  previousLastPageNo: number;
  /**
   *
   * @type {number}
   * @memberof UserViewPage
   */
  nextStartPageNo: number;
  /**
   *
   * @type {Array<number>}
   * @memberof UserViewPage
   */
  navigationPages: Array<number>;
}
/**
 *
 * @export
 * @interface UserViewPageApiResponse
 */
export interface UserViewPageApiResponse {
  /**
   *
   * @type {string}
   * @memberof UserViewPageApiResponse
   */
  handledId?: string | null;
  /**
   * http-200  0000: 代表處理成功，其餘一律為失敗  http-4xx  Vxxxx: 資料驗證  Bxxxx: 詳見 message 欄位說明
   * @type {string}
   * @memberof UserViewPageApiResponse
   */
  code: string;
  /**
   * 回傳訊息
   * @type {string}
   * @memberof UserViewPageApiResponse
   */
  message: string;
  /**
   * 錯誤詳細資訊
   * @type {any}
   * @memberof UserViewPageApiResponse
   */
  detailMessage: any;
  /**
   *
   * @type {UserViewPage}
   * @memberof UserViewPageApiResponse
   */
  data: UserViewPage;
  /**
   * 交易時間
   * @type {string}
   * @memberof UserViewPageApiResponse
   */
  txnTime: string;
}
/**
 *
 * @export
 * @interface VerificationCodeResponse
 */
export interface VerificationCodeResponse {
  /**
   *
   * @type {string}
   * @memberof VerificationCodeResponse
   */
  image: string;
  /**
   *
   * @type {string}
   * @memberof VerificationCodeResponse
   */
  token: string;
}
/**
 *
 * @export
 * @interface VerificationCodeResponseApiResponse
 */
export interface VerificationCodeResponseApiResponse {
  /**
   *
   * @type {string}
   * @memberof VerificationCodeResponseApiResponse
   */
  handledId?: string | null;
  /**
   * http-200  0000: 代表處理成功，其餘一律為失敗  http-4xx  Vxxxx: 資料驗證  Bxxxx: 詳見 message 欄位說明
   * @type {string}
   * @memberof VerificationCodeResponseApiResponse
   */
  code: string;
  /**
   * 回傳訊息
   * @type {string}
   * @memberof VerificationCodeResponseApiResponse
   */
  message: string;
  /**
   * 錯誤詳細資訊
   * @type {any}
   * @memberof VerificationCodeResponseApiResponse
   */
  detailMessage: any;
  /**
   *
   * @type {VerificationCodeResponse}
   * @memberof VerificationCodeResponseApiResponse
   */
  data: VerificationCodeResponse;
  /**
   * 交易時間
   * @type {string}
   * @memberof VerificationCodeResponseApiResponse
   */
  txnTime: string;
}

/**
 * AppMetricsApi - axios parameter creator
 * @export
 */
export const AppMetricsApiAxiosParamCreator = function (configuration?: Configuration) {
  return {
    /**
     *
     * @summary 取得 build commit hash
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAppVersionAsync: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
      const localVarPath = `/api/pbl/appMetrics/version`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: "GET", ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication Example-id-1 required
      await setApiKeyToObject(localVarHeaderParameter, "Example-id-1", configuration);

      // authentication JWT_Authorization required
      await setApiKeyToObject(localVarHeaderParameter, "authorization", configuration);

      // authentication example-id-2 required
      await setApiKeyToObject(localVarHeaderParameter, "example-id-2", configuration);

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Ping
     * @param {boolean} [throwEx]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    ping: async (throwEx?: boolean, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
      const localVarPath = `/api/pbl/appMetrics/ping`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: "GET", ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication Example-id-1 required
      await setApiKeyToObject(localVarHeaderParameter, "Example-id-1", configuration);

      // authentication JWT_Authorization required
      await setApiKeyToObject(localVarHeaderParameter, "authorization", configuration);

      // authentication example-id-2 required
      await setApiKeyToObject(localVarHeaderParameter, "example-id-2", configuration);

      if (throwEx !== undefined) {
        localVarQueryParameter["throwEx"] = throwEx;
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * AppMetricsApi - functional programming interface
 * @export
 */
export const AppMetricsApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = AppMetricsApiAxiosParamCreator(configuration);
  return {
    /**
     *
     * @summary 取得 build commit hash
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getAppVersionAsync(
      options?: AxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<StringApiResponse>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getAppVersionAsync(options);
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     *
     * @summary Ping
     * @param {boolean} [throwEx]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async ping(
      throwEx?: boolean,
      options?: AxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<StringApiResponse>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.ping(throwEx, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
  };
};

/**
 * AppMetricsApi - factory interface
 * @export
 */
export const AppMetricsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
  const localVarFp = AppMetricsApiFp(configuration);
  return {
    /**
     *
     * @summary 取得 build commit hash
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAppVersionAsync(options?: any): Promise<StringApiResponse> {
      return localVarFp.getAppVersionAsync(options).then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Ping
     * @param {boolean} [throwEx]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    ping(throwEx?: boolean, options?: any): Promise<StringApiResponse> {
      return localVarFp.ping(throwEx, options).then((request) => request(axios, basePath));
    },
  };
};

/**
 * AppMetricsApi - interface
 * @export
 * @interface AppMetricsApi
 */
export interface AppMetricsApiInterface {
  /**
   *
   * @summary 取得 build commit hash
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof AppMetricsApiInterface
   */
  getAppVersionAsync(options?: AxiosRequestConfig): Promise<StringApiResponse>;

  /**
   *
   * @summary Ping
   * @param {boolean} [throwEx]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof AppMetricsApiInterface
   */
  ping(throwEx?: boolean, options?: AxiosRequestConfig): Promise<StringApiResponse>;
}

/**
 * AppMetricsApi - object-oriented interface
 * @export
 * @class AppMetricsApi
 * @extends {BaseAPI}
 */
export class AppMetricsApi extends BaseAPI implements AppMetricsApiInterface {
  /**
   *
   * @summary 取得 build commit hash
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof AppMetricsApi
   */
  public getAppVersionAsync(options?: AxiosRequestConfig) {
    return AppMetricsApiFp(this.configuration)
      .getAppVersionAsync(options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Ping
   * @param {boolean} [throwEx]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof AppMetricsApi
   */
  public ping(throwEx?: boolean, options?: AxiosRequestConfig) {
    return AppMetricsApiFp(this.configuration)
      .ping(throwEx, options)
      .then((request) => request(this.axios, this.basePath));
  }
}

/**
 * AuthApi - axios parameter creator
 * @export
 */
export const AuthApiAxiosParamCreator = function (configuration?: Configuration) {
  return {
    /**
     *
     * @summary 取得權限
     * @param {object} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    fetchMyPrivilegesAsync: async (body?: object, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
      const localVarPath = `/api/pbl/auth/me/privileges`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: "POST", ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication Example-id-1 required
      await setApiKeyToObject(localVarHeaderParameter, "Example-id-1", configuration);

      // authentication JWT_Authorization required
      await setApiKeyToObject(localVarHeaderParameter, "authorization", configuration);

      // authentication example-id-2 required
      await setApiKeyToObject(localVarHeaderParameter, "example-id-2", configuration);

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration);

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * AuthApi - functional programming interface
 * @export
 */
export const AuthApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = AuthApiAxiosParamCreator(configuration);
  return {
    /**
     *
     * @summary 取得權限
     * @param {object} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async fetchMyPrivilegesAsync(
      body?: object,
      options?: AxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<PrivilegeNodeListApiResponse>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.fetchMyPrivilegesAsync(body, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
  };
};

/**
 * AuthApi - factory interface
 * @export
 */
export const AuthApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
  const localVarFp = AuthApiFp(configuration);
  return {
    /**
     *
     * @summary 取得權限
     * @param {object} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    fetchMyPrivilegesAsync(body?: object, options?: any): Promise<PrivilegeNodeListApiResponse> {
      return localVarFp.fetchMyPrivilegesAsync(body, options).then((request) => request(axios, basePath));
    },
  };
};

/**
 * AuthApi - interface
 * @export
 * @interface AuthApi
 */
export interface AuthApiInterface {
  /**
   *
   * @summary 取得權限
   * @param {object} [body]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof AuthApiInterface
   */
  fetchMyPrivilegesAsync(body?: object, options?: AxiosRequestConfig): Promise<PrivilegeNodeListApiResponse>;
}

/**
 * AuthApi - object-oriented interface
 * @export
 * @class AuthApi
 * @extends {BaseAPI}
 */
export class AuthApi extends BaseAPI implements AuthApiInterface {
  /**
   *
   * @summary 取得權限
   * @param {object} [body]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof AuthApi
   */
  public fetchMyPrivilegesAsync(body?: object, options?: AxiosRequestConfig) {
    return AuthApiFp(this.configuration)
      .fetchMyPrivilegesAsync(body, options)
      .then((request) => request(this.axios, this.basePath));
  }
}

/**
 * ChildApi - axios parameter creator
 * @export
 */
export const ChildApiAxiosParamCreator = function (configuration?: Configuration) {
  return {
    /**
     *
     * @summary 註冊
     * @param {ChildSignUpCommand} [childSignUpCommand]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    childSignUp: async (
      childSignUpCommand?: ChildSignUpCommand,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/child/signup`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: "POST", ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication Example-id-1 required
      await setApiKeyToObject(localVarHeaderParameter, "Example-id-1", configuration);

      // authentication JWT_Authorization required
      await setApiKeyToObject(localVarHeaderParameter, "authorization", configuration);

      // authentication example-id-2 required
      await setApiKeyToObject(localVarHeaderParameter, "example-id-2", configuration);

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      localVarRequestOptions.data = serializeDataIfNeeded(childSignUpCommand, localVarRequestOptions, configuration);

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * ChildApi - functional programming interface
 * @export
 */
export const ChildApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = ChildApiAxiosParamCreator(configuration);
  return {
    /**
     *
     * @summary 註冊
     * @param {ChildSignUpCommand} [childSignUpCommand]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async childSignUp(
      childSignUpCommand?: ChildSignUpCommand,
      options?: AxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<ChildSignUpCommandResponseApiResponse>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.childSignUp(childSignUpCommand, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
  };
};

/**
 * ChildApi - factory interface
 * @export
 */
export const ChildApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
  const localVarFp = ChildApiFp(configuration);
  return {
    /**
     *
     * @summary 註冊
     * @param {ChildSignUpCommand} [childSignUpCommand]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    childSignUp(
      childSignUpCommand?: ChildSignUpCommand,
      options?: any
    ): Promise<ChildSignUpCommandResponseApiResponse> {
      return localVarFp.childSignUp(childSignUpCommand, options).then((request) => request(axios, basePath));
    },
  };
};

/**
 * ChildApi - interface
 * @export
 * @interface ChildApi
 */
export interface ChildApiInterface {
  /**
   *
   * @summary 註冊
   * @param {ChildSignUpCommand} [childSignUpCommand]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ChildApiInterface
   */
  childSignUp(
    childSignUpCommand?: ChildSignUpCommand,
    options?: AxiosRequestConfig
  ): Promise<ChildSignUpCommandResponseApiResponse>;
}

/**
 * ChildApi - object-oriented interface
 * @export
 * @class ChildApi
 * @extends {BaseAPI}
 */
export class ChildApi extends BaseAPI implements ChildApiInterface {
  /**
   *
   * @summary 註冊
   * @param {ChildSignUpCommand} [childSignUpCommand]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ChildApi
   */
  public childSignUp(childSignUpCommand?: ChildSignUpCommand, options?: AxiosRequestConfig) {
    return ChildApiFp(this.configuration)
      .childSignUp(childSignUpCommand, options)
      .then((request) => request(this.axios, this.basePath));
  }
}

/**
 * CourseApi - axios parameter creator
 * @export
 */
export const CourseApiAxiosParamCreator = function (configuration?: Configuration) {
  return {
    /**
     *
     * @summary 建立課程主檔檔
     * @param {CreateCourseCommand} [createCourseCommand]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createCourse: async (
      createCourseCommand?: CreateCourseCommand,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/course`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: "POST", ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication Example-id-1 required
      await setApiKeyToObject(localVarHeaderParameter, "Example-id-1", configuration);

      // authentication JWT_Authorization required
      await setApiKeyToObject(localVarHeaderParameter, "authorization", configuration);

      // authentication example-id-2 required
      await setApiKeyToObject(localVarHeaderParameter, "example-id-2", configuration);

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      localVarRequestOptions.data = serializeDataIfNeeded(createCourseCommand, localVarRequestOptions, configuration);

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary 刪除課程主檔
     * @param {DeleteCourseCommand} [deleteCourseCommand]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteCourse: async (
      deleteCourseCommand?: DeleteCourseCommand,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/course`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: "DELETE", ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication Example-id-1 required
      await setApiKeyToObject(localVarHeaderParameter, "Example-id-1", configuration);

      // authentication JWT_Authorization required
      await setApiKeyToObject(localVarHeaderParameter, "authorization", configuration);

      // authentication example-id-2 required
      await setApiKeyToObject(localVarHeaderParameter, "example-id-2", configuration);

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      localVarRequestOptions.data = serializeDataIfNeeded(deleteCourseCommand, localVarRequestOptions, configuration);

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary 查詢課程
     * @param {FetchAllCourseRequest} [fetchAllCourseRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    fetchCourses: async (
      fetchAllCourseRequest?: FetchAllCourseRequest,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/course/fetch`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: "POST", ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication Example-id-1 required
      await setApiKeyToObject(localVarHeaderParameter, "Example-id-1", configuration);

      // authentication JWT_Authorization required
      await setApiKeyToObject(localVarHeaderParameter, "authorization", configuration);

      // authentication example-id-2 required
      await setApiKeyToObject(localVarHeaderParameter, "example-id-2", configuration);

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      localVarRequestOptions.data = serializeDataIfNeeded(fetchAllCourseRequest, localVarRequestOptions, configuration);

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary 查詢課程主檔
     * @param {number} [id] id
     * @param {number} [courseManagementId] 課程類別CourseManagement.Id
     * @param {number} [organizationId] Organization.Id
     * @param {number} [questionnaireId] Questionnaire.Id 問卷Id
     * @param {string} [year] 年度 屆別
     * @param {string} [name] 名稱
     * @param {string} [classNum] 梯次
     * @param {string} [season] 季
     * @param {string} [openDate] 開課日
     * @param {string} [signUpDateS] 報名日期(線上)
     * @param {string} [signUpDateE] 報名截止日(線上)
     * @param {string} [counterSignUpDateS] 報名日期(臨櫃)
     * @param {string} [counterSignUpDateE] 報名截止日(臨櫃)
     * @param {string} [discountSignUpDate] 優惠報名截止日
     * @param {string} [courseSignUpType] 報名方式對應type&#x3D;CourseSignUpType顯示 namevalue存此欄位0：一般臨櫃1：網路報名
     * @param {number} [wishCount] 最少志願數
     * @param {string} [needRecommend] 是否需要推薦對應type&#x3D;IsYN顯示 namevalue存此欄位0：N1：Y
     * @param {string} [acceptNewMember] 新朋友可報名對應type&#x3D;IsYN顯示 namevalue存此欄位0：N1：Y
     * @param {string} [description] 課程說明/資格
     * @param {number} [courseCount] 上課堂數
     * @param {number} [quota] 報名名額
     * @param {string} [graduationType] 結業狀態對應type&#x3D;GraduationType顯示 namevalue存此欄位0：未結業1：已結業 2:-
     * @param {string} [homeworkDate] 作業繳交日期
     * @param {string} [searchText] 查尋字串
     * @param {Array<string>} [courseType] 課程型態：實體、線上
     * @param {string} [openDateS] 開課日期起日
     * @param {string} [openDateE] 開課日期迄日
     * @param {Array<number>} [organizations] 開課堂點
     * @param {string} [searchModeConditions] ModeConditions：經典課程0         最新課程：1 要有幾天內建的資料當條件?   即將結束課程：2 要判斷 報名結束幾天內的條件?
     * @param {string} [statusCd] 狀態
     * @param {string} [courseManagementNo] 課程代碼
     * @param {string} [courseManagementTitle] 課程標題
     * @param {string} [courseManagementDescription] 課程內容描述
     * @param {string} [courseIsFilter] CourseIsFilter：是否有擋修 0否 1是
     * @param {Array<SortProperty>} [sortProperties] 查詢欄位排序
     * @param {number} [page] 目前頁數
     * @param {number} [size] 每頁筆數
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    findCourse: async (
      id?: number,
      courseManagementId?: number,
      organizationId?: number,
      questionnaireId?: number,
      year?: string,
      name?: string,
      classNum?: string,
      season?: string,
      openDate?: string,
      signUpDateS?: string,
      signUpDateE?: string,
      counterSignUpDateS?: string,
      counterSignUpDateE?: string,
      discountSignUpDate?: string,
      courseSignUpType?: string,
      wishCount?: number,
      needRecommend?: string,
      acceptNewMember?: string,
      description?: string,
      courseCount?: number,
      quota?: number,
      graduationType?: string,
      homeworkDate?: string,
      searchText?: string,
      courseType?: Array<string>,
      openDateS?: string,
      openDateE?: string,
      organizations?: Array<number>,
      searchModeConditions?: string,
      statusCd?: string,
      courseManagementNo?: string,
      courseManagementTitle?: string,
      courseManagementDescription?: string,
      courseIsFilter?: string,
      sortProperties?: Array<SortProperty>,
      page?: number,
      size?: number,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/course`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: "GET", ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication Example-id-1 required
      await setApiKeyToObject(localVarHeaderParameter, "Example-id-1", configuration);

      // authentication JWT_Authorization required
      await setApiKeyToObject(localVarHeaderParameter, "authorization", configuration);

      // authentication example-id-2 required
      await setApiKeyToObject(localVarHeaderParameter, "example-id-2", configuration);

      if (id !== undefined) {
        localVarQueryParameter["id"] = id;
      }

      if (courseManagementId !== undefined) {
        localVarQueryParameter["courseManagementId"] = courseManagementId;
      }

      if (organizationId !== undefined) {
        localVarQueryParameter["organizationId"] = organizationId;
      }

      if (questionnaireId !== undefined) {
        localVarQueryParameter["questionnaireId"] = questionnaireId;
      }

      if (year !== undefined) {
        localVarQueryParameter["year"] = year;
      }

      if (name !== undefined) {
        localVarQueryParameter["name"] = name;
      }

      if (classNum !== undefined) {
        localVarQueryParameter["classNum"] = classNum;
      }

      if (season !== undefined) {
        localVarQueryParameter["season"] = season;
      }

      if (openDate !== undefined) {
        localVarQueryParameter["openDate"] =
          (openDate as any) instanceof Date ? (openDate as any).toISOString() : openDate;
      }

      if (signUpDateS !== undefined) {
        localVarQueryParameter["signUpDateS"] =
          (signUpDateS as any) instanceof Date ? (signUpDateS as any).toISOString() : signUpDateS;
      }

      if (signUpDateE !== undefined) {
        localVarQueryParameter["signUpDateE"] =
          (signUpDateE as any) instanceof Date ? (signUpDateE as any).toISOString() : signUpDateE;
      }

      if (counterSignUpDateS !== undefined) {
        localVarQueryParameter["counterSignUpDateS"] =
          (counterSignUpDateS as any) instanceof Date ? (counterSignUpDateS as any).toISOString() : counterSignUpDateS;
      }

      if (counterSignUpDateE !== undefined) {
        localVarQueryParameter["counterSignUpDateE"] =
          (counterSignUpDateE as any) instanceof Date ? (counterSignUpDateE as any).toISOString() : counterSignUpDateE;
      }

      if (discountSignUpDate !== undefined) {
        localVarQueryParameter["discountSignUpDate"] =
          (discountSignUpDate as any) instanceof Date ? (discountSignUpDate as any).toISOString() : discountSignUpDate;
      }

      if (courseSignUpType !== undefined) {
        localVarQueryParameter["courseSignUpType"] = courseSignUpType;
      }

      if (wishCount !== undefined) {
        localVarQueryParameter["wishCount"] = wishCount;
      }

      if (needRecommend !== undefined) {
        localVarQueryParameter["needRecommend"] = needRecommend;
      }

      if (acceptNewMember !== undefined) {
        localVarQueryParameter["acceptNewMember"] = acceptNewMember;
      }

      if (description !== undefined) {
        localVarQueryParameter["description"] = description;
      }

      if (courseCount !== undefined) {
        localVarQueryParameter["courseCount"] = courseCount;
      }

      if (quota !== undefined) {
        localVarQueryParameter["quota"] = quota;
      }

      if (graduationType !== undefined) {
        localVarQueryParameter["graduationType"] = graduationType;
      }

      if (homeworkDate !== undefined) {
        localVarQueryParameter["homeworkDate"] =
          (homeworkDate as any) instanceof Date ? (homeworkDate as any).toISOString() : homeworkDate;
      }

      if (searchText !== undefined) {
        localVarQueryParameter["searchText"] = searchText;
      }

      if (courseType) {
        localVarQueryParameter["courseType"] = courseType;
      }

      if (openDateS !== undefined) {
        localVarQueryParameter["openDateS"] =
          (openDateS as any) instanceof Date ? (openDateS as any).toISOString() : openDateS;
      }

      if (openDateE !== undefined) {
        localVarQueryParameter["openDateE"] =
          (openDateE as any) instanceof Date ? (openDateE as any).toISOString() : openDateE;
      }

      if (organizations) {
        localVarQueryParameter["organizations"] = organizations;
      }

      if (searchModeConditions !== undefined) {
        localVarQueryParameter["searchModeConditions"] = searchModeConditions;
      }

      if (statusCd !== undefined) {
        localVarQueryParameter["statusCd"] = statusCd;
      }

      if (courseManagementNo !== undefined) {
        localVarQueryParameter["courseManagementNo"] = courseManagementNo;
      }

      if (courseManagementTitle !== undefined) {
        localVarQueryParameter["courseManagementTitle"] = courseManagementTitle;
      }

      if (courseManagementDescription !== undefined) {
        localVarQueryParameter["courseManagementDescription"] = courseManagementDescription;
      }

      if (courseIsFilter !== undefined) {
        localVarQueryParameter["courseIsFilter"] = courseIsFilter;
      }

      if (sortProperties) {
        localVarQueryParameter["sortProperties"] = sortProperties;
      }

      if (page !== undefined) {
        localVarQueryParameter["page"] = page;
      }

      if (size !== undefined) {
        localVarQueryParameter["size"] = size;
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary 以 Id 查詢列表
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getCourse: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists("getCourse", "id", id);
      const localVarPath = `/api/course/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(id)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: "GET", ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication Example-id-1 required
      await setApiKeyToObject(localVarHeaderParameter, "Example-id-1", configuration);

      // authentication JWT_Authorization required
      await setApiKeyToObject(localVarHeaderParameter, "authorization", configuration);

      // authentication example-id-2 required
      await setApiKeyToObject(localVarHeaderParameter, "example-id-2", configuration);

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary 修改課程主檔
     * @param {UpdateCourseCommand} [updateCourseCommand]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    putCourse: async (
      updateCourseCommand?: UpdateCourseCommand,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/course`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: "PUT", ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication Example-id-1 required
      await setApiKeyToObject(localVarHeaderParameter, "Example-id-1", configuration);

      // authentication JWT_Authorization required
      await setApiKeyToObject(localVarHeaderParameter, "authorization", configuration);

      // authentication example-id-2 required
      await setApiKeyToObject(localVarHeaderParameter, "example-id-2", configuration);

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      localVarRequestOptions.data = serializeDataIfNeeded(updateCourseCommand, localVarRequestOptions, configuration);

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary 查詢列表  (*dynamic sort support)
     * @param {QueryCourseRequest} [queryCourseRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    queryCourses: async (
      queryCourseRequest?: QueryCourseRequest,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/course/query`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: "POST", ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication Example-id-1 required
      await setApiKeyToObject(localVarHeaderParameter, "Example-id-1", configuration);

      // authentication JWT_Authorization required
      await setApiKeyToObject(localVarHeaderParameter, "authorization", configuration);

      // authentication example-id-2 required
      await setApiKeyToObject(localVarHeaderParameter, "example-id-2", configuration);

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      localVarRequestOptions.data = serializeDataIfNeeded(queryCourseRequest, localVarRequestOptions, configuration);

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary 刪除主檔
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    removeCourse: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists("removeCourse", "id", id);
      const localVarPath = `/api/course/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(id)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: "DELETE", ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication Example-id-1 required
      await setApiKeyToObject(localVarHeaderParameter, "Example-id-1", configuration);

      // authentication JWT_Authorization required
      await setApiKeyToObject(localVarHeaderParameter, "authorization", configuration);

      // authentication example-id-2 required
      await setApiKeyToObject(localVarHeaderParameter, "example-id-2", configuration);

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * CourseApi - functional programming interface
 * @export
 */
export const CourseApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = CourseApiAxiosParamCreator(configuration);
  return {
    /**
     *
     * @summary 建立課程主檔檔
     * @param {CreateCourseCommand} [createCourseCommand]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async createCourse(
      createCourseCommand?: CreateCourseCommand,
      options?: AxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<CourseViewApiResponse>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.createCourse(createCourseCommand, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     *
     * @summary 刪除課程主檔
     * @param {DeleteCourseCommand} [deleteCourseCommand]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async deleteCourse(
      deleteCourseCommand?: DeleteCourseCommand,
      options?: AxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<CourseViewApiResponse>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.deleteCourse(deleteCourseCommand, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     *
     * @summary 查詢課程
     * @param {FetchAllCourseRequest} [fetchAllCourseRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async fetchCourses(
      fetchAllCourseRequest?: FetchAllCourseRequest,
      options?: AxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<CourseViewListApiResponse>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.fetchCourses(fetchAllCourseRequest, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     *
     * @summary 查詢課程主檔
     * @param {number} [id] id
     * @param {number} [courseManagementId] 課程類別CourseManagement.Id
     * @param {number} [organizationId] Organization.Id
     * @param {number} [questionnaireId] Questionnaire.Id 問卷Id
     * @param {string} [year] 年度 屆別
     * @param {string} [name] 名稱
     * @param {string} [classNum] 梯次
     * @param {string} [season] 季
     * @param {string} [openDate] 開課日
     * @param {string} [signUpDateS] 報名日期(線上)
     * @param {string} [signUpDateE] 報名截止日(線上)
     * @param {string} [counterSignUpDateS] 報名日期(臨櫃)
     * @param {string} [counterSignUpDateE] 報名截止日(臨櫃)
     * @param {string} [discountSignUpDate] 優惠報名截止日
     * @param {string} [courseSignUpType] 報名方式對應type&#x3D;CourseSignUpType顯示 namevalue存此欄位0：一般臨櫃1：網路報名
     * @param {number} [wishCount] 最少志願數
     * @param {string} [needRecommend] 是否需要推薦對應type&#x3D;IsYN顯示 namevalue存此欄位0：N1：Y
     * @param {string} [acceptNewMember] 新朋友可報名對應type&#x3D;IsYN顯示 namevalue存此欄位0：N1：Y
     * @param {string} [description] 課程說明/資格
     * @param {number} [courseCount] 上課堂數
     * @param {number} [quota] 報名名額
     * @param {string} [graduationType] 結業狀態對應type&#x3D;GraduationType顯示 namevalue存此欄位0：未結業1：已結業 2:-
     * @param {string} [homeworkDate] 作業繳交日期
     * @param {string} [searchText] 查尋字串
     * @param {Array<string>} [courseType] 課程型態：實體、線上
     * @param {string} [openDateS] 開課日期起日
     * @param {string} [openDateE] 開課日期迄日
     * @param {Array<number>} [organizations] 開課堂點
     * @param {string} [searchModeConditions] ModeConditions：經典課程0         最新課程：1 要有幾天內建的資料當條件?   即將結束課程：2 要判斷 報名結束幾天內的條件?
     * @param {string} [statusCd] 狀態
     * @param {string} [courseManagementNo] 課程代碼
     * @param {string} [courseManagementTitle] 課程標題
     * @param {string} [courseManagementDescription] 課程內容描述
     * @param {string} [courseIsFilter] CourseIsFilter：是否有擋修 0否 1是
     * @param {Array<SortProperty>} [sortProperties] 查詢欄位排序
     * @param {number} [page] 目前頁數
     * @param {number} [size] 每頁筆數
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async findCourse(
      id?: number,
      courseManagementId?: number,
      organizationId?: number,
      questionnaireId?: number,
      year?: string,
      name?: string,
      classNum?: string,
      season?: string,
      openDate?: string,
      signUpDateS?: string,
      signUpDateE?: string,
      counterSignUpDateS?: string,
      counterSignUpDateE?: string,
      discountSignUpDate?: string,
      courseSignUpType?: string,
      wishCount?: number,
      needRecommend?: string,
      acceptNewMember?: string,
      description?: string,
      courseCount?: number,
      quota?: number,
      graduationType?: string,
      homeworkDate?: string,
      searchText?: string,
      courseType?: Array<string>,
      openDateS?: string,
      openDateE?: string,
      organizations?: Array<number>,
      searchModeConditions?: string,
      statusCd?: string,
      courseManagementNo?: string,
      courseManagementTitle?: string,
      courseManagementDescription?: string,
      courseIsFilter?: string,
      sortProperties?: Array<SortProperty>,
      page?: number,
      size?: number,
      options?: AxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<CourseViewPageApiResponse>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.findCourse(
        id,
        courseManagementId,
        organizationId,
        questionnaireId,
        year,
        name,
        classNum,
        season,
        openDate,
        signUpDateS,
        signUpDateE,
        counterSignUpDateS,
        counterSignUpDateE,
        discountSignUpDate,
        courseSignUpType,
        wishCount,
        needRecommend,
        acceptNewMember,
        description,
        courseCount,
        quota,
        graduationType,
        homeworkDate,
        searchText,
        courseType,
        openDateS,
        openDateE,
        organizations,
        searchModeConditions,
        statusCd,
        courseManagementNo,
        courseManagementTitle,
        courseManagementDescription,
        courseIsFilter,
        sortProperties,
        page,
        size,
        options
      );
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     *
     * @summary 以 Id 查詢列表
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getCourse(
      id: number,
      options?: AxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<CourseViewApiResponse>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getCourse(id, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     *
     * @summary 修改課程主檔
     * @param {UpdateCourseCommand} [updateCourseCommand]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async putCourse(
      updateCourseCommand?: UpdateCourseCommand,
      options?: AxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<CourseViewApiResponse>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.putCourse(updateCourseCommand, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     *
     * @summary 查詢列表  (*dynamic sort support)
     * @param {QueryCourseRequest} [queryCourseRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async queryCourses(
      queryCourseRequest?: QueryCourseRequest,
      options?: AxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<CourseViewPageApiResponse>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.queryCourses(queryCourseRequest, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     *
     * @summary 刪除主檔
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async removeCourse(
      id: number,
      options?: AxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<Int32ApiResponse>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.removeCourse(id, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
  };
};

/**
 * CourseApi - factory interface
 * @export
 */
export const CourseApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
  const localVarFp = CourseApiFp(configuration);
  return {
    /**
     *
     * @summary 建立課程主檔檔
     * @param {CreateCourseCommand} [createCourseCommand]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createCourse(createCourseCommand?: CreateCourseCommand, options?: any): Promise<CourseViewApiResponse> {
      return localVarFp.createCourse(createCourseCommand, options).then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary 刪除課程主檔
     * @param {DeleteCourseCommand} [deleteCourseCommand]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteCourse(deleteCourseCommand?: DeleteCourseCommand, options?: any): Promise<CourseViewApiResponse> {
      return localVarFp.deleteCourse(deleteCourseCommand, options).then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary 查詢課程
     * @param {FetchAllCourseRequest} [fetchAllCourseRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    fetchCourses(fetchAllCourseRequest?: FetchAllCourseRequest, options?: any): Promise<CourseViewListApiResponse> {
      return localVarFp.fetchCourses(fetchAllCourseRequest, options).then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary 查詢課程主檔
     * @param {number} [id] id
     * @param {number} [courseManagementId] 課程類別CourseManagement.Id
     * @param {number} [organizationId] Organization.Id
     * @param {number} [questionnaireId] Questionnaire.Id 問卷Id
     * @param {string} [year] 年度 屆別
     * @param {string} [name] 名稱
     * @param {string} [classNum] 梯次
     * @param {string} [season] 季
     * @param {string} [openDate] 開課日
     * @param {string} [signUpDateS] 報名日期(線上)
     * @param {string} [signUpDateE] 報名截止日(線上)
     * @param {string} [counterSignUpDateS] 報名日期(臨櫃)
     * @param {string} [counterSignUpDateE] 報名截止日(臨櫃)
     * @param {string} [discountSignUpDate] 優惠報名截止日
     * @param {string} [courseSignUpType] 報名方式對應type&#x3D;CourseSignUpType顯示 namevalue存此欄位0：一般臨櫃1：網路報名
     * @param {number} [wishCount] 最少志願數
     * @param {string} [needRecommend] 是否需要推薦對應type&#x3D;IsYN顯示 namevalue存此欄位0：N1：Y
     * @param {string} [acceptNewMember] 新朋友可報名對應type&#x3D;IsYN顯示 namevalue存此欄位0：N1：Y
     * @param {string} [description] 課程說明/資格
     * @param {number} [courseCount] 上課堂數
     * @param {number} [quota] 報名名額
     * @param {string} [graduationType] 結業狀態對應type&#x3D;GraduationType顯示 namevalue存此欄位0：未結業1：已結業 2:-
     * @param {string} [homeworkDate] 作業繳交日期
     * @param {string} [searchText] 查尋字串
     * @param {Array<string>} [courseType] 課程型態：實體、線上
     * @param {string} [openDateS] 開課日期起日
     * @param {string} [openDateE] 開課日期迄日
     * @param {Array<number>} [organizations] 開課堂點
     * @param {string} [searchModeConditions] ModeConditions：經典課程0         最新課程：1 要有幾天內建的資料當條件?   即將結束課程：2 要判斷 報名結束幾天內的條件?
     * @param {string} [statusCd] 狀態
     * @param {string} [courseManagementNo] 課程代碼
     * @param {string} [courseManagementTitle] 課程標題
     * @param {string} [courseManagementDescription] 課程內容描述
     * @param {string} [courseIsFilter] CourseIsFilter：是否有擋修 0否 1是
     * @param {Array<SortProperty>} [sortProperties] 查詢欄位排序
     * @param {number} [page] 目前頁數
     * @param {number} [size] 每頁筆數
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    findCourse(
      id?: number,
      courseManagementId?: number,
      organizationId?: number,
      questionnaireId?: number,
      year?: string,
      name?: string,
      classNum?: string,
      season?: string,
      openDate?: string,
      signUpDateS?: string,
      signUpDateE?: string,
      counterSignUpDateS?: string,
      counterSignUpDateE?: string,
      discountSignUpDate?: string,
      courseSignUpType?: string,
      wishCount?: number,
      needRecommend?: string,
      acceptNewMember?: string,
      description?: string,
      courseCount?: number,
      quota?: number,
      graduationType?: string,
      homeworkDate?: string,
      searchText?: string,
      courseType?: Array<string>,
      openDateS?: string,
      openDateE?: string,
      organizations?: Array<number>,
      searchModeConditions?: string,
      statusCd?: string,
      courseManagementNo?: string,
      courseManagementTitle?: string,
      courseManagementDescription?: string,
      courseIsFilter?: string,
      sortProperties?: Array<SortProperty>,
      page?: number,
      size?: number,
      options?: any
    ): Promise<CourseViewPageApiResponse> {
      return localVarFp
        .findCourse(
          id,
          courseManagementId,
          organizationId,
          questionnaireId,
          year,
          name,
          classNum,
          season,
          openDate,
          signUpDateS,
          signUpDateE,
          counterSignUpDateS,
          counterSignUpDateE,
          discountSignUpDate,
          courseSignUpType,
          wishCount,
          needRecommend,
          acceptNewMember,
          description,
          courseCount,
          quota,
          graduationType,
          homeworkDate,
          searchText,
          courseType,
          openDateS,
          openDateE,
          organizations,
          searchModeConditions,
          statusCd,
          courseManagementNo,
          courseManagementTitle,
          courseManagementDescription,
          courseIsFilter,
          sortProperties,
          page,
          size,
          options
        )
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary 以 Id 查詢列表
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getCourse(id: number, options?: any): Promise<CourseViewApiResponse> {
      return localVarFp.getCourse(id, options).then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary 修改課程主檔
     * @param {UpdateCourseCommand} [updateCourseCommand]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    putCourse(updateCourseCommand?: UpdateCourseCommand, options?: any): Promise<CourseViewApiResponse> {
      return localVarFp.putCourse(updateCourseCommand, options).then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary 查詢列表  (*dynamic sort support)
     * @param {QueryCourseRequest} [queryCourseRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    queryCourses(queryCourseRequest?: QueryCourseRequest, options?: any): Promise<CourseViewPageApiResponse> {
      return localVarFp.queryCourses(queryCourseRequest, options).then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary 刪除主檔
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    removeCourse(id: number, options?: any): Promise<Int32ApiResponse> {
      return localVarFp.removeCourse(id, options).then((request) => request(axios, basePath));
    },
  };
};

/**
 * CourseApi - interface
 * @export
 * @interface CourseApi
 */
export interface CourseApiInterface {
  /**
   *
   * @summary 建立課程主檔檔
   * @param {CreateCourseCommand} [createCourseCommand]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CourseApiInterface
   */
  createCourse(createCourseCommand?: CreateCourseCommand, options?: AxiosRequestConfig): Promise<CourseViewApiResponse>;

  /**
   *
   * @summary 刪除課程主檔
   * @param {DeleteCourseCommand} [deleteCourseCommand]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CourseApiInterface
   */
  deleteCourse(deleteCourseCommand?: DeleteCourseCommand, options?: AxiosRequestConfig): Promise<CourseViewApiResponse>;

  /**
   *
   * @summary 查詢課程
   * @param {FetchAllCourseRequest} [fetchAllCourseRequest]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CourseApiInterface
   */
  fetchCourses(
    fetchAllCourseRequest?: FetchAllCourseRequest,
    options?: AxiosRequestConfig
  ): Promise<CourseViewListApiResponse>;

  /**
   *
   * @summary 查詢課程主檔
   * @param {number} [id] id
   * @param {number} [courseManagementId] 課程類別CourseManagement.Id
   * @param {number} [organizationId] Organization.Id
   * @param {number} [questionnaireId] Questionnaire.Id 問卷Id
   * @param {string} [year] 年度 屆別
   * @param {string} [name] 名稱
   * @param {string} [classNum] 梯次
   * @param {string} [season] 季
   * @param {string} [openDate] 開課日
   * @param {string} [signUpDateS] 報名日期(線上)
   * @param {string} [signUpDateE] 報名截止日(線上)
   * @param {string} [counterSignUpDateS] 報名日期(臨櫃)
   * @param {string} [counterSignUpDateE] 報名截止日(臨櫃)
   * @param {string} [discountSignUpDate] 優惠報名截止日
   * @param {string} [courseSignUpType] 報名方式對應type&#x3D;CourseSignUpType顯示 namevalue存此欄位0：一般臨櫃1：網路報名
   * @param {number} [wishCount] 最少志願數
   * @param {string} [needRecommend] 是否需要推薦對應type&#x3D;IsYN顯示 namevalue存此欄位0：N1：Y
   * @param {string} [acceptNewMember] 新朋友可報名對應type&#x3D;IsYN顯示 namevalue存此欄位0：N1：Y
   * @param {string} [description] 課程說明/資格
   * @param {number} [courseCount] 上課堂數
   * @param {number} [quota] 報名名額
   * @param {string} [graduationType] 結業狀態對應type&#x3D;GraduationType顯示 namevalue存此欄位0：未結業1：已結業 2:-
   * @param {string} [homeworkDate] 作業繳交日期
   * @param {string} [searchText] 查尋字串
   * @param {Array<string>} [courseType] 課程型態：實體、線上
   * @param {string} [openDateS] 開課日期起日
   * @param {string} [openDateE] 開課日期迄日
   * @param {Array<number>} [organizations] 開課堂點
   * @param {string} [searchModeConditions] ModeConditions：經典課程0         最新課程：1 要有幾天內建的資料當條件?   即將結束課程：2 要判斷 報名結束幾天內的條件?
   * @param {string} [statusCd] 狀態
   * @param {string} [courseManagementNo] 課程代碼
   * @param {string} [courseManagementTitle] 課程標題
   * @param {string} [courseManagementDescription] 課程內容描述
   * @param {string} [courseIsFilter] CourseIsFilter：是否有擋修 0否 1是
   * @param {Array<SortProperty>} [sortProperties] 查詢欄位排序
   * @param {number} [page] 目前頁數
   * @param {number} [size] 每頁筆數
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CourseApiInterface
   */
  findCourse(
    id?: number,
    courseManagementId?: number,
    organizationId?: number,
    questionnaireId?: number,
    year?: string,
    name?: string,
    classNum?: string,
    season?: string,
    openDate?: string,
    signUpDateS?: string,
    signUpDateE?: string,
    counterSignUpDateS?: string,
    counterSignUpDateE?: string,
    discountSignUpDate?: string,
    courseSignUpType?: string,
    wishCount?: number,
    needRecommend?: string,
    acceptNewMember?: string,
    description?: string,
    courseCount?: number,
    quota?: number,
    graduationType?: string,
    homeworkDate?: string,
    searchText?: string,
    courseType?: Array<string>,
    openDateS?: string,
    openDateE?: string,
    organizations?: Array<number>,
    searchModeConditions?: string,
    statusCd?: string,
    courseManagementNo?: string,
    courseManagementTitle?: string,
    courseManagementDescription?: string,
    courseIsFilter?: string,
    sortProperties?: Array<SortProperty>,
    page?: number,
    size?: number,
    options?: AxiosRequestConfig
  ): Promise<CourseViewPageApiResponse>;

  /**
   *
   * @summary 以 Id 查詢列表
   * @param {number} id
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CourseApiInterface
   */
  getCourse(id: number, options?: AxiosRequestConfig): Promise<CourseViewApiResponse>;

  /**
   *
   * @summary 修改課程主檔
   * @param {UpdateCourseCommand} [updateCourseCommand]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CourseApiInterface
   */
  putCourse(updateCourseCommand?: UpdateCourseCommand, options?: AxiosRequestConfig): Promise<CourseViewApiResponse>;

  /**
   *
   * @summary 查詢列表  (*dynamic sort support)
   * @param {QueryCourseRequest} [queryCourseRequest]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CourseApiInterface
   */
  queryCourses(
    queryCourseRequest?: QueryCourseRequest,
    options?: AxiosRequestConfig
  ): Promise<CourseViewPageApiResponse>;

  /**
   *
   * @summary 刪除主檔
   * @param {number} id
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CourseApiInterface
   */
  removeCourse(id: number, options?: AxiosRequestConfig): Promise<Int32ApiResponse>;
}

/**
 * CourseApi - object-oriented interface
 * @export
 * @class CourseApi
 * @extends {BaseAPI}
 */
export class CourseApi extends BaseAPI implements CourseApiInterface {
  /**
   *
   * @summary 建立課程主檔檔
   * @param {CreateCourseCommand} [createCourseCommand]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CourseApi
   */
  public createCourse(createCourseCommand?: CreateCourseCommand, options?: AxiosRequestConfig) {
    return CourseApiFp(this.configuration)
      .createCourse(createCourseCommand, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary 刪除課程主檔
   * @param {DeleteCourseCommand} [deleteCourseCommand]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CourseApi
   */
  public deleteCourse(deleteCourseCommand?: DeleteCourseCommand, options?: AxiosRequestConfig) {
    return CourseApiFp(this.configuration)
      .deleteCourse(deleteCourseCommand, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary 查詢課程
   * @param {FetchAllCourseRequest} [fetchAllCourseRequest]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CourseApi
   */
  public fetchCourses(fetchAllCourseRequest?: FetchAllCourseRequest, options?: AxiosRequestConfig) {
    return CourseApiFp(this.configuration)
      .fetchCourses(fetchAllCourseRequest, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary 查詢課程主檔
   * @param {number} [id] id
   * @param {number} [courseManagementId] 課程類別CourseManagement.Id
   * @param {number} [organizationId] Organization.Id
   * @param {number} [questionnaireId] Questionnaire.Id 問卷Id
   * @param {string} [year] 年度 屆別
   * @param {string} [name] 名稱
   * @param {string} [classNum] 梯次
   * @param {string} [season] 季
   * @param {string} [openDate] 開課日
   * @param {string} [signUpDateS] 報名日期(線上)
   * @param {string} [signUpDateE] 報名截止日(線上)
   * @param {string} [counterSignUpDateS] 報名日期(臨櫃)
   * @param {string} [counterSignUpDateE] 報名截止日(臨櫃)
   * @param {string} [discountSignUpDate] 優惠報名截止日
   * @param {string} [courseSignUpType] 報名方式對應type&#x3D;CourseSignUpType顯示 namevalue存此欄位0：一般臨櫃1：網路報名
   * @param {number} [wishCount] 最少志願數
   * @param {string} [needRecommend] 是否需要推薦對應type&#x3D;IsYN顯示 namevalue存此欄位0：N1：Y
   * @param {string} [acceptNewMember] 新朋友可報名對應type&#x3D;IsYN顯示 namevalue存此欄位0：N1：Y
   * @param {string} [description] 課程說明/資格
   * @param {number} [courseCount] 上課堂數
   * @param {number} [quota] 報名名額
   * @param {string} [graduationType] 結業狀態對應type&#x3D;GraduationType顯示 namevalue存此欄位0：未結業1：已結業 2:-
   * @param {string} [homeworkDate] 作業繳交日期
   * @param {string} [searchText] 查尋字串
   * @param {Array<string>} [courseType] 課程型態：實體、線上
   * @param {string} [openDateS] 開課日期起日
   * @param {string} [openDateE] 開課日期迄日
   * @param {Array<number>} [organizations] 開課堂點
   * @param {string} [searchModeConditions] ModeConditions：經典課程0         最新課程：1 要有幾天內建的資料當條件?   即將結束課程：2 要判斷 報名結束幾天內的條件?
   * @param {string} [statusCd] 狀態
   * @param {string} [courseManagementNo] 課程代碼
   * @param {string} [courseManagementTitle] 課程標題
   * @param {string} [courseManagementDescription] 課程內容描述
   * @param {string} [courseIsFilter] CourseIsFilter：是否有擋修 0否 1是
   * @param {Array<SortProperty>} [sortProperties] 查詢欄位排序
   * @param {number} [page] 目前頁數
   * @param {number} [size] 每頁筆數
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CourseApi
   */
  public findCourse(
    id?: number,
    courseManagementId?: number,
    organizationId?: number,
    questionnaireId?: number,
    year?: string,
    name?: string,
    classNum?: string,
    season?: string,
    openDate?: string,
    signUpDateS?: string,
    signUpDateE?: string,
    counterSignUpDateS?: string,
    counterSignUpDateE?: string,
    discountSignUpDate?: string,
    courseSignUpType?: string,
    wishCount?: number,
    needRecommend?: string,
    acceptNewMember?: string,
    description?: string,
    courseCount?: number,
    quota?: number,
    graduationType?: string,
    homeworkDate?: string,
    searchText?: string,
    courseType?: Array<string>,
    openDateS?: string,
    openDateE?: string,
    organizations?: Array<number>,
    searchModeConditions?: string,
    statusCd?: string,
    courseManagementNo?: string,
    courseManagementTitle?: string,
    courseManagementDescription?: string,
    courseIsFilter?: string,
    sortProperties?: Array<SortProperty>,
    page?: number,
    size?: number,
    options?: AxiosRequestConfig
  ) {
    return CourseApiFp(this.configuration)
      .findCourse(
        id,
        courseManagementId,
        organizationId,
        questionnaireId,
        year,
        name,
        classNum,
        season,
        openDate,
        signUpDateS,
        signUpDateE,
        counterSignUpDateS,
        counterSignUpDateE,
        discountSignUpDate,
        courseSignUpType,
        wishCount,
        needRecommend,
        acceptNewMember,
        description,
        courseCount,
        quota,
        graduationType,
        homeworkDate,
        searchText,
        courseType,
        openDateS,
        openDateE,
        organizations,
        searchModeConditions,
        statusCd,
        courseManagementNo,
        courseManagementTitle,
        courseManagementDescription,
        courseIsFilter,
        sortProperties,
        page,
        size,
        options
      )
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary 以 Id 查詢列表
   * @param {number} id
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CourseApi
   */
  public getCourse(id: number, options?: AxiosRequestConfig) {
    return CourseApiFp(this.configuration)
      .getCourse(id, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary 修改課程主檔
   * @param {UpdateCourseCommand} [updateCourseCommand]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CourseApi
   */
  public putCourse(updateCourseCommand?: UpdateCourseCommand, options?: AxiosRequestConfig) {
    return CourseApiFp(this.configuration)
      .putCourse(updateCourseCommand, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary 查詢列表  (*dynamic sort support)
   * @param {QueryCourseRequest} [queryCourseRequest]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CourseApi
   */
  public queryCourses(queryCourseRequest?: QueryCourseRequest, options?: AxiosRequestConfig) {
    return CourseApiFp(this.configuration)
      .queryCourses(queryCourseRequest, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary 刪除主檔
   * @param {number} id
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CourseApi
   */
  public removeCourse(id: number, options?: AxiosRequestConfig) {
    return CourseApiFp(this.configuration)
      .removeCourse(id, options)
      .then((request) => request(this.axios, this.basePath));
  }
}

/**
 * CourseAppendixApi - axios parameter creator
 * @export
 */
export const CourseAppendixApiAxiosParamCreator = function (configuration?: Configuration) {
  return {
    /**
     *
     * @summary 建立課程附件主檔檔
     * @param {CreateCourseAppendixCommand} [createCourseAppendixCommand]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createCourseAppendix: async (
      createCourseAppendixCommand?: CreateCourseAppendixCommand,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/courseAppendix`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: "POST", ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication Example-id-1 required
      await setApiKeyToObject(localVarHeaderParameter, "Example-id-1", configuration);

      // authentication JWT_Authorization required
      await setApiKeyToObject(localVarHeaderParameter, "authorization", configuration);

      // authentication example-id-2 required
      await setApiKeyToObject(localVarHeaderParameter, "example-id-2", configuration);

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      localVarRequestOptions.data = serializeDataIfNeeded(
        createCourseAppendixCommand,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary 刪除課程附件主檔
     * @param {DeleteCourseAppendixCommand} [deleteCourseAppendixCommand]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteCourseAppendix: async (
      deleteCourseAppendixCommand?: DeleteCourseAppendixCommand,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/courseAppendix`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: "DELETE", ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication Example-id-1 required
      await setApiKeyToObject(localVarHeaderParameter, "Example-id-1", configuration);

      // authentication JWT_Authorization required
      await setApiKeyToObject(localVarHeaderParameter, "authorization", configuration);

      // authentication example-id-2 required
      await setApiKeyToObject(localVarHeaderParameter, "example-id-2", configuration);

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      localVarRequestOptions.data = serializeDataIfNeeded(
        deleteCourseAppendixCommand,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary 查詢附件主檔
     * @param {FetchAllCourseAppendixRequest} [fetchAllCourseAppendixRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    fetchCourseAppendixs: async (
      fetchAllCourseAppendixRequest?: FetchAllCourseAppendixRequest,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/courseAppendix/fetch`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: "POST", ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication Example-id-1 required
      await setApiKeyToObject(localVarHeaderParameter, "Example-id-1", configuration);

      // authentication JWT_Authorization required
      await setApiKeyToObject(localVarHeaderParameter, "authorization", configuration);

      // authentication example-id-2 required
      await setApiKeyToObject(localVarHeaderParameter, "example-id-2", configuration);

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      localVarRequestOptions.data = serializeDataIfNeeded(
        fetchAllCourseAppendixRequest,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary 查詢課程附件主檔
     * @param {number} [id] id
     * @param {number} [courseId] 課程類別CourseManagement.Id
     * @param {string} [appendixType] 附件類別對應type&#x3D;AppendixType顯示 namevalue存此欄位0：文件1：影音
     * @param {string} [path] 存放網路路徑
     * @param {Array<SortProperty>} [sortProperties] 查詢欄位排序
     * @param {number} [page] 目前頁數
     * @param {number} [size] 每頁筆數
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    findCourseAppendix: async (
      id?: number,
      courseId?: number,
      appendixType?: string,
      path?: string,
      sortProperties?: Array<SortProperty>,
      page?: number,
      size?: number,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/courseAppendix`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: "GET", ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication Example-id-1 required
      await setApiKeyToObject(localVarHeaderParameter, "Example-id-1", configuration);

      // authentication JWT_Authorization required
      await setApiKeyToObject(localVarHeaderParameter, "authorization", configuration);

      // authentication example-id-2 required
      await setApiKeyToObject(localVarHeaderParameter, "example-id-2", configuration);

      if (id !== undefined) {
        localVarQueryParameter["id"] = id;
      }

      if (courseId !== undefined) {
        localVarQueryParameter["courseId"] = courseId;
      }

      if (appendixType !== undefined) {
        localVarQueryParameter["appendixType"] = appendixType;
      }

      if (path !== undefined) {
        localVarQueryParameter["path"] = path;
      }

      if (sortProperties) {
        localVarQueryParameter["sortProperties"] = sortProperties;
      }

      if (page !== undefined) {
        localVarQueryParameter["page"] = page;
      }

      if (size !== undefined) {
        localVarQueryParameter["size"] = size;
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary 以 Id 查詢列表
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getCourseAppendix: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists("getCourseAppendix", "id", id);
      const localVarPath = `/api/courseAppendix/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(id)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: "GET", ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication Example-id-1 required
      await setApiKeyToObject(localVarHeaderParameter, "Example-id-1", configuration);

      // authentication JWT_Authorization required
      await setApiKeyToObject(localVarHeaderParameter, "authorization", configuration);

      // authentication example-id-2 required
      await setApiKeyToObject(localVarHeaderParameter, "example-id-2", configuration);

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary 修改課程附件主檔
     * @param {UpdateCourseAppendixCommand} [updateCourseAppendixCommand]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    putCourseAppendix: async (
      updateCourseAppendixCommand?: UpdateCourseAppendixCommand,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/courseAppendix`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: "PUT", ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication Example-id-1 required
      await setApiKeyToObject(localVarHeaderParameter, "Example-id-1", configuration);

      // authentication JWT_Authorization required
      await setApiKeyToObject(localVarHeaderParameter, "authorization", configuration);

      // authentication example-id-2 required
      await setApiKeyToObject(localVarHeaderParameter, "example-id-2", configuration);

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      localVarRequestOptions.data = serializeDataIfNeeded(
        updateCourseAppendixCommand,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary 查詢列表  (*dynamic sort support)
     * @param {QueryCourseAppendixRequest} [queryCourseAppendixRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    queryCourseAppendixs: async (
      queryCourseAppendixRequest?: QueryCourseAppendixRequest,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/courseAppendix/query`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: "POST", ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication Example-id-1 required
      await setApiKeyToObject(localVarHeaderParameter, "Example-id-1", configuration);

      // authentication JWT_Authorization required
      await setApiKeyToObject(localVarHeaderParameter, "authorization", configuration);

      // authentication example-id-2 required
      await setApiKeyToObject(localVarHeaderParameter, "example-id-2", configuration);

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      localVarRequestOptions.data = serializeDataIfNeeded(
        queryCourseAppendixRequest,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary 刪除主檔
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    removeCourseAppendix: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists("removeCourseAppendix", "id", id);
      const localVarPath = `/api/courseAppendix/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(id)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: "DELETE", ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication Example-id-1 required
      await setApiKeyToObject(localVarHeaderParameter, "Example-id-1", configuration);

      // authentication JWT_Authorization required
      await setApiKeyToObject(localVarHeaderParameter, "authorization", configuration);

      // authentication example-id-2 required
      await setApiKeyToObject(localVarHeaderParameter, "example-id-2", configuration);

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * CourseAppendixApi - functional programming interface
 * @export
 */
export const CourseAppendixApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = CourseAppendixApiAxiosParamCreator(configuration);
  return {
    /**
     *
     * @summary 建立課程附件主檔檔
     * @param {CreateCourseAppendixCommand} [createCourseAppendixCommand]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async createCourseAppendix(
      createCourseAppendixCommand?: CreateCourseAppendixCommand,
      options?: AxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<CourseAppendixViewApiResponse>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.createCourseAppendix(
        createCourseAppendixCommand,
        options
      );
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     *
     * @summary 刪除課程附件主檔
     * @param {DeleteCourseAppendixCommand} [deleteCourseAppendixCommand]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async deleteCourseAppendix(
      deleteCourseAppendixCommand?: DeleteCourseAppendixCommand,
      options?: AxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<CourseAppendixViewApiResponse>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.deleteCourseAppendix(
        deleteCourseAppendixCommand,
        options
      );
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     *
     * @summary 查詢附件主檔
     * @param {FetchAllCourseAppendixRequest} [fetchAllCourseAppendixRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async fetchCourseAppendixs(
      fetchAllCourseAppendixRequest?: FetchAllCourseAppendixRequest,
      options?: AxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<CourseAppendixViewListApiResponse>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.fetchCourseAppendixs(
        fetchAllCourseAppendixRequest,
        options
      );
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     *
     * @summary 查詢課程附件主檔
     * @param {number} [id] id
     * @param {number} [courseId] 課程類別CourseManagement.Id
     * @param {string} [appendixType] 附件類別對應type&#x3D;AppendixType顯示 namevalue存此欄位0：文件1：影音
     * @param {string} [path] 存放網路路徑
     * @param {Array<SortProperty>} [sortProperties] 查詢欄位排序
     * @param {number} [page] 目前頁數
     * @param {number} [size] 每頁筆數
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async findCourseAppendix(
      id?: number,
      courseId?: number,
      appendixType?: string,
      path?: string,
      sortProperties?: Array<SortProperty>,
      page?: number,
      size?: number,
      options?: AxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<CourseAppendixViewPageApiResponse>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.findCourseAppendix(
        id,
        courseId,
        appendixType,
        path,
        sortProperties,
        page,
        size,
        options
      );
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     *
     * @summary 以 Id 查詢列表
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getCourseAppendix(
      id: number,
      options?: AxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<CourseAppendixViewApiResponse>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getCourseAppendix(id, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     *
     * @summary 修改課程附件主檔
     * @param {UpdateCourseAppendixCommand} [updateCourseAppendixCommand]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async putCourseAppendix(
      updateCourseAppendixCommand?: UpdateCourseAppendixCommand,
      options?: AxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<CourseAppendixViewApiResponse>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.putCourseAppendix(updateCourseAppendixCommand, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     *
     * @summary 查詢列表  (*dynamic sort support)
     * @param {QueryCourseAppendixRequest} [queryCourseAppendixRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async queryCourseAppendixs(
      queryCourseAppendixRequest?: QueryCourseAppendixRequest,
      options?: AxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<CourseAppendixViewPageApiResponse>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.queryCourseAppendixs(
        queryCourseAppendixRequest,
        options
      );
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     *
     * @summary 刪除主檔
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async removeCourseAppendix(
      id: number,
      options?: AxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<Int32ApiResponse>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.removeCourseAppendix(id, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
  };
};

/**
 * CourseAppendixApi - factory interface
 * @export
 */
export const CourseAppendixApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance
) {
  const localVarFp = CourseAppendixApiFp(configuration);
  return {
    /**
     *
     * @summary 建立課程附件主檔檔
     * @param {CreateCourseAppendixCommand} [createCourseAppendixCommand]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createCourseAppendix(
      createCourseAppendixCommand?: CreateCourseAppendixCommand,
      options?: any
    ): Promise<CourseAppendixViewApiResponse> {
      return localVarFp
        .createCourseAppendix(createCourseAppendixCommand, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary 刪除課程附件主檔
     * @param {DeleteCourseAppendixCommand} [deleteCourseAppendixCommand]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteCourseAppendix(
      deleteCourseAppendixCommand?: DeleteCourseAppendixCommand,
      options?: any
    ): Promise<CourseAppendixViewApiResponse> {
      return localVarFp
        .deleteCourseAppendix(deleteCourseAppendixCommand, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary 查詢附件主檔
     * @param {FetchAllCourseAppendixRequest} [fetchAllCourseAppendixRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    fetchCourseAppendixs(
      fetchAllCourseAppendixRequest?: FetchAllCourseAppendixRequest,
      options?: any
    ): Promise<CourseAppendixViewListApiResponse> {
      return localVarFp
        .fetchCourseAppendixs(fetchAllCourseAppendixRequest, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary 查詢課程附件主檔
     * @param {number} [id] id
     * @param {number} [courseId] 課程類別CourseManagement.Id
     * @param {string} [appendixType] 附件類別對應type&#x3D;AppendixType顯示 namevalue存此欄位0：文件1：影音
     * @param {string} [path] 存放網路路徑
     * @param {Array<SortProperty>} [sortProperties] 查詢欄位排序
     * @param {number} [page] 目前頁數
     * @param {number} [size] 每頁筆數
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    findCourseAppendix(
      id?: number,
      courseId?: number,
      appendixType?: string,
      path?: string,
      sortProperties?: Array<SortProperty>,
      page?: number,
      size?: number,
      options?: any
    ): Promise<CourseAppendixViewPageApiResponse> {
      return localVarFp
        .findCourseAppendix(id, courseId, appendixType, path, sortProperties, page, size, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary 以 Id 查詢列表
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getCourseAppendix(id: number, options?: any): Promise<CourseAppendixViewApiResponse> {
      return localVarFp.getCourseAppendix(id, options).then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary 修改課程附件主檔
     * @param {UpdateCourseAppendixCommand} [updateCourseAppendixCommand]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    putCourseAppendix(
      updateCourseAppendixCommand?: UpdateCourseAppendixCommand,
      options?: any
    ): Promise<CourseAppendixViewApiResponse> {
      return localVarFp
        .putCourseAppendix(updateCourseAppendixCommand, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary 查詢列表  (*dynamic sort support)
     * @param {QueryCourseAppendixRequest} [queryCourseAppendixRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    queryCourseAppendixs(
      queryCourseAppendixRequest?: QueryCourseAppendixRequest,
      options?: any
    ): Promise<CourseAppendixViewPageApiResponse> {
      return localVarFp
        .queryCourseAppendixs(queryCourseAppendixRequest, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary 刪除主檔
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    removeCourseAppendix(id: number, options?: any): Promise<Int32ApiResponse> {
      return localVarFp.removeCourseAppendix(id, options).then((request) => request(axios, basePath));
    },
  };
};

/**
 * CourseAppendixApi - interface
 * @export
 * @interface CourseAppendixApi
 */
export interface CourseAppendixApiInterface {
  /**
   *
   * @summary 建立課程附件主檔檔
   * @param {CreateCourseAppendixCommand} [createCourseAppendixCommand]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CourseAppendixApiInterface
   */
  createCourseAppendix(
    createCourseAppendixCommand?: CreateCourseAppendixCommand,
    options?: AxiosRequestConfig
  ): Promise<CourseAppendixViewApiResponse>;

  /**
   *
   * @summary 刪除課程附件主檔
   * @param {DeleteCourseAppendixCommand} [deleteCourseAppendixCommand]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CourseAppendixApiInterface
   */
  deleteCourseAppendix(
    deleteCourseAppendixCommand?: DeleteCourseAppendixCommand,
    options?: AxiosRequestConfig
  ): Promise<CourseAppendixViewApiResponse>;

  /**
   *
   * @summary 查詢附件主檔
   * @param {FetchAllCourseAppendixRequest} [fetchAllCourseAppendixRequest]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CourseAppendixApiInterface
   */
  fetchCourseAppendixs(
    fetchAllCourseAppendixRequest?: FetchAllCourseAppendixRequest,
    options?: AxiosRequestConfig
  ): Promise<CourseAppendixViewListApiResponse>;

  /**
   *
   * @summary 查詢課程附件主檔
   * @param {number} [id] id
   * @param {number} [courseId] 課程類別CourseManagement.Id
   * @param {string} [appendixType] 附件類別對應type&#x3D;AppendixType顯示 namevalue存此欄位0：文件1：影音
   * @param {string} [path] 存放網路路徑
   * @param {Array<SortProperty>} [sortProperties] 查詢欄位排序
   * @param {number} [page] 目前頁數
   * @param {number} [size] 每頁筆數
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CourseAppendixApiInterface
   */
  findCourseAppendix(
    id?: number,
    courseId?: number,
    appendixType?: string,
    path?: string,
    sortProperties?: Array<SortProperty>,
    page?: number,
    size?: number,
    options?: AxiosRequestConfig
  ): Promise<CourseAppendixViewPageApiResponse>;

  /**
   *
   * @summary 以 Id 查詢列表
   * @param {number} id
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CourseAppendixApiInterface
   */
  getCourseAppendix(id: number, options?: AxiosRequestConfig): Promise<CourseAppendixViewApiResponse>;

  /**
   *
   * @summary 修改課程附件主檔
   * @param {UpdateCourseAppendixCommand} [updateCourseAppendixCommand]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CourseAppendixApiInterface
   */
  putCourseAppendix(
    updateCourseAppendixCommand?: UpdateCourseAppendixCommand,
    options?: AxiosRequestConfig
  ): Promise<CourseAppendixViewApiResponse>;

  /**
   *
   * @summary 查詢列表  (*dynamic sort support)
   * @param {QueryCourseAppendixRequest} [queryCourseAppendixRequest]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CourseAppendixApiInterface
   */
  queryCourseAppendixs(
    queryCourseAppendixRequest?: QueryCourseAppendixRequest,
    options?: AxiosRequestConfig
  ): Promise<CourseAppendixViewPageApiResponse>;

  /**
   *
   * @summary 刪除主檔
   * @param {number} id
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CourseAppendixApiInterface
   */
  removeCourseAppendix(id: number, options?: AxiosRequestConfig): Promise<Int32ApiResponse>;
}

/**
 * CourseAppendixApi - object-oriented interface
 * @export
 * @class CourseAppendixApi
 * @extends {BaseAPI}
 */
export class CourseAppendixApi extends BaseAPI implements CourseAppendixApiInterface {
  /**
   *
   * @summary 建立課程附件主檔檔
   * @param {CreateCourseAppendixCommand} [createCourseAppendixCommand]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CourseAppendixApi
   */
  public createCourseAppendix(createCourseAppendixCommand?: CreateCourseAppendixCommand, options?: AxiosRequestConfig) {
    return CourseAppendixApiFp(this.configuration)
      .createCourseAppendix(createCourseAppendixCommand, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary 刪除課程附件主檔
   * @param {DeleteCourseAppendixCommand} [deleteCourseAppendixCommand]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CourseAppendixApi
   */
  public deleteCourseAppendix(deleteCourseAppendixCommand?: DeleteCourseAppendixCommand, options?: AxiosRequestConfig) {
    return CourseAppendixApiFp(this.configuration)
      .deleteCourseAppendix(deleteCourseAppendixCommand, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary 查詢附件主檔
   * @param {FetchAllCourseAppendixRequest} [fetchAllCourseAppendixRequest]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CourseAppendixApi
   */
  public fetchCourseAppendixs(
    fetchAllCourseAppendixRequest?: FetchAllCourseAppendixRequest,
    options?: AxiosRequestConfig
  ) {
    return CourseAppendixApiFp(this.configuration)
      .fetchCourseAppendixs(fetchAllCourseAppendixRequest, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary 查詢課程附件主檔
   * @param {number} [id] id
   * @param {number} [courseId] 課程類別CourseManagement.Id
   * @param {string} [appendixType] 附件類別對應type&#x3D;AppendixType顯示 namevalue存此欄位0：文件1：影音
   * @param {string} [path] 存放網路路徑
   * @param {Array<SortProperty>} [sortProperties] 查詢欄位排序
   * @param {number} [page] 目前頁數
   * @param {number} [size] 每頁筆數
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CourseAppendixApi
   */
  public findCourseAppendix(
    id?: number,
    courseId?: number,
    appendixType?: string,
    path?: string,
    sortProperties?: Array<SortProperty>,
    page?: number,
    size?: number,
    options?: AxiosRequestConfig
  ) {
    return CourseAppendixApiFp(this.configuration)
      .findCourseAppendix(id, courseId, appendixType, path, sortProperties, page, size, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary 以 Id 查詢列表
   * @param {number} id
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CourseAppendixApi
   */
  public getCourseAppendix(id: number, options?: AxiosRequestConfig) {
    return CourseAppendixApiFp(this.configuration)
      .getCourseAppendix(id, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary 修改課程附件主檔
   * @param {UpdateCourseAppendixCommand} [updateCourseAppendixCommand]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CourseAppendixApi
   */
  public putCourseAppendix(updateCourseAppendixCommand?: UpdateCourseAppendixCommand, options?: AxiosRequestConfig) {
    return CourseAppendixApiFp(this.configuration)
      .putCourseAppendix(updateCourseAppendixCommand, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary 查詢列表  (*dynamic sort support)
   * @param {QueryCourseAppendixRequest} [queryCourseAppendixRequest]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CourseAppendixApi
   */
  public queryCourseAppendixs(queryCourseAppendixRequest?: QueryCourseAppendixRequest, options?: AxiosRequestConfig) {
    return CourseAppendixApiFp(this.configuration)
      .queryCourseAppendixs(queryCourseAppendixRequest, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary 刪除主檔
   * @param {number} id
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CourseAppendixApi
   */
  public removeCourseAppendix(id: number, options?: AxiosRequestConfig) {
    return CourseAppendixApiFp(this.configuration)
      .removeCourseAppendix(id, options)
      .then((request) => request(this.axios, this.basePath));
  }
}

/**
 * CourseManagementApi - axios parameter creator
 * @export
 */
export const CourseManagementApiAxiosParamCreator = function (configuration?: Configuration) {
  return {
    /**
     *
     * @summary 建立課程樣版主檔檔
     * @param {CreateCourseManagementCommand} [createCourseManagementCommand]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createCourseManagement: async (
      createCourseManagementCommand?: CreateCourseManagementCommand,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/courseManagement`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: "POST", ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication Example-id-1 required
      await setApiKeyToObject(localVarHeaderParameter, "Example-id-1", configuration);

      // authentication JWT_Authorization required
      await setApiKeyToObject(localVarHeaderParameter, "authorization", configuration);

      // authentication example-id-2 required
      await setApiKeyToObject(localVarHeaderParameter, "example-id-2", configuration);

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      localVarRequestOptions.data = serializeDataIfNeeded(
        createCourseManagementCommand,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary 刪除課程樣版主檔
     * @param {DeleteCourseManagementCommand} [deleteCourseManagementCommand]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteCourseManagement: async (
      deleteCourseManagementCommand?: DeleteCourseManagementCommand,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/courseManagement`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: "DELETE", ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication Example-id-1 required
      await setApiKeyToObject(localVarHeaderParameter, "Example-id-1", configuration);

      // authentication JWT_Authorization required
      await setApiKeyToObject(localVarHeaderParameter, "authorization", configuration);

      // authentication example-id-2 required
      await setApiKeyToObject(localVarHeaderParameter, "example-id-2", configuration);

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      localVarRequestOptions.data = serializeDataIfNeeded(
        deleteCourseManagementCommand,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary 查詢樣板主檔
     * @param {FetchAllCourseManagementRequest} [fetchAllCourseManagementRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    fetchCourseManagements: async (
      fetchAllCourseManagementRequest?: FetchAllCourseManagementRequest,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/courseManagement/fetch`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: "POST", ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication Example-id-1 required
      await setApiKeyToObject(localVarHeaderParameter, "Example-id-1", configuration);

      // authentication JWT_Authorization required
      await setApiKeyToObject(localVarHeaderParameter, "authorization", configuration);

      // authentication example-id-2 required
      await setApiKeyToObject(localVarHeaderParameter, "example-id-2", configuration);

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      localVarRequestOptions.data = serializeDataIfNeeded(
        fetchAllCourseManagementRequest,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary 查詢課程樣版主檔
     * @param {number} [id] id
     * @param {number} [courseManagementTypeId] 課程類別CourseManagementType.Id
     * @param {number} [organizationId] 堂點Id Organization.Id
     * @param {string} [courseManagementNo] 課程代碼
     * @param {string} [homeworkDate] 課程作業繳交日期
     * @param {string} [title] 課程標題
     * @param {string} [description] 課程內容描述
     * @param {string} [courseManagementStatus] 課程狀態對應type&#x3D;CourseManagementStatus顯示 namevalue存此欄位0：關閉1：開啟
     * @param {string} [statusCd] 狀態
     * @param {Array<SortProperty>} [sortProperties] 查詢欄位排序
     * @param {number} [page] 目前頁數
     * @param {number} [size] 每頁筆數
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    findCourseManagement: async (
      id?: number,
      courseManagementTypeId?: number,
      organizationId?: number,
      courseManagementNo?: string,
      homeworkDate?: string,
      title?: string,
      description?: string,
      courseManagementStatus?: string,
      statusCd?: string,
      sortProperties?: Array<SortProperty>,
      page?: number,
      size?: number,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/courseManagement`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: "GET", ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication Example-id-1 required
      await setApiKeyToObject(localVarHeaderParameter, "Example-id-1", configuration);

      // authentication JWT_Authorization required
      await setApiKeyToObject(localVarHeaderParameter, "authorization", configuration);

      // authentication example-id-2 required
      await setApiKeyToObject(localVarHeaderParameter, "example-id-2", configuration);

      if (id !== undefined) {
        localVarQueryParameter["id"] = id;
      }

      if (courseManagementTypeId !== undefined) {
        localVarQueryParameter["courseManagementTypeId"] = courseManagementTypeId;
      }

      if (organizationId !== undefined) {
        localVarQueryParameter["organizationId"] = organizationId;
      }

      if (courseManagementNo !== undefined) {
        localVarQueryParameter["courseManagementNo"] = courseManagementNo;
      }

      if (homeworkDate !== undefined) {
        localVarQueryParameter["homeworkDate"] =
          (homeworkDate as any) instanceof Date ? (homeworkDate as any).toISOString() : homeworkDate;
      }

      if (title !== undefined) {
        localVarQueryParameter["title"] = title;
      }

      if (description !== undefined) {
        localVarQueryParameter["description"] = description;
      }

      if (courseManagementStatus !== undefined) {
        localVarQueryParameter["courseManagementStatus"] = courseManagementStatus;
      }

      if (statusCd !== undefined) {
        localVarQueryParameter["statusCd"] = statusCd;
      }

      if (sortProperties) {
        localVarQueryParameter["sortProperties"] = sortProperties;
      }

      if (page !== undefined) {
        localVarQueryParameter["page"] = page;
      }

      if (size !== undefined) {
        localVarQueryParameter["size"] = size;
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary 以 Id 查詢列表
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getCourseManagement: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists("getCourseManagement", "id", id);
      const localVarPath = `/api/courseManagement/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(id)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: "GET", ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication Example-id-1 required
      await setApiKeyToObject(localVarHeaderParameter, "Example-id-1", configuration);

      // authentication JWT_Authorization required
      await setApiKeyToObject(localVarHeaderParameter, "authorization", configuration);

      // authentication example-id-2 required
      await setApiKeyToObject(localVarHeaderParameter, "example-id-2", configuration);

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary 修改課程樣版主檔
     * @param {UpdateCourseManagementCommand} [updateCourseManagementCommand]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    putCourseManagement: async (
      updateCourseManagementCommand?: UpdateCourseManagementCommand,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/courseManagement`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: "PUT", ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication Example-id-1 required
      await setApiKeyToObject(localVarHeaderParameter, "Example-id-1", configuration);

      // authentication JWT_Authorization required
      await setApiKeyToObject(localVarHeaderParameter, "authorization", configuration);

      // authentication example-id-2 required
      await setApiKeyToObject(localVarHeaderParameter, "example-id-2", configuration);

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      localVarRequestOptions.data = serializeDataIfNeeded(
        updateCourseManagementCommand,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary 查詢列表  (*dynamic sort support)
     * @param {QueryCourseManagementRequest} [queryCourseManagementRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    queryCourseManagements: async (
      queryCourseManagementRequest?: QueryCourseManagementRequest,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/courseManagement/query`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: "POST", ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication Example-id-1 required
      await setApiKeyToObject(localVarHeaderParameter, "Example-id-1", configuration);

      // authentication JWT_Authorization required
      await setApiKeyToObject(localVarHeaderParameter, "authorization", configuration);

      // authentication example-id-2 required
      await setApiKeyToObject(localVarHeaderParameter, "example-id-2", configuration);

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      localVarRequestOptions.data = serializeDataIfNeeded(
        queryCourseManagementRequest,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary 刪除主檔
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    removeCourseManagement: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists("removeCourseManagement", "id", id);
      const localVarPath = `/api/courseManagement/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(id)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: "DELETE", ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication Example-id-1 required
      await setApiKeyToObject(localVarHeaderParameter, "Example-id-1", configuration);

      // authentication JWT_Authorization required
      await setApiKeyToObject(localVarHeaderParameter, "authorization", configuration);

      // authentication example-id-2 required
      await setApiKeyToObject(localVarHeaderParameter, "example-id-2", configuration);

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * CourseManagementApi - functional programming interface
 * @export
 */
export const CourseManagementApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = CourseManagementApiAxiosParamCreator(configuration);
  return {
    /**
     *
     * @summary 建立課程樣版主檔檔
     * @param {CreateCourseManagementCommand} [createCourseManagementCommand]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async createCourseManagement(
      createCourseManagementCommand?: CreateCourseManagementCommand,
      options?: AxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<CourseManagementViewApiResponse>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.createCourseManagement(
        createCourseManagementCommand,
        options
      );
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     *
     * @summary 刪除課程樣版主檔
     * @param {DeleteCourseManagementCommand} [deleteCourseManagementCommand]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async deleteCourseManagement(
      deleteCourseManagementCommand?: DeleteCourseManagementCommand,
      options?: AxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<CourseManagementViewApiResponse>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.deleteCourseManagement(
        deleteCourseManagementCommand,
        options
      );
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     *
     * @summary 查詢樣板主檔
     * @param {FetchAllCourseManagementRequest} [fetchAllCourseManagementRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async fetchCourseManagements(
      fetchAllCourseManagementRequest?: FetchAllCourseManagementRequest,
      options?: AxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<CourseManagementViewListApiResponse>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.fetchCourseManagements(
        fetchAllCourseManagementRequest,
        options
      );
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     *
     * @summary 查詢課程樣版主檔
     * @param {number} [id] id
     * @param {number} [courseManagementTypeId] 課程類別CourseManagementType.Id
     * @param {number} [organizationId] 堂點Id Organization.Id
     * @param {string} [courseManagementNo] 課程代碼
     * @param {string} [homeworkDate] 課程作業繳交日期
     * @param {string} [title] 課程標題
     * @param {string} [description] 課程內容描述
     * @param {string} [courseManagementStatus] 課程狀態對應type&#x3D;CourseManagementStatus顯示 namevalue存此欄位0：關閉1：開啟
     * @param {string} [statusCd] 狀態
     * @param {Array<SortProperty>} [sortProperties] 查詢欄位排序
     * @param {number} [page] 目前頁數
     * @param {number} [size] 每頁筆數
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async findCourseManagement(
      id?: number,
      courseManagementTypeId?: number,
      organizationId?: number,
      courseManagementNo?: string,
      homeworkDate?: string,
      title?: string,
      description?: string,
      courseManagementStatus?: string,
      statusCd?: string,
      sortProperties?: Array<SortProperty>,
      page?: number,
      size?: number,
      options?: AxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<CourseManagementViewPageApiResponse>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.findCourseManagement(
        id,
        courseManagementTypeId,
        organizationId,
        courseManagementNo,
        homeworkDate,
        title,
        description,
        courseManagementStatus,
        statusCd,
        sortProperties,
        page,
        size,
        options
      );
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     *
     * @summary 以 Id 查詢列表
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getCourseManagement(
      id: number,
      options?: AxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<CourseManagementViewApiResponse>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getCourseManagement(id, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     *
     * @summary 修改課程樣版主檔
     * @param {UpdateCourseManagementCommand} [updateCourseManagementCommand]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async putCourseManagement(
      updateCourseManagementCommand?: UpdateCourseManagementCommand,
      options?: AxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<CourseManagementViewApiResponse>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.putCourseManagement(
        updateCourseManagementCommand,
        options
      );
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     *
     * @summary 查詢列表  (*dynamic sort support)
     * @param {QueryCourseManagementRequest} [queryCourseManagementRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async queryCourseManagements(
      queryCourseManagementRequest?: QueryCourseManagementRequest,
      options?: AxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<CourseManagementViewPageApiResponse>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.queryCourseManagements(
        queryCourseManagementRequest,
        options
      );
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     *
     * @summary 刪除主檔
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async removeCourseManagement(
      id: number,
      options?: AxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<Int32ApiResponse>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.removeCourseManagement(id, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
  };
};

/**
 * CourseManagementApi - factory interface
 * @export
 */
export const CourseManagementApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance
) {
  const localVarFp = CourseManagementApiFp(configuration);
  return {
    /**
     *
     * @summary 建立課程樣版主檔檔
     * @param {CreateCourseManagementCommand} [createCourseManagementCommand]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createCourseManagement(
      createCourseManagementCommand?: CreateCourseManagementCommand,
      options?: any
    ): Promise<CourseManagementViewApiResponse> {
      return localVarFp
        .createCourseManagement(createCourseManagementCommand, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary 刪除課程樣版主檔
     * @param {DeleteCourseManagementCommand} [deleteCourseManagementCommand]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteCourseManagement(
      deleteCourseManagementCommand?: DeleteCourseManagementCommand,
      options?: any
    ): Promise<CourseManagementViewApiResponse> {
      return localVarFp
        .deleteCourseManagement(deleteCourseManagementCommand, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary 查詢樣板主檔
     * @param {FetchAllCourseManagementRequest} [fetchAllCourseManagementRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    fetchCourseManagements(
      fetchAllCourseManagementRequest?: FetchAllCourseManagementRequest,
      options?: any
    ): Promise<CourseManagementViewListApiResponse> {
      return localVarFp
        .fetchCourseManagements(fetchAllCourseManagementRequest, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary 查詢課程樣版主檔
     * @param {number} [id] id
     * @param {number} [courseManagementTypeId] 課程類別CourseManagementType.Id
     * @param {number} [organizationId] 堂點Id Organization.Id
     * @param {string} [courseManagementNo] 課程代碼
     * @param {string} [homeworkDate] 課程作業繳交日期
     * @param {string} [title] 課程標題
     * @param {string} [description] 課程內容描述
     * @param {string} [courseManagementStatus] 課程狀態對應type&#x3D;CourseManagementStatus顯示 namevalue存此欄位0：關閉1：開啟
     * @param {string} [statusCd] 狀態
     * @param {Array<SortProperty>} [sortProperties] 查詢欄位排序
     * @param {number} [page] 目前頁數
     * @param {number} [size] 每頁筆數
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    findCourseManagement(
      id?: number,
      courseManagementTypeId?: number,
      organizationId?: number,
      courseManagementNo?: string,
      homeworkDate?: string,
      title?: string,
      description?: string,
      courseManagementStatus?: string,
      statusCd?: string,
      sortProperties?: Array<SortProperty>,
      page?: number,
      size?: number,
      options?: any
    ): Promise<CourseManagementViewPageApiResponse> {
      return localVarFp
        .findCourseManagement(
          id,
          courseManagementTypeId,
          organizationId,
          courseManagementNo,
          homeworkDate,
          title,
          description,
          courseManagementStatus,
          statusCd,
          sortProperties,
          page,
          size,
          options
        )
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary 以 Id 查詢列表
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getCourseManagement(id: number, options?: any): Promise<CourseManagementViewApiResponse> {
      return localVarFp.getCourseManagement(id, options).then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary 修改課程樣版主檔
     * @param {UpdateCourseManagementCommand} [updateCourseManagementCommand]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    putCourseManagement(
      updateCourseManagementCommand?: UpdateCourseManagementCommand,
      options?: any
    ): Promise<CourseManagementViewApiResponse> {
      return localVarFp
        .putCourseManagement(updateCourseManagementCommand, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary 查詢列表  (*dynamic sort support)
     * @param {QueryCourseManagementRequest} [queryCourseManagementRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    queryCourseManagements(
      queryCourseManagementRequest?: QueryCourseManagementRequest,
      options?: any
    ): Promise<CourseManagementViewPageApiResponse> {
      return localVarFp
        .queryCourseManagements(queryCourseManagementRequest, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary 刪除主檔
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    removeCourseManagement(id: number, options?: any): Promise<Int32ApiResponse> {
      return localVarFp.removeCourseManagement(id, options).then((request) => request(axios, basePath));
    },
  };
};

/**
 * CourseManagementApi - interface
 * @export
 * @interface CourseManagementApi
 */
export interface CourseManagementApiInterface {
  /**
   *
   * @summary 建立課程樣版主檔檔
   * @param {CreateCourseManagementCommand} [createCourseManagementCommand]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CourseManagementApiInterface
   */
  createCourseManagement(
    createCourseManagementCommand?: CreateCourseManagementCommand,
    options?: AxiosRequestConfig
  ): Promise<CourseManagementViewApiResponse>;

  /**
   *
   * @summary 刪除課程樣版主檔
   * @param {DeleteCourseManagementCommand} [deleteCourseManagementCommand]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CourseManagementApiInterface
   */
  deleteCourseManagement(
    deleteCourseManagementCommand?: DeleteCourseManagementCommand,
    options?: AxiosRequestConfig
  ): Promise<CourseManagementViewApiResponse>;

  /**
   *
   * @summary 查詢樣板主檔
   * @param {FetchAllCourseManagementRequest} [fetchAllCourseManagementRequest]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CourseManagementApiInterface
   */
  fetchCourseManagements(
    fetchAllCourseManagementRequest?: FetchAllCourseManagementRequest,
    options?: AxiosRequestConfig
  ): Promise<CourseManagementViewListApiResponse>;

  /**
   *
   * @summary 查詢課程樣版主檔
   * @param {number} [id] id
   * @param {number} [courseManagementTypeId] 課程類別CourseManagementType.Id
   * @param {number} [organizationId] 堂點Id Organization.Id
   * @param {string} [courseManagementNo] 課程代碼
   * @param {string} [homeworkDate] 課程作業繳交日期
   * @param {string} [title] 課程標題
   * @param {string} [description] 課程內容描述
   * @param {string} [courseManagementStatus] 課程狀態對應type&#x3D;CourseManagementStatus顯示 namevalue存此欄位0：關閉1：開啟
   * @param {string} [statusCd] 狀態
   * @param {Array<SortProperty>} [sortProperties] 查詢欄位排序
   * @param {number} [page] 目前頁數
   * @param {number} [size] 每頁筆數
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CourseManagementApiInterface
   */
  findCourseManagement(
    id?: number,
    courseManagementTypeId?: number,
    organizationId?: number,
    courseManagementNo?: string,
    homeworkDate?: string,
    title?: string,
    description?: string,
    courseManagementStatus?: string,
    statusCd?: string,
    sortProperties?: Array<SortProperty>,
    page?: number,
    size?: number,
    options?: AxiosRequestConfig
  ): Promise<CourseManagementViewPageApiResponse>;

  /**
   *
   * @summary 以 Id 查詢列表
   * @param {number} id
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CourseManagementApiInterface
   */
  getCourseManagement(id: number, options?: AxiosRequestConfig): Promise<CourseManagementViewApiResponse>;

  /**
   *
   * @summary 修改課程樣版主檔
   * @param {UpdateCourseManagementCommand} [updateCourseManagementCommand]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CourseManagementApiInterface
   */
  putCourseManagement(
    updateCourseManagementCommand?: UpdateCourseManagementCommand,
    options?: AxiosRequestConfig
  ): Promise<CourseManagementViewApiResponse>;

  /**
   *
   * @summary 查詢列表  (*dynamic sort support)
   * @param {QueryCourseManagementRequest} [queryCourseManagementRequest]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CourseManagementApiInterface
   */
  queryCourseManagements(
    queryCourseManagementRequest?: QueryCourseManagementRequest,
    options?: AxiosRequestConfig
  ): Promise<CourseManagementViewPageApiResponse>;

  /**
   *
   * @summary 刪除主檔
   * @param {number} id
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CourseManagementApiInterface
   */
  removeCourseManagement(id: number, options?: AxiosRequestConfig): Promise<Int32ApiResponse>;
}

/**
 * CourseManagementApi - object-oriented interface
 * @export
 * @class CourseManagementApi
 * @extends {BaseAPI}
 */
export class CourseManagementApi extends BaseAPI implements CourseManagementApiInterface {
  /**
   *
   * @summary 建立課程樣版主檔檔
   * @param {CreateCourseManagementCommand} [createCourseManagementCommand]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CourseManagementApi
   */
  public createCourseManagement(
    createCourseManagementCommand?: CreateCourseManagementCommand,
    options?: AxiosRequestConfig
  ) {
    return CourseManagementApiFp(this.configuration)
      .createCourseManagement(createCourseManagementCommand, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary 刪除課程樣版主檔
   * @param {DeleteCourseManagementCommand} [deleteCourseManagementCommand]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CourseManagementApi
   */
  public deleteCourseManagement(
    deleteCourseManagementCommand?: DeleteCourseManagementCommand,
    options?: AxiosRequestConfig
  ) {
    return CourseManagementApiFp(this.configuration)
      .deleteCourseManagement(deleteCourseManagementCommand, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary 查詢樣板主檔
   * @param {FetchAllCourseManagementRequest} [fetchAllCourseManagementRequest]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CourseManagementApi
   */
  public fetchCourseManagements(
    fetchAllCourseManagementRequest?: FetchAllCourseManagementRequest,
    options?: AxiosRequestConfig
  ) {
    return CourseManagementApiFp(this.configuration)
      .fetchCourseManagements(fetchAllCourseManagementRequest, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary 查詢課程樣版主檔
   * @param {number} [id] id
   * @param {number} [courseManagementTypeId] 課程類別CourseManagementType.Id
   * @param {number} [organizationId] 堂點Id Organization.Id
   * @param {string} [courseManagementNo] 課程代碼
   * @param {string} [homeworkDate] 課程作業繳交日期
   * @param {string} [title] 課程標題
   * @param {string} [description] 課程內容描述
   * @param {string} [courseManagementStatus] 課程狀態對應type&#x3D;CourseManagementStatus顯示 namevalue存此欄位0：關閉1：開啟
   * @param {string} [statusCd] 狀態
   * @param {Array<SortProperty>} [sortProperties] 查詢欄位排序
   * @param {number} [page] 目前頁數
   * @param {number} [size] 每頁筆數
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CourseManagementApi
   */
  public findCourseManagement(
    id?: number,
    courseManagementTypeId?: number,
    organizationId?: number,
    courseManagementNo?: string,
    homeworkDate?: string,
    title?: string,
    description?: string,
    courseManagementStatus?: string,
    statusCd?: string,
    sortProperties?: Array<SortProperty>,
    page?: number,
    size?: number,
    options?: AxiosRequestConfig
  ) {
    return CourseManagementApiFp(this.configuration)
      .findCourseManagement(
        id,
        courseManagementTypeId,
        organizationId,
        courseManagementNo,
        homeworkDate,
        title,
        description,
        courseManagementStatus,
        statusCd,
        sortProperties,
        page,
        size,
        options
      )
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary 以 Id 查詢列表
   * @param {number} id
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CourseManagementApi
   */
  public getCourseManagement(id: number, options?: AxiosRequestConfig) {
    return CourseManagementApiFp(this.configuration)
      .getCourseManagement(id, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary 修改課程樣版主檔
   * @param {UpdateCourseManagementCommand} [updateCourseManagementCommand]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CourseManagementApi
   */
  public putCourseManagement(
    updateCourseManagementCommand?: UpdateCourseManagementCommand,
    options?: AxiosRequestConfig
  ) {
    return CourseManagementApiFp(this.configuration)
      .putCourseManagement(updateCourseManagementCommand, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary 查詢列表  (*dynamic sort support)
   * @param {QueryCourseManagementRequest} [queryCourseManagementRequest]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CourseManagementApi
   */
  public queryCourseManagements(
    queryCourseManagementRequest?: QueryCourseManagementRequest,
    options?: AxiosRequestConfig
  ) {
    return CourseManagementApiFp(this.configuration)
      .queryCourseManagements(queryCourseManagementRequest, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary 刪除主檔
   * @param {number} id
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CourseManagementApi
   */
  public removeCourseManagement(id: number, options?: AxiosRequestConfig) {
    return CourseManagementApiFp(this.configuration)
      .removeCourseManagement(id, options)
      .then((request) => request(this.axios, this.basePath));
  }
}

/**
 * CourseManagementAppendixApi - axios parameter creator
 * @export
 */
export const CourseManagementAppendixApiAxiosParamCreator = function (configuration?: Configuration) {
  return {
    /**
     *
     * @summary 建立課程樣版附件檔檔
     * @param {CreateCourseManagementAppendixCommand} [createCourseManagementAppendixCommand]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createCourseManagementAppendix: async (
      createCourseManagementAppendixCommand?: CreateCourseManagementAppendixCommand,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/courseManagementAppendix`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: "POST", ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication Example-id-1 required
      await setApiKeyToObject(localVarHeaderParameter, "Example-id-1", configuration);

      // authentication JWT_Authorization required
      await setApiKeyToObject(localVarHeaderParameter, "authorization", configuration);

      // authentication example-id-2 required
      await setApiKeyToObject(localVarHeaderParameter, "example-id-2", configuration);

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      localVarRequestOptions.data = serializeDataIfNeeded(
        createCourseManagementAppendixCommand,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary 刪除課程樣版附件檔
     * @param {DeleteCourseManagementAppendixCommand} [deleteCourseManagementAppendixCommand]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteCourseManagementAppendix: async (
      deleteCourseManagementAppendixCommand?: DeleteCourseManagementAppendixCommand,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/courseManagementAppendix`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: "DELETE", ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication Example-id-1 required
      await setApiKeyToObject(localVarHeaderParameter, "Example-id-1", configuration);

      // authentication JWT_Authorization required
      await setApiKeyToObject(localVarHeaderParameter, "authorization", configuration);

      // authentication example-id-2 required
      await setApiKeyToObject(localVarHeaderParameter, "example-id-2", configuration);

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      localVarRequestOptions.data = serializeDataIfNeeded(
        deleteCourseManagementAppendixCommand,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary 查詢課程樣版附件檔
     * @param {number} [id] id
     * @param {number} [courseManagementId] 課程類別CourseManagement.Id
     * @param {string} [appendixType] 附件類別對應type&#x3D;AppendixType顯示 namevalue存此欄位0：文件1：影音
     * @param {string} [path] 存放網路路徑
     * @param {Array<SortProperty>} [sortProperties] 查詢欄位排序
     * @param {number} [page] 目前頁數
     * @param {number} [size] 每頁筆數
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    findCourseManagementAppendix: async (
      id?: number,
      courseManagementId?: number,
      appendixType?: string,
      path?: string,
      sortProperties?: Array<SortProperty>,
      page?: number,
      size?: number,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/courseManagementAppendix`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: "GET", ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication Example-id-1 required
      await setApiKeyToObject(localVarHeaderParameter, "Example-id-1", configuration);

      // authentication JWT_Authorization required
      await setApiKeyToObject(localVarHeaderParameter, "authorization", configuration);

      // authentication example-id-2 required
      await setApiKeyToObject(localVarHeaderParameter, "example-id-2", configuration);

      if (id !== undefined) {
        localVarQueryParameter["id"] = id;
      }

      if (courseManagementId !== undefined) {
        localVarQueryParameter["courseManagementId"] = courseManagementId;
      }

      if (appendixType !== undefined) {
        localVarQueryParameter["appendixType"] = appendixType;
      }

      if (path !== undefined) {
        localVarQueryParameter["path"] = path;
      }

      if (sortProperties) {
        localVarQueryParameter["sortProperties"] = sortProperties;
      }

      if (page !== undefined) {
        localVarQueryParameter["page"] = page;
      }

      if (size !== undefined) {
        localVarQueryParameter["size"] = size;
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary 以 Id 查詢列表
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getCourseManagementAppendix: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists("getCourseManagementAppendix", "id", id);
      const localVarPath = `/api/courseManagementAppendix/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(id)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: "GET", ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication Example-id-1 required
      await setApiKeyToObject(localVarHeaderParameter, "Example-id-1", configuration);

      // authentication JWT_Authorization required
      await setApiKeyToObject(localVarHeaderParameter, "authorization", configuration);

      // authentication example-id-2 required
      await setApiKeyToObject(localVarHeaderParameter, "example-id-2", configuration);

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary 修改課程樣版附件檔
     * @param {UpdateCourseManagementAppendixCommand} [updateCourseManagementAppendixCommand]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    putCourseManagementAppendix: async (
      updateCourseManagementAppendixCommand?: UpdateCourseManagementAppendixCommand,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/courseManagementAppendix`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: "PUT", ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication Example-id-1 required
      await setApiKeyToObject(localVarHeaderParameter, "Example-id-1", configuration);

      // authentication JWT_Authorization required
      await setApiKeyToObject(localVarHeaderParameter, "authorization", configuration);

      // authentication example-id-2 required
      await setApiKeyToObject(localVarHeaderParameter, "example-id-2", configuration);

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      localVarRequestOptions.data = serializeDataIfNeeded(
        updateCourseManagementAppendixCommand,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary 查詢列表  (*dynamic sort support)
     * @param {QueryCourseManagementAppendixRequest} [queryCourseManagementAppendixRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    queryCourseManagementAppendixs: async (
      queryCourseManagementAppendixRequest?: QueryCourseManagementAppendixRequest,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/courseManagementAppendix/query`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: "POST", ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication Example-id-1 required
      await setApiKeyToObject(localVarHeaderParameter, "Example-id-1", configuration);

      // authentication JWT_Authorization required
      await setApiKeyToObject(localVarHeaderParameter, "authorization", configuration);

      // authentication example-id-2 required
      await setApiKeyToObject(localVarHeaderParameter, "example-id-2", configuration);

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      localVarRequestOptions.data = serializeDataIfNeeded(
        queryCourseManagementAppendixRequest,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary 刪除主檔
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    removeCourseManagementAppendix: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists("removeCourseManagementAppendix", "id", id);
      const localVarPath = `/api/courseManagementAppendix/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(id)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: "DELETE", ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication Example-id-1 required
      await setApiKeyToObject(localVarHeaderParameter, "Example-id-1", configuration);

      // authentication JWT_Authorization required
      await setApiKeyToObject(localVarHeaderParameter, "authorization", configuration);

      // authentication example-id-2 required
      await setApiKeyToObject(localVarHeaderParameter, "example-id-2", configuration);

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * CourseManagementAppendixApi - functional programming interface
 * @export
 */
export const CourseManagementAppendixApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = CourseManagementAppendixApiAxiosParamCreator(configuration);
  return {
    /**
     *
     * @summary 建立課程樣版附件檔檔
     * @param {CreateCourseManagementAppendixCommand} [createCourseManagementAppendixCommand]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async createCourseManagementAppendix(
      createCourseManagementAppendixCommand?: CreateCourseManagementAppendixCommand,
      options?: AxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<CourseManagementAppendixViewApiResponse>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.createCourseManagementAppendix(
        createCourseManagementAppendixCommand,
        options
      );
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     *
     * @summary 刪除課程樣版附件檔
     * @param {DeleteCourseManagementAppendixCommand} [deleteCourseManagementAppendixCommand]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async deleteCourseManagementAppendix(
      deleteCourseManagementAppendixCommand?: DeleteCourseManagementAppendixCommand,
      options?: AxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<CourseManagementAppendixViewApiResponse>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.deleteCourseManagementAppendix(
        deleteCourseManagementAppendixCommand,
        options
      );
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     *
     * @summary 查詢課程樣版附件檔
     * @param {number} [id] id
     * @param {number} [courseManagementId] 課程類別CourseManagement.Id
     * @param {string} [appendixType] 附件類別對應type&#x3D;AppendixType顯示 namevalue存此欄位0：文件1：影音
     * @param {string} [path] 存放網路路徑
     * @param {Array<SortProperty>} [sortProperties] 查詢欄位排序
     * @param {number} [page] 目前頁數
     * @param {number} [size] 每頁筆數
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async findCourseManagementAppendix(
      id?: number,
      courseManagementId?: number,
      appendixType?: string,
      path?: string,
      sortProperties?: Array<SortProperty>,
      page?: number,
      size?: number,
      options?: AxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<CourseManagementAppendixViewPageApiResponse>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.findCourseManagementAppendix(
        id,
        courseManagementId,
        appendixType,
        path,
        sortProperties,
        page,
        size,
        options
      );
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     *
     * @summary 以 Id 查詢列表
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getCourseManagementAppendix(
      id: number,
      options?: AxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<CourseManagementAppendixViewApiResponse>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getCourseManagementAppendix(id, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     *
     * @summary 修改課程樣版附件檔
     * @param {UpdateCourseManagementAppendixCommand} [updateCourseManagementAppendixCommand]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async putCourseManagementAppendix(
      updateCourseManagementAppendixCommand?: UpdateCourseManagementAppendixCommand,
      options?: AxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<CourseManagementAppendixViewApiResponse>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.putCourseManagementAppendix(
        updateCourseManagementAppendixCommand,
        options
      );
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     *
     * @summary 查詢列表  (*dynamic sort support)
     * @param {QueryCourseManagementAppendixRequest} [queryCourseManagementAppendixRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async queryCourseManagementAppendixs(
      queryCourseManagementAppendixRequest?: QueryCourseManagementAppendixRequest,
      options?: AxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<CourseManagementAppendixViewPageApiResponse>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.queryCourseManagementAppendixs(
        queryCourseManagementAppendixRequest,
        options
      );
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     *
     * @summary 刪除主檔
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async removeCourseManagementAppendix(
      id: number,
      options?: AxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<Int32ApiResponse>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.removeCourseManagementAppendix(id, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
  };
};

/**
 * CourseManagementAppendixApi - factory interface
 * @export
 */
export const CourseManagementAppendixApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance
) {
  const localVarFp = CourseManagementAppendixApiFp(configuration);
  return {
    /**
     *
     * @summary 建立課程樣版附件檔檔
     * @param {CreateCourseManagementAppendixCommand} [createCourseManagementAppendixCommand]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createCourseManagementAppendix(
      createCourseManagementAppendixCommand?: CreateCourseManagementAppendixCommand,
      options?: any
    ): Promise<CourseManagementAppendixViewApiResponse> {
      return localVarFp
        .createCourseManagementAppendix(createCourseManagementAppendixCommand, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary 刪除課程樣版附件檔
     * @param {DeleteCourseManagementAppendixCommand} [deleteCourseManagementAppendixCommand]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteCourseManagementAppendix(
      deleteCourseManagementAppendixCommand?: DeleteCourseManagementAppendixCommand,
      options?: any
    ): Promise<CourseManagementAppendixViewApiResponse> {
      return localVarFp
        .deleteCourseManagementAppendix(deleteCourseManagementAppendixCommand, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary 查詢課程樣版附件檔
     * @param {number} [id] id
     * @param {number} [courseManagementId] 課程類別CourseManagement.Id
     * @param {string} [appendixType] 附件類別對應type&#x3D;AppendixType顯示 namevalue存此欄位0：文件1：影音
     * @param {string} [path] 存放網路路徑
     * @param {Array<SortProperty>} [sortProperties] 查詢欄位排序
     * @param {number} [page] 目前頁數
     * @param {number} [size] 每頁筆數
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    findCourseManagementAppendix(
      id?: number,
      courseManagementId?: number,
      appendixType?: string,
      path?: string,
      sortProperties?: Array<SortProperty>,
      page?: number,
      size?: number,
      options?: any
    ): Promise<CourseManagementAppendixViewPageApiResponse> {
      return localVarFp
        .findCourseManagementAppendix(id, courseManagementId, appendixType, path, sortProperties, page, size, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary 以 Id 查詢列表
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getCourseManagementAppendix(id: number, options?: any): Promise<CourseManagementAppendixViewApiResponse> {
      return localVarFp.getCourseManagementAppendix(id, options).then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary 修改課程樣版附件檔
     * @param {UpdateCourseManagementAppendixCommand} [updateCourseManagementAppendixCommand]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    putCourseManagementAppendix(
      updateCourseManagementAppendixCommand?: UpdateCourseManagementAppendixCommand,
      options?: any
    ): Promise<CourseManagementAppendixViewApiResponse> {
      return localVarFp
        .putCourseManagementAppendix(updateCourseManagementAppendixCommand, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary 查詢列表  (*dynamic sort support)
     * @param {QueryCourseManagementAppendixRequest} [queryCourseManagementAppendixRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    queryCourseManagementAppendixs(
      queryCourseManagementAppendixRequest?: QueryCourseManagementAppendixRequest,
      options?: any
    ): Promise<CourseManagementAppendixViewPageApiResponse> {
      return localVarFp
        .queryCourseManagementAppendixs(queryCourseManagementAppendixRequest, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary 刪除主檔
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    removeCourseManagementAppendix(id: number, options?: any): Promise<Int32ApiResponse> {
      return localVarFp.removeCourseManagementAppendix(id, options).then((request) => request(axios, basePath));
    },
  };
};

/**
 * CourseManagementAppendixApi - interface
 * @export
 * @interface CourseManagementAppendixApi
 */
export interface CourseManagementAppendixApiInterface {
  /**
   *
   * @summary 建立課程樣版附件檔檔
   * @param {CreateCourseManagementAppendixCommand} [createCourseManagementAppendixCommand]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CourseManagementAppendixApiInterface
   */
  createCourseManagementAppendix(
    createCourseManagementAppendixCommand?: CreateCourseManagementAppendixCommand,
    options?: AxiosRequestConfig
  ): Promise<CourseManagementAppendixViewApiResponse>;

  /**
   *
   * @summary 刪除課程樣版附件檔
   * @param {DeleteCourseManagementAppendixCommand} [deleteCourseManagementAppendixCommand]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CourseManagementAppendixApiInterface
   */
  deleteCourseManagementAppendix(
    deleteCourseManagementAppendixCommand?: DeleteCourseManagementAppendixCommand,
    options?: AxiosRequestConfig
  ): Promise<CourseManagementAppendixViewApiResponse>;

  /**
   *
   * @summary 查詢課程樣版附件檔
   * @param {number} [id] id
   * @param {number} [courseManagementId] 課程類別CourseManagement.Id
   * @param {string} [appendixType] 附件類別對應type&#x3D;AppendixType顯示 namevalue存此欄位0：文件1：影音
   * @param {string} [path] 存放網路路徑
   * @param {Array<SortProperty>} [sortProperties] 查詢欄位排序
   * @param {number} [page] 目前頁數
   * @param {number} [size] 每頁筆數
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CourseManagementAppendixApiInterface
   */
  findCourseManagementAppendix(
    id?: number,
    courseManagementId?: number,
    appendixType?: string,
    path?: string,
    sortProperties?: Array<SortProperty>,
    page?: number,
    size?: number,
    options?: AxiosRequestConfig
  ): Promise<CourseManagementAppendixViewPageApiResponse>;

  /**
   *
   * @summary 以 Id 查詢列表
   * @param {number} id
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CourseManagementAppendixApiInterface
   */
  getCourseManagementAppendix(
    id: number,
    options?: AxiosRequestConfig
  ): Promise<CourseManagementAppendixViewApiResponse>;

  /**
   *
   * @summary 修改課程樣版附件檔
   * @param {UpdateCourseManagementAppendixCommand} [updateCourseManagementAppendixCommand]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CourseManagementAppendixApiInterface
   */
  putCourseManagementAppendix(
    updateCourseManagementAppendixCommand?: UpdateCourseManagementAppendixCommand,
    options?: AxiosRequestConfig
  ): Promise<CourseManagementAppendixViewApiResponse>;

  /**
   *
   * @summary 查詢列表  (*dynamic sort support)
   * @param {QueryCourseManagementAppendixRequest} [queryCourseManagementAppendixRequest]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CourseManagementAppendixApiInterface
   */
  queryCourseManagementAppendixs(
    queryCourseManagementAppendixRequest?: QueryCourseManagementAppendixRequest,
    options?: AxiosRequestConfig
  ): Promise<CourseManagementAppendixViewPageApiResponse>;

  /**
   *
   * @summary 刪除主檔
   * @param {number} id
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CourseManagementAppendixApiInterface
   */
  removeCourseManagementAppendix(id: number, options?: AxiosRequestConfig): Promise<Int32ApiResponse>;
}

/**
 * CourseManagementAppendixApi - object-oriented interface
 * @export
 * @class CourseManagementAppendixApi
 * @extends {BaseAPI}
 */
export class CourseManagementAppendixApi extends BaseAPI implements CourseManagementAppendixApiInterface {
  /**
   *
   * @summary 建立課程樣版附件檔檔
   * @param {CreateCourseManagementAppendixCommand} [createCourseManagementAppendixCommand]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CourseManagementAppendixApi
   */
  public createCourseManagementAppendix(
    createCourseManagementAppendixCommand?: CreateCourseManagementAppendixCommand,
    options?: AxiosRequestConfig
  ) {
    return CourseManagementAppendixApiFp(this.configuration)
      .createCourseManagementAppendix(createCourseManagementAppendixCommand, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary 刪除課程樣版附件檔
   * @param {DeleteCourseManagementAppendixCommand} [deleteCourseManagementAppendixCommand]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CourseManagementAppendixApi
   */
  public deleteCourseManagementAppendix(
    deleteCourseManagementAppendixCommand?: DeleteCourseManagementAppendixCommand,
    options?: AxiosRequestConfig
  ) {
    return CourseManagementAppendixApiFp(this.configuration)
      .deleteCourseManagementAppendix(deleteCourseManagementAppendixCommand, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary 查詢課程樣版附件檔
   * @param {number} [id] id
   * @param {number} [courseManagementId] 課程類別CourseManagement.Id
   * @param {string} [appendixType] 附件類別對應type&#x3D;AppendixType顯示 namevalue存此欄位0：文件1：影音
   * @param {string} [path] 存放網路路徑
   * @param {Array<SortProperty>} [sortProperties] 查詢欄位排序
   * @param {number} [page] 目前頁數
   * @param {number} [size] 每頁筆數
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CourseManagementAppendixApi
   */
  public findCourseManagementAppendix(
    id?: number,
    courseManagementId?: number,
    appendixType?: string,
    path?: string,
    sortProperties?: Array<SortProperty>,
    page?: number,
    size?: number,
    options?: AxiosRequestConfig
  ) {
    return CourseManagementAppendixApiFp(this.configuration)
      .findCourseManagementAppendix(id, courseManagementId, appendixType, path, sortProperties, page, size, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary 以 Id 查詢列表
   * @param {number} id
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CourseManagementAppendixApi
   */
  public getCourseManagementAppendix(id: number, options?: AxiosRequestConfig) {
    return CourseManagementAppendixApiFp(this.configuration)
      .getCourseManagementAppendix(id, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary 修改課程樣版附件檔
   * @param {UpdateCourseManagementAppendixCommand} [updateCourseManagementAppendixCommand]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CourseManagementAppendixApi
   */
  public putCourseManagementAppendix(
    updateCourseManagementAppendixCommand?: UpdateCourseManagementAppendixCommand,
    options?: AxiosRequestConfig
  ) {
    return CourseManagementAppendixApiFp(this.configuration)
      .putCourseManagementAppendix(updateCourseManagementAppendixCommand, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary 查詢列表  (*dynamic sort support)
   * @param {QueryCourseManagementAppendixRequest} [queryCourseManagementAppendixRequest]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CourseManagementAppendixApi
   */
  public queryCourseManagementAppendixs(
    queryCourseManagementAppendixRequest?: QueryCourseManagementAppendixRequest,
    options?: AxiosRequestConfig
  ) {
    return CourseManagementAppendixApiFp(this.configuration)
      .queryCourseManagementAppendixs(queryCourseManagementAppendixRequest, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary 刪除主檔
   * @param {number} id
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CourseManagementAppendixApi
   */
  public removeCourseManagementAppendix(id: number, options?: AxiosRequestConfig) {
    return CourseManagementAppendixApiFp(this.configuration)
      .removeCourseManagementAppendix(id, options)
      .then((request) => request(this.axios, this.basePath));
  }
}

/**
 * CourseManagementFilterApi - axios parameter creator
 * @export
 */
export const CourseManagementFilterApiAxiosParamCreator = function (configuration?: Configuration) {
  return {
    /**
     *
     * @summary 建立課程過濾主檔檔
     * @param {CreateCourseManagementFilterCommand} [createCourseManagementFilterCommand]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createCourseManagementFilter: async (
      createCourseManagementFilterCommand?: CreateCourseManagementFilterCommand,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/courseManagementFilter`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: "POST", ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication Example-id-1 required
      await setApiKeyToObject(localVarHeaderParameter, "Example-id-1", configuration);

      // authentication JWT_Authorization required
      await setApiKeyToObject(localVarHeaderParameter, "authorization", configuration);

      // authentication example-id-2 required
      await setApiKeyToObject(localVarHeaderParameter, "example-id-2", configuration);

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      localVarRequestOptions.data = serializeDataIfNeeded(
        createCourseManagementFilterCommand,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary 刪除課程過濾主檔
     * @param {DeleteCourseManagementFilterCommand} [deleteCourseManagementFilterCommand]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteCourseManagementFilter: async (
      deleteCourseManagementFilterCommand?: DeleteCourseManagementFilterCommand,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/courseManagementFilter`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: "DELETE", ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication Example-id-1 required
      await setApiKeyToObject(localVarHeaderParameter, "Example-id-1", configuration);

      // authentication JWT_Authorization required
      await setApiKeyToObject(localVarHeaderParameter, "authorization", configuration);

      // authentication example-id-2 required
      await setApiKeyToObject(localVarHeaderParameter, "example-id-2", configuration);

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      localVarRequestOptions.data = serializeDataIfNeeded(
        deleteCourseManagementFilterCommand,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary 查詢課程過濾主檔
     * @param {FetchAllCourseManagementFilterRequest} [fetchAllCourseManagementFilterRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    fetchCourseManagementFilters: async (
      fetchAllCourseManagementFilterRequest?: FetchAllCourseManagementFilterRequest,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/courseManagementFilter/fetch`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: "POST", ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication Example-id-1 required
      await setApiKeyToObject(localVarHeaderParameter, "Example-id-1", configuration);

      // authentication JWT_Authorization required
      await setApiKeyToObject(localVarHeaderParameter, "authorization", configuration);

      // authentication example-id-2 required
      await setApiKeyToObject(localVarHeaderParameter, "example-id-2", configuration);

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      localVarRequestOptions.data = serializeDataIfNeeded(
        fetchAllCourseManagementFilterRequest,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary 查詢課程過濾主檔
     * @param {number} [id] id
     * @param {number} [courseManagementId] 課程樣板CourseManagement.Id
     * @param {number} [organizationId] 堂點Id Organization.Id
     * @param {string} [courseSex] 課程性別限制
     * @param {number} [ageUp] 年齡門檻上
     * @param {number} [ageDown] 年齡門檻下
     * @param {Array<SortProperty>} [sortProperties] 查詢欄位排序
     * @param {number} [page] 目前頁數
     * @param {number} [size] 每頁筆數
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    findCourseManagementFilter: async (
      id?: number,
      courseManagementId?: number,
      organizationId?: number,
      courseSex?: string,
      ageUp?: number,
      ageDown?: number,
      sortProperties?: Array<SortProperty>,
      page?: number,
      size?: number,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/courseManagementFilter`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: "GET", ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication Example-id-1 required
      await setApiKeyToObject(localVarHeaderParameter, "Example-id-1", configuration);

      // authentication JWT_Authorization required
      await setApiKeyToObject(localVarHeaderParameter, "authorization", configuration);

      // authentication example-id-2 required
      await setApiKeyToObject(localVarHeaderParameter, "example-id-2", configuration);

      if (id !== undefined) {
        localVarQueryParameter["id"] = id;
      }

      if (courseManagementId !== undefined) {
        localVarQueryParameter["courseManagementId"] = courseManagementId;
      }

      if (organizationId !== undefined) {
        localVarQueryParameter["organizationId"] = organizationId;
      }

      if (courseSex !== undefined) {
        localVarQueryParameter["courseSex"] = courseSex;
      }

      if (ageUp !== undefined) {
        localVarQueryParameter["ageUp"] = ageUp;
      }

      if (ageDown !== undefined) {
        localVarQueryParameter["ageDown"] = ageDown;
      }

      if (sortProperties) {
        localVarQueryParameter["sortProperties"] = sortProperties;
      }

      if (page !== undefined) {
        localVarQueryParameter["page"] = page;
      }

      if (size !== undefined) {
        localVarQueryParameter["size"] = size;
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary 以 Id 查詢列表
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getCourseManagementFilter: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists("getCourseManagementFilter", "id", id);
      const localVarPath = `/api/courseManagementFilter/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(id)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: "GET", ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication Example-id-1 required
      await setApiKeyToObject(localVarHeaderParameter, "Example-id-1", configuration);

      // authentication JWT_Authorization required
      await setApiKeyToObject(localVarHeaderParameter, "authorization", configuration);

      // authentication example-id-2 required
      await setApiKeyToObject(localVarHeaderParameter, "example-id-2", configuration);

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary 修改課程過濾主檔
     * @param {UpdateCourseManagementFilterCommand} [updateCourseManagementFilterCommand]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    putCourseManagementFilter: async (
      updateCourseManagementFilterCommand?: UpdateCourseManagementFilterCommand,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/courseManagementFilter`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: "PUT", ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication Example-id-1 required
      await setApiKeyToObject(localVarHeaderParameter, "Example-id-1", configuration);

      // authentication JWT_Authorization required
      await setApiKeyToObject(localVarHeaderParameter, "authorization", configuration);

      // authentication example-id-2 required
      await setApiKeyToObject(localVarHeaderParameter, "example-id-2", configuration);

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      localVarRequestOptions.data = serializeDataIfNeeded(
        updateCourseManagementFilterCommand,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary 查詢列表  (*dynamic sort support)
     * @param {QueryCourseManagementFilterRequest} [queryCourseManagementFilterRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    queryCourseManagementFilters: async (
      queryCourseManagementFilterRequest?: QueryCourseManagementFilterRequest,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/courseManagementFilter/query`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: "POST", ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication Example-id-1 required
      await setApiKeyToObject(localVarHeaderParameter, "Example-id-1", configuration);

      // authentication JWT_Authorization required
      await setApiKeyToObject(localVarHeaderParameter, "authorization", configuration);

      // authentication example-id-2 required
      await setApiKeyToObject(localVarHeaderParameter, "example-id-2", configuration);

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      localVarRequestOptions.data = serializeDataIfNeeded(
        queryCourseManagementFilterRequest,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary 刪除主檔
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    removeCourseManagementFilter: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists("removeCourseManagementFilter", "id", id);
      const localVarPath = `/api/courseManagementFilter/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(id)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: "DELETE", ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication Example-id-1 required
      await setApiKeyToObject(localVarHeaderParameter, "Example-id-1", configuration);

      // authentication JWT_Authorization required
      await setApiKeyToObject(localVarHeaderParameter, "authorization", configuration);

      // authentication example-id-2 required
      await setApiKeyToObject(localVarHeaderParameter, "example-id-2", configuration);

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * CourseManagementFilterApi - functional programming interface
 * @export
 */
export const CourseManagementFilterApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = CourseManagementFilterApiAxiosParamCreator(configuration);
  return {
    /**
     *
     * @summary 建立課程過濾主檔檔
     * @param {CreateCourseManagementFilterCommand} [createCourseManagementFilterCommand]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async createCourseManagementFilter(
      createCourseManagementFilterCommand?: CreateCourseManagementFilterCommand,
      options?: AxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<CourseManagementFilterViewApiResponse>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.createCourseManagementFilter(
        createCourseManagementFilterCommand,
        options
      );
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     *
     * @summary 刪除課程過濾主檔
     * @param {DeleteCourseManagementFilterCommand} [deleteCourseManagementFilterCommand]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async deleteCourseManagementFilter(
      deleteCourseManagementFilterCommand?: DeleteCourseManagementFilterCommand,
      options?: AxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<CourseManagementFilterViewApiResponse>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.deleteCourseManagementFilter(
        deleteCourseManagementFilterCommand,
        options
      );
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     *
     * @summary 查詢課程過濾主檔
     * @param {FetchAllCourseManagementFilterRequest} [fetchAllCourseManagementFilterRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async fetchCourseManagementFilters(
      fetchAllCourseManagementFilterRequest?: FetchAllCourseManagementFilterRequest,
      options?: AxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<CourseManagementFilterViewListApiResponse>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.fetchCourseManagementFilters(
        fetchAllCourseManagementFilterRequest,
        options
      );
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     *
     * @summary 查詢課程過濾主檔
     * @param {number} [id] id
     * @param {number} [courseManagementId] 課程樣板CourseManagement.Id
     * @param {number} [organizationId] 堂點Id Organization.Id
     * @param {string} [courseSex] 課程性別限制
     * @param {number} [ageUp] 年齡門檻上
     * @param {number} [ageDown] 年齡門檻下
     * @param {Array<SortProperty>} [sortProperties] 查詢欄位排序
     * @param {number} [page] 目前頁數
     * @param {number} [size] 每頁筆數
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async findCourseManagementFilter(
      id?: number,
      courseManagementId?: number,
      organizationId?: number,
      courseSex?: string,
      ageUp?: number,
      ageDown?: number,
      sortProperties?: Array<SortProperty>,
      page?: number,
      size?: number,
      options?: AxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<CourseManagementFilterViewPageApiResponse>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.findCourseManagementFilter(
        id,
        courseManagementId,
        organizationId,
        courseSex,
        ageUp,
        ageDown,
        sortProperties,
        page,
        size,
        options
      );
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     *
     * @summary 以 Id 查詢列表
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getCourseManagementFilter(
      id: number,
      options?: AxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<CourseManagementFilterViewApiResponse>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getCourseManagementFilter(id, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     *
     * @summary 修改課程過濾主檔
     * @param {UpdateCourseManagementFilterCommand} [updateCourseManagementFilterCommand]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async putCourseManagementFilter(
      updateCourseManagementFilterCommand?: UpdateCourseManagementFilterCommand,
      options?: AxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<CourseManagementFilterViewApiResponse>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.putCourseManagementFilter(
        updateCourseManagementFilterCommand,
        options
      );
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     *
     * @summary 查詢列表  (*dynamic sort support)
     * @param {QueryCourseManagementFilterRequest} [queryCourseManagementFilterRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async queryCourseManagementFilters(
      queryCourseManagementFilterRequest?: QueryCourseManagementFilterRequest,
      options?: AxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<CourseManagementFilterViewPageApiResponse>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.queryCourseManagementFilters(
        queryCourseManagementFilterRequest,
        options
      );
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     *
     * @summary 刪除主檔
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async removeCourseManagementFilter(
      id: number,
      options?: AxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<Int32ApiResponse>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.removeCourseManagementFilter(id, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
  };
};

/**
 * CourseManagementFilterApi - factory interface
 * @export
 */
export const CourseManagementFilterApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance
) {
  const localVarFp = CourseManagementFilterApiFp(configuration);
  return {
    /**
     *
     * @summary 建立課程過濾主檔檔
     * @param {CreateCourseManagementFilterCommand} [createCourseManagementFilterCommand]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createCourseManagementFilter(
      createCourseManagementFilterCommand?: CreateCourseManagementFilterCommand,
      options?: any
    ): Promise<CourseManagementFilterViewApiResponse> {
      return localVarFp
        .createCourseManagementFilter(createCourseManagementFilterCommand, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary 刪除課程過濾主檔
     * @param {DeleteCourseManagementFilterCommand} [deleteCourseManagementFilterCommand]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteCourseManagementFilter(
      deleteCourseManagementFilterCommand?: DeleteCourseManagementFilterCommand,
      options?: any
    ): Promise<CourseManagementFilterViewApiResponse> {
      return localVarFp
        .deleteCourseManagementFilter(deleteCourseManagementFilterCommand, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary 查詢課程過濾主檔
     * @param {FetchAllCourseManagementFilterRequest} [fetchAllCourseManagementFilterRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    fetchCourseManagementFilters(
      fetchAllCourseManagementFilterRequest?: FetchAllCourseManagementFilterRequest,
      options?: any
    ): Promise<CourseManagementFilterViewListApiResponse> {
      return localVarFp
        .fetchCourseManagementFilters(fetchAllCourseManagementFilterRequest, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary 查詢課程過濾主檔
     * @param {number} [id] id
     * @param {number} [courseManagementId] 課程樣板CourseManagement.Id
     * @param {number} [organizationId] 堂點Id Organization.Id
     * @param {string} [courseSex] 課程性別限制
     * @param {number} [ageUp] 年齡門檻上
     * @param {number} [ageDown] 年齡門檻下
     * @param {Array<SortProperty>} [sortProperties] 查詢欄位排序
     * @param {number} [page] 目前頁數
     * @param {number} [size] 每頁筆數
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    findCourseManagementFilter(
      id?: number,
      courseManagementId?: number,
      organizationId?: number,
      courseSex?: string,
      ageUp?: number,
      ageDown?: number,
      sortProperties?: Array<SortProperty>,
      page?: number,
      size?: number,
      options?: any
    ): Promise<CourseManagementFilterViewPageApiResponse> {
      return localVarFp
        .findCourseManagementFilter(
          id,
          courseManagementId,
          organizationId,
          courseSex,
          ageUp,
          ageDown,
          sortProperties,
          page,
          size,
          options
        )
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary 以 Id 查詢列表
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getCourseManagementFilter(id: number, options?: any): Promise<CourseManagementFilterViewApiResponse> {
      return localVarFp.getCourseManagementFilter(id, options).then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary 修改課程過濾主檔
     * @param {UpdateCourseManagementFilterCommand} [updateCourseManagementFilterCommand]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    putCourseManagementFilter(
      updateCourseManagementFilterCommand?: UpdateCourseManagementFilterCommand,
      options?: any
    ): Promise<CourseManagementFilterViewApiResponse> {
      return localVarFp
        .putCourseManagementFilter(updateCourseManagementFilterCommand, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary 查詢列表  (*dynamic sort support)
     * @param {QueryCourseManagementFilterRequest} [queryCourseManagementFilterRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    queryCourseManagementFilters(
      queryCourseManagementFilterRequest?: QueryCourseManagementFilterRequest,
      options?: any
    ): Promise<CourseManagementFilterViewPageApiResponse> {
      return localVarFp
        .queryCourseManagementFilters(queryCourseManagementFilterRequest, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary 刪除主檔
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    removeCourseManagementFilter(id: number, options?: any): Promise<Int32ApiResponse> {
      return localVarFp.removeCourseManagementFilter(id, options).then((request) => request(axios, basePath));
    },
  };
};

/**
 * CourseManagementFilterApi - interface
 * @export
 * @interface CourseManagementFilterApi
 */
export interface CourseManagementFilterApiInterface {
  /**
   *
   * @summary 建立課程過濾主檔檔
   * @param {CreateCourseManagementFilterCommand} [createCourseManagementFilterCommand]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CourseManagementFilterApiInterface
   */
  createCourseManagementFilter(
    createCourseManagementFilterCommand?: CreateCourseManagementFilterCommand,
    options?: AxiosRequestConfig
  ): Promise<CourseManagementFilterViewApiResponse>;

  /**
   *
   * @summary 刪除課程過濾主檔
   * @param {DeleteCourseManagementFilterCommand} [deleteCourseManagementFilterCommand]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CourseManagementFilterApiInterface
   */
  deleteCourseManagementFilter(
    deleteCourseManagementFilterCommand?: DeleteCourseManagementFilterCommand,
    options?: AxiosRequestConfig
  ): Promise<CourseManagementFilterViewApiResponse>;

  /**
   *
   * @summary 查詢課程過濾主檔
   * @param {FetchAllCourseManagementFilterRequest} [fetchAllCourseManagementFilterRequest]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CourseManagementFilterApiInterface
   */
  fetchCourseManagementFilters(
    fetchAllCourseManagementFilterRequest?: FetchAllCourseManagementFilterRequest,
    options?: AxiosRequestConfig
  ): Promise<CourseManagementFilterViewListApiResponse>;

  /**
   *
   * @summary 查詢課程過濾主檔
   * @param {number} [id] id
   * @param {number} [courseManagementId] 課程樣板CourseManagement.Id
   * @param {number} [organizationId] 堂點Id Organization.Id
   * @param {string} [courseSex] 課程性別限制
   * @param {number} [ageUp] 年齡門檻上
   * @param {number} [ageDown] 年齡門檻下
   * @param {Array<SortProperty>} [sortProperties] 查詢欄位排序
   * @param {number} [page] 目前頁數
   * @param {number} [size] 每頁筆數
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CourseManagementFilterApiInterface
   */
  findCourseManagementFilter(
    id?: number,
    courseManagementId?: number,
    organizationId?: number,
    courseSex?: string,
    ageUp?: number,
    ageDown?: number,
    sortProperties?: Array<SortProperty>,
    page?: number,
    size?: number,
    options?: AxiosRequestConfig
  ): Promise<CourseManagementFilterViewPageApiResponse>;

  /**
   *
   * @summary 以 Id 查詢列表
   * @param {number} id
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CourseManagementFilterApiInterface
   */
  getCourseManagementFilter(id: number, options?: AxiosRequestConfig): Promise<CourseManagementFilterViewApiResponse>;

  /**
   *
   * @summary 修改課程過濾主檔
   * @param {UpdateCourseManagementFilterCommand} [updateCourseManagementFilterCommand]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CourseManagementFilterApiInterface
   */
  putCourseManagementFilter(
    updateCourseManagementFilterCommand?: UpdateCourseManagementFilterCommand,
    options?: AxiosRequestConfig
  ): Promise<CourseManagementFilterViewApiResponse>;

  /**
   *
   * @summary 查詢列表  (*dynamic sort support)
   * @param {QueryCourseManagementFilterRequest} [queryCourseManagementFilterRequest]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CourseManagementFilterApiInterface
   */
  queryCourseManagementFilters(
    queryCourseManagementFilterRequest?: QueryCourseManagementFilterRequest,
    options?: AxiosRequestConfig
  ): Promise<CourseManagementFilterViewPageApiResponse>;

  /**
   *
   * @summary 刪除主檔
   * @param {number} id
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CourseManagementFilterApiInterface
   */
  removeCourseManagementFilter(id: number, options?: AxiosRequestConfig): Promise<Int32ApiResponse>;
}

/**
 * CourseManagementFilterApi - object-oriented interface
 * @export
 * @class CourseManagementFilterApi
 * @extends {BaseAPI}
 */
export class CourseManagementFilterApi extends BaseAPI implements CourseManagementFilterApiInterface {
  /**
   *
   * @summary 建立課程過濾主檔檔
   * @param {CreateCourseManagementFilterCommand} [createCourseManagementFilterCommand]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CourseManagementFilterApi
   */
  public createCourseManagementFilter(
    createCourseManagementFilterCommand?: CreateCourseManagementFilterCommand,
    options?: AxiosRequestConfig
  ) {
    return CourseManagementFilterApiFp(this.configuration)
      .createCourseManagementFilter(createCourseManagementFilterCommand, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary 刪除課程過濾主檔
   * @param {DeleteCourseManagementFilterCommand} [deleteCourseManagementFilterCommand]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CourseManagementFilterApi
   */
  public deleteCourseManagementFilter(
    deleteCourseManagementFilterCommand?: DeleteCourseManagementFilterCommand,
    options?: AxiosRequestConfig
  ) {
    return CourseManagementFilterApiFp(this.configuration)
      .deleteCourseManagementFilter(deleteCourseManagementFilterCommand, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary 查詢課程過濾主檔
   * @param {FetchAllCourseManagementFilterRequest} [fetchAllCourseManagementFilterRequest]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CourseManagementFilterApi
   */
  public fetchCourseManagementFilters(
    fetchAllCourseManagementFilterRequest?: FetchAllCourseManagementFilterRequest,
    options?: AxiosRequestConfig
  ) {
    return CourseManagementFilterApiFp(this.configuration)
      .fetchCourseManagementFilters(fetchAllCourseManagementFilterRequest, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary 查詢課程過濾主檔
   * @param {number} [id] id
   * @param {number} [courseManagementId] 課程樣板CourseManagement.Id
   * @param {number} [organizationId] 堂點Id Organization.Id
   * @param {string} [courseSex] 課程性別限制
   * @param {number} [ageUp] 年齡門檻上
   * @param {number} [ageDown] 年齡門檻下
   * @param {Array<SortProperty>} [sortProperties] 查詢欄位排序
   * @param {number} [page] 目前頁數
   * @param {number} [size] 每頁筆數
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CourseManagementFilterApi
   */
  public findCourseManagementFilter(
    id?: number,
    courseManagementId?: number,
    organizationId?: number,
    courseSex?: string,
    ageUp?: number,
    ageDown?: number,
    sortProperties?: Array<SortProperty>,
    page?: number,
    size?: number,
    options?: AxiosRequestConfig
  ) {
    return CourseManagementFilterApiFp(this.configuration)
      .findCourseManagementFilter(
        id,
        courseManagementId,
        organizationId,
        courseSex,
        ageUp,
        ageDown,
        sortProperties,
        page,
        size,
        options
      )
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary 以 Id 查詢列表
   * @param {number} id
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CourseManagementFilterApi
   */
  public getCourseManagementFilter(id: number, options?: AxiosRequestConfig) {
    return CourseManagementFilterApiFp(this.configuration)
      .getCourseManagementFilter(id, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary 修改課程過濾主檔
   * @param {UpdateCourseManagementFilterCommand} [updateCourseManagementFilterCommand]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CourseManagementFilterApi
   */
  public putCourseManagementFilter(
    updateCourseManagementFilterCommand?: UpdateCourseManagementFilterCommand,
    options?: AxiosRequestConfig
  ) {
    return CourseManagementFilterApiFp(this.configuration)
      .putCourseManagementFilter(updateCourseManagementFilterCommand, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary 查詢列表  (*dynamic sort support)
   * @param {QueryCourseManagementFilterRequest} [queryCourseManagementFilterRequest]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CourseManagementFilterApi
   */
  public queryCourseManagementFilters(
    queryCourseManagementFilterRequest?: QueryCourseManagementFilterRequest,
    options?: AxiosRequestConfig
  ) {
    return CourseManagementFilterApiFp(this.configuration)
      .queryCourseManagementFilters(queryCourseManagementFilterRequest, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary 刪除主檔
   * @param {number} id
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CourseManagementFilterApi
   */
  public removeCourseManagementFilter(id: number, options?: AxiosRequestConfig) {
    return CourseManagementFilterApiFp(this.configuration)
      .removeCourseManagementFilter(id, options)
      .then((request) => request(this.axios, this.basePath));
  }
}

/**
 * CourseManagementFilterCourseApi - axios parameter creator
 * @export
 */
export const CourseManagementFilterCourseApiAxiosParamCreator = function (configuration?: Configuration) {
  return {
    /**
     *
     * @summary 建立課程過濾課程主檔
     * @param {CreateCourseManagementFilterCourseCommand} [createCourseManagementFilterCourseCommand]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createCourseManagementFilterCourse: async (
      createCourseManagementFilterCourseCommand?: CreateCourseManagementFilterCourseCommand,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/courseManagementFilterCourse`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: "POST", ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication Example-id-1 required
      await setApiKeyToObject(localVarHeaderParameter, "Example-id-1", configuration);

      // authentication JWT_Authorization required
      await setApiKeyToObject(localVarHeaderParameter, "authorization", configuration);

      // authentication example-id-2 required
      await setApiKeyToObject(localVarHeaderParameter, "example-id-2", configuration);

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      localVarRequestOptions.data = serializeDataIfNeeded(
        createCourseManagementFilterCourseCommand,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary 刪除課程過濾課程主檔
     * @param {DeleteCourseManagementFilterCourseCommand} [deleteCourseManagementFilterCourseCommand]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteCourseManagementFilterCourse: async (
      deleteCourseManagementFilterCourseCommand?: DeleteCourseManagementFilterCourseCommand,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/courseManagementFilterCourse`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: "DELETE", ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication Example-id-1 required
      await setApiKeyToObject(localVarHeaderParameter, "Example-id-1", configuration);

      // authentication JWT_Authorization required
      await setApiKeyToObject(localVarHeaderParameter, "authorization", configuration);

      // authentication example-id-2 required
      await setApiKeyToObject(localVarHeaderParameter, "example-id-2", configuration);

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      localVarRequestOptions.data = serializeDataIfNeeded(
        deleteCourseManagementFilterCourseCommand,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary 查詢附件主檔
     * @param {FetchAllCourseManagementFilterCourseRequest} [fetchAllCourseManagementFilterCourseRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    fetchCourseManagementFilterCourses: async (
      fetchAllCourseManagementFilterCourseRequest?: FetchAllCourseManagementFilterCourseRequest,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/courseManagementFilterCourse/fetch`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: "POST", ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication Example-id-1 required
      await setApiKeyToObject(localVarHeaderParameter, "Example-id-1", configuration);

      // authentication JWT_Authorization required
      await setApiKeyToObject(localVarHeaderParameter, "authorization", configuration);

      // authentication example-id-2 required
      await setApiKeyToObject(localVarHeaderParameter, "example-id-2", configuration);

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      localVarRequestOptions.data = serializeDataIfNeeded(
        fetchAllCourseManagementFilterCourseRequest,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary 查詢課程過濾課程主檔
     * @param {number} [id] id
     * @param {number} [courseManagementFilterId] 課程樣板過濾CourseManagementFilter.Id
     * @param {number} [courseManagementId] CourseManagement.Id
     * @param {Array<SortProperty>} [sortProperties] 查詢欄位排序
     * @param {number} [page] 目前頁數
     * @param {number} [size] 每頁筆數
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    findCourseManagementFilterCourse: async (
      id?: number,
      courseManagementFilterId?: number,
      courseManagementId?: number,
      sortProperties?: Array<SortProperty>,
      page?: number,
      size?: number,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/courseManagementFilterCourse`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: "GET", ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication Example-id-1 required
      await setApiKeyToObject(localVarHeaderParameter, "Example-id-1", configuration);

      // authentication JWT_Authorization required
      await setApiKeyToObject(localVarHeaderParameter, "authorization", configuration);

      // authentication example-id-2 required
      await setApiKeyToObject(localVarHeaderParameter, "example-id-2", configuration);

      if (id !== undefined) {
        localVarQueryParameter["id"] = id;
      }

      if (courseManagementFilterId !== undefined) {
        localVarQueryParameter["courseManagementFilterId"] = courseManagementFilterId;
      }

      if (courseManagementId !== undefined) {
        localVarQueryParameter["courseManagementId"] = courseManagementId;
      }

      if (sortProperties) {
        localVarQueryParameter["sortProperties"] = sortProperties;
      }

      if (page !== undefined) {
        localVarQueryParameter["page"] = page;
      }

      if (size !== undefined) {
        localVarQueryParameter["size"] = size;
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary 以 Id 查詢列表
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getCourseManagementFilterCourse: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists("getCourseManagementFilterCourse", "id", id);
      const localVarPath = `/api/courseManagementFilterCourse/{id}`.replace(
        `{${"id"}}`,
        encodeURIComponent(String(id))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: "GET", ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication Example-id-1 required
      await setApiKeyToObject(localVarHeaderParameter, "Example-id-1", configuration);

      // authentication JWT_Authorization required
      await setApiKeyToObject(localVarHeaderParameter, "authorization", configuration);

      // authentication example-id-2 required
      await setApiKeyToObject(localVarHeaderParameter, "example-id-2", configuration);

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary 修改課程過濾課程主檔
     * @param {UpdateCourseManagementFilterCourseCommand} [updateCourseManagementFilterCourseCommand]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    putCourseManagementFilterCourse: async (
      updateCourseManagementFilterCourseCommand?: UpdateCourseManagementFilterCourseCommand,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/courseManagementFilterCourse`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: "PUT", ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication Example-id-1 required
      await setApiKeyToObject(localVarHeaderParameter, "Example-id-1", configuration);

      // authentication JWT_Authorization required
      await setApiKeyToObject(localVarHeaderParameter, "authorization", configuration);

      // authentication example-id-2 required
      await setApiKeyToObject(localVarHeaderParameter, "example-id-2", configuration);

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      localVarRequestOptions.data = serializeDataIfNeeded(
        updateCourseManagementFilterCourseCommand,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary 查詢列表  (*dynamic sort support)
     * @param {QueryCourseManagementFilterCourseRequest} [queryCourseManagementFilterCourseRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    queryCourseManagementFilterCourses: async (
      queryCourseManagementFilterCourseRequest?: QueryCourseManagementFilterCourseRequest,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/courseManagementFilterCourse/query`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: "POST", ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication Example-id-1 required
      await setApiKeyToObject(localVarHeaderParameter, "Example-id-1", configuration);

      // authentication JWT_Authorization required
      await setApiKeyToObject(localVarHeaderParameter, "authorization", configuration);

      // authentication example-id-2 required
      await setApiKeyToObject(localVarHeaderParameter, "example-id-2", configuration);

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      localVarRequestOptions.data = serializeDataIfNeeded(
        queryCourseManagementFilterCourseRequest,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary 刪除主檔
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    removeCourseManagementFilterCourse: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists("removeCourseManagementFilterCourse", "id", id);
      const localVarPath = `/api/courseManagementFilterCourse/{id}`.replace(
        `{${"id"}}`,
        encodeURIComponent(String(id))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: "DELETE", ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication Example-id-1 required
      await setApiKeyToObject(localVarHeaderParameter, "Example-id-1", configuration);

      // authentication JWT_Authorization required
      await setApiKeyToObject(localVarHeaderParameter, "authorization", configuration);

      // authentication example-id-2 required
      await setApiKeyToObject(localVarHeaderParameter, "example-id-2", configuration);

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * CourseManagementFilterCourseApi - functional programming interface
 * @export
 */
export const CourseManagementFilterCourseApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = CourseManagementFilterCourseApiAxiosParamCreator(configuration);
  return {
    /**
     *
     * @summary 建立課程過濾課程主檔
     * @param {CreateCourseManagementFilterCourseCommand} [createCourseManagementFilterCourseCommand]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async createCourseManagementFilterCourse(
      createCourseManagementFilterCourseCommand?: CreateCourseManagementFilterCourseCommand,
      options?: AxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<CourseManagementFilterCourseViewApiResponse>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.createCourseManagementFilterCourse(
        createCourseManagementFilterCourseCommand,
        options
      );
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     *
     * @summary 刪除課程過濾課程主檔
     * @param {DeleteCourseManagementFilterCourseCommand} [deleteCourseManagementFilterCourseCommand]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async deleteCourseManagementFilterCourse(
      deleteCourseManagementFilterCourseCommand?: DeleteCourseManagementFilterCourseCommand,
      options?: AxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<CourseManagementFilterCourseViewApiResponse>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.deleteCourseManagementFilterCourse(
        deleteCourseManagementFilterCourseCommand,
        options
      );
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     *
     * @summary 查詢附件主檔
     * @param {FetchAllCourseManagementFilterCourseRequest} [fetchAllCourseManagementFilterCourseRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async fetchCourseManagementFilterCourses(
      fetchAllCourseManagementFilterCourseRequest?: FetchAllCourseManagementFilterCourseRequest,
      options?: AxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<CourseManagementFilterCourseViewListApiResponse>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.fetchCourseManagementFilterCourses(
        fetchAllCourseManagementFilterCourseRequest,
        options
      );
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     *
     * @summary 查詢課程過濾課程主檔
     * @param {number} [id] id
     * @param {number} [courseManagementFilterId] 課程樣板過濾CourseManagementFilter.Id
     * @param {number} [courseManagementId] CourseManagement.Id
     * @param {Array<SortProperty>} [sortProperties] 查詢欄位排序
     * @param {number} [page] 目前頁數
     * @param {number} [size] 每頁筆數
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async findCourseManagementFilterCourse(
      id?: number,
      courseManagementFilterId?: number,
      courseManagementId?: number,
      sortProperties?: Array<SortProperty>,
      page?: number,
      size?: number,
      options?: AxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<CourseManagementFilterCourseViewPageApiResponse>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.findCourseManagementFilterCourse(
        id,
        courseManagementFilterId,
        courseManagementId,
        sortProperties,
        page,
        size,
        options
      );
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     *
     * @summary 以 Id 查詢列表
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getCourseManagementFilterCourse(
      id: number,
      options?: AxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<CourseManagementFilterCourseViewApiResponse>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getCourseManagementFilterCourse(id, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     *
     * @summary 修改課程過濾課程主檔
     * @param {UpdateCourseManagementFilterCourseCommand} [updateCourseManagementFilterCourseCommand]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async putCourseManagementFilterCourse(
      updateCourseManagementFilterCourseCommand?: UpdateCourseManagementFilterCourseCommand,
      options?: AxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<CourseManagementFilterCourseViewApiResponse>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.putCourseManagementFilterCourse(
        updateCourseManagementFilterCourseCommand,
        options
      );
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     *
     * @summary 查詢列表  (*dynamic sort support)
     * @param {QueryCourseManagementFilterCourseRequest} [queryCourseManagementFilterCourseRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async queryCourseManagementFilterCourses(
      queryCourseManagementFilterCourseRequest?: QueryCourseManagementFilterCourseRequest,
      options?: AxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<CourseManagementFilterCourseViewPageApiResponse>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.queryCourseManagementFilterCourses(
        queryCourseManagementFilterCourseRequest,
        options
      );
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     *
     * @summary 刪除主檔
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async removeCourseManagementFilterCourse(
      id: number,
      options?: AxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<Int32ApiResponse>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.removeCourseManagementFilterCourse(id, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
  };
};

/**
 * CourseManagementFilterCourseApi - factory interface
 * @export
 */
export const CourseManagementFilterCourseApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance
) {
  const localVarFp = CourseManagementFilterCourseApiFp(configuration);
  return {
    /**
     *
     * @summary 建立課程過濾課程主檔
     * @param {CreateCourseManagementFilterCourseCommand} [createCourseManagementFilterCourseCommand]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createCourseManagementFilterCourse(
      createCourseManagementFilterCourseCommand?: CreateCourseManagementFilterCourseCommand,
      options?: any
    ): Promise<CourseManagementFilterCourseViewApiResponse> {
      return localVarFp
        .createCourseManagementFilterCourse(createCourseManagementFilterCourseCommand, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary 刪除課程過濾課程主檔
     * @param {DeleteCourseManagementFilterCourseCommand} [deleteCourseManagementFilterCourseCommand]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteCourseManagementFilterCourse(
      deleteCourseManagementFilterCourseCommand?: DeleteCourseManagementFilterCourseCommand,
      options?: any
    ): Promise<CourseManagementFilterCourseViewApiResponse> {
      return localVarFp
        .deleteCourseManagementFilterCourse(deleteCourseManagementFilterCourseCommand, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary 查詢附件主檔
     * @param {FetchAllCourseManagementFilterCourseRequest} [fetchAllCourseManagementFilterCourseRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    fetchCourseManagementFilterCourses(
      fetchAllCourseManagementFilterCourseRequest?: FetchAllCourseManagementFilterCourseRequest,
      options?: any
    ): Promise<CourseManagementFilterCourseViewListApiResponse> {
      return localVarFp
        .fetchCourseManagementFilterCourses(fetchAllCourseManagementFilterCourseRequest, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary 查詢課程過濾課程主檔
     * @param {number} [id] id
     * @param {number} [courseManagementFilterId] 課程樣板過濾CourseManagementFilter.Id
     * @param {number} [courseManagementId] CourseManagement.Id
     * @param {Array<SortProperty>} [sortProperties] 查詢欄位排序
     * @param {number} [page] 目前頁數
     * @param {number} [size] 每頁筆數
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    findCourseManagementFilterCourse(
      id?: number,
      courseManagementFilterId?: number,
      courseManagementId?: number,
      sortProperties?: Array<SortProperty>,
      page?: number,
      size?: number,
      options?: any
    ): Promise<CourseManagementFilterCourseViewPageApiResponse> {
      return localVarFp
        .findCourseManagementFilterCourse(
          id,
          courseManagementFilterId,
          courseManagementId,
          sortProperties,
          page,
          size,
          options
        )
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary 以 Id 查詢列表
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getCourseManagementFilterCourse(id: number, options?: any): Promise<CourseManagementFilterCourseViewApiResponse> {
      return localVarFp.getCourseManagementFilterCourse(id, options).then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary 修改課程過濾課程主檔
     * @param {UpdateCourseManagementFilterCourseCommand} [updateCourseManagementFilterCourseCommand]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    putCourseManagementFilterCourse(
      updateCourseManagementFilterCourseCommand?: UpdateCourseManagementFilterCourseCommand,
      options?: any
    ): Promise<CourseManagementFilterCourseViewApiResponse> {
      return localVarFp
        .putCourseManagementFilterCourse(updateCourseManagementFilterCourseCommand, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary 查詢列表  (*dynamic sort support)
     * @param {QueryCourseManagementFilterCourseRequest} [queryCourseManagementFilterCourseRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    queryCourseManagementFilterCourses(
      queryCourseManagementFilterCourseRequest?: QueryCourseManagementFilterCourseRequest,
      options?: any
    ): Promise<CourseManagementFilterCourseViewPageApiResponse> {
      return localVarFp
        .queryCourseManagementFilterCourses(queryCourseManagementFilterCourseRequest, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary 刪除主檔
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    removeCourseManagementFilterCourse(id: number, options?: any): Promise<Int32ApiResponse> {
      return localVarFp.removeCourseManagementFilterCourse(id, options).then((request) => request(axios, basePath));
    },
  };
};

/**
 * CourseManagementFilterCourseApi - interface
 * @export
 * @interface CourseManagementFilterCourseApi
 */
export interface CourseManagementFilterCourseApiInterface {
  /**
   *
   * @summary 建立課程過濾課程主檔
   * @param {CreateCourseManagementFilterCourseCommand} [createCourseManagementFilterCourseCommand]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CourseManagementFilterCourseApiInterface
   */
  createCourseManagementFilterCourse(
    createCourseManagementFilterCourseCommand?: CreateCourseManagementFilterCourseCommand,
    options?: AxiosRequestConfig
  ): Promise<CourseManagementFilterCourseViewApiResponse>;

  /**
   *
   * @summary 刪除課程過濾課程主檔
   * @param {DeleteCourseManagementFilterCourseCommand} [deleteCourseManagementFilterCourseCommand]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CourseManagementFilterCourseApiInterface
   */
  deleteCourseManagementFilterCourse(
    deleteCourseManagementFilterCourseCommand?: DeleteCourseManagementFilterCourseCommand,
    options?: AxiosRequestConfig
  ): Promise<CourseManagementFilterCourseViewApiResponse>;

  /**
   *
   * @summary 查詢附件主檔
   * @param {FetchAllCourseManagementFilterCourseRequest} [fetchAllCourseManagementFilterCourseRequest]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CourseManagementFilterCourseApiInterface
   */
  fetchCourseManagementFilterCourses(
    fetchAllCourseManagementFilterCourseRequest?: FetchAllCourseManagementFilterCourseRequest,
    options?: AxiosRequestConfig
  ): Promise<CourseManagementFilterCourseViewListApiResponse>;

  /**
   *
   * @summary 查詢課程過濾課程主檔
   * @param {number} [id] id
   * @param {number} [courseManagementFilterId] 課程樣板過濾CourseManagementFilter.Id
   * @param {number} [courseManagementId] CourseManagement.Id
   * @param {Array<SortProperty>} [sortProperties] 查詢欄位排序
   * @param {number} [page] 目前頁數
   * @param {number} [size] 每頁筆數
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CourseManagementFilterCourseApiInterface
   */
  findCourseManagementFilterCourse(
    id?: number,
    courseManagementFilterId?: number,
    courseManagementId?: number,
    sortProperties?: Array<SortProperty>,
    page?: number,
    size?: number,
    options?: AxiosRequestConfig
  ): Promise<CourseManagementFilterCourseViewPageApiResponse>;

  /**
   *
   * @summary 以 Id 查詢列表
   * @param {number} id
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CourseManagementFilterCourseApiInterface
   */
  getCourseManagementFilterCourse(
    id: number,
    options?: AxiosRequestConfig
  ): Promise<CourseManagementFilterCourseViewApiResponse>;

  /**
   *
   * @summary 修改課程過濾課程主檔
   * @param {UpdateCourseManagementFilterCourseCommand} [updateCourseManagementFilterCourseCommand]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CourseManagementFilterCourseApiInterface
   */
  putCourseManagementFilterCourse(
    updateCourseManagementFilterCourseCommand?: UpdateCourseManagementFilterCourseCommand,
    options?: AxiosRequestConfig
  ): Promise<CourseManagementFilterCourseViewApiResponse>;

  /**
   *
   * @summary 查詢列表  (*dynamic sort support)
   * @param {QueryCourseManagementFilterCourseRequest} [queryCourseManagementFilterCourseRequest]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CourseManagementFilterCourseApiInterface
   */
  queryCourseManagementFilterCourses(
    queryCourseManagementFilterCourseRequest?: QueryCourseManagementFilterCourseRequest,
    options?: AxiosRequestConfig
  ): Promise<CourseManagementFilterCourseViewPageApiResponse>;

  /**
   *
   * @summary 刪除主檔
   * @param {number} id
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CourseManagementFilterCourseApiInterface
   */
  removeCourseManagementFilterCourse(id: number, options?: AxiosRequestConfig): Promise<Int32ApiResponse>;
}

/**
 * CourseManagementFilterCourseApi - object-oriented interface
 * @export
 * @class CourseManagementFilterCourseApi
 * @extends {BaseAPI}
 */
export class CourseManagementFilterCourseApi extends BaseAPI implements CourseManagementFilterCourseApiInterface {
  /**
   *
   * @summary 建立課程過濾課程主檔
   * @param {CreateCourseManagementFilterCourseCommand} [createCourseManagementFilterCourseCommand]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CourseManagementFilterCourseApi
   */
  public createCourseManagementFilterCourse(
    createCourseManagementFilterCourseCommand?: CreateCourseManagementFilterCourseCommand,
    options?: AxiosRequestConfig
  ) {
    return CourseManagementFilterCourseApiFp(this.configuration)
      .createCourseManagementFilterCourse(createCourseManagementFilterCourseCommand, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary 刪除課程過濾課程主檔
   * @param {DeleteCourseManagementFilterCourseCommand} [deleteCourseManagementFilterCourseCommand]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CourseManagementFilterCourseApi
   */
  public deleteCourseManagementFilterCourse(
    deleteCourseManagementFilterCourseCommand?: DeleteCourseManagementFilterCourseCommand,
    options?: AxiosRequestConfig
  ) {
    return CourseManagementFilterCourseApiFp(this.configuration)
      .deleteCourseManagementFilterCourse(deleteCourseManagementFilterCourseCommand, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary 查詢附件主檔
   * @param {FetchAllCourseManagementFilterCourseRequest} [fetchAllCourseManagementFilterCourseRequest]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CourseManagementFilterCourseApi
   */
  public fetchCourseManagementFilterCourses(
    fetchAllCourseManagementFilterCourseRequest?: FetchAllCourseManagementFilterCourseRequest,
    options?: AxiosRequestConfig
  ) {
    return CourseManagementFilterCourseApiFp(this.configuration)
      .fetchCourseManagementFilterCourses(fetchAllCourseManagementFilterCourseRequest, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary 查詢課程過濾課程主檔
   * @param {number} [id] id
   * @param {number} [courseManagementFilterId] 課程樣板過濾CourseManagementFilter.Id
   * @param {number} [courseManagementId] CourseManagement.Id
   * @param {Array<SortProperty>} [sortProperties] 查詢欄位排序
   * @param {number} [page] 目前頁數
   * @param {number} [size] 每頁筆數
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CourseManagementFilterCourseApi
   */
  public findCourseManagementFilterCourse(
    id?: number,
    courseManagementFilterId?: number,
    courseManagementId?: number,
    sortProperties?: Array<SortProperty>,
    page?: number,
    size?: number,
    options?: AxiosRequestConfig
  ) {
    return CourseManagementFilterCourseApiFp(this.configuration)
      .findCourseManagementFilterCourse(
        id,
        courseManagementFilterId,
        courseManagementId,
        sortProperties,
        page,
        size,
        options
      )
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary 以 Id 查詢列表
   * @param {number} id
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CourseManagementFilterCourseApi
   */
  public getCourseManagementFilterCourse(id: number, options?: AxiosRequestConfig) {
    return CourseManagementFilterCourseApiFp(this.configuration)
      .getCourseManagementFilterCourse(id, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary 修改課程過濾課程主檔
   * @param {UpdateCourseManagementFilterCourseCommand} [updateCourseManagementFilterCourseCommand]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CourseManagementFilterCourseApi
   */
  public putCourseManagementFilterCourse(
    updateCourseManagementFilterCourseCommand?: UpdateCourseManagementFilterCourseCommand,
    options?: AxiosRequestConfig
  ) {
    return CourseManagementFilterCourseApiFp(this.configuration)
      .putCourseManagementFilterCourse(updateCourseManagementFilterCourseCommand, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary 查詢列表  (*dynamic sort support)
   * @param {QueryCourseManagementFilterCourseRequest} [queryCourseManagementFilterCourseRequest]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CourseManagementFilterCourseApi
   */
  public queryCourseManagementFilterCourses(
    queryCourseManagementFilterCourseRequest?: QueryCourseManagementFilterCourseRequest,
    options?: AxiosRequestConfig
  ) {
    return CourseManagementFilterCourseApiFp(this.configuration)
      .queryCourseManagementFilterCourses(queryCourseManagementFilterCourseRequest, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary 刪除主檔
   * @param {number} id
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CourseManagementFilterCourseApi
   */
  public removeCourseManagementFilterCourse(id: number, options?: AxiosRequestConfig) {
    return CourseManagementFilterCourseApiFp(this.configuration)
      .removeCourseManagementFilterCourse(id, options)
      .then((request) => request(this.axios, this.basePath));
  }
}

/**
 * CourseManagementFilterPastoralApi - axios parameter creator
 * @export
 */
export const CourseManagementFilterPastoralApiAxiosParamCreator = function (configuration?: Configuration) {
  return {
    /**
     *
     * @summary 建立課程過濾事工團主檔
     * @param {CreateCourseManagementFilterPastoralCommand} [createCourseManagementFilterPastoralCommand]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createCourseManagementFilterPastoral: async (
      createCourseManagementFilterPastoralCommand?: CreateCourseManagementFilterPastoralCommand,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/courseManagementFilterPastoral`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: "POST", ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication Example-id-1 required
      await setApiKeyToObject(localVarHeaderParameter, "Example-id-1", configuration);

      // authentication JWT_Authorization required
      await setApiKeyToObject(localVarHeaderParameter, "authorization", configuration);

      // authentication example-id-2 required
      await setApiKeyToObject(localVarHeaderParameter, "example-id-2", configuration);

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      localVarRequestOptions.data = serializeDataIfNeeded(
        createCourseManagementFilterPastoralCommand,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary 刪除課程過濾事工團主檔
     * @param {DeleteCourseManagementFilterPastoralCommand} [deleteCourseManagementFilterPastoralCommand]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteCourseManagementFilterPastoral: async (
      deleteCourseManagementFilterPastoralCommand?: DeleteCourseManagementFilterPastoralCommand,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/courseManagementFilterPastoral`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: "DELETE", ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication Example-id-1 required
      await setApiKeyToObject(localVarHeaderParameter, "Example-id-1", configuration);

      // authentication JWT_Authorization required
      await setApiKeyToObject(localVarHeaderParameter, "authorization", configuration);

      // authentication example-id-2 required
      await setApiKeyToObject(localVarHeaderParameter, "example-id-2", configuration);

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      localVarRequestOptions.data = serializeDataIfNeeded(
        deleteCourseManagementFilterPastoralCommand,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary 查詢課程過濾事工團主檔
     * @param {FetchAllCourseManagementFilterPastoralRequest} [fetchAllCourseManagementFilterPastoralRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    fetchCourseManagementFilterPastorals: async (
      fetchAllCourseManagementFilterPastoralRequest?: FetchAllCourseManagementFilterPastoralRequest,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/courseManagementFilterPastoral/fetch`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: "POST", ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication Example-id-1 required
      await setApiKeyToObject(localVarHeaderParameter, "Example-id-1", configuration);

      // authentication JWT_Authorization required
      await setApiKeyToObject(localVarHeaderParameter, "authorization", configuration);

      // authentication example-id-2 required
      await setApiKeyToObject(localVarHeaderParameter, "example-id-2", configuration);

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      localVarRequestOptions.data = serializeDataIfNeeded(
        fetchAllCourseManagementFilterPastoralRequest,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary 查詢課程過濾事工團主檔
     * @param {number} [id] id
     * @param {number} [courseManagementFilterId] 課程樣板過濾CourseManagementFilter.Id
     * @param {number} [pastoralId] Pastoral.Id
     * @param {Array<SortProperty>} [sortProperties] 查詢欄位排序
     * @param {number} [page] 目前頁數
     * @param {number} [size] 每頁筆數
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    findCourseManagementFilterPastoral: async (
      id?: number,
      courseManagementFilterId?: number,
      pastoralId?: number,
      sortProperties?: Array<SortProperty>,
      page?: number,
      size?: number,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/courseManagementFilterPastoral`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: "GET", ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication Example-id-1 required
      await setApiKeyToObject(localVarHeaderParameter, "Example-id-1", configuration);

      // authentication JWT_Authorization required
      await setApiKeyToObject(localVarHeaderParameter, "authorization", configuration);

      // authentication example-id-2 required
      await setApiKeyToObject(localVarHeaderParameter, "example-id-2", configuration);

      if (id !== undefined) {
        localVarQueryParameter["id"] = id;
      }

      if (courseManagementFilterId !== undefined) {
        localVarQueryParameter["courseManagementFilterId"] = courseManagementFilterId;
      }

      if (pastoralId !== undefined) {
        localVarQueryParameter["pastoralId"] = pastoralId;
      }

      if (sortProperties) {
        localVarQueryParameter["sortProperties"] = sortProperties;
      }

      if (page !== undefined) {
        localVarQueryParameter["page"] = page;
      }

      if (size !== undefined) {
        localVarQueryParameter["size"] = size;
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary 以 Id 查詢列表
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getCourseManagementFilterPastoral: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists("getCourseManagementFilterPastoral", "id", id);
      const localVarPath = `/api/courseManagementFilterPastoral/{id}`.replace(
        `{${"id"}}`,
        encodeURIComponent(String(id))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: "GET", ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication Example-id-1 required
      await setApiKeyToObject(localVarHeaderParameter, "Example-id-1", configuration);

      // authentication JWT_Authorization required
      await setApiKeyToObject(localVarHeaderParameter, "authorization", configuration);

      // authentication example-id-2 required
      await setApiKeyToObject(localVarHeaderParameter, "example-id-2", configuration);

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary 修改課程過濾事工團主檔
     * @param {UpdateCourseManagementFilterPastoralCommand} [updateCourseManagementFilterPastoralCommand]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    putCourseManagementFilterPastoral: async (
      updateCourseManagementFilterPastoralCommand?: UpdateCourseManagementFilterPastoralCommand,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/courseManagementFilterPastoral`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: "PUT", ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication Example-id-1 required
      await setApiKeyToObject(localVarHeaderParameter, "Example-id-1", configuration);

      // authentication JWT_Authorization required
      await setApiKeyToObject(localVarHeaderParameter, "authorization", configuration);

      // authentication example-id-2 required
      await setApiKeyToObject(localVarHeaderParameter, "example-id-2", configuration);

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      localVarRequestOptions.data = serializeDataIfNeeded(
        updateCourseManagementFilterPastoralCommand,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary 查詢列表  (*dynamic sort support)
     * @param {QueryCourseManagementFilterPastoralRequest} [queryCourseManagementFilterPastoralRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    queryCourseManagementFilterPastorals: async (
      queryCourseManagementFilterPastoralRequest?: QueryCourseManagementFilterPastoralRequest,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/courseManagementFilterPastoral/query`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: "POST", ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication Example-id-1 required
      await setApiKeyToObject(localVarHeaderParameter, "Example-id-1", configuration);

      // authentication JWT_Authorization required
      await setApiKeyToObject(localVarHeaderParameter, "authorization", configuration);

      // authentication example-id-2 required
      await setApiKeyToObject(localVarHeaderParameter, "example-id-2", configuration);

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      localVarRequestOptions.data = serializeDataIfNeeded(
        queryCourseManagementFilterPastoralRequest,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary 刪除主檔
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    removeCourseManagementFilterPastoral: async (
      id: number,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists("removeCourseManagementFilterPastoral", "id", id);
      const localVarPath = `/api/courseManagementFilterPastoral/{id}`.replace(
        `{${"id"}}`,
        encodeURIComponent(String(id))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: "DELETE", ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication Example-id-1 required
      await setApiKeyToObject(localVarHeaderParameter, "Example-id-1", configuration);

      // authentication JWT_Authorization required
      await setApiKeyToObject(localVarHeaderParameter, "authorization", configuration);

      // authentication example-id-2 required
      await setApiKeyToObject(localVarHeaderParameter, "example-id-2", configuration);

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * CourseManagementFilterPastoralApi - functional programming interface
 * @export
 */
export const CourseManagementFilterPastoralApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = CourseManagementFilterPastoralApiAxiosParamCreator(configuration);
  return {
    /**
     *
     * @summary 建立課程過濾事工團主檔
     * @param {CreateCourseManagementFilterPastoralCommand} [createCourseManagementFilterPastoralCommand]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async createCourseManagementFilterPastoral(
      createCourseManagementFilterPastoralCommand?: CreateCourseManagementFilterPastoralCommand,
      options?: AxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<CourseManagementFilterPastoralViewApiResponse>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.createCourseManagementFilterPastoral(
        createCourseManagementFilterPastoralCommand,
        options
      );
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     *
     * @summary 刪除課程過濾事工團主檔
     * @param {DeleteCourseManagementFilterPastoralCommand} [deleteCourseManagementFilterPastoralCommand]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async deleteCourseManagementFilterPastoral(
      deleteCourseManagementFilterPastoralCommand?: DeleteCourseManagementFilterPastoralCommand,
      options?: AxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<CourseManagementFilterPastoralViewApiResponse>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.deleteCourseManagementFilterPastoral(
        deleteCourseManagementFilterPastoralCommand,
        options
      );
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     *
     * @summary 查詢課程過濾事工團主檔
     * @param {FetchAllCourseManagementFilterPastoralRequest} [fetchAllCourseManagementFilterPastoralRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async fetchCourseManagementFilterPastorals(
      fetchAllCourseManagementFilterPastoralRequest?: FetchAllCourseManagementFilterPastoralRequest,
      options?: AxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => Promise<CourseManagementFilterPastoralViewListApiResponse>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.fetchCourseManagementFilterPastorals(
        fetchAllCourseManagementFilterPastoralRequest,
        options
      );
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     *
     * @summary 查詢課程過濾事工團主檔
     * @param {number} [id] id
     * @param {number} [courseManagementFilterId] 課程樣板過濾CourseManagementFilter.Id
     * @param {number} [pastoralId] Pastoral.Id
     * @param {Array<SortProperty>} [sortProperties] 查詢欄位排序
     * @param {number} [page] 目前頁數
     * @param {number} [size] 每頁筆數
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async findCourseManagementFilterPastoral(
      id?: number,
      courseManagementFilterId?: number,
      pastoralId?: number,
      sortProperties?: Array<SortProperty>,
      page?: number,
      size?: number,
      options?: AxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => Promise<CourseManagementFilterPastoralViewPageApiResponse>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.findCourseManagementFilterPastoral(
        id,
        courseManagementFilterId,
        pastoralId,
        sortProperties,
        page,
        size,
        options
      );
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     *
     * @summary 以 Id 查詢列表
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getCourseManagementFilterPastoral(
      id: number,
      options?: AxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<CourseManagementFilterPastoralViewApiResponse>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getCourseManagementFilterPastoral(id, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     *
     * @summary 修改課程過濾事工團主檔
     * @param {UpdateCourseManagementFilterPastoralCommand} [updateCourseManagementFilterPastoralCommand]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async putCourseManagementFilterPastoral(
      updateCourseManagementFilterPastoralCommand?: UpdateCourseManagementFilterPastoralCommand,
      options?: AxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<CourseManagementFilterPastoralViewApiResponse>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.putCourseManagementFilterPastoral(
        updateCourseManagementFilterPastoralCommand,
        options
      );
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     *
     * @summary 查詢列表  (*dynamic sort support)
     * @param {QueryCourseManagementFilterPastoralRequest} [queryCourseManagementFilterPastoralRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async queryCourseManagementFilterPastorals(
      queryCourseManagementFilterPastoralRequest?: QueryCourseManagementFilterPastoralRequest,
      options?: AxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => Promise<CourseManagementFilterPastoralViewPageApiResponse>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.queryCourseManagementFilterPastorals(
        queryCourseManagementFilterPastoralRequest,
        options
      );
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     *
     * @summary 刪除主檔
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async removeCourseManagementFilterPastoral(
      id: number,
      options?: AxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<Int32ApiResponse>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.removeCourseManagementFilterPastoral(id, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
  };
};

/**
 * CourseManagementFilterPastoralApi - factory interface
 * @export
 */
export const CourseManagementFilterPastoralApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance
) {
  const localVarFp = CourseManagementFilterPastoralApiFp(configuration);
  return {
    /**
     *
     * @summary 建立課程過濾事工團主檔
     * @param {CreateCourseManagementFilterPastoralCommand} [createCourseManagementFilterPastoralCommand]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createCourseManagementFilterPastoral(
      createCourseManagementFilterPastoralCommand?: CreateCourseManagementFilterPastoralCommand,
      options?: any
    ): Promise<CourseManagementFilterPastoralViewApiResponse> {
      return localVarFp
        .createCourseManagementFilterPastoral(createCourseManagementFilterPastoralCommand, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary 刪除課程過濾事工團主檔
     * @param {DeleteCourseManagementFilterPastoralCommand} [deleteCourseManagementFilterPastoralCommand]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteCourseManagementFilterPastoral(
      deleteCourseManagementFilterPastoralCommand?: DeleteCourseManagementFilterPastoralCommand,
      options?: any
    ): Promise<CourseManagementFilterPastoralViewApiResponse> {
      return localVarFp
        .deleteCourseManagementFilterPastoral(deleteCourseManagementFilterPastoralCommand, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary 查詢課程過濾事工團主檔
     * @param {FetchAllCourseManagementFilterPastoralRequest} [fetchAllCourseManagementFilterPastoralRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    fetchCourseManagementFilterPastorals(
      fetchAllCourseManagementFilterPastoralRequest?: FetchAllCourseManagementFilterPastoralRequest,
      options?: any
    ): Promise<CourseManagementFilterPastoralViewListApiResponse> {
      return localVarFp
        .fetchCourseManagementFilterPastorals(fetchAllCourseManagementFilterPastoralRequest, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary 查詢課程過濾事工團主檔
     * @param {number} [id] id
     * @param {number} [courseManagementFilterId] 課程樣板過濾CourseManagementFilter.Id
     * @param {number} [pastoralId] Pastoral.Id
     * @param {Array<SortProperty>} [sortProperties] 查詢欄位排序
     * @param {number} [page] 目前頁數
     * @param {number} [size] 每頁筆數
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    findCourseManagementFilterPastoral(
      id?: number,
      courseManagementFilterId?: number,
      pastoralId?: number,
      sortProperties?: Array<SortProperty>,
      page?: number,
      size?: number,
      options?: any
    ): Promise<CourseManagementFilterPastoralViewPageApiResponse> {
      return localVarFp
        .findCourseManagementFilterPastoral(
          id,
          courseManagementFilterId,
          pastoralId,
          sortProperties,
          page,
          size,
          options
        )
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary 以 Id 查詢列表
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getCourseManagementFilterPastoral(
      id: number,
      options?: any
    ): Promise<CourseManagementFilterPastoralViewApiResponse> {
      return localVarFp.getCourseManagementFilterPastoral(id, options).then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary 修改課程過濾事工團主檔
     * @param {UpdateCourseManagementFilterPastoralCommand} [updateCourseManagementFilterPastoralCommand]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    putCourseManagementFilterPastoral(
      updateCourseManagementFilterPastoralCommand?: UpdateCourseManagementFilterPastoralCommand,
      options?: any
    ): Promise<CourseManagementFilterPastoralViewApiResponse> {
      return localVarFp
        .putCourseManagementFilterPastoral(updateCourseManagementFilterPastoralCommand, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary 查詢列表  (*dynamic sort support)
     * @param {QueryCourseManagementFilterPastoralRequest} [queryCourseManagementFilterPastoralRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    queryCourseManagementFilterPastorals(
      queryCourseManagementFilterPastoralRequest?: QueryCourseManagementFilterPastoralRequest,
      options?: any
    ): Promise<CourseManagementFilterPastoralViewPageApiResponse> {
      return localVarFp
        .queryCourseManagementFilterPastorals(queryCourseManagementFilterPastoralRequest, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary 刪除主檔
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    removeCourseManagementFilterPastoral(id: number, options?: any): Promise<Int32ApiResponse> {
      return localVarFp.removeCourseManagementFilterPastoral(id, options).then((request) => request(axios, basePath));
    },
  };
};

/**
 * CourseManagementFilterPastoralApi - interface
 * @export
 * @interface CourseManagementFilterPastoralApi
 */
export interface CourseManagementFilterPastoralApiInterface {
  /**
   *
   * @summary 建立課程過濾事工團主檔
   * @param {CreateCourseManagementFilterPastoralCommand} [createCourseManagementFilterPastoralCommand]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CourseManagementFilterPastoralApiInterface
   */
  createCourseManagementFilterPastoral(
    createCourseManagementFilterPastoralCommand?: CreateCourseManagementFilterPastoralCommand,
    options?: AxiosRequestConfig
  ): Promise<CourseManagementFilterPastoralViewApiResponse>;

  /**
   *
   * @summary 刪除課程過濾事工團主檔
   * @param {DeleteCourseManagementFilterPastoralCommand} [deleteCourseManagementFilterPastoralCommand]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CourseManagementFilterPastoralApiInterface
   */
  deleteCourseManagementFilterPastoral(
    deleteCourseManagementFilterPastoralCommand?: DeleteCourseManagementFilterPastoralCommand,
    options?: AxiosRequestConfig
  ): Promise<CourseManagementFilterPastoralViewApiResponse>;

  /**
   *
   * @summary 查詢課程過濾事工團主檔
   * @param {FetchAllCourseManagementFilterPastoralRequest} [fetchAllCourseManagementFilterPastoralRequest]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CourseManagementFilterPastoralApiInterface
   */
  fetchCourseManagementFilterPastorals(
    fetchAllCourseManagementFilterPastoralRequest?: FetchAllCourseManagementFilterPastoralRequest,
    options?: AxiosRequestConfig
  ): Promise<CourseManagementFilterPastoralViewListApiResponse>;

  /**
   *
   * @summary 查詢課程過濾事工團主檔
   * @param {number} [id] id
   * @param {number} [courseManagementFilterId] 課程樣板過濾CourseManagementFilter.Id
   * @param {number} [pastoralId] Pastoral.Id
   * @param {Array<SortProperty>} [sortProperties] 查詢欄位排序
   * @param {number} [page] 目前頁數
   * @param {number} [size] 每頁筆數
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CourseManagementFilterPastoralApiInterface
   */
  findCourseManagementFilterPastoral(
    id?: number,
    courseManagementFilterId?: number,
    pastoralId?: number,
    sortProperties?: Array<SortProperty>,
    page?: number,
    size?: number,
    options?: AxiosRequestConfig
  ): Promise<CourseManagementFilterPastoralViewPageApiResponse>;

  /**
   *
   * @summary 以 Id 查詢列表
   * @param {number} id
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CourseManagementFilterPastoralApiInterface
   */
  getCourseManagementFilterPastoral(
    id: number,
    options?: AxiosRequestConfig
  ): Promise<CourseManagementFilterPastoralViewApiResponse>;

  /**
   *
   * @summary 修改課程過濾事工團主檔
   * @param {UpdateCourseManagementFilterPastoralCommand} [updateCourseManagementFilterPastoralCommand]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CourseManagementFilterPastoralApiInterface
   */
  putCourseManagementFilterPastoral(
    updateCourseManagementFilterPastoralCommand?: UpdateCourseManagementFilterPastoralCommand,
    options?: AxiosRequestConfig
  ): Promise<CourseManagementFilterPastoralViewApiResponse>;

  /**
   *
   * @summary 查詢列表  (*dynamic sort support)
   * @param {QueryCourseManagementFilterPastoralRequest} [queryCourseManagementFilterPastoralRequest]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CourseManagementFilterPastoralApiInterface
   */
  queryCourseManagementFilterPastorals(
    queryCourseManagementFilterPastoralRequest?: QueryCourseManagementFilterPastoralRequest,
    options?: AxiosRequestConfig
  ): Promise<CourseManagementFilterPastoralViewPageApiResponse>;

  /**
   *
   * @summary 刪除主檔
   * @param {number} id
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CourseManagementFilterPastoralApiInterface
   */
  removeCourseManagementFilterPastoral(id: number, options?: AxiosRequestConfig): Promise<Int32ApiResponse>;
}

/**
 * CourseManagementFilterPastoralApi - object-oriented interface
 * @export
 * @class CourseManagementFilterPastoralApi
 * @extends {BaseAPI}
 */
export class CourseManagementFilterPastoralApi extends BaseAPI implements CourseManagementFilterPastoralApiInterface {
  /**
   *
   * @summary 建立課程過濾事工團主檔
   * @param {CreateCourseManagementFilterPastoralCommand} [createCourseManagementFilterPastoralCommand]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CourseManagementFilterPastoralApi
   */
  public createCourseManagementFilterPastoral(
    createCourseManagementFilterPastoralCommand?: CreateCourseManagementFilterPastoralCommand,
    options?: AxiosRequestConfig
  ) {
    return CourseManagementFilterPastoralApiFp(this.configuration)
      .createCourseManagementFilterPastoral(createCourseManagementFilterPastoralCommand, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary 刪除課程過濾事工團主檔
   * @param {DeleteCourseManagementFilterPastoralCommand} [deleteCourseManagementFilterPastoralCommand]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CourseManagementFilterPastoralApi
   */
  public deleteCourseManagementFilterPastoral(
    deleteCourseManagementFilterPastoralCommand?: DeleteCourseManagementFilterPastoralCommand,
    options?: AxiosRequestConfig
  ) {
    return CourseManagementFilterPastoralApiFp(this.configuration)
      .deleteCourseManagementFilterPastoral(deleteCourseManagementFilterPastoralCommand, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary 查詢課程過濾事工團主檔
   * @param {FetchAllCourseManagementFilterPastoralRequest} [fetchAllCourseManagementFilterPastoralRequest]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CourseManagementFilterPastoralApi
   */
  public fetchCourseManagementFilterPastorals(
    fetchAllCourseManagementFilterPastoralRequest?: FetchAllCourseManagementFilterPastoralRequest,
    options?: AxiosRequestConfig
  ) {
    return CourseManagementFilterPastoralApiFp(this.configuration)
      .fetchCourseManagementFilterPastorals(fetchAllCourseManagementFilterPastoralRequest, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary 查詢課程過濾事工團主檔
   * @param {number} [id] id
   * @param {number} [courseManagementFilterId] 課程樣板過濾CourseManagementFilter.Id
   * @param {number} [pastoralId] Pastoral.Id
   * @param {Array<SortProperty>} [sortProperties] 查詢欄位排序
   * @param {number} [page] 目前頁數
   * @param {number} [size] 每頁筆數
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CourseManagementFilterPastoralApi
   */
  public findCourseManagementFilterPastoral(
    id?: number,
    courseManagementFilterId?: number,
    pastoralId?: number,
    sortProperties?: Array<SortProperty>,
    page?: number,
    size?: number,
    options?: AxiosRequestConfig
  ) {
    return CourseManagementFilterPastoralApiFp(this.configuration)
      .findCourseManagementFilterPastoral(id, courseManagementFilterId, pastoralId, sortProperties, page, size, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary 以 Id 查詢列表
   * @param {number} id
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CourseManagementFilterPastoralApi
   */
  public getCourseManagementFilterPastoral(id: number, options?: AxiosRequestConfig) {
    return CourseManagementFilterPastoralApiFp(this.configuration)
      .getCourseManagementFilterPastoral(id, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary 修改課程過濾事工團主檔
   * @param {UpdateCourseManagementFilterPastoralCommand} [updateCourseManagementFilterPastoralCommand]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CourseManagementFilterPastoralApi
   */
  public putCourseManagementFilterPastoral(
    updateCourseManagementFilterPastoralCommand?: UpdateCourseManagementFilterPastoralCommand,
    options?: AxiosRequestConfig
  ) {
    return CourseManagementFilterPastoralApiFp(this.configuration)
      .putCourseManagementFilterPastoral(updateCourseManagementFilterPastoralCommand, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary 查詢列表  (*dynamic sort support)
   * @param {QueryCourseManagementFilterPastoralRequest} [queryCourseManagementFilterPastoralRequest]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CourseManagementFilterPastoralApi
   */
  public queryCourseManagementFilterPastorals(
    queryCourseManagementFilterPastoralRequest?: QueryCourseManagementFilterPastoralRequest,
    options?: AxiosRequestConfig
  ) {
    return CourseManagementFilterPastoralApiFp(this.configuration)
      .queryCourseManagementFilterPastorals(queryCourseManagementFilterPastoralRequest, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary 刪除主檔
   * @param {number} id
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CourseManagementFilterPastoralApi
   */
  public removeCourseManagementFilterPastoral(id: number, options?: AxiosRequestConfig) {
    return CourseManagementFilterPastoralApiFp(this.configuration)
      .removeCourseManagementFilterPastoral(id, options)
      .then((request) => request(this.axios, this.basePath));
  }
}

/**
 * CourseManagementFilterRespApi - axios parameter creator
 * @export
 */
export const CourseManagementFilterRespApiAxiosParamCreator = function (configuration?: Configuration) {
  return {
    /**
     *
     * @summary 建立課程過濾職份主檔檔
     * @param {CreateCourseManagementFilterRespCommand} [createCourseManagementFilterRespCommand]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createCourseManagementFilterResp: async (
      createCourseManagementFilterRespCommand?: CreateCourseManagementFilterRespCommand,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/courseManagementFilterResp`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: "POST", ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication Example-id-1 required
      await setApiKeyToObject(localVarHeaderParameter, "Example-id-1", configuration);

      // authentication JWT_Authorization required
      await setApiKeyToObject(localVarHeaderParameter, "authorization", configuration);

      // authentication example-id-2 required
      await setApiKeyToObject(localVarHeaderParameter, "example-id-2", configuration);

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      localVarRequestOptions.data = serializeDataIfNeeded(
        createCourseManagementFilterRespCommand,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary 刪除課程過濾職份主檔
     * @param {DeleteCourseManagementFilterRespCommand} [deleteCourseManagementFilterRespCommand]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteCourseManagementFilterResp: async (
      deleteCourseManagementFilterRespCommand?: DeleteCourseManagementFilterRespCommand,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/courseManagementFilterResp`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: "DELETE", ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication Example-id-1 required
      await setApiKeyToObject(localVarHeaderParameter, "Example-id-1", configuration);

      // authentication JWT_Authorization required
      await setApiKeyToObject(localVarHeaderParameter, "authorization", configuration);

      // authentication example-id-2 required
      await setApiKeyToObject(localVarHeaderParameter, "example-id-2", configuration);

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      localVarRequestOptions.data = serializeDataIfNeeded(
        deleteCourseManagementFilterRespCommand,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary 查詢課程過濾職份主檔
     * @param {FetchAllCourseManagementFilterRespRequest} [fetchAllCourseManagementFilterRespRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    fetchCourseManagementFilterResps: async (
      fetchAllCourseManagementFilterRespRequest?: FetchAllCourseManagementFilterRespRequest,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/courseManagementFilterResp/fetch`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: "POST", ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication Example-id-1 required
      await setApiKeyToObject(localVarHeaderParameter, "Example-id-1", configuration);

      // authentication JWT_Authorization required
      await setApiKeyToObject(localVarHeaderParameter, "authorization", configuration);

      // authentication example-id-2 required
      await setApiKeyToObject(localVarHeaderParameter, "example-id-2", configuration);

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      localVarRequestOptions.data = serializeDataIfNeeded(
        fetchAllCourseManagementFilterRespRequest,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary 查詢課程過濾職份主檔
     * @param {number} [id] id
     * @param {number} [courseManagementFilterId] 課程樣板過濾CourseManagementFilter.Id
     * @param {number} [ministryRespId] MinistryResp.Id
     * @param {Array<SortProperty>} [sortProperties] 查詢欄位排序
     * @param {number} [page] 目前頁數
     * @param {number} [size] 每頁筆數
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    findCourseManagementFilterResp: async (
      id?: number,
      courseManagementFilterId?: number,
      ministryRespId?: number,
      sortProperties?: Array<SortProperty>,
      page?: number,
      size?: number,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/courseManagementFilterResp`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: "GET", ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication Example-id-1 required
      await setApiKeyToObject(localVarHeaderParameter, "Example-id-1", configuration);

      // authentication JWT_Authorization required
      await setApiKeyToObject(localVarHeaderParameter, "authorization", configuration);

      // authentication example-id-2 required
      await setApiKeyToObject(localVarHeaderParameter, "example-id-2", configuration);

      if (id !== undefined) {
        localVarQueryParameter["id"] = id;
      }

      if (courseManagementFilterId !== undefined) {
        localVarQueryParameter["courseManagementFilterId"] = courseManagementFilterId;
      }

      if (ministryRespId !== undefined) {
        localVarQueryParameter["ministryRespId"] = ministryRespId;
      }

      if (sortProperties) {
        localVarQueryParameter["sortProperties"] = sortProperties;
      }

      if (page !== undefined) {
        localVarQueryParameter["page"] = page;
      }

      if (size !== undefined) {
        localVarQueryParameter["size"] = size;
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary 以 Id 查詢列表
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getCourseManagementFilterResp: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists("getCourseManagementFilterResp", "id", id);
      const localVarPath = `/api/courseManagementFilterResp/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(id)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: "GET", ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication Example-id-1 required
      await setApiKeyToObject(localVarHeaderParameter, "Example-id-1", configuration);

      // authentication JWT_Authorization required
      await setApiKeyToObject(localVarHeaderParameter, "authorization", configuration);

      // authentication example-id-2 required
      await setApiKeyToObject(localVarHeaderParameter, "example-id-2", configuration);

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary 修改課程過濾職份主檔
     * @param {UpdateCourseManagementFilterRespCommand} [updateCourseManagementFilterRespCommand]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    putCourseManagementFilterResp: async (
      updateCourseManagementFilterRespCommand?: UpdateCourseManagementFilterRespCommand,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/courseManagementFilterResp`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: "PUT", ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication Example-id-1 required
      await setApiKeyToObject(localVarHeaderParameter, "Example-id-1", configuration);

      // authentication JWT_Authorization required
      await setApiKeyToObject(localVarHeaderParameter, "authorization", configuration);

      // authentication example-id-2 required
      await setApiKeyToObject(localVarHeaderParameter, "example-id-2", configuration);

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      localVarRequestOptions.data = serializeDataIfNeeded(
        updateCourseManagementFilterRespCommand,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary 查詢列表  (*dynamic sort support)
     * @param {QueryCourseManagementFilterRespRequest} [queryCourseManagementFilterRespRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    queryCourseManagementFilterResps: async (
      queryCourseManagementFilterRespRequest?: QueryCourseManagementFilterRespRequest,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/courseManagementFilterResp/query`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: "POST", ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication Example-id-1 required
      await setApiKeyToObject(localVarHeaderParameter, "Example-id-1", configuration);

      // authentication JWT_Authorization required
      await setApiKeyToObject(localVarHeaderParameter, "authorization", configuration);

      // authentication example-id-2 required
      await setApiKeyToObject(localVarHeaderParameter, "example-id-2", configuration);

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      localVarRequestOptions.data = serializeDataIfNeeded(
        queryCourseManagementFilterRespRequest,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary 刪除主檔
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    removeCourseManagementFilterResp: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists("removeCourseManagementFilterResp", "id", id);
      const localVarPath = `/api/courseManagementFilterResp/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(id)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: "DELETE", ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication Example-id-1 required
      await setApiKeyToObject(localVarHeaderParameter, "Example-id-1", configuration);

      // authentication JWT_Authorization required
      await setApiKeyToObject(localVarHeaderParameter, "authorization", configuration);

      // authentication example-id-2 required
      await setApiKeyToObject(localVarHeaderParameter, "example-id-2", configuration);

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * CourseManagementFilterRespApi - functional programming interface
 * @export
 */
export const CourseManagementFilterRespApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = CourseManagementFilterRespApiAxiosParamCreator(configuration);
  return {
    /**
     *
     * @summary 建立課程過濾職份主檔檔
     * @param {CreateCourseManagementFilterRespCommand} [createCourseManagementFilterRespCommand]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async createCourseManagementFilterResp(
      createCourseManagementFilterRespCommand?: CreateCourseManagementFilterRespCommand,
      options?: AxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<CourseManagementFilterRespViewApiResponse>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.createCourseManagementFilterResp(
        createCourseManagementFilterRespCommand,
        options
      );
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     *
     * @summary 刪除課程過濾職份主檔
     * @param {DeleteCourseManagementFilterRespCommand} [deleteCourseManagementFilterRespCommand]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async deleteCourseManagementFilterResp(
      deleteCourseManagementFilterRespCommand?: DeleteCourseManagementFilterRespCommand,
      options?: AxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<CourseManagementFilterRespViewApiResponse>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.deleteCourseManagementFilterResp(
        deleteCourseManagementFilterRespCommand,
        options
      );
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     *
     * @summary 查詢課程過濾職份主檔
     * @param {FetchAllCourseManagementFilterRespRequest} [fetchAllCourseManagementFilterRespRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async fetchCourseManagementFilterResps(
      fetchAllCourseManagementFilterRespRequest?: FetchAllCourseManagementFilterRespRequest,
      options?: AxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<CourseManagementFilterRespViewListApiResponse>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.fetchCourseManagementFilterResps(
        fetchAllCourseManagementFilterRespRequest,
        options
      );
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     *
     * @summary 查詢課程過濾職份主檔
     * @param {number} [id] id
     * @param {number} [courseManagementFilterId] 課程樣板過濾CourseManagementFilter.Id
     * @param {number} [ministryRespId] MinistryResp.Id
     * @param {Array<SortProperty>} [sortProperties] 查詢欄位排序
     * @param {number} [page] 目前頁數
     * @param {number} [size] 每頁筆數
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async findCourseManagementFilterResp(
      id?: number,
      courseManagementFilterId?: number,
      ministryRespId?: number,
      sortProperties?: Array<SortProperty>,
      page?: number,
      size?: number,
      options?: AxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<CourseManagementFilterRespViewPageApiResponse>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.findCourseManagementFilterResp(
        id,
        courseManagementFilterId,
        ministryRespId,
        sortProperties,
        page,
        size,
        options
      );
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     *
     * @summary 以 Id 查詢列表
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getCourseManagementFilterResp(
      id: number,
      options?: AxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<CourseManagementFilterRespViewApiResponse>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getCourseManagementFilterResp(id, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     *
     * @summary 修改課程過濾職份主檔
     * @param {UpdateCourseManagementFilterRespCommand} [updateCourseManagementFilterRespCommand]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async putCourseManagementFilterResp(
      updateCourseManagementFilterRespCommand?: UpdateCourseManagementFilterRespCommand,
      options?: AxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<CourseManagementFilterRespViewApiResponse>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.putCourseManagementFilterResp(
        updateCourseManagementFilterRespCommand,
        options
      );
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     *
     * @summary 查詢列表  (*dynamic sort support)
     * @param {QueryCourseManagementFilterRespRequest} [queryCourseManagementFilterRespRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async queryCourseManagementFilterResps(
      queryCourseManagementFilterRespRequest?: QueryCourseManagementFilterRespRequest,
      options?: AxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<CourseManagementFilterRespViewPageApiResponse>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.queryCourseManagementFilterResps(
        queryCourseManagementFilterRespRequest,
        options
      );
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     *
     * @summary 刪除主檔
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async removeCourseManagementFilterResp(
      id: number,
      options?: AxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<Int32ApiResponse>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.removeCourseManagementFilterResp(id, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
  };
};

/**
 * CourseManagementFilterRespApi - factory interface
 * @export
 */
export const CourseManagementFilterRespApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance
) {
  const localVarFp = CourseManagementFilterRespApiFp(configuration);
  return {
    /**
     *
     * @summary 建立課程過濾職份主檔檔
     * @param {CreateCourseManagementFilterRespCommand} [createCourseManagementFilterRespCommand]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createCourseManagementFilterResp(
      createCourseManagementFilterRespCommand?: CreateCourseManagementFilterRespCommand,
      options?: any
    ): Promise<CourseManagementFilterRespViewApiResponse> {
      return localVarFp
        .createCourseManagementFilterResp(createCourseManagementFilterRespCommand, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary 刪除課程過濾職份主檔
     * @param {DeleteCourseManagementFilterRespCommand} [deleteCourseManagementFilterRespCommand]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteCourseManagementFilterResp(
      deleteCourseManagementFilterRespCommand?: DeleteCourseManagementFilterRespCommand,
      options?: any
    ): Promise<CourseManagementFilterRespViewApiResponse> {
      return localVarFp
        .deleteCourseManagementFilterResp(deleteCourseManagementFilterRespCommand, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary 查詢課程過濾職份主檔
     * @param {FetchAllCourseManagementFilterRespRequest} [fetchAllCourseManagementFilterRespRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    fetchCourseManagementFilterResps(
      fetchAllCourseManagementFilterRespRequest?: FetchAllCourseManagementFilterRespRequest,
      options?: any
    ): Promise<CourseManagementFilterRespViewListApiResponse> {
      return localVarFp
        .fetchCourseManagementFilterResps(fetchAllCourseManagementFilterRespRequest, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary 查詢課程過濾職份主檔
     * @param {number} [id] id
     * @param {number} [courseManagementFilterId] 課程樣板過濾CourseManagementFilter.Id
     * @param {number} [ministryRespId] MinistryResp.Id
     * @param {Array<SortProperty>} [sortProperties] 查詢欄位排序
     * @param {number} [page] 目前頁數
     * @param {number} [size] 每頁筆數
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    findCourseManagementFilterResp(
      id?: number,
      courseManagementFilterId?: number,
      ministryRespId?: number,
      sortProperties?: Array<SortProperty>,
      page?: number,
      size?: number,
      options?: any
    ): Promise<CourseManagementFilterRespViewPageApiResponse> {
      return localVarFp
        .findCourseManagementFilterResp(
          id,
          courseManagementFilterId,
          ministryRespId,
          sortProperties,
          page,
          size,
          options
        )
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary 以 Id 查詢列表
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getCourseManagementFilterResp(id: number, options?: any): Promise<CourseManagementFilterRespViewApiResponse> {
      return localVarFp.getCourseManagementFilterResp(id, options).then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary 修改課程過濾職份主檔
     * @param {UpdateCourseManagementFilterRespCommand} [updateCourseManagementFilterRespCommand]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    putCourseManagementFilterResp(
      updateCourseManagementFilterRespCommand?: UpdateCourseManagementFilterRespCommand,
      options?: any
    ): Promise<CourseManagementFilterRespViewApiResponse> {
      return localVarFp
        .putCourseManagementFilterResp(updateCourseManagementFilterRespCommand, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary 查詢列表  (*dynamic sort support)
     * @param {QueryCourseManagementFilterRespRequest} [queryCourseManagementFilterRespRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    queryCourseManagementFilterResps(
      queryCourseManagementFilterRespRequest?: QueryCourseManagementFilterRespRequest,
      options?: any
    ): Promise<CourseManagementFilterRespViewPageApiResponse> {
      return localVarFp
        .queryCourseManagementFilterResps(queryCourseManagementFilterRespRequest, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary 刪除主檔
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    removeCourseManagementFilterResp(id: number, options?: any): Promise<Int32ApiResponse> {
      return localVarFp.removeCourseManagementFilterResp(id, options).then((request) => request(axios, basePath));
    },
  };
};

/**
 * CourseManagementFilterRespApi - interface
 * @export
 * @interface CourseManagementFilterRespApi
 */
export interface CourseManagementFilterRespApiInterface {
  /**
   *
   * @summary 建立課程過濾職份主檔檔
   * @param {CreateCourseManagementFilterRespCommand} [createCourseManagementFilterRespCommand]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CourseManagementFilterRespApiInterface
   */
  createCourseManagementFilterResp(
    createCourseManagementFilterRespCommand?: CreateCourseManagementFilterRespCommand,
    options?: AxiosRequestConfig
  ): Promise<CourseManagementFilterRespViewApiResponse>;

  /**
   *
   * @summary 刪除課程過濾職份主檔
   * @param {DeleteCourseManagementFilterRespCommand} [deleteCourseManagementFilterRespCommand]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CourseManagementFilterRespApiInterface
   */
  deleteCourseManagementFilterResp(
    deleteCourseManagementFilterRespCommand?: DeleteCourseManagementFilterRespCommand,
    options?: AxiosRequestConfig
  ): Promise<CourseManagementFilterRespViewApiResponse>;

  /**
   *
   * @summary 查詢課程過濾職份主檔
   * @param {FetchAllCourseManagementFilterRespRequest} [fetchAllCourseManagementFilterRespRequest]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CourseManagementFilterRespApiInterface
   */
  fetchCourseManagementFilterResps(
    fetchAllCourseManagementFilterRespRequest?: FetchAllCourseManagementFilterRespRequest,
    options?: AxiosRequestConfig
  ): Promise<CourseManagementFilterRespViewListApiResponse>;

  /**
   *
   * @summary 查詢課程過濾職份主檔
   * @param {number} [id] id
   * @param {number} [courseManagementFilterId] 課程樣板過濾CourseManagementFilter.Id
   * @param {number} [ministryRespId] MinistryResp.Id
   * @param {Array<SortProperty>} [sortProperties] 查詢欄位排序
   * @param {number} [page] 目前頁數
   * @param {number} [size] 每頁筆數
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CourseManagementFilterRespApiInterface
   */
  findCourseManagementFilterResp(
    id?: number,
    courseManagementFilterId?: number,
    ministryRespId?: number,
    sortProperties?: Array<SortProperty>,
    page?: number,
    size?: number,
    options?: AxiosRequestConfig
  ): Promise<CourseManagementFilterRespViewPageApiResponse>;

  /**
   *
   * @summary 以 Id 查詢列表
   * @param {number} id
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CourseManagementFilterRespApiInterface
   */
  getCourseManagementFilterResp(
    id: number,
    options?: AxiosRequestConfig
  ): Promise<CourseManagementFilterRespViewApiResponse>;

  /**
   *
   * @summary 修改課程過濾職份主檔
   * @param {UpdateCourseManagementFilterRespCommand} [updateCourseManagementFilterRespCommand]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CourseManagementFilterRespApiInterface
   */
  putCourseManagementFilterResp(
    updateCourseManagementFilterRespCommand?: UpdateCourseManagementFilterRespCommand,
    options?: AxiosRequestConfig
  ): Promise<CourseManagementFilterRespViewApiResponse>;

  /**
   *
   * @summary 查詢列表  (*dynamic sort support)
   * @param {QueryCourseManagementFilterRespRequest} [queryCourseManagementFilterRespRequest]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CourseManagementFilterRespApiInterface
   */
  queryCourseManagementFilterResps(
    queryCourseManagementFilterRespRequest?: QueryCourseManagementFilterRespRequest,
    options?: AxiosRequestConfig
  ): Promise<CourseManagementFilterRespViewPageApiResponse>;

  /**
   *
   * @summary 刪除主檔
   * @param {number} id
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CourseManagementFilterRespApiInterface
   */
  removeCourseManagementFilterResp(id: number, options?: AxiosRequestConfig): Promise<Int32ApiResponse>;
}

/**
 * CourseManagementFilterRespApi - object-oriented interface
 * @export
 * @class CourseManagementFilterRespApi
 * @extends {BaseAPI}
 */
export class CourseManagementFilterRespApi extends BaseAPI implements CourseManagementFilterRespApiInterface {
  /**
   *
   * @summary 建立課程過濾職份主檔檔
   * @param {CreateCourseManagementFilterRespCommand} [createCourseManagementFilterRespCommand]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CourseManagementFilterRespApi
   */
  public createCourseManagementFilterResp(
    createCourseManagementFilterRespCommand?: CreateCourseManagementFilterRespCommand,
    options?: AxiosRequestConfig
  ) {
    return CourseManagementFilterRespApiFp(this.configuration)
      .createCourseManagementFilterResp(createCourseManagementFilterRespCommand, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary 刪除課程過濾職份主檔
   * @param {DeleteCourseManagementFilterRespCommand} [deleteCourseManagementFilterRespCommand]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CourseManagementFilterRespApi
   */
  public deleteCourseManagementFilterResp(
    deleteCourseManagementFilterRespCommand?: DeleteCourseManagementFilterRespCommand,
    options?: AxiosRequestConfig
  ) {
    return CourseManagementFilterRespApiFp(this.configuration)
      .deleteCourseManagementFilterResp(deleteCourseManagementFilterRespCommand, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary 查詢課程過濾職份主檔
   * @param {FetchAllCourseManagementFilterRespRequest} [fetchAllCourseManagementFilterRespRequest]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CourseManagementFilterRespApi
   */
  public fetchCourseManagementFilterResps(
    fetchAllCourseManagementFilterRespRequest?: FetchAllCourseManagementFilterRespRequest,
    options?: AxiosRequestConfig
  ) {
    return CourseManagementFilterRespApiFp(this.configuration)
      .fetchCourseManagementFilterResps(fetchAllCourseManagementFilterRespRequest, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary 查詢課程過濾職份主檔
   * @param {number} [id] id
   * @param {number} [courseManagementFilterId] 課程樣板過濾CourseManagementFilter.Id
   * @param {number} [ministryRespId] MinistryResp.Id
   * @param {Array<SortProperty>} [sortProperties] 查詢欄位排序
   * @param {number} [page] 目前頁數
   * @param {number} [size] 每頁筆數
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CourseManagementFilterRespApi
   */
  public findCourseManagementFilterResp(
    id?: number,
    courseManagementFilterId?: number,
    ministryRespId?: number,
    sortProperties?: Array<SortProperty>,
    page?: number,
    size?: number,
    options?: AxiosRequestConfig
  ) {
    return CourseManagementFilterRespApiFp(this.configuration)
      .findCourseManagementFilterResp(id, courseManagementFilterId, ministryRespId, sortProperties, page, size, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary 以 Id 查詢列表
   * @param {number} id
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CourseManagementFilterRespApi
   */
  public getCourseManagementFilterResp(id: number, options?: AxiosRequestConfig) {
    return CourseManagementFilterRespApiFp(this.configuration)
      .getCourseManagementFilterResp(id, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary 修改課程過濾職份主檔
   * @param {UpdateCourseManagementFilterRespCommand} [updateCourseManagementFilterRespCommand]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CourseManagementFilterRespApi
   */
  public putCourseManagementFilterResp(
    updateCourseManagementFilterRespCommand?: UpdateCourseManagementFilterRespCommand,
    options?: AxiosRequestConfig
  ) {
    return CourseManagementFilterRespApiFp(this.configuration)
      .putCourseManagementFilterResp(updateCourseManagementFilterRespCommand, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary 查詢列表  (*dynamic sort support)
   * @param {QueryCourseManagementFilterRespRequest} [queryCourseManagementFilterRespRequest]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CourseManagementFilterRespApi
   */
  public queryCourseManagementFilterResps(
    queryCourseManagementFilterRespRequest?: QueryCourseManagementFilterRespRequest,
    options?: AxiosRequestConfig
  ) {
    return CourseManagementFilterRespApiFp(this.configuration)
      .queryCourseManagementFilterResps(queryCourseManagementFilterRespRequest, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary 刪除主檔
   * @param {number} id
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CourseManagementFilterRespApi
   */
  public removeCourseManagementFilterResp(id: number, options?: AxiosRequestConfig) {
    return CourseManagementFilterRespApiFp(this.configuration)
      .removeCourseManagementFilterResp(id, options)
      .then((request) => request(this.axios, this.basePath));
  }
}

/**
 * CourseManagementFilterUserApi - axios parameter creator
 * @export
 */
export const CourseManagementFilterUserApiAxiosParamCreator = function (configuration?: Configuration) {
  return {
    /**
     *
     * @summary 建立課程過濾職份主檔檔
     * @param {CreateCourseManagementFilterUserCommand} [createCourseManagementFilterUserCommand]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createCourseManagementFilterUser: async (
      createCourseManagementFilterUserCommand?: CreateCourseManagementFilterUserCommand,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/courseManagementFilterUser`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: "POST", ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication Example-id-1 required
      await setApiKeyToObject(localVarHeaderParameter, "Example-id-1", configuration);

      // authentication JWT_Authorization required
      await setApiKeyToObject(localVarHeaderParameter, "authorization", configuration);

      // authentication example-id-2 required
      await setApiKeyToObject(localVarHeaderParameter, "example-id-2", configuration);

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      localVarRequestOptions.data = serializeDataIfNeeded(
        createCourseManagementFilterUserCommand,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary 刪除課程過濾職份主檔
     * @param {DeleteCourseManagementFilterUserCommand} [deleteCourseManagementFilterUserCommand]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteCourseManagementFilterUser: async (
      deleteCourseManagementFilterUserCommand?: DeleteCourseManagementFilterUserCommand,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/courseManagementFilterUser`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: "DELETE", ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication Example-id-1 required
      await setApiKeyToObject(localVarHeaderParameter, "Example-id-1", configuration);

      // authentication JWT_Authorization required
      await setApiKeyToObject(localVarHeaderParameter, "authorization", configuration);

      // authentication example-id-2 required
      await setApiKeyToObject(localVarHeaderParameter, "example-id-2", configuration);

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      localVarRequestOptions.data = serializeDataIfNeeded(
        deleteCourseManagementFilterUserCommand,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary 查詢課程過濾職份主檔
     * @param {FetchAllCourseManagementFilterUserRequest} [fetchAllCourseManagementFilterUserRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    fetchCourseManagementFilterUsers: async (
      fetchAllCourseManagementFilterUserRequest?: FetchAllCourseManagementFilterUserRequest,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/courseManagementFilterUser/fetch`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: "POST", ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication Example-id-1 required
      await setApiKeyToObject(localVarHeaderParameter, "Example-id-1", configuration);

      // authentication JWT_Authorization required
      await setApiKeyToObject(localVarHeaderParameter, "authorization", configuration);

      // authentication example-id-2 required
      await setApiKeyToObject(localVarHeaderParameter, "example-id-2", configuration);

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      localVarRequestOptions.data = serializeDataIfNeeded(
        fetchAllCourseManagementFilterUserRequest,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary 查詢課程過濾職份主檔
     * @param {number} [id] id
     * @param {number} [courseManagementFilterId] 課程樣板過濾CourseManagementFilter.Id
     * @param {number} [userId] UserId.Id
     * @param {Array<SortProperty>} [sortProperties] 查詢欄位排序
     * @param {number} [page] 目前頁數
     * @param {number} [size] 每頁筆數
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    findCourseManagementFilterUser: async (
      id?: number,
      courseManagementFilterId?: number,
      userId?: number,
      sortProperties?: Array<SortProperty>,
      page?: number,
      size?: number,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/courseManagementFilterUser`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: "GET", ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication Example-id-1 required
      await setApiKeyToObject(localVarHeaderParameter, "Example-id-1", configuration);

      // authentication JWT_Authorization required
      await setApiKeyToObject(localVarHeaderParameter, "authorization", configuration);

      // authentication example-id-2 required
      await setApiKeyToObject(localVarHeaderParameter, "example-id-2", configuration);

      if (id !== undefined) {
        localVarQueryParameter["id"] = id;
      }

      if (courseManagementFilterId !== undefined) {
        localVarQueryParameter["courseManagementFilterId"] = courseManagementFilterId;
      }

      if (userId !== undefined) {
        localVarQueryParameter["userId"] = userId;
      }

      if (sortProperties) {
        localVarQueryParameter["sortProperties"] = sortProperties;
      }

      if (page !== undefined) {
        localVarQueryParameter["page"] = page;
      }

      if (size !== undefined) {
        localVarQueryParameter["size"] = size;
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary 以 Id 查詢列表
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getCourseManagementFilterUser: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists("getCourseManagementFilterUser", "id", id);
      const localVarPath = `/api/courseManagementFilterUser/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(id)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: "GET", ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication Example-id-1 required
      await setApiKeyToObject(localVarHeaderParameter, "Example-id-1", configuration);

      // authentication JWT_Authorization required
      await setApiKeyToObject(localVarHeaderParameter, "authorization", configuration);

      // authentication example-id-2 required
      await setApiKeyToObject(localVarHeaderParameter, "example-id-2", configuration);

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary 修改課程過濾職份主檔
     * @param {UpdateCourseManagementFilterUserCommand} [updateCourseManagementFilterUserCommand]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    putCourseManagementFilterUser: async (
      updateCourseManagementFilterUserCommand?: UpdateCourseManagementFilterUserCommand,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/courseManagementFilterUser`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: "PUT", ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication Example-id-1 required
      await setApiKeyToObject(localVarHeaderParameter, "Example-id-1", configuration);

      // authentication JWT_Authorization required
      await setApiKeyToObject(localVarHeaderParameter, "authorization", configuration);

      // authentication example-id-2 required
      await setApiKeyToObject(localVarHeaderParameter, "example-id-2", configuration);

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      localVarRequestOptions.data = serializeDataIfNeeded(
        updateCourseManagementFilterUserCommand,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary 查詢列表  (*dynamic sort support)
     * @param {QueryCourseManagementFilterUserRequest} [queryCourseManagementFilterUserRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    queryCourseManagementFilterUsers: async (
      queryCourseManagementFilterUserRequest?: QueryCourseManagementFilterUserRequest,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/courseManagementFilterUser/query`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: "POST", ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication Example-id-1 required
      await setApiKeyToObject(localVarHeaderParameter, "Example-id-1", configuration);

      // authentication JWT_Authorization required
      await setApiKeyToObject(localVarHeaderParameter, "authorization", configuration);

      // authentication example-id-2 required
      await setApiKeyToObject(localVarHeaderParameter, "example-id-2", configuration);

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      localVarRequestOptions.data = serializeDataIfNeeded(
        queryCourseManagementFilterUserRequest,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary 刪除主檔
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    removeCourseManagementFilterUser: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists("removeCourseManagementFilterUser", "id", id);
      const localVarPath = `/api/courseManagementFilterUser/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(id)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: "DELETE", ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication Example-id-1 required
      await setApiKeyToObject(localVarHeaderParameter, "Example-id-1", configuration);

      // authentication JWT_Authorization required
      await setApiKeyToObject(localVarHeaderParameter, "authorization", configuration);

      // authentication example-id-2 required
      await setApiKeyToObject(localVarHeaderParameter, "example-id-2", configuration);

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * CourseManagementFilterUserApi - functional programming interface
 * @export
 */
export const CourseManagementFilterUserApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = CourseManagementFilterUserApiAxiosParamCreator(configuration);
  return {
    /**
     *
     * @summary 建立課程過濾職份主檔檔
     * @param {CreateCourseManagementFilterUserCommand} [createCourseManagementFilterUserCommand]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async createCourseManagementFilterUser(
      createCourseManagementFilterUserCommand?: CreateCourseManagementFilterUserCommand,
      options?: AxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<CourseManagementFilterUserViewApiResponse>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.createCourseManagementFilterUser(
        createCourseManagementFilterUserCommand,
        options
      );
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     *
     * @summary 刪除課程過濾職份主檔
     * @param {DeleteCourseManagementFilterUserCommand} [deleteCourseManagementFilterUserCommand]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async deleteCourseManagementFilterUser(
      deleteCourseManagementFilterUserCommand?: DeleteCourseManagementFilterUserCommand,
      options?: AxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<CourseManagementFilterUserViewApiResponse>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.deleteCourseManagementFilterUser(
        deleteCourseManagementFilterUserCommand,
        options
      );
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     *
     * @summary 查詢課程過濾職份主檔
     * @param {FetchAllCourseManagementFilterUserRequest} [fetchAllCourseManagementFilterUserRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async fetchCourseManagementFilterUsers(
      fetchAllCourseManagementFilterUserRequest?: FetchAllCourseManagementFilterUserRequest,
      options?: AxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<CourseManagementFilterUserViewListApiResponse>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.fetchCourseManagementFilterUsers(
        fetchAllCourseManagementFilterUserRequest,
        options
      );
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     *
     * @summary 查詢課程過濾職份主檔
     * @param {number} [id] id
     * @param {number} [courseManagementFilterId] 課程樣板過濾CourseManagementFilter.Id
     * @param {number} [userId] UserId.Id
     * @param {Array<SortProperty>} [sortProperties] 查詢欄位排序
     * @param {number} [page] 目前頁數
     * @param {number} [size] 每頁筆數
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async findCourseManagementFilterUser(
      id?: number,
      courseManagementFilterId?: number,
      userId?: number,
      sortProperties?: Array<SortProperty>,
      page?: number,
      size?: number,
      options?: AxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<CourseManagementFilterUserViewPageApiResponse>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.findCourseManagementFilterUser(
        id,
        courseManagementFilterId,
        userId,
        sortProperties,
        page,
        size,
        options
      );
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     *
     * @summary 以 Id 查詢列表
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getCourseManagementFilterUser(
      id: number,
      options?: AxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<CourseManagementFilterUserViewApiResponse>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getCourseManagementFilterUser(id, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     *
     * @summary 修改課程過濾職份主檔
     * @param {UpdateCourseManagementFilterUserCommand} [updateCourseManagementFilterUserCommand]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async putCourseManagementFilterUser(
      updateCourseManagementFilterUserCommand?: UpdateCourseManagementFilterUserCommand,
      options?: AxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<CourseManagementFilterUserViewApiResponse>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.putCourseManagementFilterUser(
        updateCourseManagementFilterUserCommand,
        options
      );
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     *
     * @summary 查詢列表  (*dynamic sort support)
     * @param {QueryCourseManagementFilterUserRequest} [queryCourseManagementFilterUserRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async queryCourseManagementFilterUsers(
      queryCourseManagementFilterUserRequest?: QueryCourseManagementFilterUserRequest,
      options?: AxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<CourseManagementFilterUserViewPageApiResponse>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.queryCourseManagementFilterUsers(
        queryCourseManagementFilterUserRequest,
        options
      );
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     *
     * @summary 刪除主檔
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async removeCourseManagementFilterUser(
      id: number,
      options?: AxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<Int32ApiResponse>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.removeCourseManagementFilterUser(id, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
  };
};

/**
 * CourseManagementFilterUserApi - factory interface
 * @export
 */
export const CourseManagementFilterUserApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance
) {
  const localVarFp = CourseManagementFilterUserApiFp(configuration);
  return {
    /**
     *
     * @summary 建立課程過濾職份主檔檔
     * @param {CreateCourseManagementFilterUserCommand} [createCourseManagementFilterUserCommand]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createCourseManagementFilterUser(
      createCourseManagementFilterUserCommand?: CreateCourseManagementFilterUserCommand,
      options?: any
    ): Promise<CourseManagementFilterUserViewApiResponse> {
      return localVarFp
        .createCourseManagementFilterUser(createCourseManagementFilterUserCommand, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary 刪除課程過濾職份主檔
     * @param {DeleteCourseManagementFilterUserCommand} [deleteCourseManagementFilterUserCommand]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteCourseManagementFilterUser(
      deleteCourseManagementFilterUserCommand?: DeleteCourseManagementFilterUserCommand,
      options?: any
    ): Promise<CourseManagementFilterUserViewApiResponse> {
      return localVarFp
        .deleteCourseManagementFilterUser(deleteCourseManagementFilterUserCommand, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary 查詢課程過濾職份主檔
     * @param {FetchAllCourseManagementFilterUserRequest} [fetchAllCourseManagementFilterUserRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    fetchCourseManagementFilterUsers(
      fetchAllCourseManagementFilterUserRequest?: FetchAllCourseManagementFilterUserRequest,
      options?: any
    ): Promise<CourseManagementFilterUserViewListApiResponse> {
      return localVarFp
        .fetchCourseManagementFilterUsers(fetchAllCourseManagementFilterUserRequest, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary 查詢課程過濾職份主檔
     * @param {number} [id] id
     * @param {number} [courseManagementFilterId] 課程樣板過濾CourseManagementFilter.Id
     * @param {number} [userId] UserId.Id
     * @param {Array<SortProperty>} [sortProperties] 查詢欄位排序
     * @param {number} [page] 目前頁數
     * @param {number} [size] 每頁筆數
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    findCourseManagementFilterUser(
      id?: number,
      courseManagementFilterId?: number,
      userId?: number,
      sortProperties?: Array<SortProperty>,
      page?: number,
      size?: number,
      options?: any
    ): Promise<CourseManagementFilterUserViewPageApiResponse> {
      return localVarFp
        .findCourseManagementFilterUser(id, courseManagementFilterId, userId, sortProperties, page, size, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary 以 Id 查詢列表
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getCourseManagementFilterUser(id: number, options?: any): Promise<CourseManagementFilterUserViewApiResponse> {
      return localVarFp.getCourseManagementFilterUser(id, options).then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary 修改課程過濾職份主檔
     * @param {UpdateCourseManagementFilterUserCommand} [updateCourseManagementFilterUserCommand]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    putCourseManagementFilterUser(
      updateCourseManagementFilterUserCommand?: UpdateCourseManagementFilterUserCommand,
      options?: any
    ): Promise<CourseManagementFilterUserViewApiResponse> {
      return localVarFp
        .putCourseManagementFilterUser(updateCourseManagementFilterUserCommand, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary 查詢列表  (*dynamic sort support)
     * @param {QueryCourseManagementFilterUserRequest} [queryCourseManagementFilterUserRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    queryCourseManagementFilterUsers(
      queryCourseManagementFilterUserRequest?: QueryCourseManagementFilterUserRequest,
      options?: any
    ): Promise<CourseManagementFilterUserViewPageApiResponse> {
      return localVarFp
        .queryCourseManagementFilterUsers(queryCourseManagementFilterUserRequest, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary 刪除主檔
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    removeCourseManagementFilterUser(id: number, options?: any): Promise<Int32ApiResponse> {
      return localVarFp.removeCourseManagementFilterUser(id, options).then((request) => request(axios, basePath));
    },
  };
};

/**
 * CourseManagementFilterUserApi - interface
 * @export
 * @interface CourseManagementFilterUserApi
 */
export interface CourseManagementFilterUserApiInterface {
  /**
   *
   * @summary 建立課程過濾職份主檔檔
   * @param {CreateCourseManagementFilterUserCommand} [createCourseManagementFilterUserCommand]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CourseManagementFilterUserApiInterface
   */
  createCourseManagementFilterUser(
    createCourseManagementFilterUserCommand?: CreateCourseManagementFilterUserCommand,
    options?: AxiosRequestConfig
  ): Promise<CourseManagementFilterUserViewApiResponse>;

  /**
   *
   * @summary 刪除課程過濾職份主檔
   * @param {DeleteCourseManagementFilterUserCommand} [deleteCourseManagementFilterUserCommand]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CourseManagementFilterUserApiInterface
   */
  deleteCourseManagementFilterUser(
    deleteCourseManagementFilterUserCommand?: DeleteCourseManagementFilterUserCommand,
    options?: AxiosRequestConfig
  ): Promise<CourseManagementFilterUserViewApiResponse>;

  /**
   *
   * @summary 查詢課程過濾職份主檔
   * @param {FetchAllCourseManagementFilterUserRequest} [fetchAllCourseManagementFilterUserRequest]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CourseManagementFilterUserApiInterface
   */
  fetchCourseManagementFilterUsers(
    fetchAllCourseManagementFilterUserRequest?: FetchAllCourseManagementFilterUserRequest,
    options?: AxiosRequestConfig
  ): Promise<CourseManagementFilterUserViewListApiResponse>;

  /**
   *
   * @summary 查詢課程過濾職份主檔
   * @param {number} [id] id
   * @param {number} [courseManagementFilterId] 課程樣板過濾CourseManagementFilter.Id
   * @param {number} [userId] UserId.Id
   * @param {Array<SortProperty>} [sortProperties] 查詢欄位排序
   * @param {number} [page] 目前頁數
   * @param {number} [size] 每頁筆數
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CourseManagementFilterUserApiInterface
   */
  findCourseManagementFilterUser(
    id?: number,
    courseManagementFilterId?: number,
    userId?: number,
    sortProperties?: Array<SortProperty>,
    page?: number,
    size?: number,
    options?: AxiosRequestConfig
  ): Promise<CourseManagementFilterUserViewPageApiResponse>;

  /**
   *
   * @summary 以 Id 查詢列表
   * @param {number} id
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CourseManagementFilterUserApiInterface
   */
  getCourseManagementFilterUser(
    id: number,
    options?: AxiosRequestConfig
  ): Promise<CourseManagementFilterUserViewApiResponse>;

  /**
   *
   * @summary 修改課程過濾職份主檔
   * @param {UpdateCourseManagementFilterUserCommand} [updateCourseManagementFilterUserCommand]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CourseManagementFilterUserApiInterface
   */
  putCourseManagementFilterUser(
    updateCourseManagementFilterUserCommand?: UpdateCourseManagementFilterUserCommand,
    options?: AxiosRequestConfig
  ): Promise<CourseManagementFilterUserViewApiResponse>;

  /**
   *
   * @summary 查詢列表  (*dynamic sort support)
   * @param {QueryCourseManagementFilterUserRequest} [queryCourseManagementFilterUserRequest]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CourseManagementFilterUserApiInterface
   */
  queryCourseManagementFilterUsers(
    queryCourseManagementFilterUserRequest?: QueryCourseManagementFilterUserRequest,
    options?: AxiosRequestConfig
  ): Promise<CourseManagementFilterUserViewPageApiResponse>;

  /**
   *
   * @summary 刪除主檔
   * @param {number} id
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CourseManagementFilterUserApiInterface
   */
  removeCourseManagementFilterUser(id: number, options?: AxiosRequestConfig): Promise<Int32ApiResponse>;
}

/**
 * CourseManagementFilterUserApi - object-oriented interface
 * @export
 * @class CourseManagementFilterUserApi
 * @extends {BaseAPI}
 */
export class CourseManagementFilterUserApi extends BaseAPI implements CourseManagementFilterUserApiInterface {
  /**
   *
   * @summary 建立課程過濾職份主檔檔
   * @param {CreateCourseManagementFilterUserCommand} [createCourseManagementFilterUserCommand]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CourseManagementFilterUserApi
   */
  public createCourseManagementFilterUser(
    createCourseManagementFilterUserCommand?: CreateCourseManagementFilterUserCommand,
    options?: AxiosRequestConfig
  ) {
    return CourseManagementFilterUserApiFp(this.configuration)
      .createCourseManagementFilterUser(createCourseManagementFilterUserCommand, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary 刪除課程過濾職份主檔
   * @param {DeleteCourseManagementFilterUserCommand} [deleteCourseManagementFilterUserCommand]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CourseManagementFilterUserApi
   */
  public deleteCourseManagementFilterUser(
    deleteCourseManagementFilterUserCommand?: DeleteCourseManagementFilterUserCommand,
    options?: AxiosRequestConfig
  ) {
    return CourseManagementFilterUserApiFp(this.configuration)
      .deleteCourseManagementFilterUser(deleteCourseManagementFilterUserCommand, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary 查詢課程過濾職份主檔
   * @param {FetchAllCourseManagementFilterUserRequest} [fetchAllCourseManagementFilterUserRequest]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CourseManagementFilterUserApi
   */
  public fetchCourseManagementFilterUsers(
    fetchAllCourseManagementFilterUserRequest?: FetchAllCourseManagementFilterUserRequest,
    options?: AxiosRequestConfig
  ) {
    return CourseManagementFilterUserApiFp(this.configuration)
      .fetchCourseManagementFilterUsers(fetchAllCourseManagementFilterUserRequest, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary 查詢課程過濾職份主檔
   * @param {number} [id] id
   * @param {number} [courseManagementFilterId] 課程樣板過濾CourseManagementFilter.Id
   * @param {number} [userId] UserId.Id
   * @param {Array<SortProperty>} [sortProperties] 查詢欄位排序
   * @param {number} [page] 目前頁數
   * @param {number} [size] 每頁筆數
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CourseManagementFilterUserApi
   */
  public findCourseManagementFilterUser(
    id?: number,
    courseManagementFilterId?: number,
    userId?: number,
    sortProperties?: Array<SortProperty>,
    page?: number,
    size?: number,
    options?: AxiosRequestConfig
  ) {
    return CourseManagementFilterUserApiFp(this.configuration)
      .findCourseManagementFilterUser(id, courseManagementFilterId, userId, sortProperties, page, size, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary 以 Id 查詢列表
   * @param {number} id
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CourseManagementFilterUserApi
   */
  public getCourseManagementFilterUser(id: number, options?: AxiosRequestConfig) {
    return CourseManagementFilterUserApiFp(this.configuration)
      .getCourseManagementFilterUser(id, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary 修改課程過濾職份主檔
   * @param {UpdateCourseManagementFilterUserCommand} [updateCourseManagementFilterUserCommand]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CourseManagementFilterUserApi
   */
  public putCourseManagementFilterUser(
    updateCourseManagementFilterUserCommand?: UpdateCourseManagementFilterUserCommand,
    options?: AxiosRequestConfig
  ) {
    return CourseManagementFilterUserApiFp(this.configuration)
      .putCourseManagementFilterUser(updateCourseManagementFilterUserCommand, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary 查詢列表  (*dynamic sort support)
   * @param {QueryCourseManagementFilterUserRequest} [queryCourseManagementFilterUserRequest]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CourseManagementFilterUserApi
   */
  public queryCourseManagementFilterUsers(
    queryCourseManagementFilterUserRequest?: QueryCourseManagementFilterUserRequest,
    options?: AxiosRequestConfig
  ) {
    return CourseManagementFilterUserApiFp(this.configuration)
      .queryCourseManagementFilterUsers(queryCourseManagementFilterUserRequest, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary 刪除主檔
   * @param {number} id
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CourseManagementFilterUserApi
   */
  public removeCourseManagementFilterUser(id: number, options?: AxiosRequestConfig) {
    return CourseManagementFilterUserApiFp(this.configuration)
      .removeCourseManagementFilterUser(id, options)
      .then((request) => request(this.axios, this.basePath));
  }
}

/**
 * CourseManagementTypeApi - axios parameter creator
 * @export
 */
export const CourseManagementTypeApiAxiosParamCreator = function (configuration?: Configuration) {
  return {
    /**
     *
     * @summary 建立課程類別檔
     * @param {CreateCourseManagementTypeCommand} [createCourseManagementTypeCommand]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createCourseManagementType: async (
      createCourseManagementTypeCommand?: CreateCourseManagementTypeCommand,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/courseManagementType`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: "POST", ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication Example-id-1 required
      await setApiKeyToObject(localVarHeaderParameter, "Example-id-1", configuration);

      // authentication JWT_Authorization required
      await setApiKeyToObject(localVarHeaderParameter, "authorization", configuration);

      // authentication example-id-2 required
      await setApiKeyToObject(localVarHeaderParameter, "example-id-2", configuration);

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      localVarRequestOptions.data = serializeDataIfNeeded(
        createCourseManagementTypeCommand,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary 刪除課程類別
     * @param {DeleteCourseManagementTypeCommand} [deleteCourseManagementTypeCommand]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteCourseManagementType: async (
      deleteCourseManagementTypeCommand?: DeleteCourseManagementTypeCommand,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/courseManagementType`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: "DELETE", ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication Example-id-1 required
      await setApiKeyToObject(localVarHeaderParameter, "Example-id-1", configuration);

      // authentication JWT_Authorization required
      await setApiKeyToObject(localVarHeaderParameter, "authorization", configuration);

      // authentication example-id-2 required
      await setApiKeyToObject(localVarHeaderParameter, "example-id-2", configuration);

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      localVarRequestOptions.data = serializeDataIfNeeded(
        deleteCourseManagementTypeCommand,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary 查詢課程類別
     * @param {FetchAllCourseManagementTypeRequest} [fetchAllCourseManagementTypeRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    fetchCourseManagementTypes: async (
      fetchAllCourseManagementTypeRequest?: FetchAllCourseManagementTypeRequest,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/courseManagementType/fetch`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: "POST", ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication Example-id-1 required
      await setApiKeyToObject(localVarHeaderParameter, "Example-id-1", configuration);

      // authentication JWT_Authorization required
      await setApiKeyToObject(localVarHeaderParameter, "authorization", configuration);

      // authentication example-id-2 required
      await setApiKeyToObject(localVarHeaderParameter, "example-id-2", configuration);

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      localVarRequestOptions.data = serializeDataIfNeeded(
        fetchAllCourseManagementTypeRequest,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary 查詢課程類別
     * @param {number} [id] id
     * @param {string} [courseManagementTypeNo] 課程類別編號
     * @param {string} [name] 課程類別名稱
     * @param {string} [remark] 備註
     * @param {string} [statusCd] 狀態
     * @param {Array<SortProperty>} [sortProperties] 查詢欄位排序
     * @param {number} [page] 目前頁數
     * @param {number} [size] 每頁筆數
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    findCourseManagementType: async (
      id?: number,
      courseManagementTypeNo?: string,
      name?: string,
      remark?: string,
      statusCd?: string,
      sortProperties?: Array<SortProperty>,
      page?: number,
      size?: number,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/courseManagementType`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: "GET", ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication Example-id-1 required
      await setApiKeyToObject(localVarHeaderParameter, "Example-id-1", configuration);

      // authentication JWT_Authorization required
      await setApiKeyToObject(localVarHeaderParameter, "authorization", configuration);

      // authentication example-id-2 required
      await setApiKeyToObject(localVarHeaderParameter, "example-id-2", configuration);

      if (id !== undefined) {
        localVarQueryParameter["id"] = id;
      }

      if (courseManagementTypeNo !== undefined) {
        localVarQueryParameter["courseManagementTypeNo"] = courseManagementTypeNo;
      }

      if (name !== undefined) {
        localVarQueryParameter["name"] = name;
      }

      if (remark !== undefined) {
        localVarQueryParameter["remark"] = remark;
      }

      if (statusCd !== undefined) {
        localVarQueryParameter["statusCd"] = statusCd;
      }

      if (sortProperties) {
        localVarQueryParameter["sortProperties"] = sortProperties;
      }

      if (page !== undefined) {
        localVarQueryParameter["page"] = page;
      }

      if (size !== undefined) {
        localVarQueryParameter["size"] = size;
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary 以 Id 查詢列表
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getCourseManagementTypeOfId: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists("getCourseManagementTypeOfId", "id", id);
      const localVarPath = `/api/courseManagementType/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(id)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: "GET", ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication Example-id-1 required
      await setApiKeyToObject(localVarHeaderParameter, "Example-id-1", configuration);

      // authentication JWT_Authorization required
      await setApiKeyToObject(localVarHeaderParameter, "authorization", configuration);

      // authentication example-id-2 required
      await setApiKeyToObject(localVarHeaderParameter, "example-id-2", configuration);

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary 修改課程類別
     * @param {UpdateCourseManagementTypeCommand} [updateCourseManagementTypeCommand]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    putCourseManagementType: async (
      updateCourseManagementTypeCommand?: UpdateCourseManagementTypeCommand,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/courseManagementType`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: "PUT", ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication Example-id-1 required
      await setApiKeyToObject(localVarHeaderParameter, "Example-id-1", configuration);

      // authentication JWT_Authorization required
      await setApiKeyToObject(localVarHeaderParameter, "authorization", configuration);

      // authentication example-id-2 required
      await setApiKeyToObject(localVarHeaderParameter, "example-id-2", configuration);

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      localVarRequestOptions.data = serializeDataIfNeeded(
        updateCourseManagementTypeCommand,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary 查詢列表  (*dynamic sort support)
     * @param {QueryCourseManagementTypeRequest} [queryCourseManagementTypeRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    queryCourseManagementTypes: async (
      queryCourseManagementTypeRequest?: QueryCourseManagementTypeRequest,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/courseManagementType/query`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: "POST", ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication Example-id-1 required
      await setApiKeyToObject(localVarHeaderParameter, "Example-id-1", configuration);

      // authentication JWT_Authorization required
      await setApiKeyToObject(localVarHeaderParameter, "authorization", configuration);

      // authentication example-id-2 required
      await setApiKeyToObject(localVarHeaderParameter, "example-id-2", configuration);

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      localVarRequestOptions.data = serializeDataIfNeeded(
        queryCourseManagementTypeRequest,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary 刪除主檔
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    removeCourseManagementType: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists("removeCourseManagementType", "id", id);
      const localVarPath = `/api/courseManagementType/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(id)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: "DELETE", ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication Example-id-1 required
      await setApiKeyToObject(localVarHeaderParameter, "Example-id-1", configuration);

      // authentication JWT_Authorization required
      await setApiKeyToObject(localVarHeaderParameter, "authorization", configuration);

      // authentication example-id-2 required
      await setApiKeyToObject(localVarHeaderParameter, "example-id-2", configuration);

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * CourseManagementTypeApi - functional programming interface
 * @export
 */
export const CourseManagementTypeApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = CourseManagementTypeApiAxiosParamCreator(configuration);
  return {
    /**
     *
     * @summary 建立課程類別檔
     * @param {CreateCourseManagementTypeCommand} [createCourseManagementTypeCommand]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async createCourseManagementType(
      createCourseManagementTypeCommand?: CreateCourseManagementTypeCommand,
      options?: AxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<CourseManagementTypeViewApiResponse>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.createCourseManagementType(
        createCourseManagementTypeCommand,
        options
      );
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     *
     * @summary 刪除課程類別
     * @param {DeleteCourseManagementTypeCommand} [deleteCourseManagementTypeCommand]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async deleteCourseManagementType(
      deleteCourseManagementTypeCommand?: DeleteCourseManagementTypeCommand,
      options?: AxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<CourseManagementTypeViewApiResponse>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.deleteCourseManagementType(
        deleteCourseManagementTypeCommand,
        options
      );
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     *
     * @summary 查詢課程類別
     * @param {FetchAllCourseManagementTypeRequest} [fetchAllCourseManagementTypeRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async fetchCourseManagementTypes(
      fetchAllCourseManagementTypeRequest?: FetchAllCourseManagementTypeRequest,
      options?: AxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<CourseManagementTypeViewListApiResponse>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.fetchCourseManagementTypes(
        fetchAllCourseManagementTypeRequest,
        options
      );
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     *
     * @summary 查詢課程類別
     * @param {number} [id] id
     * @param {string} [courseManagementTypeNo] 課程類別編號
     * @param {string} [name] 課程類別名稱
     * @param {string} [remark] 備註
     * @param {string} [statusCd] 狀態
     * @param {Array<SortProperty>} [sortProperties] 查詢欄位排序
     * @param {number} [page] 目前頁數
     * @param {number} [size] 每頁筆數
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async findCourseManagementType(
      id?: number,
      courseManagementTypeNo?: string,
      name?: string,
      remark?: string,
      statusCd?: string,
      sortProperties?: Array<SortProperty>,
      page?: number,
      size?: number,
      options?: AxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<CourseManagementTypeViewPageApiResponse>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.findCourseManagementType(
        id,
        courseManagementTypeNo,
        name,
        remark,
        statusCd,
        sortProperties,
        page,
        size,
        options
      );
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     *
     * @summary 以 Id 查詢列表
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getCourseManagementTypeOfId(
      id: number,
      options?: AxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<CourseManagementTypeViewApiResponse>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getCourseManagementTypeOfId(id, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     *
     * @summary 修改課程類別
     * @param {UpdateCourseManagementTypeCommand} [updateCourseManagementTypeCommand]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async putCourseManagementType(
      updateCourseManagementTypeCommand?: UpdateCourseManagementTypeCommand,
      options?: AxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<CourseManagementTypeViewApiResponse>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.putCourseManagementType(
        updateCourseManagementTypeCommand,
        options
      );
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     *
     * @summary 查詢列表  (*dynamic sort support)
     * @param {QueryCourseManagementTypeRequest} [queryCourseManagementTypeRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async queryCourseManagementTypes(
      queryCourseManagementTypeRequest?: QueryCourseManagementTypeRequest,
      options?: AxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<CourseManagementTypeViewPageApiResponse>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.queryCourseManagementTypes(
        queryCourseManagementTypeRequest,
        options
      );
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     *
     * @summary 刪除主檔
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async removeCourseManagementType(
      id: number,
      options?: AxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<Int32ApiResponse>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.removeCourseManagementType(id, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
  };
};

/**
 * CourseManagementTypeApi - factory interface
 * @export
 */
export const CourseManagementTypeApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance
) {
  const localVarFp = CourseManagementTypeApiFp(configuration);
  return {
    /**
     *
     * @summary 建立課程類別檔
     * @param {CreateCourseManagementTypeCommand} [createCourseManagementTypeCommand]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createCourseManagementType(
      createCourseManagementTypeCommand?: CreateCourseManagementTypeCommand,
      options?: any
    ): Promise<CourseManagementTypeViewApiResponse> {
      return localVarFp
        .createCourseManagementType(createCourseManagementTypeCommand, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary 刪除課程類別
     * @param {DeleteCourseManagementTypeCommand} [deleteCourseManagementTypeCommand]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteCourseManagementType(
      deleteCourseManagementTypeCommand?: DeleteCourseManagementTypeCommand,
      options?: any
    ): Promise<CourseManagementTypeViewApiResponse> {
      return localVarFp
        .deleteCourseManagementType(deleteCourseManagementTypeCommand, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary 查詢課程類別
     * @param {FetchAllCourseManagementTypeRequest} [fetchAllCourseManagementTypeRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    fetchCourseManagementTypes(
      fetchAllCourseManagementTypeRequest?: FetchAllCourseManagementTypeRequest,
      options?: any
    ): Promise<CourseManagementTypeViewListApiResponse> {
      return localVarFp
        .fetchCourseManagementTypes(fetchAllCourseManagementTypeRequest, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary 查詢課程類別
     * @param {number} [id] id
     * @param {string} [courseManagementTypeNo] 課程類別編號
     * @param {string} [name] 課程類別名稱
     * @param {string} [remark] 備註
     * @param {string} [statusCd] 狀態
     * @param {Array<SortProperty>} [sortProperties] 查詢欄位排序
     * @param {number} [page] 目前頁數
     * @param {number} [size] 每頁筆數
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    findCourseManagementType(
      id?: number,
      courseManagementTypeNo?: string,
      name?: string,
      remark?: string,
      statusCd?: string,
      sortProperties?: Array<SortProperty>,
      page?: number,
      size?: number,
      options?: any
    ): Promise<CourseManagementTypeViewPageApiResponse> {
      return localVarFp
        .findCourseManagementType(
          id,
          courseManagementTypeNo,
          name,
          remark,
          statusCd,
          sortProperties,
          page,
          size,
          options
        )
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary 以 Id 查詢列表
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getCourseManagementTypeOfId(id: number, options?: any): Promise<CourseManagementTypeViewApiResponse> {
      return localVarFp.getCourseManagementTypeOfId(id, options).then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary 修改課程類別
     * @param {UpdateCourseManagementTypeCommand} [updateCourseManagementTypeCommand]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    putCourseManagementType(
      updateCourseManagementTypeCommand?: UpdateCourseManagementTypeCommand,
      options?: any
    ): Promise<CourseManagementTypeViewApiResponse> {
      return localVarFp
        .putCourseManagementType(updateCourseManagementTypeCommand, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary 查詢列表  (*dynamic sort support)
     * @param {QueryCourseManagementTypeRequest} [queryCourseManagementTypeRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    queryCourseManagementTypes(
      queryCourseManagementTypeRequest?: QueryCourseManagementTypeRequest,
      options?: any
    ): Promise<CourseManagementTypeViewPageApiResponse> {
      return localVarFp
        .queryCourseManagementTypes(queryCourseManagementTypeRequest, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary 刪除主檔
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    removeCourseManagementType(id: number, options?: any): Promise<Int32ApiResponse> {
      return localVarFp.removeCourseManagementType(id, options).then((request) => request(axios, basePath));
    },
  };
};

/**
 * CourseManagementTypeApi - interface
 * @export
 * @interface CourseManagementTypeApi
 */
export interface CourseManagementTypeApiInterface {
  /**
   *
   * @summary 建立課程類別檔
   * @param {CreateCourseManagementTypeCommand} [createCourseManagementTypeCommand]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CourseManagementTypeApiInterface
   */
  createCourseManagementType(
    createCourseManagementTypeCommand?: CreateCourseManagementTypeCommand,
    options?: AxiosRequestConfig
  ): Promise<CourseManagementTypeViewApiResponse>;

  /**
   *
   * @summary 刪除課程類別
   * @param {DeleteCourseManagementTypeCommand} [deleteCourseManagementTypeCommand]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CourseManagementTypeApiInterface
   */
  deleteCourseManagementType(
    deleteCourseManagementTypeCommand?: DeleteCourseManagementTypeCommand,
    options?: AxiosRequestConfig
  ): Promise<CourseManagementTypeViewApiResponse>;

  /**
   *
   * @summary 查詢課程類別
   * @param {FetchAllCourseManagementTypeRequest} [fetchAllCourseManagementTypeRequest]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CourseManagementTypeApiInterface
   */
  fetchCourseManagementTypes(
    fetchAllCourseManagementTypeRequest?: FetchAllCourseManagementTypeRequest,
    options?: AxiosRequestConfig
  ): Promise<CourseManagementTypeViewListApiResponse>;

  /**
   *
   * @summary 查詢課程類別
   * @param {number} [id] id
   * @param {string} [courseManagementTypeNo] 課程類別編號
   * @param {string} [name] 課程類別名稱
   * @param {string} [remark] 備註
   * @param {string} [statusCd] 狀態
   * @param {Array<SortProperty>} [sortProperties] 查詢欄位排序
   * @param {number} [page] 目前頁數
   * @param {number} [size] 每頁筆數
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CourseManagementTypeApiInterface
   */
  findCourseManagementType(
    id?: number,
    courseManagementTypeNo?: string,
    name?: string,
    remark?: string,
    statusCd?: string,
    sortProperties?: Array<SortProperty>,
    page?: number,
    size?: number,
    options?: AxiosRequestConfig
  ): Promise<CourseManagementTypeViewPageApiResponse>;

  /**
   *
   * @summary 以 Id 查詢列表
   * @param {number} id
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CourseManagementTypeApiInterface
   */
  getCourseManagementTypeOfId(id: number, options?: AxiosRequestConfig): Promise<CourseManagementTypeViewApiResponse>;

  /**
   *
   * @summary 修改課程類別
   * @param {UpdateCourseManagementTypeCommand} [updateCourseManagementTypeCommand]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CourseManagementTypeApiInterface
   */
  putCourseManagementType(
    updateCourseManagementTypeCommand?: UpdateCourseManagementTypeCommand,
    options?: AxiosRequestConfig
  ): Promise<CourseManagementTypeViewApiResponse>;

  /**
   *
   * @summary 查詢列表  (*dynamic sort support)
   * @param {QueryCourseManagementTypeRequest} [queryCourseManagementTypeRequest]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CourseManagementTypeApiInterface
   */
  queryCourseManagementTypes(
    queryCourseManagementTypeRequest?: QueryCourseManagementTypeRequest,
    options?: AxiosRequestConfig
  ): Promise<CourseManagementTypeViewPageApiResponse>;

  /**
   *
   * @summary 刪除主檔
   * @param {number} id
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CourseManagementTypeApiInterface
   */
  removeCourseManagementType(id: number, options?: AxiosRequestConfig): Promise<Int32ApiResponse>;
}

/**
 * CourseManagementTypeApi - object-oriented interface
 * @export
 * @class CourseManagementTypeApi
 * @extends {BaseAPI}
 */
export class CourseManagementTypeApi extends BaseAPI implements CourseManagementTypeApiInterface {
  /**
   *
   * @summary 建立課程類別檔
   * @param {CreateCourseManagementTypeCommand} [createCourseManagementTypeCommand]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CourseManagementTypeApi
   */
  public createCourseManagementType(
    createCourseManagementTypeCommand?: CreateCourseManagementTypeCommand,
    options?: AxiosRequestConfig
  ) {
    return CourseManagementTypeApiFp(this.configuration)
      .createCourseManagementType(createCourseManagementTypeCommand, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary 刪除課程類別
   * @param {DeleteCourseManagementTypeCommand} [deleteCourseManagementTypeCommand]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CourseManagementTypeApi
   */
  public deleteCourseManagementType(
    deleteCourseManagementTypeCommand?: DeleteCourseManagementTypeCommand,
    options?: AxiosRequestConfig
  ) {
    return CourseManagementTypeApiFp(this.configuration)
      .deleteCourseManagementType(deleteCourseManagementTypeCommand, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary 查詢課程類別
   * @param {FetchAllCourseManagementTypeRequest} [fetchAllCourseManagementTypeRequest]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CourseManagementTypeApi
   */
  public fetchCourseManagementTypes(
    fetchAllCourseManagementTypeRequest?: FetchAllCourseManagementTypeRequest,
    options?: AxiosRequestConfig
  ) {
    return CourseManagementTypeApiFp(this.configuration)
      .fetchCourseManagementTypes(fetchAllCourseManagementTypeRequest, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary 查詢課程類別
   * @param {number} [id] id
   * @param {string} [courseManagementTypeNo] 課程類別編號
   * @param {string} [name] 課程類別名稱
   * @param {string} [remark] 備註
   * @param {string} [statusCd] 狀態
   * @param {Array<SortProperty>} [sortProperties] 查詢欄位排序
   * @param {number} [page] 目前頁數
   * @param {number} [size] 每頁筆數
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CourseManagementTypeApi
   */
  public findCourseManagementType(
    id?: number,
    courseManagementTypeNo?: string,
    name?: string,
    remark?: string,
    statusCd?: string,
    sortProperties?: Array<SortProperty>,
    page?: number,
    size?: number,
    options?: AxiosRequestConfig
  ) {
    return CourseManagementTypeApiFp(this.configuration)
      .findCourseManagementType(id, courseManagementTypeNo, name, remark, statusCd, sortProperties, page, size, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary 以 Id 查詢列表
   * @param {number} id
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CourseManagementTypeApi
   */
  public getCourseManagementTypeOfId(id: number, options?: AxiosRequestConfig) {
    return CourseManagementTypeApiFp(this.configuration)
      .getCourseManagementTypeOfId(id, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary 修改課程類別
   * @param {UpdateCourseManagementTypeCommand} [updateCourseManagementTypeCommand]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CourseManagementTypeApi
   */
  public putCourseManagementType(
    updateCourseManagementTypeCommand?: UpdateCourseManagementTypeCommand,
    options?: AxiosRequestConfig
  ) {
    return CourseManagementTypeApiFp(this.configuration)
      .putCourseManagementType(updateCourseManagementTypeCommand, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary 查詢列表  (*dynamic sort support)
   * @param {QueryCourseManagementTypeRequest} [queryCourseManagementTypeRequest]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CourseManagementTypeApi
   */
  public queryCourseManagementTypes(
    queryCourseManagementTypeRequest?: QueryCourseManagementTypeRequest,
    options?: AxiosRequestConfig
  ) {
    return CourseManagementTypeApiFp(this.configuration)
      .queryCourseManagementTypes(queryCourseManagementTypeRequest, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary 刪除主檔
   * @param {number} id
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CourseManagementTypeApi
   */
  public removeCourseManagementType(id: number, options?: AxiosRequestConfig) {
    return CourseManagementTypeApiFp(this.configuration)
      .removeCourseManagementType(id, options)
      .then((request) => request(this.axios, this.basePath));
  }
}

/**
 * CourseOrganizationApi - axios parameter creator
 * @export
 */
export const CourseOrganizationApiAxiosParamCreator = function (configuration?: Configuration) {
  return {
    /**
     *
     * @summary 建立課程堂點主檔檔
     * @param {CreateCourseOrganizationCommand} [createCourseOrganizationCommand]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createCourseOrganization: async (
      createCourseOrganizationCommand?: CreateCourseOrganizationCommand,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/courseOrganization`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: "POST", ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication Example-id-1 required
      await setApiKeyToObject(localVarHeaderParameter, "Example-id-1", configuration);

      // authentication JWT_Authorization required
      await setApiKeyToObject(localVarHeaderParameter, "authorization", configuration);

      // authentication example-id-2 required
      await setApiKeyToObject(localVarHeaderParameter, "example-id-2", configuration);

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      localVarRequestOptions.data = serializeDataIfNeeded(
        createCourseOrganizationCommand,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary 刪除課程堂點主檔
     * @param {DeleteCourseOrganizationCommand} [deleteCourseOrganizationCommand]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteCourseOrganization: async (
      deleteCourseOrganizationCommand?: DeleteCourseOrganizationCommand,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/courseOrganization`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: "DELETE", ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication Example-id-1 required
      await setApiKeyToObject(localVarHeaderParameter, "Example-id-1", configuration);

      // authentication JWT_Authorization required
      await setApiKeyToObject(localVarHeaderParameter, "authorization", configuration);

      // authentication example-id-2 required
      await setApiKeyToObject(localVarHeaderParameter, "example-id-2", configuration);

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      localVarRequestOptions.data = serializeDataIfNeeded(
        deleteCourseOrganizationCommand,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary 查詢堂點主檔
     * @param {FetchAllCourseOrganizationRequest} [fetchAllCourseOrganizationRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    fetchCourseOrganizations: async (
      fetchAllCourseOrganizationRequest?: FetchAllCourseOrganizationRequest,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/courseOrganization/fetch`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: "POST", ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication Example-id-1 required
      await setApiKeyToObject(localVarHeaderParameter, "Example-id-1", configuration);

      // authentication JWT_Authorization required
      await setApiKeyToObject(localVarHeaderParameter, "authorization", configuration);

      // authentication example-id-2 required
      await setApiKeyToObject(localVarHeaderParameter, "example-id-2", configuration);

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      localVarRequestOptions.data = serializeDataIfNeeded(
        fetchAllCourseOrganizationRequest,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary 查詢課程堂點主檔
     * @param {number} [id] id
     * @param {number} [courseId] 課程類別Course.Id
     * @param {number} [organizationId] Organization.Id
     * @param {Array<SortProperty>} [sortProperties] 查詢欄位排序
     * @param {number} [page] 目前頁數
     * @param {number} [size] 每頁筆數
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    findCourseOrganization: async (
      id?: number,
      courseId?: number,
      organizationId?: number,
      sortProperties?: Array<SortProperty>,
      page?: number,
      size?: number,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/courseOrganization`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: "GET", ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication Example-id-1 required
      await setApiKeyToObject(localVarHeaderParameter, "Example-id-1", configuration);

      // authentication JWT_Authorization required
      await setApiKeyToObject(localVarHeaderParameter, "authorization", configuration);

      // authentication example-id-2 required
      await setApiKeyToObject(localVarHeaderParameter, "example-id-2", configuration);

      if (id !== undefined) {
        localVarQueryParameter["id"] = id;
      }

      if (courseId !== undefined) {
        localVarQueryParameter["courseId"] = courseId;
      }

      if (organizationId !== undefined) {
        localVarQueryParameter["organizationId"] = organizationId;
      }

      if (sortProperties) {
        localVarQueryParameter["sortProperties"] = sortProperties;
      }

      if (page !== undefined) {
        localVarQueryParameter["page"] = page;
      }

      if (size !== undefined) {
        localVarQueryParameter["size"] = size;
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary 以 Id 查詢列表
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getCourseOrganization: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists("getCourseOrganization", "id", id);
      const localVarPath = `/api/courseOrganization/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(id)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: "GET", ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication Example-id-1 required
      await setApiKeyToObject(localVarHeaderParameter, "Example-id-1", configuration);

      // authentication JWT_Authorization required
      await setApiKeyToObject(localVarHeaderParameter, "authorization", configuration);

      // authentication example-id-2 required
      await setApiKeyToObject(localVarHeaderParameter, "example-id-2", configuration);

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary 修改課程堂點主檔
     * @param {UpdateCourseOrganizationCommand} [updateCourseOrganizationCommand]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    putCourseOrganization: async (
      updateCourseOrganizationCommand?: UpdateCourseOrganizationCommand,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/courseOrganization`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: "PUT", ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication Example-id-1 required
      await setApiKeyToObject(localVarHeaderParameter, "Example-id-1", configuration);

      // authentication JWT_Authorization required
      await setApiKeyToObject(localVarHeaderParameter, "authorization", configuration);

      // authentication example-id-2 required
      await setApiKeyToObject(localVarHeaderParameter, "example-id-2", configuration);

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      localVarRequestOptions.data = serializeDataIfNeeded(
        updateCourseOrganizationCommand,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary 查詢列表  (*dynamic sort support)
     * @param {QueryCourseOrganizationRequest} [queryCourseOrganizationRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    queryCourseOrganizations: async (
      queryCourseOrganizationRequest?: QueryCourseOrganizationRequest,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/courseOrganization/query`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: "POST", ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication Example-id-1 required
      await setApiKeyToObject(localVarHeaderParameter, "Example-id-1", configuration);

      // authentication JWT_Authorization required
      await setApiKeyToObject(localVarHeaderParameter, "authorization", configuration);

      // authentication example-id-2 required
      await setApiKeyToObject(localVarHeaderParameter, "example-id-2", configuration);

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      localVarRequestOptions.data = serializeDataIfNeeded(
        queryCourseOrganizationRequest,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary 刪除主檔
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    removeCourseOrganization: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists("removeCourseOrganization", "id", id);
      const localVarPath = `/api/courseOrganization/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(id)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: "DELETE", ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication Example-id-1 required
      await setApiKeyToObject(localVarHeaderParameter, "Example-id-1", configuration);

      // authentication JWT_Authorization required
      await setApiKeyToObject(localVarHeaderParameter, "authorization", configuration);

      // authentication example-id-2 required
      await setApiKeyToObject(localVarHeaderParameter, "example-id-2", configuration);

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * CourseOrganizationApi - functional programming interface
 * @export
 */
export const CourseOrganizationApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = CourseOrganizationApiAxiosParamCreator(configuration);
  return {
    /**
     *
     * @summary 建立課程堂點主檔檔
     * @param {CreateCourseOrganizationCommand} [createCourseOrganizationCommand]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async createCourseOrganization(
      createCourseOrganizationCommand?: CreateCourseOrganizationCommand,
      options?: AxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<CourseOrganizationViewApiResponse>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.createCourseOrganization(
        createCourseOrganizationCommand,
        options
      );
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     *
     * @summary 刪除課程堂點主檔
     * @param {DeleteCourseOrganizationCommand} [deleteCourseOrganizationCommand]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async deleteCourseOrganization(
      deleteCourseOrganizationCommand?: DeleteCourseOrganizationCommand,
      options?: AxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<CourseOrganizationViewApiResponse>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.deleteCourseOrganization(
        deleteCourseOrganizationCommand,
        options
      );
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     *
     * @summary 查詢堂點主檔
     * @param {FetchAllCourseOrganizationRequest} [fetchAllCourseOrganizationRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async fetchCourseOrganizations(
      fetchAllCourseOrganizationRequest?: FetchAllCourseOrganizationRequest,
      options?: AxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<CourseOrganizationViewListApiResponse>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.fetchCourseOrganizations(
        fetchAllCourseOrganizationRequest,
        options
      );
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     *
     * @summary 查詢課程堂點主檔
     * @param {number} [id] id
     * @param {number} [courseId] 課程類別Course.Id
     * @param {number} [organizationId] Organization.Id
     * @param {Array<SortProperty>} [sortProperties] 查詢欄位排序
     * @param {number} [page] 目前頁數
     * @param {number} [size] 每頁筆數
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async findCourseOrganization(
      id?: number,
      courseId?: number,
      organizationId?: number,
      sortProperties?: Array<SortProperty>,
      page?: number,
      size?: number,
      options?: AxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<CourseOrganizationViewPageApiResponse>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.findCourseOrganization(
        id,
        courseId,
        organizationId,
        sortProperties,
        page,
        size,
        options
      );
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     *
     * @summary 以 Id 查詢列表
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getCourseOrganization(
      id: number,
      options?: AxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<CourseOrganizationViewApiResponse>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getCourseOrganization(id, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     *
     * @summary 修改課程堂點主檔
     * @param {UpdateCourseOrganizationCommand} [updateCourseOrganizationCommand]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async putCourseOrganization(
      updateCourseOrganizationCommand?: UpdateCourseOrganizationCommand,
      options?: AxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<CourseOrganizationViewApiResponse>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.putCourseOrganization(
        updateCourseOrganizationCommand,
        options
      );
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     *
     * @summary 查詢列表  (*dynamic sort support)
     * @param {QueryCourseOrganizationRequest} [queryCourseOrganizationRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async queryCourseOrganizations(
      queryCourseOrganizationRequest?: QueryCourseOrganizationRequest,
      options?: AxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<CourseOrganizationViewPageApiResponse>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.queryCourseOrganizations(
        queryCourseOrganizationRequest,
        options
      );
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     *
     * @summary 刪除主檔
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async removeCourseOrganization(
      id: number,
      options?: AxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<Int32ApiResponse>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.removeCourseOrganization(id, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
  };
};

/**
 * CourseOrganizationApi - factory interface
 * @export
 */
export const CourseOrganizationApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance
) {
  const localVarFp = CourseOrganizationApiFp(configuration);
  return {
    /**
     *
     * @summary 建立課程堂點主檔檔
     * @param {CreateCourseOrganizationCommand} [createCourseOrganizationCommand]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createCourseOrganization(
      createCourseOrganizationCommand?: CreateCourseOrganizationCommand,
      options?: any
    ): Promise<CourseOrganizationViewApiResponse> {
      return localVarFp
        .createCourseOrganization(createCourseOrganizationCommand, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary 刪除課程堂點主檔
     * @param {DeleteCourseOrganizationCommand} [deleteCourseOrganizationCommand]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteCourseOrganization(
      deleteCourseOrganizationCommand?: DeleteCourseOrganizationCommand,
      options?: any
    ): Promise<CourseOrganizationViewApiResponse> {
      return localVarFp
        .deleteCourseOrganization(deleteCourseOrganizationCommand, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary 查詢堂點主檔
     * @param {FetchAllCourseOrganizationRequest} [fetchAllCourseOrganizationRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    fetchCourseOrganizations(
      fetchAllCourseOrganizationRequest?: FetchAllCourseOrganizationRequest,
      options?: any
    ): Promise<CourseOrganizationViewListApiResponse> {
      return localVarFp
        .fetchCourseOrganizations(fetchAllCourseOrganizationRequest, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary 查詢課程堂點主檔
     * @param {number} [id] id
     * @param {number} [courseId] 課程類別Course.Id
     * @param {number} [organizationId] Organization.Id
     * @param {Array<SortProperty>} [sortProperties] 查詢欄位排序
     * @param {number} [page] 目前頁數
     * @param {number} [size] 每頁筆數
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    findCourseOrganization(
      id?: number,
      courseId?: number,
      organizationId?: number,
      sortProperties?: Array<SortProperty>,
      page?: number,
      size?: number,
      options?: any
    ): Promise<CourseOrganizationViewPageApiResponse> {
      return localVarFp
        .findCourseOrganization(id, courseId, organizationId, sortProperties, page, size, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary 以 Id 查詢列表
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getCourseOrganization(id: number, options?: any): Promise<CourseOrganizationViewApiResponse> {
      return localVarFp.getCourseOrganization(id, options).then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary 修改課程堂點主檔
     * @param {UpdateCourseOrganizationCommand} [updateCourseOrganizationCommand]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    putCourseOrganization(
      updateCourseOrganizationCommand?: UpdateCourseOrganizationCommand,
      options?: any
    ): Promise<CourseOrganizationViewApiResponse> {
      return localVarFp
        .putCourseOrganization(updateCourseOrganizationCommand, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary 查詢列表  (*dynamic sort support)
     * @param {QueryCourseOrganizationRequest} [queryCourseOrganizationRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    queryCourseOrganizations(
      queryCourseOrganizationRequest?: QueryCourseOrganizationRequest,
      options?: any
    ): Promise<CourseOrganizationViewPageApiResponse> {
      return localVarFp
        .queryCourseOrganizations(queryCourseOrganizationRequest, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary 刪除主檔
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    removeCourseOrganization(id: number, options?: any): Promise<Int32ApiResponse> {
      return localVarFp.removeCourseOrganization(id, options).then((request) => request(axios, basePath));
    },
  };
};

/**
 * CourseOrganizationApi - interface
 * @export
 * @interface CourseOrganizationApi
 */
export interface CourseOrganizationApiInterface {
  /**
   *
   * @summary 建立課程堂點主檔檔
   * @param {CreateCourseOrganizationCommand} [createCourseOrganizationCommand]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CourseOrganizationApiInterface
   */
  createCourseOrganization(
    createCourseOrganizationCommand?: CreateCourseOrganizationCommand,
    options?: AxiosRequestConfig
  ): Promise<CourseOrganizationViewApiResponse>;

  /**
   *
   * @summary 刪除課程堂點主檔
   * @param {DeleteCourseOrganizationCommand} [deleteCourseOrganizationCommand]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CourseOrganizationApiInterface
   */
  deleteCourseOrganization(
    deleteCourseOrganizationCommand?: DeleteCourseOrganizationCommand,
    options?: AxiosRequestConfig
  ): Promise<CourseOrganizationViewApiResponse>;

  /**
   *
   * @summary 查詢堂點主檔
   * @param {FetchAllCourseOrganizationRequest} [fetchAllCourseOrganizationRequest]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CourseOrganizationApiInterface
   */
  fetchCourseOrganizations(
    fetchAllCourseOrganizationRequest?: FetchAllCourseOrganizationRequest,
    options?: AxiosRequestConfig
  ): Promise<CourseOrganizationViewListApiResponse>;

  /**
   *
   * @summary 查詢課程堂點主檔
   * @param {number} [id] id
   * @param {number} [courseId] 課程類別Course.Id
   * @param {number} [organizationId] Organization.Id
   * @param {Array<SortProperty>} [sortProperties] 查詢欄位排序
   * @param {number} [page] 目前頁數
   * @param {number} [size] 每頁筆數
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CourseOrganizationApiInterface
   */
  findCourseOrganization(
    id?: number,
    courseId?: number,
    organizationId?: number,
    sortProperties?: Array<SortProperty>,
    page?: number,
    size?: number,
    options?: AxiosRequestConfig
  ): Promise<CourseOrganizationViewPageApiResponse>;

  /**
   *
   * @summary 以 Id 查詢列表
   * @param {number} id
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CourseOrganizationApiInterface
   */
  getCourseOrganization(id: number, options?: AxiosRequestConfig): Promise<CourseOrganizationViewApiResponse>;

  /**
   *
   * @summary 修改課程堂點主檔
   * @param {UpdateCourseOrganizationCommand} [updateCourseOrganizationCommand]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CourseOrganizationApiInterface
   */
  putCourseOrganization(
    updateCourseOrganizationCommand?: UpdateCourseOrganizationCommand,
    options?: AxiosRequestConfig
  ): Promise<CourseOrganizationViewApiResponse>;

  /**
   *
   * @summary 查詢列表  (*dynamic sort support)
   * @param {QueryCourseOrganizationRequest} [queryCourseOrganizationRequest]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CourseOrganizationApiInterface
   */
  queryCourseOrganizations(
    queryCourseOrganizationRequest?: QueryCourseOrganizationRequest,
    options?: AxiosRequestConfig
  ): Promise<CourseOrganizationViewPageApiResponse>;

  /**
   *
   * @summary 刪除主檔
   * @param {number} id
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CourseOrganizationApiInterface
   */
  removeCourseOrganization(id: number, options?: AxiosRequestConfig): Promise<Int32ApiResponse>;
}

/**
 * CourseOrganizationApi - object-oriented interface
 * @export
 * @class CourseOrganizationApi
 * @extends {BaseAPI}
 */
export class CourseOrganizationApi extends BaseAPI implements CourseOrganizationApiInterface {
  /**
   *
   * @summary 建立課程堂點主檔檔
   * @param {CreateCourseOrganizationCommand} [createCourseOrganizationCommand]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CourseOrganizationApi
   */
  public createCourseOrganization(
    createCourseOrganizationCommand?: CreateCourseOrganizationCommand,
    options?: AxiosRequestConfig
  ) {
    return CourseOrganizationApiFp(this.configuration)
      .createCourseOrganization(createCourseOrganizationCommand, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary 刪除課程堂點主檔
   * @param {DeleteCourseOrganizationCommand} [deleteCourseOrganizationCommand]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CourseOrganizationApi
   */
  public deleteCourseOrganization(
    deleteCourseOrganizationCommand?: DeleteCourseOrganizationCommand,
    options?: AxiosRequestConfig
  ) {
    return CourseOrganizationApiFp(this.configuration)
      .deleteCourseOrganization(deleteCourseOrganizationCommand, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary 查詢堂點主檔
   * @param {FetchAllCourseOrganizationRequest} [fetchAllCourseOrganizationRequest]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CourseOrganizationApi
   */
  public fetchCourseOrganizations(
    fetchAllCourseOrganizationRequest?: FetchAllCourseOrganizationRequest,
    options?: AxiosRequestConfig
  ) {
    return CourseOrganizationApiFp(this.configuration)
      .fetchCourseOrganizations(fetchAllCourseOrganizationRequest, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary 查詢課程堂點主檔
   * @param {number} [id] id
   * @param {number} [courseId] 課程類別Course.Id
   * @param {number} [organizationId] Organization.Id
   * @param {Array<SortProperty>} [sortProperties] 查詢欄位排序
   * @param {number} [page] 目前頁數
   * @param {number} [size] 每頁筆數
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CourseOrganizationApi
   */
  public findCourseOrganization(
    id?: number,
    courseId?: number,
    organizationId?: number,
    sortProperties?: Array<SortProperty>,
    page?: number,
    size?: number,
    options?: AxiosRequestConfig
  ) {
    return CourseOrganizationApiFp(this.configuration)
      .findCourseOrganization(id, courseId, organizationId, sortProperties, page, size, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary 以 Id 查詢列表
   * @param {number} id
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CourseOrganizationApi
   */
  public getCourseOrganization(id: number, options?: AxiosRequestConfig) {
    return CourseOrganizationApiFp(this.configuration)
      .getCourseOrganization(id, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary 修改課程堂點主檔
   * @param {UpdateCourseOrganizationCommand} [updateCourseOrganizationCommand]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CourseOrganizationApi
   */
  public putCourseOrganization(
    updateCourseOrganizationCommand?: UpdateCourseOrganizationCommand,
    options?: AxiosRequestConfig
  ) {
    return CourseOrganizationApiFp(this.configuration)
      .putCourseOrganization(updateCourseOrganizationCommand, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary 查詢列表  (*dynamic sort support)
   * @param {QueryCourseOrganizationRequest} [queryCourseOrganizationRequest]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CourseOrganizationApi
   */
  public queryCourseOrganizations(
    queryCourseOrganizationRequest?: QueryCourseOrganizationRequest,
    options?: AxiosRequestConfig
  ) {
    return CourseOrganizationApiFp(this.configuration)
      .queryCourseOrganizations(queryCourseOrganizationRequest, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary 刪除主檔
   * @param {number} id
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CourseOrganizationApi
   */
  public removeCourseOrganization(id: number, options?: AxiosRequestConfig) {
    return CourseOrganizationApiFp(this.configuration)
      .removeCourseOrganization(id, options)
      .then((request) => request(this.axios, this.basePath));
  }
}

/**
 * CoursePriceApi - axios parameter creator
 * @export
 */
export const CoursePriceApiAxiosParamCreator = function (configuration?: Configuration) {
  return {
    /**
     *
     * @summary 建立課程價格主檔檔
     * @param {CreateCoursePriceCommand} [createCoursePriceCommand]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createCoursePrice: async (
      createCoursePriceCommand?: CreateCoursePriceCommand,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/coursePrice`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: "POST", ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication Example-id-1 required
      await setApiKeyToObject(localVarHeaderParameter, "Example-id-1", configuration);

      // authentication JWT_Authorization required
      await setApiKeyToObject(localVarHeaderParameter, "authorization", configuration);

      // authentication example-id-2 required
      await setApiKeyToObject(localVarHeaderParameter, "example-id-2", configuration);

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      localVarRequestOptions.data = serializeDataIfNeeded(
        createCoursePriceCommand,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary 刪除課程價格主檔
     * @param {DeleteCoursePriceCommand} [deleteCoursePriceCommand]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteCoursePrice: async (
      deleteCoursePriceCommand?: DeleteCoursePriceCommand,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/coursePrice`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: "DELETE", ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication Example-id-1 required
      await setApiKeyToObject(localVarHeaderParameter, "Example-id-1", configuration);

      // authentication JWT_Authorization required
      await setApiKeyToObject(localVarHeaderParameter, "authorization", configuration);

      // authentication example-id-2 required
      await setApiKeyToObject(localVarHeaderParameter, "example-id-2", configuration);

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      localVarRequestOptions.data = serializeDataIfNeeded(
        deleteCoursePriceCommand,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary 查詢價格主檔
     * @param {FetchAllCoursePriceRequest} [fetchAllCoursePriceRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    fetchCoursePrices: async (
      fetchAllCoursePriceRequest?: FetchAllCoursePriceRequest,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/coursePrice/fetch`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: "POST", ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication Example-id-1 required
      await setApiKeyToObject(localVarHeaderParameter, "Example-id-1", configuration);

      // authentication JWT_Authorization required
      await setApiKeyToObject(localVarHeaderParameter, "authorization", configuration);

      // authentication example-id-2 required
      await setApiKeyToObject(localVarHeaderParameter, "example-id-2", configuration);

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      localVarRequestOptions.data = serializeDataIfNeeded(
        fetchAllCoursePriceRequest,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary 查詢課程價格主檔
     * @param {number} [id] id
     * @param {number} [courseId] 課程類別Course.Id
     * @param {string} [priceName] 價格名稱
     * @param {number} [price] 價格
     * @param {string} [isPublic] 是否公開對應type&#x3D;IsYN顯示 namevalue存此欄位0：N1：Y
     * @param {string} [isDueDate] 是否超過優惠日期後關閉對應type&#x3D;IsYN顯示 namevalue存此欄0N1Yif1ThendataTimeCourse.DiscountSignUpDate關閉此選項
     * @param {Array<SortProperty>} [sortProperties] 查詢欄位排序
     * @param {number} [page] 目前頁數
     * @param {number} [size] 每頁筆數
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    findCoursePrice: async (
      id?: number,
      courseId?: number,
      priceName?: string,
      price?: number,
      isPublic?: string,
      isDueDate?: string,
      sortProperties?: Array<SortProperty>,
      page?: number,
      size?: number,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/coursePrice`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: "GET", ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication Example-id-1 required
      await setApiKeyToObject(localVarHeaderParameter, "Example-id-1", configuration);

      // authentication JWT_Authorization required
      await setApiKeyToObject(localVarHeaderParameter, "authorization", configuration);

      // authentication example-id-2 required
      await setApiKeyToObject(localVarHeaderParameter, "example-id-2", configuration);

      if (id !== undefined) {
        localVarQueryParameter["id"] = id;
      }

      if (courseId !== undefined) {
        localVarQueryParameter["courseId"] = courseId;
      }

      if (priceName !== undefined) {
        localVarQueryParameter["priceName"] = priceName;
      }

      if (price !== undefined) {
        localVarQueryParameter["price"] = price;
      }

      if (isPublic !== undefined) {
        localVarQueryParameter["isPublic"] = isPublic;
      }

      if (isDueDate !== undefined) {
        localVarQueryParameter["isDueDate"] = isDueDate;
      }

      if (sortProperties) {
        localVarQueryParameter["sortProperties"] = sortProperties;
      }

      if (page !== undefined) {
        localVarQueryParameter["page"] = page;
      }

      if (size !== undefined) {
        localVarQueryParameter["size"] = size;
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary 以 Id 查詢列表
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getCoursePrice: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists("getCoursePrice", "id", id);
      const localVarPath = `/api/coursePrice/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(id)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: "GET", ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication Example-id-1 required
      await setApiKeyToObject(localVarHeaderParameter, "Example-id-1", configuration);

      // authentication JWT_Authorization required
      await setApiKeyToObject(localVarHeaderParameter, "authorization", configuration);

      // authentication example-id-2 required
      await setApiKeyToObject(localVarHeaderParameter, "example-id-2", configuration);

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary 修改課程價格主檔
     * @param {UpdateCoursePriceCommand} [updateCoursePriceCommand]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    putCoursePrice: async (
      updateCoursePriceCommand?: UpdateCoursePriceCommand,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/coursePrice`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: "PUT", ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication Example-id-1 required
      await setApiKeyToObject(localVarHeaderParameter, "Example-id-1", configuration);

      // authentication JWT_Authorization required
      await setApiKeyToObject(localVarHeaderParameter, "authorization", configuration);

      // authentication example-id-2 required
      await setApiKeyToObject(localVarHeaderParameter, "example-id-2", configuration);

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      localVarRequestOptions.data = serializeDataIfNeeded(
        updateCoursePriceCommand,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary 查詢列表  (*dynamic sort support)
     * @param {QueryCoursePriceRequest} [queryCoursePriceRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    queryCoursePrices: async (
      queryCoursePriceRequest?: QueryCoursePriceRequest,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/coursePrice/query`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: "POST", ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication Example-id-1 required
      await setApiKeyToObject(localVarHeaderParameter, "Example-id-1", configuration);

      // authentication JWT_Authorization required
      await setApiKeyToObject(localVarHeaderParameter, "authorization", configuration);

      // authentication example-id-2 required
      await setApiKeyToObject(localVarHeaderParameter, "example-id-2", configuration);

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      localVarRequestOptions.data = serializeDataIfNeeded(
        queryCoursePriceRequest,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary 刪除主檔
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    removeCoursePrice: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists("removeCoursePrice", "id", id);
      const localVarPath = `/api/coursePrice/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(id)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: "DELETE", ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication Example-id-1 required
      await setApiKeyToObject(localVarHeaderParameter, "Example-id-1", configuration);

      // authentication JWT_Authorization required
      await setApiKeyToObject(localVarHeaderParameter, "authorization", configuration);

      // authentication example-id-2 required
      await setApiKeyToObject(localVarHeaderParameter, "example-id-2", configuration);

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * CoursePriceApi - functional programming interface
 * @export
 */
export const CoursePriceApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = CoursePriceApiAxiosParamCreator(configuration);
  return {
    /**
     *
     * @summary 建立課程價格主檔檔
     * @param {CreateCoursePriceCommand} [createCoursePriceCommand]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async createCoursePrice(
      createCoursePriceCommand?: CreateCoursePriceCommand,
      options?: AxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<CoursePriceViewApiResponse>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.createCoursePrice(createCoursePriceCommand, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     *
     * @summary 刪除課程價格主檔
     * @param {DeleteCoursePriceCommand} [deleteCoursePriceCommand]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async deleteCoursePrice(
      deleteCoursePriceCommand?: DeleteCoursePriceCommand,
      options?: AxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<CoursePriceViewApiResponse>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.deleteCoursePrice(deleteCoursePriceCommand, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     *
     * @summary 查詢價格主檔
     * @param {FetchAllCoursePriceRequest} [fetchAllCoursePriceRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async fetchCoursePrices(
      fetchAllCoursePriceRequest?: FetchAllCoursePriceRequest,
      options?: AxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<CoursePriceViewListApiResponse>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.fetchCoursePrices(fetchAllCoursePriceRequest, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     *
     * @summary 查詢課程價格主檔
     * @param {number} [id] id
     * @param {number} [courseId] 課程類別Course.Id
     * @param {string} [priceName] 價格名稱
     * @param {number} [price] 價格
     * @param {string} [isPublic] 是否公開對應type&#x3D;IsYN顯示 namevalue存此欄位0：N1：Y
     * @param {string} [isDueDate] 是否超過優惠日期後關閉對應type&#x3D;IsYN顯示 namevalue存此欄0N1Yif1ThendataTimeCourse.DiscountSignUpDate關閉此選項
     * @param {Array<SortProperty>} [sortProperties] 查詢欄位排序
     * @param {number} [page] 目前頁數
     * @param {number} [size] 每頁筆數
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async findCoursePrice(
      id?: number,
      courseId?: number,
      priceName?: string,
      price?: number,
      isPublic?: string,
      isDueDate?: string,
      sortProperties?: Array<SortProperty>,
      page?: number,
      size?: number,
      options?: AxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<CoursePriceViewPageApiResponse>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.findCoursePrice(
        id,
        courseId,
        priceName,
        price,
        isPublic,
        isDueDate,
        sortProperties,
        page,
        size,
        options
      );
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     *
     * @summary 以 Id 查詢列表
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getCoursePrice(
      id: number,
      options?: AxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<CoursePriceViewApiResponse>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getCoursePrice(id, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     *
     * @summary 修改課程價格主檔
     * @param {UpdateCoursePriceCommand} [updateCoursePriceCommand]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async putCoursePrice(
      updateCoursePriceCommand?: UpdateCoursePriceCommand,
      options?: AxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<CoursePriceViewApiResponse>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.putCoursePrice(updateCoursePriceCommand, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     *
     * @summary 查詢列表  (*dynamic sort support)
     * @param {QueryCoursePriceRequest} [queryCoursePriceRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async queryCoursePrices(
      queryCoursePriceRequest?: QueryCoursePriceRequest,
      options?: AxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<CoursePriceViewPageApiResponse>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.queryCoursePrices(queryCoursePriceRequest, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     *
     * @summary 刪除主檔
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async removeCoursePrice(
      id: number,
      options?: AxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<Int32ApiResponse>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.removeCoursePrice(id, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
  };
};

/**
 * CoursePriceApi - factory interface
 * @export
 */
export const CoursePriceApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance
) {
  const localVarFp = CoursePriceApiFp(configuration);
  return {
    /**
     *
     * @summary 建立課程價格主檔檔
     * @param {CreateCoursePriceCommand} [createCoursePriceCommand]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createCoursePrice(
      createCoursePriceCommand?: CreateCoursePriceCommand,
      options?: any
    ): Promise<CoursePriceViewApiResponse> {
      return localVarFp
        .createCoursePrice(createCoursePriceCommand, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary 刪除課程價格主檔
     * @param {DeleteCoursePriceCommand} [deleteCoursePriceCommand]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteCoursePrice(
      deleteCoursePriceCommand?: DeleteCoursePriceCommand,
      options?: any
    ): Promise<CoursePriceViewApiResponse> {
      return localVarFp
        .deleteCoursePrice(deleteCoursePriceCommand, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary 查詢價格主檔
     * @param {FetchAllCoursePriceRequest} [fetchAllCoursePriceRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    fetchCoursePrices(
      fetchAllCoursePriceRequest?: FetchAllCoursePriceRequest,
      options?: any
    ): Promise<CoursePriceViewListApiResponse> {
      return localVarFp
        .fetchCoursePrices(fetchAllCoursePriceRequest, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary 查詢課程價格主檔
     * @param {number} [id] id
     * @param {number} [courseId] 課程類別Course.Id
     * @param {string} [priceName] 價格名稱
     * @param {number} [price] 價格
     * @param {string} [isPublic] 是否公開對應type&#x3D;IsYN顯示 namevalue存此欄位0：N1：Y
     * @param {string} [isDueDate] 是否超過優惠日期後關閉對應type&#x3D;IsYN顯示 namevalue存此欄0N1Yif1ThendataTimeCourse.DiscountSignUpDate關閉此選項
     * @param {Array<SortProperty>} [sortProperties] 查詢欄位排序
     * @param {number} [page] 目前頁數
     * @param {number} [size] 每頁筆數
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    findCoursePrice(
      id?: number,
      courseId?: number,
      priceName?: string,
      price?: number,
      isPublic?: string,
      isDueDate?: string,
      sortProperties?: Array<SortProperty>,
      page?: number,
      size?: number,
      options?: any
    ): Promise<CoursePriceViewPageApiResponse> {
      return localVarFp
        .findCoursePrice(id, courseId, priceName, price, isPublic, isDueDate, sortProperties, page, size, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary 以 Id 查詢列表
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getCoursePrice(id: number, options?: any): Promise<CoursePriceViewApiResponse> {
      return localVarFp.getCoursePrice(id, options).then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary 修改課程價格主檔
     * @param {UpdateCoursePriceCommand} [updateCoursePriceCommand]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    putCoursePrice(
      updateCoursePriceCommand?: UpdateCoursePriceCommand,
      options?: any
    ): Promise<CoursePriceViewApiResponse> {
      return localVarFp.putCoursePrice(updateCoursePriceCommand, options).then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary 查詢列表  (*dynamic sort support)
     * @param {QueryCoursePriceRequest} [queryCoursePriceRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    queryCoursePrices(
      queryCoursePriceRequest?: QueryCoursePriceRequest,
      options?: any
    ): Promise<CoursePriceViewPageApiResponse> {
      return localVarFp.queryCoursePrices(queryCoursePriceRequest, options).then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary 刪除主檔
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    removeCoursePrice(id: number, options?: any): Promise<Int32ApiResponse> {
      return localVarFp.removeCoursePrice(id, options).then((request) => request(axios, basePath));
    },
  };
};

/**
 * CoursePriceApi - interface
 * @export
 * @interface CoursePriceApi
 */
export interface CoursePriceApiInterface {
  /**
   *
   * @summary 建立課程價格主檔檔
   * @param {CreateCoursePriceCommand} [createCoursePriceCommand]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CoursePriceApiInterface
   */
  createCoursePrice(
    createCoursePriceCommand?: CreateCoursePriceCommand,
    options?: AxiosRequestConfig
  ): Promise<CoursePriceViewApiResponse>;

  /**
   *
   * @summary 刪除課程價格主檔
   * @param {DeleteCoursePriceCommand} [deleteCoursePriceCommand]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CoursePriceApiInterface
   */
  deleteCoursePrice(
    deleteCoursePriceCommand?: DeleteCoursePriceCommand,
    options?: AxiosRequestConfig
  ): Promise<CoursePriceViewApiResponse>;

  /**
   *
   * @summary 查詢價格主檔
   * @param {FetchAllCoursePriceRequest} [fetchAllCoursePriceRequest]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CoursePriceApiInterface
   */
  fetchCoursePrices(
    fetchAllCoursePriceRequest?: FetchAllCoursePriceRequest,
    options?: AxiosRequestConfig
  ): Promise<CoursePriceViewListApiResponse>;

  /**
   *
   * @summary 查詢課程價格主檔
   * @param {number} [id] id
   * @param {number} [courseId] 課程類別Course.Id
   * @param {string} [priceName] 價格名稱
   * @param {number} [price] 價格
   * @param {string} [isPublic] 是否公開對應type&#x3D;IsYN顯示 namevalue存此欄位0：N1：Y
   * @param {string} [isDueDate] 是否超過優惠日期後關閉對應type&#x3D;IsYN顯示 namevalue存此欄0N1Yif1ThendataTimeCourse.DiscountSignUpDate關閉此選項
   * @param {Array<SortProperty>} [sortProperties] 查詢欄位排序
   * @param {number} [page] 目前頁數
   * @param {number} [size] 每頁筆數
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CoursePriceApiInterface
   */
  findCoursePrice(
    id?: number,
    courseId?: number,
    priceName?: string,
    price?: number,
    isPublic?: string,
    isDueDate?: string,
    sortProperties?: Array<SortProperty>,
    page?: number,
    size?: number,
    options?: AxiosRequestConfig
  ): Promise<CoursePriceViewPageApiResponse>;

  /**
   *
   * @summary 以 Id 查詢列表
   * @param {number} id
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CoursePriceApiInterface
   */
  getCoursePrice(id: number, options?: AxiosRequestConfig): Promise<CoursePriceViewApiResponse>;

  /**
   *
   * @summary 修改課程價格主檔
   * @param {UpdateCoursePriceCommand} [updateCoursePriceCommand]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CoursePriceApiInterface
   */
  putCoursePrice(
    updateCoursePriceCommand?: UpdateCoursePriceCommand,
    options?: AxiosRequestConfig
  ): Promise<CoursePriceViewApiResponse>;

  /**
   *
   * @summary 查詢列表  (*dynamic sort support)
   * @param {QueryCoursePriceRequest} [queryCoursePriceRequest]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CoursePriceApiInterface
   */
  queryCoursePrices(
    queryCoursePriceRequest?: QueryCoursePriceRequest,
    options?: AxiosRequestConfig
  ): Promise<CoursePriceViewPageApiResponse>;

  /**
   *
   * @summary 刪除主檔
   * @param {number} id
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CoursePriceApiInterface
   */
  removeCoursePrice(id: number, options?: AxiosRequestConfig): Promise<Int32ApiResponse>;
}

/**
 * CoursePriceApi - object-oriented interface
 * @export
 * @class CoursePriceApi
 * @extends {BaseAPI}
 */
export class CoursePriceApi extends BaseAPI implements CoursePriceApiInterface {
  /**
   *
   * @summary 建立課程價格主檔檔
   * @param {CreateCoursePriceCommand} [createCoursePriceCommand]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CoursePriceApi
   */
  public createCoursePrice(createCoursePriceCommand?: CreateCoursePriceCommand, options?: AxiosRequestConfig) {
    return CoursePriceApiFp(this.configuration)
      .createCoursePrice(createCoursePriceCommand, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary 刪除課程價格主檔
   * @param {DeleteCoursePriceCommand} [deleteCoursePriceCommand]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CoursePriceApi
   */
  public deleteCoursePrice(deleteCoursePriceCommand?: DeleteCoursePriceCommand, options?: AxiosRequestConfig) {
    return CoursePriceApiFp(this.configuration)
      .deleteCoursePrice(deleteCoursePriceCommand, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary 查詢價格主檔
   * @param {FetchAllCoursePriceRequest} [fetchAllCoursePriceRequest]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CoursePriceApi
   */
  public fetchCoursePrices(fetchAllCoursePriceRequest?: FetchAllCoursePriceRequest, options?: AxiosRequestConfig) {
    return CoursePriceApiFp(this.configuration)
      .fetchCoursePrices(fetchAllCoursePriceRequest, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary 查詢課程價格主檔
   * @param {number} [id] id
   * @param {number} [courseId] 課程類別Course.Id
   * @param {string} [priceName] 價格名稱
   * @param {number} [price] 價格
   * @param {string} [isPublic] 是否公開對應type&#x3D;IsYN顯示 namevalue存此欄位0：N1：Y
   * @param {string} [isDueDate] 是否超過優惠日期後關閉對應type&#x3D;IsYN顯示 namevalue存此欄0N1Yif1ThendataTimeCourse.DiscountSignUpDate關閉此選項
   * @param {Array<SortProperty>} [sortProperties] 查詢欄位排序
   * @param {number} [page] 目前頁數
   * @param {number} [size] 每頁筆數
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CoursePriceApi
   */
  public findCoursePrice(
    id?: number,
    courseId?: number,
    priceName?: string,
    price?: number,
    isPublic?: string,
    isDueDate?: string,
    sortProperties?: Array<SortProperty>,
    page?: number,
    size?: number,
    options?: AxiosRequestConfig
  ) {
    return CoursePriceApiFp(this.configuration)
      .findCoursePrice(id, courseId, priceName, price, isPublic, isDueDate, sortProperties, page, size, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary 以 Id 查詢列表
   * @param {number} id
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CoursePriceApi
   */
  public getCoursePrice(id: number, options?: AxiosRequestConfig) {
    return CoursePriceApiFp(this.configuration)
      .getCoursePrice(id, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary 修改課程價格主檔
   * @param {UpdateCoursePriceCommand} [updateCoursePriceCommand]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CoursePriceApi
   */
  public putCoursePrice(updateCoursePriceCommand?: UpdateCoursePriceCommand, options?: AxiosRequestConfig) {
    return CoursePriceApiFp(this.configuration)
      .putCoursePrice(updateCoursePriceCommand, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary 查詢列表  (*dynamic sort support)
   * @param {QueryCoursePriceRequest} [queryCoursePriceRequest]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CoursePriceApi
   */
  public queryCoursePrices(queryCoursePriceRequest?: QueryCoursePriceRequest, options?: AxiosRequestConfig) {
    return CoursePriceApiFp(this.configuration)
      .queryCoursePrices(queryCoursePriceRequest, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary 刪除主檔
   * @param {number} id
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CoursePriceApi
   */
  public removeCoursePrice(id: number, options?: AxiosRequestConfig) {
    return CoursePriceApiFp(this.configuration)
      .removeCoursePrice(id, options)
      .then((request) => request(this.axios, this.basePath));
  }
}

/**
 * CourseTimeScheduleApi - axios parameter creator
 * @export
 */
export const CourseTimeScheduleApiAxiosParamCreator = function (configuration?: Configuration) {
  return {
    /**
     *
     * @summary 建立課程時段主檔檔
     * @param {CreateCourseTimeScheduleCommand} [createCourseTimeScheduleCommand]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createCourseTimeSchedule: async (
      createCourseTimeScheduleCommand?: CreateCourseTimeScheduleCommand,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/courseTimeSchedule`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: "POST", ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication Example-id-1 required
      await setApiKeyToObject(localVarHeaderParameter, "Example-id-1", configuration);

      // authentication JWT_Authorization required
      await setApiKeyToObject(localVarHeaderParameter, "authorization", configuration);

      // authentication example-id-2 required
      await setApiKeyToObject(localVarHeaderParameter, "example-id-2", configuration);

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      localVarRequestOptions.data = serializeDataIfNeeded(
        createCourseTimeScheduleCommand,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary 刪除課程時段主檔
     * @param {DeleteCourseTimeScheduleCommand} [deleteCourseTimeScheduleCommand]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteCourseTimeSchedule: async (
      deleteCourseTimeScheduleCommand?: DeleteCourseTimeScheduleCommand,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/courseTimeSchedule`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: "DELETE", ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication Example-id-1 required
      await setApiKeyToObject(localVarHeaderParameter, "Example-id-1", configuration);

      // authentication JWT_Authorization required
      await setApiKeyToObject(localVarHeaderParameter, "authorization", configuration);

      // authentication example-id-2 required
      await setApiKeyToObject(localVarHeaderParameter, "example-id-2", configuration);

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      localVarRequestOptions.data = serializeDataIfNeeded(
        deleteCourseTimeScheduleCommand,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary 查詢課程時段主檔
     * @param {FetchAllCourseTimeScheduleRequest} [fetchAllCourseTimeScheduleRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    fetchCourseTimeSchedules: async (
      fetchAllCourseTimeScheduleRequest?: FetchAllCourseTimeScheduleRequest,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/courseTimeSchedule/fetch`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: "POST", ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication Example-id-1 required
      await setApiKeyToObject(localVarHeaderParameter, "Example-id-1", configuration);

      // authentication JWT_Authorization required
      await setApiKeyToObject(localVarHeaderParameter, "authorization", configuration);

      // authentication example-id-2 required
      await setApiKeyToObject(localVarHeaderParameter, "example-id-2", configuration);

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      localVarRequestOptions.data = serializeDataIfNeeded(
        fetchAllCourseTimeScheduleRequest,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary 查詢課程時段主檔
     * @param {number} [id] id
     * @param {number} [courseId] 課程類別CourseManagement.Id
     * @param {string} [scheduleNo] 代號/梯次
     * @param {string} [classDay] 附件類別對應type&#x3D;ClassDay顯示 namevalue存此欄位1：一2：二….
     * @param {string} [classTimeS] 開始時間
     * @param {string} [classTimeE] 結束時間
     * @param {string} [place] 地點
     * @param {Array<SortProperty>} [sortProperties] 查詢欄位排序
     * @param {number} [page] 目前頁數
     * @param {number} [size] 每頁筆數
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    findCourseTimeSchedule: async (
      id?: number,
      courseId?: number,
      scheduleNo?: string,
      classDay?: string,
      classTimeS?: string,
      classTimeE?: string,
      place?: string,
      sortProperties?: Array<SortProperty>,
      page?: number,
      size?: number,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/courseTimeSchedule`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: "GET", ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication Example-id-1 required
      await setApiKeyToObject(localVarHeaderParameter, "Example-id-1", configuration);

      // authentication JWT_Authorization required
      await setApiKeyToObject(localVarHeaderParameter, "authorization", configuration);

      // authentication example-id-2 required
      await setApiKeyToObject(localVarHeaderParameter, "example-id-2", configuration);

      if (id !== undefined) {
        localVarQueryParameter["id"] = id;
      }

      if (courseId !== undefined) {
        localVarQueryParameter["courseId"] = courseId;
      }

      if (scheduleNo !== undefined) {
        localVarQueryParameter["scheduleNo"] = scheduleNo;
      }

      if (classDay !== undefined) {
        localVarQueryParameter["classDay"] = classDay;
      }

      if (classTimeS !== undefined) {
        localVarQueryParameter["classTimeS"] = classTimeS;
      }

      if (classTimeE !== undefined) {
        localVarQueryParameter["classTimeE"] = classTimeE;
      }

      if (place !== undefined) {
        localVarQueryParameter["place"] = place;
      }

      if (sortProperties) {
        localVarQueryParameter["sortProperties"] = sortProperties;
      }

      if (page !== undefined) {
        localVarQueryParameter["page"] = page;
      }

      if (size !== undefined) {
        localVarQueryParameter["size"] = size;
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary 以 Id 查詢列表
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getCourseTimeSchedule: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists("getCourseTimeSchedule", "id", id);
      const localVarPath = `/api/courseTimeSchedule/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(id)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: "GET", ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication Example-id-1 required
      await setApiKeyToObject(localVarHeaderParameter, "Example-id-1", configuration);

      // authentication JWT_Authorization required
      await setApiKeyToObject(localVarHeaderParameter, "authorization", configuration);

      // authentication example-id-2 required
      await setApiKeyToObject(localVarHeaderParameter, "example-id-2", configuration);

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary 修改課程時段主檔
     * @param {UpdateCourseTimeScheduleCommand} [updateCourseTimeScheduleCommand]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    putCourseTimeSchedule: async (
      updateCourseTimeScheduleCommand?: UpdateCourseTimeScheduleCommand,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/courseTimeSchedule`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: "PUT", ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication Example-id-1 required
      await setApiKeyToObject(localVarHeaderParameter, "Example-id-1", configuration);

      // authentication JWT_Authorization required
      await setApiKeyToObject(localVarHeaderParameter, "authorization", configuration);

      // authentication example-id-2 required
      await setApiKeyToObject(localVarHeaderParameter, "example-id-2", configuration);

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      localVarRequestOptions.data = serializeDataIfNeeded(
        updateCourseTimeScheduleCommand,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary 查詢列表  (*dynamic sort support)
     * @param {QueryCourseTimeScheduleRequest} [queryCourseTimeScheduleRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    queryCourseTimeSchedules: async (
      queryCourseTimeScheduleRequest?: QueryCourseTimeScheduleRequest,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/courseTimeSchedule/query`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: "POST", ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication Example-id-1 required
      await setApiKeyToObject(localVarHeaderParameter, "Example-id-1", configuration);

      // authentication JWT_Authorization required
      await setApiKeyToObject(localVarHeaderParameter, "authorization", configuration);

      // authentication example-id-2 required
      await setApiKeyToObject(localVarHeaderParameter, "example-id-2", configuration);

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      localVarRequestOptions.data = serializeDataIfNeeded(
        queryCourseTimeScheduleRequest,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary 刪除主檔
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    removeCourseTimeSchedule: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists("removeCourseTimeSchedule", "id", id);
      const localVarPath = `/api/courseTimeSchedule/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(id)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: "DELETE", ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication Example-id-1 required
      await setApiKeyToObject(localVarHeaderParameter, "Example-id-1", configuration);

      // authentication JWT_Authorization required
      await setApiKeyToObject(localVarHeaderParameter, "authorization", configuration);

      // authentication example-id-2 required
      await setApiKeyToObject(localVarHeaderParameter, "example-id-2", configuration);

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * CourseTimeScheduleApi - functional programming interface
 * @export
 */
export const CourseTimeScheduleApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = CourseTimeScheduleApiAxiosParamCreator(configuration);
  return {
    /**
     *
     * @summary 建立課程時段主檔檔
     * @param {CreateCourseTimeScheduleCommand} [createCourseTimeScheduleCommand]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async createCourseTimeSchedule(
      createCourseTimeScheduleCommand?: CreateCourseTimeScheduleCommand,
      options?: AxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<CourseTimeScheduleViewApiResponse>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.createCourseTimeSchedule(
        createCourseTimeScheduleCommand,
        options
      );
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     *
     * @summary 刪除課程時段主檔
     * @param {DeleteCourseTimeScheduleCommand} [deleteCourseTimeScheduleCommand]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async deleteCourseTimeSchedule(
      deleteCourseTimeScheduleCommand?: DeleteCourseTimeScheduleCommand,
      options?: AxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<CourseTimeScheduleViewApiResponse>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.deleteCourseTimeSchedule(
        deleteCourseTimeScheduleCommand,
        options
      );
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     *
     * @summary 查詢課程時段主檔
     * @param {FetchAllCourseTimeScheduleRequest} [fetchAllCourseTimeScheduleRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async fetchCourseTimeSchedules(
      fetchAllCourseTimeScheduleRequest?: FetchAllCourseTimeScheduleRequest,
      options?: AxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<CourseTimeScheduleViewListApiResponse>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.fetchCourseTimeSchedules(
        fetchAllCourseTimeScheduleRequest,
        options
      );
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     *
     * @summary 查詢課程時段主檔
     * @param {number} [id] id
     * @param {number} [courseId] 課程類別CourseManagement.Id
     * @param {string} [scheduleNo] 代號/梯次
     * @param {string} [classDay] 附件類別對應type&#x3D;ClassDay顯示 namevalue存此欄位1：一2：二….
     * @param {string} [classTimeS] 開始時間
     * @param {string} [classTimeE] 結束時間
     * @param {string} [place] 地點
     * @param {Array<SortProperty>} [sortProperties] 查詢欄位排序
     * @param {number} [page] 目前頁數
     * @param {number} [size] 每頁筆數
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async findCourseTimeSchedule(
      id?: number,
      courseId?: number,
      scheduleNo?: string,
      classDay?: string,
      classTimeS?: string,
      classTimeE?: string,
      place?: string,
      sortProperties?: Array<SortProperty>,
      page?: number,
      size?: number,
      options?: AxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<CourseTimeScheduleViewPageApiResponse>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.findCourseTimeSchedule(
        id,
        courseId,
        scheduleNo,
        classDay,
        classTimeS,
        classTimeE,
        place,
        sortProperties,
        page,
        size,
        options
      );
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     *
     * @summary 以 Id 查詢列表
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getCourseTimeSchedule(
      id: number,
      options?: AxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<CourseTimeScheduleViewApiResponse>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getCourseTimeSchedule(id, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     *
     * @summary 修改課程時段主檔
     * @param {UpdateCourseTimeScheduleCommand} [updateCourseTimeScheduleCommand]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async putCourseTimeSchedule(
      updateCourseTimeScheduleCommand?: UpdateCourseTimeScheduleCommand,
      options?: AxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<CourseTimeScheduleViewApiResponse>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.putCourseTimeSchedule(
        updateCourseTimeScheduleCommand,
        options
      );
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     *
     * @summary 查詢列表  (*dynamic sort support)
     * @param {QueryCourseTimeScheduleRequest} [queryCourseTimeScheduleRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async queryCourseTimeSchedules(
      queryCourseTimeScheduleRequest?: QueryCourseTimeScheduleRequest,
      options?: AxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<CourseTimeScheduleViewPageApiResponse>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.queryCourseTimeSchedules(
        queryCourseTimeScheduleRequest,
        options
      );
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     *
     * @summary 刪除主檔
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async removeCourseTimeSchedule(
      id: number,
      options?: AxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<Int32ApiResponse>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.removeCourseTimeSchedule(id, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
  };
};

/**
 * CourseTimeScheduleApi - factory interface
 * @export
 */
export const CourseTimeScheduleApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance
) {
  const localVarFp = CourseTimeScheduleApiFp(configuration);
  return {
    /**
     *
     * @summary 建立課程時段主檔檔
     * @param {CreateCourseTimeScheduleCommand} [createCourseTimeScheduleCommand]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createCourseTimeSchedule(
      createCourseTimeScheduleCommand?: CreateCourseTimeScheduleCommand,
      options?: any
    ): Promise<CourseTimeScheduleViewApiResponse> {
      return localVarFp
        .createCourseTimeSchedule(createCourseTimeScheduleCommand, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary 刪除課程時段主檔
     * @param {DeleteCourseTimeScheduleCommand} [deleteCourseTimeScheduleCommand]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteCourseTimeSchedule(
      deleteCourseTimeScheduleCommand?: DeleteCourseTimeScheduleCommand,
      options?: any
    ): Promise<CourseTimeScheduleViewApiResponse> {
      return localVarFp
        .deleteCourseTimeSchedule(deleteCourseTimeScheduleCommand, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary 查詢課程時段主檔
     * @param {FetchAllCourseTimeScheduleRequest} [fetchAllCourseTimeScheduleRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    fetchCourseTimeSchedules(
      fetchAllCourseTimeScheduleRequest?: FetchAllCourseTimeScheduleRequest,
      options?: any
    ): Promise<CourseTimeScheduleViewListApiResponse> {
      return localVarFp
        .fetchCourseTimeSchedules(fetchAllCourseTimeScheduleRequest, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary 查詢課程時段主檔
     * @param {number} [id] id
     * @param {number} [courseId] 課程類別CourseManagement.Id
     * @param {string} [scheduleNo] 代號/梯次
     * @param {string} [classDay] 附件類別對應type&#x3D;ClassDay顯示 namevalue存此欄位1：一2：二….
     * @param {string} [classTimeS] 開始時間
     * @param {string} [classTimeE] 結束時間
     * @param {string} [place] 地點
     * @param {Array<SortProperty>} [sortProperties] 查詢欄位排序
     * @param {number} [page] 目前頁數
     * @param {number} [size] 每頁筆數
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    findCourseTimeSchedule(
      id?: number,
      courseId?: number,
      scheduleNo?: string,
      classDay?: string,
      classTimeS?: string,
      classTimeE?: string,
      place?: string,
      sortProperties?: Array<SortProperty>,
      page?: number,
      size?: number,
      options?: any
    ): Promise<CourseTimeScheduleViewPageApiResponse> {
      return localVarFp
        .findCourseTimeSchedule(
          id,
          courseId,
          scheduleNo,
          classDay,
          classTimeS,
          classTimeE,
          place,
          sortProperties,
          page,
          size,
          options
        )
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary 以 Id 查詢列表
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getCourseTimeSchedule(id: number, options?: any): Promise<CourseTimeScheduleViewApiResponse> {
      return localVarFp.getCourseTimeSchedule(id, options).then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary 修改課程時段主檔
     * @param {UpdateCourseTimeScheduleCommand} [updateCourseTimeScheduleCommand]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    putCourseTimeSchedule(
      updateCourseTimeScheduleCommand?: UpdateCourseTimeScheduleCommand,
      options?: any
    ): Promise<CourseTimeScheduleViewApiResponse> {
      return localVarFp
        .putCourseTimeSchedule(updateCourseTimeScheduleCommand, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary 查詢列表  (*dynamic sort support)
     * @param {QueryCourseTimeScheduleRequest} [queryCourseTimeScheduleRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    queryCourseTimeSchedules(
      queryCourseTimeScheduleRequest?: QueryCourseTimeScheduleRequest,
      options?: any
    ): Promise<CourseTimeScheduleViewPageApiResponse> {
      return localVarFp
        .queryCourseTimeSchedules(queryCourseTimeScheduleRequest, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary 刪除主檔
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    removeCourseTimeSchedule(id: number, options?: any): Promise<Int32ApiResponse> {
      return localVarFp.removeCourseTimeSchedule(id, options).then((request) => request(axios, basePath));
    },
  };
};

/**
 * CourseTimeScheduleApi - interface
 * @export
 * @interface CourseTimeScheduleApi
 */
export interface CourseTimeScheduleApiInterface {
  /**
   *
   * @summary 建立課程時段主檔檔
   * @param {CreateCourseTimeScheduleCommand} [createCourseTimeScheduleCommand]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CourseTimeScheduleApiInterface
   */
  createCourseTimeSchedule(
    createCourseTimeScheduleCommand?: CreateCourseTimeScheduleCommand,
    options?: AxiosRequestConfig
  ): Promise<CourseTimeScheduleViewApiResponse>;

  /**
   *
   * @summary 刪除課程時段主檔
   * @param {DeleteCourseTimeScheduleCommand} [deleteCourseTimeScheduleCommand]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CourseTimeScheduleApiInterface
   */
  deleteCourseTimeSchedule(
    deleteCourseTimeScheduleCommand?: DeleteCourseTimeScheduleCommand,
    options?: AxiosRequestConfig
  ): Promise<CourseTimeScheduleViewApiResponse>;

  /**
   *
   * @summary 查詢課程時段主檔
   * @param {FetchAllCourseTimeScheduleRequest} [fetchAllCourseTimeScheduleRequest]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CourseTimeScheduleApiInterface
   */
  fetchCourseTimeSchedules(
    fetchAllCourseTimeScheduleRequest?: FetchAllCourseTimeScheduleRequest,
    options?: AxiosRequestConfig
  ): Promise<CourseTimeScheduleViewListApiResponse>;

  /**
   *
   * @summary 查詢課程時段主檔
   * @param {number} [id] id
   * @param {number} [courseId] 課程類別CourseManagement.Id
   * @param {string} [scheduleNo] 代號/梯次
   * @param {string} [classDay] 附件類別對應type&#x3D;ClassDay顯示 namevalue存此欄位1：一2：二….
   * @param {string} [classTimeS] 開始時間
   * @param {string} [classTimeE] 結束時間
   * @param {string} [place] 地點
   * @param {Array<SortProperty>} [sortProperties] 查詢欄位排序
   * @param {number} [page] 目前頁數
   * @param {number} [size] 每頁筆數
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CourseTimeScheduleApiInterface
   */
  findCourseTimeSchedule(
    id?: number,
    courseId?: number,
    scheduleNo?: string,
    classDay?: string,
    classTimeS?: string,
    classTimeE?: string,
    place?: string,
    sortProperties?: Array<SortProperty>,
    page?: number,
    size?: number,
    options?: AxiosRequestConfig
  ): Promise<CourseTimeScheduleViewPageApiResponse>;

  /**
   *
   * @summary 以 Id 查詢列表
   * @param {number} id
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CourseTimeScheduleApiInterface
   */
  getCourseTimeSchedule(id: number, options?: AxiosRequestConfig): Promise<CourseTimeScheduleViewApiResponse>;

  /**
   *
   * @summary 修改課程時段主檔
   * @param {UpdateCourseTimeScheduleCommand} [updateCourseTimeScheduleCommand]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CourseTimeScheduleApiInterface
   */
  putCourseTimeSchedule(
    updateCourseTimeScheduleCommand?: UpdateCourseTimeScheduleCommand,
    options?: AxiosRequestConfig
  ): Promise<CourseTimeScheduleViewApiResponse>;

  /**
   *
   * @summary 查詢列表  (*dynamic sort support)
   * @param {QueryCourseTimeScheduleRequest} [queryCourseTimeScheduleRequest]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CourseTimeScheduleApiInterface
   */
  queryCourseTimeSchedules(
    queryCourseTimeScheduleRequest?: QueryCourseTimeScheduleRequest,
    options?: AxiosRequestConfig
  ): Promise<CourseTimeScheduleViewPageApiResponse>;

  /**
   *
   * @summary 刪除主檔
   * @param {number} id
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CourseTimeScheduleApiInterface
   */
  removeCourseTimeSchedule(id: number, options?: AxiosRequestConfig): Promise<Int32ApiResponse>;
}

/**
 * CourseTimeScheduleApi - object-oriented interface
 * @export
 * @class CourseTimeScheduleApi
 * @extends {BaseAPI}
 */
export class CourseTimeScheduleApi extends BaseAPI implements CourseTimeScheduleApiInterface {
  /**
   *
   * @summary 建立課程時段主檔檔
   * @param {CreateCourseTimeScheduleCommand} [createCourseTimeScheduleCommand]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CourseTimeScheduleApi
   */
  public createCourseTimeSchedule(
    createCourseTimeScheduleCommand?: CreateCourseTimeScheduleCommand,
    options?: AxiosRequestConfig
  ) {
    return CourseTimeScheduleApiFp(this.configuration)
      .createCourseTimeSchedule(createCourseTimeScheduleCommand, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary 刪除課程時段主檔
   * @param {DeleteCourseTimeScheduleCommand} [deleteCourseTimeScheduleCommand]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CourseTimeScheduleApi
   */
  public deleteCourseTimeSchedule(
    deleteCourseTimeScheduleCommand?: DeleteCourseTimeScheduleCommand,
    options?: AxiosRequestConfig
  ) {
    return CourseTimeScheduleApiFp(this.configuration)
      .deleteCourseTimeSchedule(deleteCourseTimeScheduleCommand, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary 查詢課程時段主檔
   * @param {FetchAllCourseTimeScheduleRequest} [fetchAllCourseTimeScheduleRequest]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CourseTimeScheduleApi
   */
  public fetchCourseTimeSchedules(
    fetchAllCourseTimeScheduleRequest?: FetchAllCourseTimeScheduleRequest,
    options?: AxiosRequestConfig
  ) {
    return CourseTimeScheduleApiFp(this.configuration)
      .fetchCourseTimeSchedules(fetchAllCourseTimeScheduleRequest, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary 查詢課程時段主檔
   * @param {number} [id] id
   * @param {number} [courseId] 課程類別CourseManagement.Id
   * @param {string} [scheduleNo] 代號/梯次
   * @param {string} [classDay] 附件類別對應type&#x3D;ClassDay顯示 namevalue存此欄位1：一2：二….
   * @param {string} [classTimeS] 開始時間
   * @param {string} [classTimeE] 結束時間
   * @param {string} [place] 地點
   * @param {Array<SortProperty>} [sortProperties] 查詢欄位排序
   * @param {number} [page] 目前頁數
   * @param {number} [size] 每頁筆數
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CourseTimeScheduleApi
   */
  public findCourseTimeSchedule(
    id?: number,
    courseId?: number,
    scheduleNo?: string,
    classDay?: string,
    classTimeS?: string,
    classTimeE?: string,
    place?: string,
    sortProperties?: Array<SortProperty>,
    page?: number,
    size?: number,
    options?: AxiosRequestConfig
  ) {
    return CourseTimeScheduleApiFp(this.configuration)
      .findCourseTimeSchedule(
        id,
        courseId,
        scheduleNo,
        classDay,
        classTimeS,
        classTimeE,
        place,
        sortProperties,
        page,
        size,
        options
      )
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary 以 Id 查詢列表
   * @param {number} id
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CourseTimeScheduleApi
   */
  public getCourseTimeSchedule(id: number, options?: AxiosRequestConfig) {
    return CourseTimeScheduleApiFp(this.configuration)
      .getCourseTimeSchedule(id, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary 修改課程時段主檔
   * @param {UpdateCourseTimeScheduleCommand} [updateCourseTimeScheduleCommand]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CourseTimeScheduleApi
   */
  public putCourseTimeSchedule(
    updateCourseTimeScheduleCommand?: UpdateCourseTimeScheduleCommand,
    options?: AxiosRequestConfig
  ) {
    return CourseTimeScheduleApiFp(this.configuration)
      .putCourseTimeSchedule(updateCourseTimeScheduleCommand, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary 查詢列表  (*dynamic sort support)
   * @param {QueryCourseTimeScheduleRequest} [queryCourseTimeScheduleRequest]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CourseTimeScheduleApi
   */
  public queryCourseTimeSchedules(
    queryCourseTimeScheduleRequest?: QueryCourseTimeScheduleRequest,
    options?: AxiosRequestConfig
  ) {
    return CourseTimeScheduleApiFp(this.configuration)
      .queryCourseTimeSchedules(queryCourseTimeScheduleRequest, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary 刪除主檔
   * @param {number} id
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CourseTimeScheduleApi
   */
  public removeCourseTimeSchedule(id: number, options?: AxiosRequestConfig) {
    return CourseTimeScheduleApiFp(this.configuration)
      .removeCourseTimeSchedule(id, options)
      .then((request) => request(this.axios, this.basePath));
  }
}

/**
 * CourseTimeScheduleTeacherApi - axios parameter creator
 * @export
 */
export const CourseTimeScheduleTeacherApiAxiosParamCreator = function (configuration?: Configuration) {
  return {
    /**
     *
     * @summary 建立課程時段講師主檔檔
     * @param {CreateCourseTimeScheduleTeacherCommand} [createCourseTimeScheduleTeacherCommand]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createCourseTimeScheduleTeacher: async (
      createCourseTimeScheduleTeacherCommand?: CreateCourseTimeScheduleTeacherCommand,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/courseTimeScheduleTeacher`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: "POST", ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication Example-id-1 required
      await setApiKeyToObject(localVarHeaderParameter, "Example-id-1", configuration);

      // authentication JWT_Authorization required
      await setApiKeyToObject(localVarHeaderParameter, "authorization", configuration);

      // authentication example-id-2 required
      await setApiKeyToObject(localVarHeaderParameter, "example-id-2", configuration);

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      localVarRequestOptions.data = serializeDataIfNeeded(
        createCourseTimeScheduleTeacherCommand,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary 刪除課程時段講師主檔
     * @param {DeleteCourseTimeScheduleTeacherCommand} [deleteCourseTimeScheduleTeacherCommand]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteCourseTimeScheduleTeacher: async (
      deleteCourseTimeScheduleTeacherCommand?: DeleteCourseTimeScheduleTeacherCommand,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/courseTimeScheduleTeacher`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: "DELETE", ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication Example-id-1 required
      await setApiKeyToObject(localVarHeaderParameter, "Example-id-1", configuration);

      // authentication JWT_Authorization required
      await setApiKeyToObject(localVarHeaderParameter, "authorization", configuration);

      // authentication example-id-2 required
      await setApiKeyToObject(localVarHeaderParameter, "example-id-2", configuration);

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      localVarRequestOptions.data = serializeDataIfNeeded(
        deleteCourseTimeScheduleTeacherCommand,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary 查詢課程時段講師主檔
     * @param {FetchAllCourseTimeScheduleTeacherRequest} [fetchAllCourseTimeScheduleTeacherRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    fetchCourseTimeScheduleTeachers: async (
      fetchAllCourseTimeScheduleTeacherRequest?: FetchAllCourseTimeScheduleTeacherRequest,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/courseTimeScheduleTeacher/fetch`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: "POST", ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication Example-id-1 required
      await setApiKeyToObject(localVarHeaderParameter, "Example-id-1", configuration);

      // authentication JWT_Authorization required
      await setApiKeyToObject(localVarHeaderParameter, "authorization", configuration);

      // authentication example-id-2 required
      await setApiKeyToObject(localVarHeaderParameter, "example-id-2", configuration);

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      localVarRequestOptions.data = serializeDataIfNeeded(
        fetchAllCourseTimeScheduleTeacherRequest,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary 查詢課程時段講師主檔
     * @param {number} [id] id
     * @param {number} [courseTimeScheduleId] 課程時段CourseTimeSchedule.Id
     * @param {string} [scheduleNo] 代號/梯次
     * @param {number} [teacherId] Teacher.Id
     * @param {Array<SortProperty>} [sortProperties] 查詢欄位排序
     * @param {number} [page] 目前頁數
     * @param {number} [size] 每頁筆數
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    findCourseTimeScheduleTeacher: async (
      id?: number,
      courseTimeScheduleId?: number,
      scheduleNo?: string,
      teacherId?: number,
      sortProperties?: Array<SortProperty>,
      page?: number,
      size?: number,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/courseTimeScheduleTeacher`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: "GET", ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication Example-id-1 required
      await setApiKeyToObject(localVarHeaderParameter, "Example-id-1", configuration);

      // authentication JWT_Authorization required
      await setApiKeyToObject(localVarHeaderParameter, "authorization", configuration);

      // authentication example-id-2 required
      await setApiKeyToObject(localVarHeaderParameter, "example-id-2", configuration);

      if (id !== undefined) {
        localVarQueryParameter["id"] = id;
      }

      if (courseTimeScheduleId !== undefined) {
        localVarQueryParameter["courseTimeScheduleId"] = courseTimeScheduleId;
      }

      if (scheduleNo !== undefined) {
        localVarQueryParameter["scheduleNo"] = scheduleNo;
      }

      if (teacherId !== undefined) {
        localVarQueryParameter["teacherId"] = teacherId;
      }

      if (sortProperties) {
        localVarQueryParameter["sortProperties"] = sortProperties;
      }

      if (page !== undefined) {
        localVarQueryParameter["page"] = page;
      }

      if (size !== undefined) {
        localVarQueryParameter["size"] = size;
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary 以 Id 查詢列表
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getCourseTimeScheduleTeacher: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists("getCourseTimeScheduleTeacher", "id", id);
      const localVarPath = `/api/courseTimeScheduleTeacher/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(id)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: "GET", ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication Example-id-1 required
      await setApiKeyToObject(localVarHeaderParameter, "Example-id-1", configuration);

      // authentication JWT_Authorization required
      await setApiKeyToObject(localVarHeaderParameter, "authorization", configuration);

      // authentication example-id-2 required
      await setApiKeyToObject(localVarHeaderParameter, "example-id-2", configuration);

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary 修改課程時段講師主檔
     * @param {UpdateCourseTimeScheduleTeacherCommand} [updateCourseTimeScheduleTeacherCommand]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    putCourseTimeScheduleTeacher: async (
      updateCourseTimeScheduleTeacherCommand?: UpdateCourseTimeScheduleTeacherCommand,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/courseTimeScheduleTeacher`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: "PUT", ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication Example-id-1 required
      await setApiKeyToObject(localVarHeaderParameter, "Example-id-1", configuration);

      // authentication JWT_Authorization required
      await setApiKeyToObject(localVarHeaderParameter, "authorization", configuration);

      // authentication example-id-2 required
      await setApiKeyToObject(localVarHeaderParameter, "example-id-2", configuration);

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      localVarRequestOptions.data = serializeDataIfNeeded(
        updateCourseTimeScheduleTeacherCommand,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary 查詢列表  (*dynamic sort support)
     * @param {QueryCourseTimeScheduleTeacherRequest} [queryCourseTimeScheduleTeacherRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    queryCourseTimeScheduleTeachers: async (
      queryCourseTimeScheduleTeacherRequest?: QueryCourseTimeScheduleTeacherRequest,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/courseTimeScheduleTeacher/query`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: "POST", ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication Example-id-1 required
      await setApiKeyToObject(localVarHeaderParameter, "Example-id-1", configuration);

      // authentication JWT_Authorization required
      await setApiKeyToObject(localVarHeaderParameter, "authorization", configuration);

      // authentication example-id-2 required
      await setApiKeyToObject(localVarHeaderParameter, "example-id-2", configuration);

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      localVarRequestOptions.data = serializeDataIfNeeded(
        queryCourseTimeScheduleTeacherRequest,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary 刪除主檔
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    removeCourseTimeScheduleTeacher: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists("removeCourseTimeScheduleTeacher", "id", id);
      const localVarPath = `/api/courseTimeScheduleTeacher/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(id)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: "DELETE", ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication Example-id-1 required
      await setApiKeyToObject(localVarHeaderParameter, "Example-id-1", configuration);

      // authentication JWT_Authorization required
      await setApiKeyToObject(localVarHeaderParameter, "authorization", configuration);

      // authentication example-id-2 required
      await setApiKeyToObject(localVarHeaderParameter, "example-id-2", configuration);

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * CourseTimeScheduleTeacherApi - functional programming interface
 * @export
 */
export const CourseTimeScheduleTeacherApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = CourseTimeScheduleTeacherApiAxiosParamCreator(configuration);
  return {
    /**
     *
     * @summary 建立課程時段講師主檔檔
     * @param {CreateCourseTimeScheduleTeacherCommand} [createCourseTimeScheduleTeacherCommand]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async createCourseTimeScheduleTeacher(
      createCourseTimeScheduleTeacherCommand?: CreateCourseTimeScheduleTeacherCommand,
      options?: AxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<CourseTimeScheduleTeacherViewApiResponse>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.createCourseTimeScheduleTeacher(
        createCourseTimeScheduleTeacherCommand,
        options
      );
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     *
     * @summary 刪除課程時段講師主檔
     * @param {DeleteCourseTimeScheduleTeacherCommand} [deleteCourseTimeScheduleTeacherCommand]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async deleteCourseTimeScheduleTeacher(
      deleteCourseTimeScheduleTeacherCommand?: DeleteCourseTimeScheduleTeacherCommand,
      options?: AxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<CourseTimeScheduleTeacherViewApiResponse>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.deleteCourseTimeScheduleTeacher(
        deleteCourseTimeScheduleTeacherCommand,
        options
      );
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     *
     * @summary 查詢課程時段講師主檔
     * @param {FetchAllCourseTimeScheduleTeacherRequest} [fetchAllCourseTimeScheduleTeacherRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async fetchCourseTimeScheduleTeachers(
      fetchAllCourseTimeScheduleTeacherRequest?: FetchAllCourseTimeScheduleTeacherRequest,
      options?: AxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<CourseTimeScheduleTeacherViewListApiResponse>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.fetchCourseTimeScheduleTeachers(
        fetchAllCourseTimeScheduleTeacherRequest,
        options
      );
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     *
     * @summary 查詢課程時段講師主檔
     * @param {number} [id] id
     * @param {number} [courseTimeScheduleId] 課程時段CourseTimeSchedule.Id
     * @param {string} [scheduleNo] 代號/梯次
     * @param {number} [teacherId] Teacher.Id
     * @param {Array<SortProperty>} [sortProperties] 查詢欄位排序
     * @param {number} [page] 目前頁數
     * @param {number} [size] 每頁筆數
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async findCourseTimeScheduleTeacher(
      id?: number,
      courseTimeScheduleId?: number,
      scheduleNo?: string,
      teacherId?: number,
      sortProperties?: Array<SortProperty>,
      page?: number,
      size?: number,
      options?: AxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<CourseTimeScheduleTeacherViewPageApiResponse>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.findCourseTimeScheduleTeacher(
        id,
        courseTimeScheduleId,
        scheduleNo,
        teacherId,
        sortProperties,
        page,
        size,
        options
      );
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     *
     * @summary 以 Id 查詢列表
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getCourseTimeScheduleTeacher(
      id: number,
      options?: AxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<CourseTimeScheduleTeacherViewApiResponse>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getCourseTimeScheduleTeacher(id, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     *
     * @summary 修改課程時段講師主檔
     * @param {UpdateCourseTimeScheduleTeacherCommand} [updateCourseTimeScheduleTeacherCommand]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async putCourseTimeScheduleTeacher(
      updateCourseTimeScheduleTeacherCommand?: UpdateCourseTimeScheduleTeacherCommand,
      options?: AxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<CourseTimeScheduleTeacherViewApiResponse>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.putCourseTimeScheduleTeacher(
        updateCourseTimeScheduleTeacherCommand,
        options
      );
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     *
     * @summary 查詢列表  (*dynamic sort support)
     * @param {QueryCourseTimeScheduleTeacherRequest} [queryCourseTimeScheduleTeacherRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async queryCourseTimeScheduleTeachers(
      queryCourseTimeScheduleTeacherRequest?: QueryCourseTimeScheduleTeacherRequest,
      options?: AxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<CourseTimeScheduleTeacherViewPageApiResponse>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.queryCourseTimeScheduleTeachers(
        queryCourseTimeScheduleTeacherRequest,
        options
      );
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     *
     * @summary 刪除主檔
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async removeCourseTimeScheduleTeacher(
      id: number,
      options?: AxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<Int32ApiResponse>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.removeCourseTimeScheduleTeacher(id, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
  };
};

/**
 * CourseTimeScheduleTeacherApi - factory interface
 * @export
 */
export const CourseTimeScheduleTeacherApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance
) {
  const localVarFp = CourseTimeScheduleTeacherApiFp(configuration);
  return {
    /**
     *
     * @summary 建立課程時段講師主檔檔
     * @param {CreateCourseTimeScheduleTeacherCommand} [createCourseTimeScheduleTeacherCommand]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createCourseTimeScheduleTeacher(
      createCourseTimeScheduleTeacherCommand?: CreateCourseTimeScheduleTeacherCommand,
      options?: any
    ): Promise<CourseTimeScheduleTeacherViewApiResponse> {
      return localVarFp
        .createCourseTimeScheduleTeacher(createCourseTimeScheduleTeacherCommand, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary 刪除課程時段講師主檔
     * @param {DeleteCourseTimeScheduleTeacherCommand} [deleteCourseTimeScheduleTeacherCommand]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteCourseTimeScheduleTeacher(
      deleteCourseTimeScheduleTeacherCommand?: DeleteCourseTimeScheduleTeacherCommand,
      options?: any
    ): Promise<CourseTimeScheduleTeacherViewApiResponse> {
      return localVarFp
        .deleteCourseTimeScheduleTeacher(deleteCourseTimeScheduleTeacherCommand, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary 查詢課程時段講師主檔
     * @param {FetchAllCourseTimeScheduleTeacherRequest} [fetchAllCourseTimeScheduleTeacherRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    fetchCourseTimeScheduleTeachers(
      fetchAllCourseTimeScheduleTeacherRequest?: FetchAllCourseTimeScheduleTeacherRequest,
      options?: any
    ): Promise<CourseTimeScheduleTeacherViewListApiResponse> {
      return localVarFp
        .fetchCourseTimeScheduleTeachers(fetchAllCourseTimeScheduleTeacherRequest, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary 查詢課程時段講師主檔
     * @param {number} [id] id
     * @param {number} [courseTimeScheduleId] 課程時段CourseTimeSchedule.Id
     * @param {string} [scheduleNo] 代號/梯次
     * @param {number} [teacherId] Teacher.Id
     * @param {Array<SortProperty>} [sortProperties] 查詢欄位排序
     * @param {number} [page] 目前頁數
     * @param {number} [size] 每頁筆數
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    findCourseTimeScheduleTeacher(
      id?: number,
      courseTimeScheduleId?: number,
      scheduleNo?: string,
      teacherId?: number,
      sortProperties?: Array<SortProperty>,
      page?: number,
      size?: number,
      options?: any
    ): Promise<CourseTimeScheduleTeacherViewPageApiResponse> {
      return localVarFp
        .findCourseTimeScheduleTeacher(
          id,
          courseTimeScheduleId,
          scheduleNo,
          teacherId,
          sortProperties,
          page,
          size,
          options
        )
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary 以 Id 查詢列表
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getCourseTimeScheduleTeacher(id: number, options?: any): Promise<CourseTimeScheduleTeacherViewApiResponse> {
      return localVarFp.getCourseTimeScheduleTeacher(id, options).then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary 修改課程時段講師主檔
     * @param {UpdateCourseTimeScheduleTeacherCommand} [updateCourseTimeScheduleTeacherCommand]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    putCourseTimeScheduleTeacher(
      updateCourseTimeScheduleTeacherCommand?: UpdateCourseTimeScheduleTeacherCommand,
      options?: any
    ): Promise<CourseTimeScheduleTeacherViewApiResponse> {
      return localVarFp
        .putCourseTimeScheduleTeacher(updateCourseTimeScheduleTeacherCommand, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary 查詢列表  (*dynamic sort support)
     * @param {QueryCourseTimeScheduleTeacherRequest} [queryCourseTimeScheduleTeacherRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    queryCourseTimeScheduleTeachers(
      queryCourseTimeScheduleTeacherRequest?: QueryCourseTimeScheduleTeacherRequest,
      options?: any
    ): Promise<CourseTimeScheduleTeacherViewPageApiResponse> {
      return localVarFp
        .queryCourseTimeScheduleTeachers(queryCourseTimeScheduleTeacherRequest, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary 刪除主檔
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    removeCourseTimeScheduleTeacher(id: number, options?: any): Promise<Int32ApiResponse> {
      return localVarFp.removeCourseTimeScheduleTeacher(id, options).then((request) => request(axios, basePath));
    },
  };
};

/**
 * CourseTimeScheduleTeacherApi - interface
 * @export
 * @interface CourseTimeScheduleTeacherApi
 */
export interface CourseTimeScheduleTeacherApiInterface {
  /**
   *
   * @summary 建立課程時段講師主檔檔
   * @param {CreateCourseTimeScheduleTeacherCommand} [createCourseTimeScheduleTeacherCommand]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CourseTimeScheduleTeacherApiInterface
   */
  createCourseTimeScheduleTeacher(
    createCourseTimeScheduleTeacherCommand?: CreateCourseTimeScheduleTeacherCommand,
    options?: AxiosRequestConfig
  ): Promise<CourseTimeScheduleTeacherViewApiResponse>;

  /**
   *
   * @summary 刪除課程時段講師主檔
   * @param {DeleteCourseTimeScheduleTeacherCommand} [deleteCourseTimeScheduleTeacherCommand]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CourseTimeScheduleTeacherApiInterface
   */
  deleteCourseTimeScheduleTeacher(
    deleteCourseTimeScheduleTeacherCommand?: DeleteCourseTimeScheduleTeacherCommand,
    options?: AxiosRequestConfig
  ): Promise<CourseTimeScheduleTeacherViewApiResponse>;

  /**
   *
   * @summary 查詢課程時段講師主檔
   * @param {FetchAllCourseTimeScheduleTeacherRequest} [fetchAllCourseTimeScheduleTeacherRequest]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CourseTimeScheduleTeacherApiInterface
   */
  fetchCourseTimeScheduleTeachers(
    fetchAllCourseTimeScheduleTeacherRequest?: FetchAllCourseTimeScheduleTeacherRequest,
    options?: AxiosRequestConfig
  ): Promise<CourseTimeScheduleTeacherViewListApiResponse>;

  /**
   *
   * @summary 查詢課程時段講師主檔
   * @param {number} [id] id
   * @param {number} [courseTimeScheduleId] 課程時段CourseTimeSchedule.Id
   * @param {string} [scheduleNo] 代號/梯次
   * @param {number} [teacherId] Teacher.Id
   * @param {Array<SortProperty>} [sortProperties] 查詢欄位排序
   * @param {number} [page] 目前頁數
   * @param {number} [size] 每頁筆數
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CourseTimeScheduleTeacherApiInterface
   */
  findCourseTimeScheduleTeacher(
    id?: number,
    courseTimeScheduleId?: number,
    scheduleNo?: string,
    teacherId?: number,
    sortProperties?: Array<SortProperty>,
    page?: number,
    size?: number,
    options?: AxiosRequestConfig
  ): Promise<CourseTimeScheduleTeacherViewPageApiResponse>;

  /**
   *
   * @summary 以 Id 查詢列表
   * @param {number} id
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CourseTimeScheduleTeacherApiInterface
   */
  getCourseTimeScheduleTeacher(
    id: number,
    options?: AxiosRequestConfig
  ): Promise<CourseTimeScheduleTeacherViewApiResponse>;

  /**
   *
   * @summary 修改課程時段講師主檔
   * @param {UpdateCourseTimeScheduleTeacherCommand} [updateCourseTimeScheduleTeacherCommand]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CourseTimeScheduleTeacherApiInterface
   */
  putCourseTimeScheduleTeacher(
    updateCourseTimeScheduleTeacherCommand?: UpdateCourseTimeScheduleTeacherCommand,
    options?: AxiosRequestConfig
  ): Promise<CourseTimeScheduleTeacherViewApiResponse>;

  /**
   *
   * @summary 查詢列表  (*dynamic sort support)
   * @param {QueryCourseTimeScheduleTeacherRequest} [queryCourseTimeScheduleTeacherRequest]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CourseTimeScheduleTeacherApiInterface
   */
  queryCourseTimeScheduleTeachers(
    queryCourseTimeScheduleTeacherRequest?: QueryCourseTimeScheduleTeacherRequest,
    options?: AxiosRequestConfig
  ): Promise<CourseTimeScheduleTeacherViewPageApiResponse>;

  /**
   *
   * @summary 刪除主檔
   * @param {number} id
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CourseTimeScheduleTeacherApiInterface
   */
  removeCourseTimeScheduleTeacher(id: number, options?: AxiosRequestConfig): Promise<Int32ApiResponse>;
}

/**
 * CourseTimeScheduleTeacherApi - object-oriented interface
 * @export
 * @class CourseTimeScheduleTeacherApi
 * @extends {BaseAPI}
 */
export class CourseTimeScheduleTeacherApi extends BaseAPI implements CourseTimeScheduleTeacherApiInterface {
  /**
   *
   * @summary 建立課程時段講師主檔檔
   * @param {CreateCourseTimeScheduleTeacherCommand} [createCourseTimeScheduleTeacherCommand]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CourseTimeScheduleTeacherApi
   */
  public createCourseTimeScheduleTeacher(
    createCourseTimeScheduleTeacherCommand?: CreateCourseTimeScheduleTeacherCommand,
    options?: AxiosRequestConfig
  ) {
    return CourseTimeScheduleTeacherApiFp(this.configuration)
      .createCourseTimeScheduleTeacher(createCourseTimeScheduleTeacherCommand, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary 刪除課程時段講師主檔
   * @param {DeleteCourseTimeScheduleTeacherCommand} [deleteCourseTimeScheduleTeacherCommand]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CourseTimeScheduleTeacherApi
   */
  public deleteCourseTimeScheduleTeacher(
    deleteCourseTimeScheduleTeacherCommand?: DeleteCourseTimeScheduleTeacherCommand,
    options?: AxiosRequestConfig
  ) {
    return CourseTimeScheduleTeacherApiFp(this.configuration)
      .deleteCourseTimeScheduleTeacher(deleteCourseTimeScheduleTeacherCommand, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary 查詢課程時段講師主檔
   * @param {FetchAllCourseTimeScheduleTeacherRequest} [fetchAllCourseTimeScheduleTeacherRequest]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CourseTimeScheduleTeacherApi
   */
  public fetchCourseTimeScheduleTeachers(
    fetchAllCourseTimeScheduleTeacherRequest?: FetchAllCourseTimeScheduleTeacherRequest,
    options?: AxiosRequestConfig
  ) {
    return CourseTimeScheduleTeacherApiFp(this.configuration)
      .fetchCourseTimeScheduleTeachers(fetchAllCourseTimeScheduleTeacherRequest, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary 查詢課程時段講師主檔
   * @param {number} [id] id
   * @param {number} [courseTimeScheduleId] 課程時段CourseTimeSchedule.Id
   * @param {string} [scheduleNo] 代號/梯次
   * @param {number} [teacherId] Teacher.Id
   * @param {Array<SortProperty>} [sortProperties] 查詢欄位排序
   * @param {number} [page] 目前頁數
   * @param {number} [size] 每頁筆數
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CourseTimeScheduleTeacherApi
   */
  public findCourseTimeScheduleTeacher(
    id?: number,
    courseTimeScheduleId?: number,
    scheduleNo?: string,
    teacherId?: number,
    sortProperties?: Array<SortProperty>,
    page?: number,
    size?: number,
    options?: AxiosRequestConfig
  ) {
    return CourseTimeScheduleTeacherApiFp(this.configuration)
      .findCourseTimeScheduleTeacher(
        id,
        courseTimeScheduleId,
        scheduleNo,
        teacherId,
        sortProperties,
        page,
        size,
        options
      )
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary 以 Id 查詢列表
   * @param {number} id
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CourseTimeScheduleTeacherApi
   */
  public getCourseTimeScheduleTeacher(id: number, options?: AxiosRequestConfig) {
    return CourseTimeScheduleTeacherApiFp(this.configuration)
      .getCourseTimeScheduleTeacher(id, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary 修改課程時段講師主檔
   * @param {UpdateCourseTimeScheduleTeacherCommand} [updateCourseTimeScheduleTeacherCommand]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CourseTimeScheduleTeacherApi
   */
  public putCourseTimeScheduleTeacher(
    updateCourseTimeScheduleTeacherCommand?: UpdateCourseTimeScheduleTeacherCommand,
    options?: AxiosRequestConfig
  ) {
    return CourseTimeScheduleTeacherApiFp(this.configuration)
      .putCourseTimeScheduleTeacher(updateCourseTimeScheduleTeacherCommand, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary 查詢列表  (*dynamic sort support)
   * @param {QueryCourseTimeScheduleTeacherRequest} [queryCourseTimeScheduleTeacherRequest]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CourseTimeScheduleTeacherApi
   */
  public queryCourseTimeScheduleTeachers(
    queryCourseTimeScheduleTeacherRequest?: QueryCourseTimeScheduleTeacherRequest,
    options?: AxiosRequestConfig
  ) {
    return CourseTimeScheduleTeacherApiFp(this.configuration)
      .queryCourseTimeScheduleTeachers(queryCourseTimeScheduleTeacherRequest, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary 刪除主檔
   * @param {number} id
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CourseTimeScheduleTeacherApi
   */
  public removeCourseTimeScheduleTeacher(id: number, options?: AxiosRequestConfig) {
    return CourseTimeScheduleTeacherApiFp(this.configuration)
      .removeCourseTimeScheduleTeacher(id, options)
      .then((request) => request(this.axios, this.basePath));
  }
}

/**
 * CourseTimeScheduleUserApi - axios parameter creator
 * @export
 */
export const CourseTimeScheduleUserApiAxiosParamCreator = function (configuration?: Configuration) {
  return {
    /**
     *
     * @summary 建立課程時段學員主檔檔
     * @param {CreateCourseTimeScheduleUserCommand} [createCourseTimeScheduleUserCommand]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createCourseTimeScheduleUser: async (
      createCourseTimeScheduleUserCommand?: CreateCourseTimeScheduleUserCommand,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/courseTimeScheduleUser`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: "POST", ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication Example-id-1 required
      await setApiKeyToObject(localVarHeaderParameter, "Example-id-1", configuration);

      // authentication JWT_Authorization required
      await setApiKeyToObject(localVarHeaderParameter, "authorization", configuration);

      // authentication example-id-2 required
      await setApiKeyToObject(localVarHeaderParameter, "example-id-2", configuration);

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      localVarRequestOptions.data = serializeDataIfNeeded(
        createCourseTimeScheduleUserCommand,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary 刪除課程時段學員主檔
     * @param {DeleteCourseTimeScheduleUserCommand} [deleteCourseTimeScheduleUserCommand]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteCourseTimeScheduleUser: async (
      deleteCourseTimeScheduleUserCommand?: DeleteCourseTimeScheduleUserCommand,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/courseTimeScheduleUser`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: "DELETE", ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication Example-id-1 required
      await setApiKeyToObject(localVarHeaderParameter, "Example-id-1", configuration);

      // authentication JWT_Authorization required
      await setApiKeyToObject(localVarHeaderParameter, "authorization", configuration);

      // authentication example-id-2 required
      await setApiKeyToObject(localVarHeaderParameter, "example-id-2", configuration);

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      localVarRequestOptions.data = serializeDataIfNeeded(
        deleteCourseTimeScheduleUserCommand,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary 查詢課程時段學員主檔
     * @param {FetchAllCourseTimeScheduleUserRequest} [fetchAllCourseTimeScheduleUserRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    fetchCourseTimeScheduleUsers: async (
      fetchAllCourseTimeScheduleUserRequest?: FetchAllCourseTimeScheduleUserRequest,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/courseTimeScheduleUser/fetch`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: "POST", ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication Example-id-1 required
      await setApiKeyToObject(localVarHeaderParameter, "Example-id-1", configuration);

      // authentication JWT_Authorization required
      await setApiKeyToObject(localVarHeaderParameter, "authorization", configuration);

      // authentication example-id-2 required
      await setApiKeyToObject(localVarHeaderParameter, "example-id-2", configuration);

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      localVarRequestOptions.data = serializeDataIfNeeded(
        fetchAllCourseTimeScheduleUserRequest,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary 查詢課程時段學員主檔
     * @param {number} [id] id
     * @param {number} [courseTimeScheduleId] 課程時段CourseTimeSchedule.Id
     * @param {string} [scheduleNo] 代號/梯次
     * @param {number} [userId] User.Id
     * @param {string} [attendanceType] 出席狀態
     * @param {Array<SortProperty>} [sortProperties] 查詢欄位排序
     * @param {number} [page] 目前頁數
     * @param {number} [size] 每頁筆數
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    findCourseTimeScheduleUser: async (
      id?: number,
      courseTimeScheduleId?: number,
      scheduleNo?: string,
      userId?: number,
      attendanceType?: string,
      sortProperties?: Array<SortProperty>,
      page?: number,
      size?: number,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/courseTimeScheduleUser`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: "GET", ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication Example-id-1 required
      await setApiKeyToObject(localVarHeaderParameter, "Example-id-1", configuration);

      // authentication JWT_Authorization required
      await setApiKeyToObject(localVarHeaderParameter, "authorization", configuration);

      // authentication example-id-2 required
      await setApiKeyToObject(localVarHeaderParameter, "example-id-2", configuration);

      if (id !== undefined) {
        localVarQueryParameter["id"] = id;
      }

      if (courseTimeScheduleId !== undefined) {
        localVarQueryParameter["courseTimeScheduleId"] = courseTimeScheduleId;
      }

      if (scheduleNo !== undefined) {
        localVarQueryParameter["scheduleNo"] = scheduleNo;
      }

      if (userId !== undefined) {
        localVarQueryParameter["userId"] = userId;
      }

      if (attendanceType !== undefined) {
        localVarQueryParameter["attendanceType"] = attendanceType;
      }

      if (sortProperties) {
        localVarQueryParameter["sortProperties"] = sortProperties;
      }

      if (page !== undefined) {
        localVarQueryParameter["page"] = page;
      }

      if (size !== undefined) {
        localVarQueryParameter["size"] = size;
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary 以 Id 查詢列表
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getCourseTimeScheduleUser: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists("getCourseTimeScheduleUser", "id", id);
      const localVarPath = `/api/courseTimeScheduleUser/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(id)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: "GET", ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication Example-id-1 required
      await setApiKeyToObject(localVarHeaderParameter, "Example-id-1", configuration);

      // authentication JWT_Authorization required
      await setApiKeyToObject(localVarHeaderParameter, "authorization", configuration);

      // authentication example-id-2 required
      await setApiKeyToObject(localVarHeaderParameter, "example-id-2", configuration);

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary 修改課程時段學員主檔
     * @param {UpdateCourseTimeScheduleUserCommand} [updateCourseTimeScheduleUserCommand]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    putCourseTimeScheduleUser: async (
      updateCourseTimeScheduleUserCommand?: UpdateCourseTimeScheduleUserCommand,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/courseTimeScheduleUser`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: "PUT", ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication Example-id-1 required
      await setApiKeyToObject(localVarHeaderParameter, "Example-id-1", configuration);

      // authentication JWT_Authorization required
      await setApiKeyToObject(localVarHeaderParameter, "authorization", configuration);

      // authentication example-id-2 required
      await setApiKeyToObject(localVarHeaderParameter, "example-id-2", configuration);

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      localVarRequestOptions.data = serializeDataIfNeeded(
        updateCourseTimeScheduleUserCommand,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary 查詢列表  (*dynamic sort support)
     * @param {QueryCourseTimeScheduleUserRequest} [queryCourseTimeScheduleUserRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    queryCourseTimeScheduleUsers: async (
      queryCourseTimeScheduleUserRequest?: QueryCourseTimeScheduleUserRequest,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/courseTimeScheduleUser/query`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: "POST", ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication Example-id-1 required
      await setApiKeyToObject(localVarHeaderParameter, "Example-id-1", configuration);

      // authentication JWT_Authorization required
      await setApiKeyToObject(localVarHeaderParameter, "authorization", configuration);

      // authentication example-id-2 required
      await setApiKeyToObject(localVarHeaderParameter, "example-id-2", configuration);

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      localVarRequestOptions.data = serializeDataIfNeeded(
        queryCourseTimeScheduleUserRequest,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary 刪除主檔
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    removeCourseTimeScheduleUser: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists("removeCourseTimeScheduleUser", "id", id);
      const localVarPath = `/api/courseTimeScheduleUser/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(id)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: "DELETE", ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication Example-id-1 required
      await setApiKeyToObject(localVarHeaderParameter, "Example-id-1", configuration);

      // authentication JWT_Authorization required
      await setApiKeyToObject(localVarHeaderParameter, "authorization", configuration);

      // authentication example-id-2 required
      await setApiKeyToObject(localVarHeaderParameter, "example-id-2", configuration);

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * CourseTimeScheduleUserApi - functional programming interface
 * @export
 */
export const CourseTimeScheduleUserApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = CourseTimeScheduleUserApiAxiosParamCreator(configuration);
  return {
    /**
     *
     * @summary 建立課程時段學員主檔檔
     * @param {CreateCourseTimeScheduleUserCommand} [createCourseTimeScheduleUserCommand]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async createCourseTimeScheduleUser(
      createCourseTimeScheduleUserCommand?: CreateCourseTimeScheduleUserCommand,
      options?: AxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<CourseTimeScheduleUserViewApiResponse>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.createCourseTimeScheduleUser(
        createCourseTimeScheduleUserCommand,
        options
      );
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     *
     * @summary 刪除課程時段學員主檔
     * @param {DeleteCourseTimeScheduleUserCommand} [deleteCourseTimeScheduleUserCommand]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async deleteCourseTimeScheduleUser(
      deleteCourseTimeScheduleUserCommand?: DeleteCourseTimeScheduleUserCommand,
      options?: AxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<CourseTimeScheduleUserViewApiResponse>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.deleteCourseTimeScheduleUser(
        deleteCourseTimeScheduleUserCommand,
        options
      );
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     *
     * @summary 查詢課程時段學員主檔
     * @param {FetchAllCourseTimeScheduleUserRequest} [fetchAllCourseTimeScheduleUserRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async fetchCourseTimeScheduleUsers(
      fetchAllCourseTimeScheduleUserRequest?: FetchAllCourseTimeScheduleUserRequest,
      options?: AxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<CourseTimeScheduleUserViewListApiResponse>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.fetchCourseTimeScheduleUsers(
        fetchAllCourseTimeScheduleUserRequest,
        options
      );
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     *
     * @summary 查詢課程時段學員主檔
     * @param {number} [id] id
     * @param {number} [courseTimeScheduleId] 課程時段CourseTimeSchedule.Id
     * @param {string} [scheduleNo] 代號/梯次
     * @param {number} [userId] User.Id
     * @param {string} [attendanceType] 出席狀態
     * @param {Array<SortProperty>} [sortProperties] 查詢欄位排序
     * @param {number} [page] 目前頁數
     * @param {number} [size] 每頁筆數
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async findCourseTimeScheduleUser(
      id?: number,
      courseTimeScheduleId?: number,
      scheduleNo?: string,
      userId?: number,
      attendanceType?: string,
      sortProperties?: Array<SortProperty>,
      page?: number,
      size?: number,
      options?: AxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<CourseTimeScheduleUserViewPageApiResponse>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.findCourseTimeScheduleUser(
        id,
        courseTimeScheduleId,
        scheduleNo,
        userId,
        attendanceType,
        sortProperties,
        page,
        size,
        options
      );
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     *
     * @summary 以 Id 查詢列表
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getCourseTimeScheduleUser(
      id: number,
      options?: AxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<CourseTimeScheduleUserViewApiResponse>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getCourseTimeScheduleUser(id, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     *
     * @summary 修改課程時段學員主檔
     * @param {UpdateCourseTimeScheduleUserCommand} [updateCourseTimeScheduleUserCommand]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async putCourseTimeScheduleUser(
      updateCourseTimeScheduleUserCommand?: UpdateCourseTimeScheduleUserCommand,
      options?: AxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<CourseTimeScheduleUserViewApiResponse>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.putCourseTimeScheduleUser(
        updateCourseTimeScheduleUserCommand,
        options
      );
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     *
     * @summary 查詢列表  (*dynamic sort support)
     * @param {QueryCourseTimeScheduleUserRequest} [queryCourseTimeScheduleUserRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async queryCourseTimeScheduleUsers(
      queryCourseTimeScheduleUserRequest?: QueryCourseTimeScheduleUserRequest,
      options?: AxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<CourseTimeScheduleUserViewPageApiResponse>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.queryCourseTimeScheduleUsers(
        queryCourseTimeScheduleUserRequest,
        options
      );
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     *
     * @summary 刪除主檔
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async removeCourseTimeScheduleUser(
      id: number,
      options?: AxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<Int32ApiResponse>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.removeCourseTimeScheduleUser(id, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
  };
};

/**
 * CourseTimeScheduleUserApi - factory interface
 * @export
 */
export const CourseTimeScheduleUserApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance
) {
  const localVarFp = CourseTimeScheduleUserApiFp(configuration);
  return {
    /**
     *
     * @summary 建立課程時段學員主檔檔
     * @param {CreateCourseTimeScheduleUserCommand} [createCourseTimeScheduleUserCommand]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createCourseTimeScheduleUser(
      createCourseTimeScheduleUserCommand?: CreateCourseTimeScheduleUserCommand,
      options?: any
    ): Promise<CourseTimeScheduleUserViewApiResponse> {
      return localVarFp
        .createCourseTimeScheduleUser(createCourseTimeScheduleUserCommand, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary 刪除課程時段學員主檔
     * @param {DeleteCourseTimeScheduleUserCommand} [deleteCourseTimeScheduleUserCommand]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteCourseTimeScheduleUser(
      deleteCourseTimeScheduleUserCommand?: DeleteCourseTimeScheduleUserCommand,
      options?: any
    ): Promise<CourseTimeScheduleUserViewApiResponse> {
      return localVarFp
        .deleteCourseTimeScheduleUser(deleteCourseTimeScheduleUserCommand, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary 查詢課程時段學員主檔
     * @param {FetchAllCourseTimeScheduleUserRequest} [fetchAllCourseTimeScheduleUserRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    fetchCourseTimeScheduleUsers(
      fetchAllCourseTimeScheduleUserRequest?: FetchAllCourseTimeScheduleUserRequest,
      options?: any
    ): Promise<CourseTimeScheduleUserViewListApiResponse> {
      return localVarFp
        .fetchCourseTimeScheduleUsers(fetchAllCourseTimeScheduleUserRequest, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary 查詢課程時段學員主檔
     * @param {number} [id] id
     * @param {number} [courseTimeScheduleId] 課程時段CourseTimeSchedule.Id
     * @param {string} [scheduleNo] 代號/梯次
     * @param {number} [userId] User.Id
     * @param {string} [attendanceType] 出席狀態
     * @param {Array<SortProperty>} [sortProperties] 查詢欄位排序
     * @param {number} [page] 目前頁數
     * @param {number} [size] 每頁筆數
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    findCourseTimeScheduleUser(
      id?: number,
      courseTimeScheduleId?: number,
      scheduleNo?: string,
      userId?: number,
      attendanceType?: string,
      sortProperties?: Array<SortProperty>,
      page?: number,
      size?: number,
      options?: any
    ): Promise<CourseTimeScheduleUserViewPageApiResponse> {
      return localVarFp
        .findCourseTimeScheduleUser(
          id,
          courseTimeScheduleId,
          scheduleNo,
          userId,
          attendanceType,
          sortProperties,
          page,
          size,
          options
        )
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary 以 Id 查詢列表
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getCourseTimeScheduleUser(id: number, options?: any): Promise<CourseTimeScheduleUserViewApiResponse> {
      return localVarFp.getCourseTimeScheduleUser(id, options).then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary 修改課程時段學員主檔
     * @param {UpdateCourseTimeScheduleUserCommand} [updateCourseTimeScheduleUserCommand]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    putCourseTimeScheduleUser(
      updateCourseTimeScheduleUserCommand?: UpdateCourseTimeScheduleUserCommand,
      options?: any
    ): Promise<CourseTimeScheduleUserViewApiResponse> {
      return localVarFp
        .putCourseTimeScheduleUser(updateCourseTimeScheduleUserCommand, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary 查詢列表  (*dynamic sort support)
     * @param {QueryCourseTimeScheduleUserRequest} [queryCourseTimeScheduleUserRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    queryCourseTimeScheduleUsers(
      queryCourseTimeScheduleUserRequest?: QueryCourseTimeScheduleUserRequest,
      options?: any
    ): Promise<CourseTimeScheduleUserViewPageApiResponse> {
      return localVarFp
        .queryCourseTimeScheduleUsers(queryCourseTimeScheduleUserRequest, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary 刪除主檔
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    removeCourseTimeScheduleUser(id: number, options?: any): Promise<Int32ApiResponse> {
      return localVarFp.removeCourseTimeScheduleUser(id, options).then((request) => request(axios, basePath));
    },
  };
};

/**
 * CourseTimeScheduleUserApi - interface
 * @export
 * @interface CourseTimeScheduleUserApi
 */
export interface CourseTimeScheduleUserApiInterface {
  /**
   *
   * @summary 建立課程時段學員主檔檔
   * @param {CreateCourseTimeScheduleUserCommand} [createCourseTimeScheduleUserCommand]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CourseTimeScheduleUserApiInterface
   */
  createCourseTimeScheduleUser(
    createCourseTimeScheduleUserCommand?: CreateCourseTimeScheduleUserCommand,
    options?: AxiosRequestConfig
  ): Promise<CourseTimeScheduleUserViewApiResponse>;

  /**
   *
   * @summary 刪除課程時段學員主檔
   * @param {DeleteCourseTimeScheduleUserCommand} [deleteCourseTimeScheduleUserCommand]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CourseTimeScheduleUserApiInterface
   */
  deleteCourseTimeScheduleUser(
    deleteCourseTimeScheduleUserCommand?: DeleteCourseTimeScheduleUserCommand,
    options?: AxiosRequestConfig
  ): Promise<CourseTimeScheduleUserViewApiResponse>;

  /**
   *
   * @summary 查詢課程時段學員主檔
   * @param {FetchAllCourseTimeScheduleUserRequest} [fetchAllCourseTimeScheduleUserRequest]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CourseTimeScheduleUserApiInterface
   */
  fetchCourseTimeScheduleUsers(
    fetchAllCourseTimeScheduleUserRequest?: FetchAllCourseTimeScheduleUserRequest,
    options?: AxiosRequestConfig
  ): Promise<CourseTimeScheduleUserViewListApiResponse>;

  /**
   *
   * @summary 查詢課程時段學員主檔
   * @param {number} [id] id
   * @param {number} [courseTimeScheduleId] 課程時段CourseTimeSchedule.Id
   * @param {string} [scheduleNo] 代號/梯次
   * @param {number} [userId] User.Id
   * @param {string} [attendanceType] 出席狀態
   * @param {Array<SortProperty>} [sortProperties] 查詢欄位排序
   * @param {number} [page] 目前頁數
   * @param {number} [size] 每頁筆數
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CourseTimeScheduleUserApiInterface
   */
  findCourseTimeScheduleUser(
    id?: number,
    courseTimeScheduleId?: number,
    scheduleNo?: string,
    userId?: number,
    attendanceType?: string,
    sortProperties?: Array<SortProperty>,
    page?: number,
    size?: number,
    options?: AxiosRequestConfig
  ): Promise<CourseTimeScheduleUserViewPageApiResponse>;

  /**
   *
   * @summary 以 Id 查詢列表
   * @param {number} id
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CourseTimeScheduleUserApiInterface
   */
  getCourseTimeScheduleUser(id: number, options?: AxiosRequestConfig): Promise<CourseTimeScheduleUserViewApiResponse>;

  /**
   *
   * @summary 修改課程時段學員主檔
   * @param {UpdateCourseTimeScheduleUserCommand} [updateCourseTimeScheduleUserCommand]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CourseTimeScheduleUserApiInterface
   */
  putCourseTimeScheduleUser(
    updateCourseTimeScheduleUserCommand?: UpdateCourseTimeScheduleUserCommand,
    options?: AxiosRequestConfig
  ): Promise<CourseTimeScheduleUserViewApiResponse>;

  /**
   *
   * @summary 查詢列表  (*dynamic sort support)
   * @param {QueryCourseTimeScheduleUserRequest} [queryCourseTimeScheduleUserRequest]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CourseTimeScheduleUserApiInterface
   */
  queryCourseTimeScheduleUsers(
    queryCourseTimeScheduleUserRequest?: QueryCourseTimeScheduleUserRequest,
    options?: AxiosRequestConfig
  ): Promise<CourseTimeScheduleUserViewPageApiResponse>;

  /**
   *
   * @summary 刪除主檔
   * @param {number} id
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CourseTimeScheduleUserApiInterface
   */
  removeCourseTimeScheduleUser(id: number, options?: AxiosRequestConfig): Promise<Int32ApiResponse>;
}

/**
 * CourseTimeScheduleUserApi - object-oriented interface
 * @export
 * @class CourseTimeScheduleUserApi
 * @extends {BaseAPI}
 */
export class CourseTimeScheduleUserApi extends BaseAPI implements CourseTimeScheduleUserApiInterface {
  /**
   *
   * @summary 建立課程時段學員主檔檔
   * @param {CreateCourseTimeScheduleUserCommand} [createCourseTimeScheduleUserCommand]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CourseTimeScheduleUserApi
   */
  public createCourseTimeScheduleUser(
    createCourseTimeScheduleUserCommand?: CreateCourseTimeScheduleUserCommand,
    options?: AxiosRequestConfig
  ) {
    return CourseTimeScheduleUserApiFp(this.configuration)
      .createCourseTimeScheduleUser(createCourseTimeScheduleUserCommand, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary 刪除課程時段學員主檔
   * @param {DeleteCourseTimeScheduleUserCommand} [deleteCourseTimeScheduleUserCommand]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CourseTimeScheduleUserApi
   */
  public deleteCourseTimeScheduleUser(
    deleteCourseTimeScheduleUserCommand?: DeleteCourseTimeScheduleUserCommand,
    options?: AxiosRequestConfig
  ) {
    return CourseTimeScheduleUserApiFp(this.configuration)
      .deleteCourseTimeScheduleUser(deleteCourseTimeScheduleUserCommand, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary 查詢課程時段學員主檔
   * @param {FetchAllCourseTimeScheduleUserRequest} [fetchAllCourseTimeScheduleUserRequest]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CourseTimeScheduleUserApi
   */
  public fetchCourseTimeScheduleUsers(
    fetchAllCourseTimeScheduleUserRequest?: FetchAllCourseTimeScheduleUserRequest,
    options?: AxiosRequestConfig
  ) {
    return CourseTimeScheduleUserApiFp(this.configuration)
      .fetchCourseTimeScheduleUsers(fetchAllCourseTimeScheduleUserRequest, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary 查詢課程時段學員主檔
   * @param {number} [id] id
   * @param {number} [courseTimeScheduleId] 課程時段CourseTimeSchedule.Id
   * @param {string} [scheduleNo] 代號/梯次
   * @param {number} [userId] User.Id
   * @param {string} [attendanceType] 出席狀態
   * @param {Array<SortProperty>} [sortProperties] 查詢欄位排序
   * @param {number} [page] 目前頁數
   * @param {number} [size] 每頁筆數
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CourseTimeScheduleUserApi
   */
  public findCourseTimeScheduleUser(
    id?: number,
    courseTimeScheduleId?: number,
    scheduleNo?: string,
    userId?: number,
    attendanceType?: string,
    sortProperties?: Array<SortProperty>,
    page?: number,
    size?: number,
    options?: AxiosRequestConfig
  ) {
    return CourseTimeScheduleUserApiFp(this.configuration)
      .findCourseTimeScheduleUser(
        id,
        courseTimeScheduleId,
        scheduleNo,
        userId,
        attendanceType,
        sortProperties,
        page,
        size,
        options
      )
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary 以 Id 查詢列表
   * @param {number} id
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CourseTimeScheduleUserApi
   */
  public getCourseTimeScheduleUser(id: number, options?: AxiosRequestConfig) {
    return CourseTimeScheduleUserApiFp(this.configuration)
      .getCourseTimeScheduleUser(id, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary 修改課程時段學員主檔
   * @param {UpdateCourseTimeScheduleUserCommand} [updateCourseTimeScheduleUserCommand]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CourseTimeScheduleUserApi
   */
  public putCourseTimeScheduleUser(
    updateCourseTimeScheduleUserCommand?: UpdateCourseTimeScheduleUserCommand,
    options?: AxiosRequestConfig
  ) {
    return CourseTimeScheduleUserApiFp(this.configuration)
      .putCourseTimeScheduleUser(updateCourseTimeScheduleUserCommand, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary 查詢列表  (*dynamic sort support)
   * @param {QueryCourseTimeScheduleUserRequest} [queryCourseTimeScheduleUserRequest]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CourseTimeScheduleUserApi
   */
  public queryCourseTimeScheduleUsers(
    queryCourseTimeScheduleUserRequest?: QueryCourseTimeScheduleUserRequest,
    options?: AxiosRequestConfig
  ) {
    return CourseTimeScheduleUserApiFp(this.configuration)
      .queryCourseTimeScheduleUsers(queryCourseTimeScheduleUserRequest, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary 刪除主檔
   * @param {number} id
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CourseTimeScheduleUserApi
   */
  public removeCourseTimeScheduleUser(id: number, options?: AxiosRequestConfig) {
    return CourseTimeScheduleUserApiFp(this.configuration)
      .removeCourseTimeScheduleUser(id, options)
      .then((request) => request(this.axios, this.basePath));
  }
}

/**
 * DeptApi - axios parameter creator
 * @export
 */
export const DeptApiAxiosParamCreator = function (configuration?: Configuration) {
  return {
    /**
     *
     * @summary 建立組織部門
     * @param {CreateDeptCommand} [createDeptCommand]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createDept: async (
      createDeptCommand?: CreateDeptCommand,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/dept`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: "POST", ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication Example-id-1 required
      await setApiKeyToObject(localVarHeaderParameter, "Example-id-1", configuration);

      // authentication JWT_Authorization required
      await setApiKeyToObject(localVarHeaderParameter, "authorization", configuration);

      // authentication example-id-2 required
      await setApiKeyToObject(localVarHeaderParameter, "example-id-2", configuration);

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      localVarRequestOptions.data = serializeDataIfNeeded(createDeptCommand, localVarRequestOptions, configuration);

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary 刪除組織部門
     * @param {DeleteDeptCommand} [deleteDeptCommand]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteDept: async (
      deleteDeptCommand?: DeleteDeptCommand,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/dept`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: "DELETE", ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication Example-id-1 required
      await setApiKeyToObject(localVarHeaderParameter, "Example-id-1", configuration);

      // authentication JWT_Authorization required
      await setApiKeyToObject(localVarHeaderParameter, "authorization", configuration);

      // authentication example-id-2 required
      await setApiKeyToObject(localVarHeaderParameter, "example-id-2", configuration);

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      localVarRequestOptions.data = serializeDataIfNeeded(deleteDeptCommand, localVarRequestOptions, configuration);

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary 查詢組織部門
     * @param {FetchAllDeptRequest} [fetchAllDeptRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    fetchDepts: async (
      fetchAllDeptRequest?: FetchAllDeptRequest,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/dept/fetch`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: "POST", ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication Example-id-1 required
      await setApiKeyToObject(localVarHeaderParameter, "Example-id-1", configuration);

      // authentication JWT_Authorization required
      await setApiKeyToObject(localVarHeaderParameter, "authorization", configuration);

      // authentication example-id-2 required
      await setApiKeyToObject(localVarHeaderParameter, "example-id-2", configuration);

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      localVarRequestOptions.data = serializeDataIfNeeded(fetchAllDeptRequest, localVarRequestOptions, configuration);

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary 查詢組織部門
     * @param {number} [id] Id
     * @param {number} [deptId] 以前欄位Id
     * @param {number} [upperDeptId] 上層
     * @param {number} [pastoralId] 舊欄位對應部門id Portal.Id
     * @param {string} [name] 部門名稱
     * @param {string} [title] 部門主管職稱
     * @param {Array<SortProperty>} [sortProperties] 查詢欄位排序
     * @param {number} [page] 目前頁數
     * @param {number} [size] 每頁筆數
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    findDepts: async (
      id?: number,
      deptId?: number,
      upperDeptId?: number,
      pastoralId?: number,
      name?: string,
      title?: string,
      sortProperties?: Array<SortProperty>,
      page?: number,
      size?: number,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/dept`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: "GET", ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication Example-id-1 required
      await setApiKeyToObject(localVarHeaderParameter, "Example-id-1", configuration);

      // authentication JWT_Authorization required
      await setApiKeyToObject(localVarHeaderParameter, "authorization", configuration);

      // authentication example-id-2 required
      await setApiKeyToObject(localVarHeaderParameter, "example-id-2", configuration);

      if (id !== undefined) {
        localVarQueryParameter["id"] = id;
      }

      if (deptId !== undefined) {
        localVarQueryParameter["deptId"] = deptId;
      }

      if (upperDeptId !== undefined) {
        localVarQueryParameter["upperDeptId"] = upperDeptId;
      }

      if (pastoralId !== undefined) {
        localVarQueryParameter["pastoralId"] = pastoralId;
      }

      if (name !== undefined) {
        localVarQueryParameter["name"] = name;
      }

      if (title !== undefined) {
        localVarQueryParameter["title"] = title;
      }

      if (sortProperties) {
        localVarQueryParameter["sortProperties"] = sortProperties;
      }

      if (page !== undefined) {
        localVarQueryParameter["page"] = page;
      }

      if (size !== undefined) {
        localVarQueryParameter["size"] = size;
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary 以 Id 查詢列表
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getDept: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists("getDept", "id", id);
      const localVarPath = `/api/dept/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(id)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: "GET", ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication Example-id-1 required
      await setApiKeyToObject(localVarHeaderParameter, "Example-id-1", configuration);

      // authentication JWT_Authorization required
      await setApiKeyToObject(localVarHeaderParameter, "authorization", configuration);

      // authentication example-id-2 required
      await setApiKeyToObject(localVarHeaderParameter, "example-id-2", configuration);

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary 修改組織部門
     * @param {UpdateDeptCommand} [updateDeptCommand]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    putDept: async (updateDeptCommand?: UpdateDeptCommand, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
      const localVarPath = `/api/dept`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: "PUT", ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication Example-id-1 required
      await setApiKeyToObject(localVarHeaderParameter, "Example-id-1", configuration);

      // authentication JWT_Authorization required
      await setApiKeyToObject(localVarHeaderParameter, "authorization", configuration);

      // authentication example-id-2 required
      await setApiKeyToObject(localVarHeaderParameter, "example-id-2", configuration);

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      localVarRequestOptions.data = serializeDataIfNeeded(updateDeptCommand, localVarRequestOptions, configuration);

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary 查詢列表  (*dynamic sort support)
     * @param {QueryDeptRequest} [queryDeptRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    queryDepts: async (queryDeptRequest?: QueryDeptRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
      const localVarPath = `/api/dept/query`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: "POST", ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication Example-id-1 required
      await setApiKeyToObject(localVarHeaderParameter, "Example-id-1", configuration);

      // authentication JWT_Authorization required
      await setApiKeyToObject(localVarHeaderParameter, "authorization", configuration);

      // authentication example-id-2 required
      await setApiKeyToObject(localVarHeaderParameter, "example-id-2", configuration);

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      localVarRequestOptions.data = serializeDataIfNeeded(queryDeptRequest, localVarRequestOptions, configuration);

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary 刪除主檔
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    removeDept: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists("removeDept", "id", id);
      const localVarPath = `/api/dept/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(id)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: "DELETE", ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication Example-id-1 required
      await setApiKeyToObject(localVarHeaderParameter, "Example-id-1", configuration);

      // authentication JWT_Authorization required
      await setApiKeyToObject(localVarHeaderParameter, "authorization", configuration);

      // authentication example-id-2 required
      await setApiKeyToObject(localVarHeaderParameter, "example-id-2", configuration);

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * DeptApi - functional programming interface
 * @export
 */
export const DeptApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = DeptApiAxiosParamCreator(configuration);
  return {
    /**
     *
     * @summary 建立組織部門
     * @param {CreateDeptCommand} [createDeptCommand]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async createDept(
      createDeptCommand?: CreateDeptCommand,
      options?: AxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<DeptViewApiResponse>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.createDept(createDeptCommand, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     *
     * @summary 刪除組織部門
     * @param {DeleteDeptCommand} [deleteDeptCommand]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async deleteDept(
      deleteDeptCommand?: DeleteDeptCommand,
      options?: AxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<DeptViewApiResponse>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.deleteDept(deleteDeptCommand, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     *
     * @summary 查詢組織部門
     * @param {FetchAllDeptRequest} [fetchAllDeptRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async fetchDepts(
      fetchAllDeptRequest?: FetchAllDeptRequest,
      options?: AxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<DeptViewListApiResponse>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.fetchDepts(fetchAllDeptRequest, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     *
     * @summary 查詢組織部門
     * @param {number} [id] Id
     * @param {number} [deptId] 以前欄位Id
     * @param {number} [upperDeptId] 上層
     * @param {number} [pastoralId] 舊欄位對應部門id Portal.Id
     * @param {string} [name] 部門名稱
     * @param {string} [title] 部門主管職稱
     * @param {Array<SortProperty>} [sortProperties] 查詢欄位排序
     * @param {number} [page] 目前頁數
     * @param {number} [size] 每頁筆數
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async findDepts(
      id?: number,
      deptId?: number,
      upperDeptId?: number,
      pastoralId?: number,
      name?: string,
      title?: string,
      sortProperties?: Array<SortProperty>,
      page?: number,
      size?: number,
      options?: AxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<DeptViewPageApiResponse>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.findDepts(
        id,
        deptId,
        upperDeptId,
        pastoralId,
        name,
        title,
        sortProperties,
        page,
        size,
        options
      );
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     *
     * @summary 以 Id 查詢列表
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getDept(
      id: number,
      options?: AxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<DeptViewApiResponse>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getDept(id, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     *
     * @summary 修改組織部門
     * @param {UpdateDeptCommand} [updateDeptCommand]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async putDept(
      updateDeptCommand?: UpdateDeptCommand,
      options?: AxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<DeptViewApiResponse>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.putDept(updateDeptCommand, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     *
     * @summary 查詢列表  (*dynamic sort support)
     * @param {QueryDeptRequest} [queryDeptRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async queryDepts(
      queryDeptRequest?: QueryDeptRequest,
      options?: AxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<DeptViewPageApiResponse>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.queryDepts(queryDeptRequest, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     *
     * @summary 刪除主檔
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async removeDept(
      id: number,
      options?: AxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<Int32ApiResponse>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.removeDept(id, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
  };
};

/**
 * DeptApi - factory interface
 * @export
 */
export const DeptApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
  const localVarFp = DeptApiFp(configuration);
  return {
    /**
     *
     * @summary 建立組織部門
     * @param {CreateDeptCommand} [createDeptCommand]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createDept(createDeptCommand?: CreateDeptCommand, options?: any): Promise<DeptViewApiResponse> {
      return localVarFp.createDept(createDeptCommand, options).then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary 刪除組織部門
     * @param {DeleteDeptCommand} [deleteDeptCommand]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteDept(deleteDeptCommand?: DeleteDeptCommand, options?: any): Promise<DeptViewApiResponse> {
      return localVarFp.deleteDept(deleteDeptCommand, options).then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary 查詢組織部門
     * @param {FetchAllDeptRequest} [fetchAllDeptRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    fetchDepts(fetchAllDeptRequest?: FetchAllDeptRequest, options?: any): Promise<DeptViewListApiResponse> {
      return localVarFp.fetchDepts(fetchAllDeptRequest, options).then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary 查詢組織部門
     * @param {number} [id] Id
     * @param {number} [deptId] 以前欄位Id
     * @param {number} [upperDeptId] 上層
     * @param {number} [pastoralId] 舊欄位對應部門id Portal.Id
     * @param {string} [name] 部門名稱
     * @param {string} [title] 部門主管職稱
     * @param {Array<SortProperty>} [sortProperties] 查詢欄位排序
     * @param {number} [page] 目前頁數
     * @param {number} [size] 每頁筆數
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    findDepts(
      id?: number,
      deptId?: number,
      upperDeptId?: number,
      pastoralId?: number,
      name?: string,
      title?: string,
      sortProperties?: Array<SortProperty>,
      page?: number,
      size?: number,
      options?: any
    ): Promise<DeptViewPageApiResponse> {
      return localVarFp
        .findDepts(id, deptId, upperDeptId, pastoralId, name, title, sortProperties, page, size, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary 以 Id 查詢列表
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getDept(id: number, options?: any): Promise<DeptViewApiResponse> {
      return localVarFp.getDept(id, options).then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary 修改組織部門
     * @param {UpdateDeptCommand} [updateDeptCommand]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    putDept(updateDeptCommand?: UpdateDeptCommand, options?: any): Promise<DeptViewApiResponse> {
      return localVarFp.putDept(updateDeptCommand, options).then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary 查詢列表  (*dynamic sort support)
     * @param {QueryDeptRequest} [queryDeptRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    queryDepts(queryDeptRequest?: QueryDeptRequest, options?: any): Promise<DeptViewPageApiResponse> {
      return localVarFp.queryDepts(queryDeptRequest, options).then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary 刪除主檔
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    removeDept(id: number, options?: any): Promise<Int32ApiResponse> {
      return localVarFp.removeDept(id, options).then((request) => request(axios, basePath));
    },
  };
};

/**
 * DeptApi - interface
 * @export
 * @interface DeptApi
 */
export interface DeptApiInterface {
  /**
   *
   * @summary 建立組織部門
   * @param {CreateDeptCommand} [createDeptCommand]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DeptApiInterface
   */
  createDept(createDeptCommand?: CreateDeptCommand, options?: AxiosRequestConfig): Promise<DeptViewApiResponse>;

  /**
   *
   * @summary 刪除組織部門
   * @param {DeleteDeptCommand} [deleteDeptCommand]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DeptApiInterface
   */
  deleteDept(deleteDeptCommand?: DeleteDeptCommand, options?: AxiosRequestConfig): Promise<DeptViewApiResponse>;

  /**
   *
   * @summary 查詢組織部門
   * @param {FetchAllDeptRequest} [fetchAllDeptRequest]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DeptApiInterface
   */
  fetchDepts(fetchAllDeptRequest?: FetchAllDeptRequest, options?: AxiosRequestConfig): Promise<DeptViewListApiResponse>;

  /**
   *
   * @summary 查詢組織部門
   * @param {number} [id] Id
   * @param {number} [deptId] 以前欄位Id
   * @param {number} [upperDeptId] 上層
   * @param {number} [pastoralId] 舊欄位對應部門id Portal.Id
   * @param {string} [name] 部門名稱
   * @param {string} [title] 部門主管職稱
   * @param {Array<SortProperty>} [sortProperties] 查詢欄位排序
   * @param {number} [page] 目前頁數
   * @param {number} [size] 每頁筆數
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DeptApiInterface
   */
  findDepts(
    id?: number,
    deptId?: number,
    upperDeptId?: number,
    pastoralId?: number,
    name?: string,
    title?: string,
    sortProperties?: Array<SortProperty>,
    page?: number,
    size?: number,
    options?: AxiosRequestConfig
  ): Promise<DeptViewPageApiResponse>;

  /**
   *
   * @summary 以 Id 查詢列表
   * @param {number} id
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DeptApiInterface
   */
  getDept(id: number, options?: AxiosRequestConfig): Promise<DeptViewApiResponse>;

  /**
   *
   * @summary 修改組織部門
   * @param {UpdateDeptCommand} [updateDeptCommand]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DeptApiInterface
   */
  putDept(updateDeptCommand?: UpdateDeptCommand, options?: AxiosRequestConfig): Promise<DeptViewApiResponse>;

  /**
   *
   * @summary 查詢列表  (*dynamic sort support)
   * @param {QueryDeptRequest} [queryDeptRequest]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DeptApiInterface
   */
  queryDepts(queryDeptRequest?: QueryDeptRequest, options?: AxiosRequestConfig): Promise<DeptViewPageApiResponse>;

  /**
   *
   * @summary 刪除主檔
   * @param {number} id
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DeptApiInterface
   */
  removeDept(id: number, options?: AxiosRequestConfig): Promise<Int32ApiResponse>;
}

/**
 * DeptApi - object-oriented interface
 * @export
 * @class DeptApi
 * @extends {BaseAPI}
 */
export class DeptApi extends BaseAPI implements DeptApiInterface {
  /**
   *
   * @summary 建立組織部門
   * @param {CreateDeptCommand} [createDeptCommand]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DeptApi
   */
  public createDept(createDeptCommand?: CreateDeptCommand, options?: AxiosRequestConfig) {
    return DeptApiFp(this.configuration)
      .createDept(createDeptCommand, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary 刪除組織部門
   * @param {DeleteDeptCommand} [deleteDeptCommand]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DeptApi
   */
  public deleteDept(deleteDeptCommand?: DeleteDeptCommand, options?: AxiosRequestConfig) {
    return DeptApiFp(this.configuration)
      .deleteDept(deleteDeptCommand, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary 查詢組織部門
   * @param {FetchAllDeptRequest} [fetchAllDeptRequest]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DeptApi
   */
  public fetchDepts(fetchAllDeptRequest?: FetchAllDeptRequest, options?: AxiosRequestConfig) {
    return DeptApiFp(this.configuration)
      .fetchDepts(fetchAllDeptRequest, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary 查詢組織部門
   * @param {number} [id] Id
   * @param {number} [deptId] 以前欄位Id
   * @param {number} [upperDeptId] 上層
   * @param {number} [pastoralId] 舊欄位對應部門id Portal.Id
   * @param {string} [name] 部門名稱
   * @param {string} [title] 部門主管職稱
   * @param {Array<SortProperty>} [sortProperties] 查詢欄位排序
   * @param {number} [page] 目前頁數
   * @param {number} [size] 每頁筆數
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DeptApi
   */
  public findDepts(
    id?: number,
    deptId?: number,
    upperDeptId?: number,
    pastoralId?: number,
    name?: string,
    title?: string,
    sortProperties?: Array<SortProperty>,
    page?: number,
    size?: number,
    options?: AxiosRequestConfig
  ) {
    return DeptApiFp(this.configuration)
      .findDepts(id, deptId, upperDeptId, pastoralId, name, title, sortProperties, page, size, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary 以 Id 查詢列表
   * @param {number} id
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DeptApi
   */
  public getDept(id: number, options?: AxiosRequestConfig) {
    return DeptApiFp(this.configuration)
      .getDept(id, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary 修改組織部門
   * @param {UpdateDeptCommand} [updateDeptCommand]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DeptApi
   */
  public putDept(updateDeptCommand?: UpdateDeptCommand, options?: AxiosRequestConfig) {
    return DeptApiFp(this.configuration)
      .putDept(updateDeptCommand, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary 查詢列表  (*dynamic sort support)
   * @param {QueryDeptRequest} [queryDeptRequest]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DeptApi
   */
  public queryDepts(queryDeptRequest?: QueryDeptRequest, options?: AxiosRequestConfig) {
    return DeptApiFp(this.configuration)
      .queryDepts(queryDeptRequest, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary 刪除主檔
   * @param {number} id
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DeptApi
   */
  public removeDept(id: number, options?: AxiosRequestConfig) {
    return DeptApiFp(this.configuration)
      .removeDept(id, options)
      .then((request) => request(this.axios, this.basePath));
  }
}

/**
 * FileApi - axios parameter creator
 * @export
 */
export const FileApiAxiosParamCreator = function (configuration?: Configuration) {
  return {
    /**
     *
     * @summary 檔案下載
     * @param {string} fileKey
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    downloadFileAsync: async (fileKey: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
      // verify required parameter 'fileKey' is not null or undefined
      assertParamExists("downloadFileAsync", "fileKey", fileKey);
      const localVarPath = `/api/features/file/download/{fileKey}`.replace(
        `{${"fileKey"}}`,
        encodeURIComponent(String(fileKey))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: "GET", ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication Example-id-1 required
      await setApiKeyToObject(localVarHeaderParameter, "Example-id-1", configuration);

      // authentication JWT_Authorization required
      await setApiKeyToObject(localVarHeaderParameter, "authorization", configuration);

      // authentication example-id-2 required
      await setApiKeyToObject(localVarHeaderParameter, "example-id-2", configuration);

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary 檔案上傳  key: file
     * @param {string} category 分類
     * @param {any} [file] Select file
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    uploadFileAsync: async (category: string, file?: any, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
      // verify required parameter 'category' is not null or undefined
      assertParamExists("uploadFileAsync", "category", category);
      const localVarPath = `/api/features/file/upload/{category}`.replace(
        `{${"category"}}`,
        encodeURIComponent(String(category))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: "POST", ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;
      const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();

      // authentication Example-id-1 required
      await setApiKeyToObject(localVarHeaderParameter, "Example-id-1", configuration);

      // authentication JWT_Authorization required
      await setApiKeyToObject(localVarHeaderParameter, "authorization", configuration);

      // authentication example-id-2 required
      await setApiKeyToObject(localVarHeaderParameter, "example-id-2", configuration);

      if (file !== undefined) {
        localVarFormParams.append("file", file as any);
      }

      localVarHeaderParameter["Content-Type"] = "multipart/form-data";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      localVarRequestOptions.data = localVarFormParams;

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * FileApi - functional programming interface
 * @export
 */
export const FileApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = FileApiAxiosParamCreator(configuration);
  return {
    /**
     *
     * @summary 檔案下載
     * @param {string} fileKey
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async downloadFileAsync(
      fileKey: string,
      options?: AxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<void>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.downloadFileAsync(fileKey, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     *
     * @summary 檔案上傳  key: file
     * @param {string} category 分類
     * @param {any} [file] Select file
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async uploadFileAsync(
      category: string,
      file?: any,
      options?: AxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<UploadFileViewApiResponse>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.uploadFileAsync(category, file, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
  };
};

/**
 * FileApi - factory interface
 * @export
 */
export const FileApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
  const localVarFp = FileApiFp(configuration);
  return {
    /**
     *
     * @summary 檔案下載
     * @param {string} fileKey
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    downloadFileAsync(fileKey: string, options?: any): Promise<void> {
      return localVarFp.downloadFileAsync(fileKey, options).then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary 檔案上傳  key: file
     * @param {string} category 分類
     * @param {any} [file] Select file
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    uploadFileAsync(category: string, file?: any, options?: any): Promise<UploadFileViewApiResponse> {
      return localVarFp.uploadFileAsync(category, file, options).then((request) => request(axios, basePath));
    },
  };
};

/**
 * FileApi - interface
 * @export
 * @interface FileApi
 */
export interface FileApiInterface {
  /**
   *
   * @summary 檔案下載
   * @param {string} fileKey
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof FileApiInterface
   */
  downloadFileAsync(fileKey: string, options?: AxiosRequestConfig): Promise<void>;

  /**
   *
   * @summary 檔案上傳  key: file
   * @param {string} category 分類
   * @param {any} [file] Select file
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof FileApiInterface
   */
  uploadFileAsync(category: string, file?: any, options?: AxiosRequestConfig): Promise<UploadFileViewApiResponse>;
}

/**
 * FileApi - object-oriented interface
 * @export
 * @class FileApi
 * @extends {BaseAPI}
 */
export class FileApi extends BaseAPI implements FileApiInterface {
  /**
   *
   * @summary 檔案下載
   * @param {string} fileKey
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof FileApi
   */
  public downloadFileAsync(fileKey: string, options?: AxiosRequestConfig) {
    return FileApiFp(this.configuration)
      .downloadFileAsync(fileKey, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary 檔案上傳  key: file
   * @param {string} category 分類
   * @param {any} [file] Select file
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof FileApi
   */
  public uploadFileAsync(category: string, file?: any, options?: AxiosRequestConfig) {
    return FileApiFp(this.configuration)
      .uploadFileAsync(category, file, options)
      .then((request) => request(this.axios, this.basePath));
  }
}

/**
 * MeetingPointApi - axios parameter creator
 * @export
 */
export const MeetingPointApiAxiosParamCreator = function (configuration?: Configuration) {
  return {
    /**
     *
     * @summary 建立聚會點
     * @param {CreateMeetingPointCommand} [createMeetingPointCommand]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createMeetingPoint: async (
      createMeetingPointCommand?: CreateMeetingPointCommand,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/meetingPoint`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: "POST", ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication Example-id-1 required
      await setApiKeyToObject(localVarHeaderParameter, "Example-id-1", configuration);

      // authentication JWT_Authorization required
      await setApiKeyToObject(localVarHeaderParameter, "authorization", configuration);

      // authentication example-id-2 required
      await setApiKeyToObject(localVarHeaderParameter, "example-id-2", configuration);

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      localVarRequestOptions.data = serializeDataIfNeeded(
        createMeetingPointCommand,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary 刪除聚會點
     * @param {DeleteMeetingPointCommand} [deleteMeetingPointCommand]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteMeetingPoint: async (
      deleteMeetingPointCommand?: DeleteMeetingPointCommand,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/meetingPoint`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: "DELETE", ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication Example-id-1 required
      await setApiKeyToObject(localVarHeaderParameter, "Example-id-1", configuration);

      // authentication JWT_Authorization required
      await setApiKeyToObject(localVarHeaderParameter, "authorization", configuration);

      // authentication example-id-2 required
      await setApiKeyToObject(localVarHeaderParameter, "example-id-2", configuration);

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      localVarRequestOptions.data = serializeDataIfNeeded(
        deleteMeetingPointCommand,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary 查詢聚會點
     * @param {FetchAllMeetingPointRequest} [fetchAllMeetingPointRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    fetchMeetingPoints: async (
      fetchAllMeetingPointRequest?: FetchAllMeetingPointRequest,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/meetingPoint/fetch`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: "POST", ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication Example-id-1 required
      await setApiKeyToObject(localVarHeaderParameter, "Example-id-1", configuration);

      // authentication JWT_Authorization required
      await setApiKeyToObject(localVarHeaderParameter, "authorization", configuration);

      // authentication example-id-2 required
      await setApiKeyToObject(localVarHeaderParameter, "example-id-2", configuration);

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      localVarRequestOptions.data = serializeDataIfNeeded(
        fetchAllMeetingPointRequest,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary 查詢聚會點2 註冊使用 不用登入即可查
     * @param {FetchAllMeetingPointRequest} [fetchAllMeetingPointRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    fetchMeetingPoints2: async (
      fetchAllMeetingPointRequest?: FetchAllMeetingPointRequest,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/meetingPoint/anonymous/fetch`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: "POST", ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication Example-id-1 required
      await setApiKeyToObject(localVarHeaderParameter, "Example-id-1", configuration);

      // authentication JWT_Authorization required
      await setApiKeyToObject(localVarHeaderParameter, "authorization", configuration);

      // authentication example-id-2 required
      await setApiKeyToObject(localVarHeaderParameter, "example-id-2", configuration);

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      localVarRequestOptions.data = serializeDataIfNeeded(
        fetchAllMeetingPointRequest,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary 查詢聚會點
     * @param {number} [id] id
     * @param {string} [name] 聚會點名稱
     * @param {Array<SortProperty>} [sortProperties] 查詢欄位排序
     * @param {number} [page] 目前頁數
     * @param {number} [size] 每頁筆數
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    findMeetingPoint: async (
      id?: number,
      name?: string,
      sortProperties?: Array<SortProperty>,
      page?: number,
      size?: number,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/meetingPoint`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: "GET", ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication Example-id-1 required
      await setApiKeyToObject(localVarHeaderParameter, "Example-id-1", configuration);

      // authentication JWT_Authorization required
      await setApiKeyToObject(localVarHeaderParameter, "authorization", configuration);

      // authentication example-id-2 required
      await setApiKeyToObject(localVarHeaderParameter, "example-id-2", configuration);

      if (id !== undefined) {
        localVarQueryParameter["id"] = id;
      }

      if (name !== undefined) {
        localVarQueryParameter["name"] = name;
      }

      if (sortProperties) {
        localVarQueryParameter["sortProperties"] = sortProperties;
      }

      if (page !== undefined) {
        localVarQueryParameter["page"] = page;
      }

      if (size !== undefined) {
        localVarQueryParameter["size"] = size;
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary 以 Id 查詢列表
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getMeetingPoint: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists("getMeetingPoint", "id", id);
      const localVarPath = `/api/meetingPoint/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(id)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: "GET", ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication Example-id-1 required
      await setApiKeyToObject(localVarHeaderParameter, "Example-id-1", configuration);

      // authentication JWT_Authorization required
      await setApiKeyToObject(localVarHeaderParameter, "authorization", configuration);

      // authentication example-id-2 required
      await setApiKeyToObject(localVarHeaderParameter, "example-id-2", configuration);

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary 修改聚會點
     * @param {UpdateMeetingPointCommand} [updateMeetingPointCommand]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    putMeetingPoint: async (
      updateMeetingPointCommand?: UpdateMeetingPointCommand,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/meetingPoint`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: "PUT", ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication Example-id-1 required
      await setApiKeyToObject(localVarHeaderParameter, "Example-id-1", configuration);

      // authentication JWT_Authorization required
      await setApiKeyToObject(localVarHeaderParameter, "authorization", configuration);

      // authentication example-id-2 required
      await setApiKeyToObject(localVarHeaderParameter, "example-id-2", configuration);

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      localVarRequestOptions.data = serializeDataIfNeeded(
        updateMeetingPointCommand,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary 查詢列表  (*dynamic sort support)
     * @param {QueryMeetingPointRequest} [queryMeetingPointRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    queryMeetingPoints: async (
      queryMeetingPointRequest?: QueryMeetingPointRequest,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/meetingPoint/query`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: "POST", ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication Example-id-1 required
      await setApiKeyToObject(localVarHeaderParameter, "Example-id-1", configuration);

      // authentication JWT_Authorization required
      await setApiKeyToObject(localVarHeaderParameter, "authorization", configuration);

      // authentication example-id-2 required
      await setApiKeyToObject(localVarHeaderParameter, "example-id-2", configuration);

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      localVarRequestOptions.data = serializeDataIfNeeded(
        queryMeetingPointRequest,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary 刪除主檔
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    removeMeetingPoint: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists("removeMeetingPoint", "id", id);
      const localVarPath = `/api/meetingPoint/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(id)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: "DELETE", ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication Example-id-1 required
      await setApiKeyToObject(localVarHeaderParameter, "Example-id-1", configuration);

      // authentication JWT_Authorization required
      await setApiKeyToObject(localVarHeaderParameter, "authorization", configuration);

      // authentication example-id-2 required
      await setApiKeyToObject(localVarHeaderParameter, "example-id-2", configuration);

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * MeetingPointApi - functional programming interface
 * @export
 */
export const MeetingPointApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = MeetingPointApiAxiosParamCreator(configuration);
  return {
    /**
     *
     * @summary 建立聚會點
     * @param {CreateMeetingPointCommand} [createMeetingPointCommand]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async createMeetingPoint(
      createMeetingPointCommand?: CreateMeetingPointCommand,
      options?: AxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<MeetingPointViewApiResponse>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.createMeetingPoint(createMeetingPointCommand, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     *
     * @summary 刪除聚會點
     * @param {DeleteMeetingPointCommand} [deleteMeetingPointCommand]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async deleteMeetingPoint(
      deleteMeetingPointCommand?: DeleteMeetingPointCommand,
      options?: AxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<MeetingPointViewApiResponse>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.deleteMeetingPoint(deleteMeetingPointCommand, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     *
     * @summary 查詢聚會點
     * @param {FetchAllMeetingPointRequest} [fetchAllMeetingPointRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async fetchMeetingPoints(
      fetchAllMeetingPointRequest?: FetchAllMeetingPointRequest,
      options?: AxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<MeetingPointViewListApiResponse>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.fetchMeetingPoints(
        fetchAllMeetingPointRequest,
        options
      );
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     *
     * @summary 查詢聚會點2 註冊使用 不用登入即可查
     * @param {FetchAllMeetingPointRequest} [fetchAllMeetingPointRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async fetchMeetingPoints2(
      fetchAllMeetingPointRequest?: FetchAllMeetingPointRequest,
      options?: AxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<MeetingPointViewListApiResponse>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.fetchMeetingPoints2(
        fetchAllMeetingPointRequest,
        options
      );
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     *
     * @summary 查詢聚會點
     * @param {number} [id] id
     * @param {string} [name] 聚會點名稱
     * @param {Array<SortProperty>} [sortProperties] 查詢欄位排序
     * @param {number} [page] 目前頁數
     * @param {number} [size] 每頁筆數
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async findMeetingPoint(
      id?: number,
      name?: string,
      sortProperties?: Array<SortProperty>,
      page?: number,
      size?: number,
      options?: AxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<MeetingPointViewPageApiResponse>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.findMeetingPoint(
        id,
        name,
        sortProperties,
        page,
        size,
        options
      );
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     *
     * @summary 以 Id 查詢列表
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getMeetingPoint(
      id: number,
      options?: AxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<MeetingPointViewApiResponse>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getMeetingPoint(id, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     *
     * @summary 修改聚會點
     * @param {UpdateMeetingPointCommand} [updateMeetingPointCommand]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async putMeetingPoint(
      updateMeetingPointCommand?: UpdateMeetingPointCommand,
      options?: AxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<MeetingPointViewApiResponse>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.putMeetingPoint(updateMeetingPointCommand, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     *
     * @summary 查詢列表  (*dynamic sort support)
     * @param {QueryMeetingPointRequest} [queryMeetingPointRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async queryMeetingPoints(
      queryMeetingPointRequest?: QueryMeetingPointRequest,
      options?: AxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<MeetingPointViewPageApiResponse>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.queryMeetingPoints(queryMeetingPointRequest, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     *
     * @summary 刪除主檔
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async removeMeetingPoint(
      id: number,
      options?: AxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<Int32ApiResponse>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.removeMeetingPoint(id, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
  };
};

/**
 * MeetingPointApi - factory interface
 * @export
 */
export const MeetingPointApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance
) {
  const localVarFp = MeetingPointApiFp(configuration);
  return {
    /**
     *
     * @summary 建立聚會點
     * @param {CreateMeetingPointCommand} [createMeetingPointCommand]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createMeetingPoint(
      createMeetingPointCommand?: CreateMeetingPointCommand,
      options?: any
    ): Promise<MeetingPointViewApiResponse> {
      return localVarFp
        .createMeetingPoint(createMeetingPointCommand, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary 刪除聚會點
     * @param {DeleteMeetingPointCommand} [deleteMeetingPointCommand]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteMeetingPoint(
      deleteMeetingPointCommand?: DeleteMeetingPointCommand,
      options?: any
    ): Promise<MeetingPointViewApiResponse> {
      return localVarFp
        .deleteMeetingPoint(deleteMeetingPointCommand, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary 查詢聚會點
     * @param {FetchAllMeetingPointRequest} [fetchAllMeetingPointRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    fetchMeetingPoints(
      fetchAllMeetingPointRequest?: FetchAllMeetingPointRequest,
      options?: any
    ): Promise<MeetingPointViewListApiResponse> {
      return localVarFp
        .fetchMeetingPoints(fetchAllMeetingPointRequest, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary 查詢聚會點2 註冊使用 不用登入即可查
     * @param {FetchAllMeetingPointRequest} [fetchAllMeetingPointRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    fetchMeetingPoints2(
      fetchAllMeetingPointRequest?: FetchAllMeetingPointRequest,
      options?: any
    ): Promise<MeetingPointViewListApiResponse> {
      return localVarFp
        .fetchMeetingPoints2(fetchAllMeetingPointRequest, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary 查詢聚會點
     * @param {number} [id] id
     * @param {string} [name] 聚會點名稱
     * @param {Array<SortProperty>} [sortProperties] 查詢欄位排序
     * @param {number} [page] 目前頁數
     * @param {number} [size] 每頁筆數
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    findMeetingPoint(
      id?: number,
      name?: string,
      sortProperties?: Array<SortProperty>,
      page?: number,
      size?: number,
      options?: any
    ): Promise<MeetingPointViewPageApiResponse> {
      return localVarFp
        .findMeetingPoint(id, name, sortProperties, page, size, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary 以 Id 查詢列表
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getMeetingPoint(id: number, options?: any): Promise<MeetingPointViewApiResponse> {
      return localVarFp.getMeetingPoint(id, options).then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary 修改聚會點
     * @param {UpdateMeetingPointCommand} [updateMeetingPointCommand]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    putMeetingPoint(
      updateMeetingPointCommand?: UpdateMeetingPointCommand,
      options?: any
    ): Promise<MeetingPointViewApiResponse> {
      return localVarFp.putMeetingPoint(updateMeetingPointCommand, options).then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary 查詢列表  (*dynamic sort support)
     * @param {QueryMeetingPointRequest} [queryMeetingPointRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    queryMeetingPoints(
      queryMeetingPointRequest?: QueryMeetingPointRequest,
      options?: any
    ): Promise<MeetingPointViewPageApiResponse> {
      return localVarFp
        .queryMeetingPoints(queryMeetingPointRequest, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary 刪除主檔
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    removeMeetingPoint(id: number, options?: any): Promise<Int32ApiResponse> {
      return localVarFp.removeMeetingPoint(id, options).then((request) => request(axios, basePath));
    },
  };
};

/**
 * MeetingPointApi - interface
 * @export
 * @interface MeetingPointApi
 */
export interface MeetingPointApiInterface {
  /**
   *
   * @summary 建立聚會點
   * @param {CreateMeetingPointCommand} [createMeetingPointCommand]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof MeetingPointApiInterface
   */
  createMeetingPoint(
    createMeetingPointCommand?: CreateMeetingPointCommand,
    options?: AxiosRequestConfig
  ): Promise<MeetingPointViewApiResponse>;

  /**
   *
   * @summary 刪除聚會點
   * @param {DeleteMeetingPointCommand} [deleteMeetingPointCommand]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof MeetingPointApiInterface
   */
  deleteMeetingPoint(
    deleteMeetingPointCommand?: DeleteMeetingPointCommand,
    options?: AxiosRequestConfig
  ): Promise<MeetingPointViewApiResponse>;

  /**
   *
   * @summary 查詢聚會點
   * @param {FetchAllMeetingPointRequest} [fetchAllMeetingPointRequest]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof MeetingPointApiInterface
   */
  fetchMeetingPoints(
    fetchAllMeetingPointRequest?: FetchAllMeetingPointRequest,
    options?: AxiosRequestConfig
  ): Promise<MeetingPointViewListApiResponse>;

  /**
   *
   * @summary 查詢聚會點2 註冊使用 不用登入即可查
   * @param {FetchAllMeetingPointRequest} [fetchAllMeetingPointRequest]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof MeetingPointApiInterface
   */
  fetchMeetingPoints2(
    fetchAllMeetingPointRequest?: FetchAllMeetingPointRequest,
    options?: AxiosRequestConfig
  ): Promise<MeetingPointViewListApiResponse>;

  /**
   *
   * @summary 查詢聚會點
   * @param {number} [id] id
   * @param {string} [name] 聚會點名稱
   * @param {Array<SortProperty>} [sortProperties] 查詢欄位排序
   * @param {number} [page] 目前頁數
   * @param {number} [size] 每頁筆數
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof MeetingPointApiInterface
   */
  findMeetingPoint(
    id?: number,
    name?: string,
    sortProperties?: Array<SortProperty>,
    page?: number,
    size?: number,
    options?: AxiosRequestConfig
  ): Promise<MeetingPointViewPageApiResponse>;

  /**
   *
   * @summary 以 Id 查詢列表
   * @param {number} id
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof MeetingPointApiInterface
   */
  getMeetingPoint(id: number, options?: AxiosRequestConfig): Promise<MeetingPointViewApiResponse>;

  /**
   *
   * @summary 修改聚會點
   * @param {UpdateMeetingPointCommand} [updateMeetingPointCommand]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof MeetingPointApiInterface
   */
  putMeetingPoint(
    updateMeetingPointCommand?: UpdateMeetingPointCommand,
    options?: AxiosRequestConfig
  ): Promise<MeetingPointViewApiResponse>;

  /**
   *
   * @summary 查詢列表  (*dynamic sort support)
   * @param {QueryMeetingPointRequest} [queryMeetingPointRequest]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof MeetingPointApiInterface
   */
  queryMeetingPoints(
    queryMeetingPointRequest?: QueryMeetingPointRequest,
    options?: AxiosRequestConfig
  ): Promise<MeetingPointViewPageApiResponse>;

  /**
   *
   * @summary 刪除主檔
   * @param {number} id
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof MeetingPointApiInterface
   */
  removeMeetingPoint(id: number, options?: AxiosRequestConfig): Promise<Int32ApiResponse>;
}

/**
 * MeetingPointApi - object-oriented interface
 * @export
 * @class MeetingPointApi
 * @extends {BaseAPI}
 */
export class MeetingPointApi extends BaseAPI implements MeetingPointApiInterface {
  /**
   *
   * @summary 建立聚會點
   * @param {CreateMeetingPointCommand} [createMeetingPointCommand]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof MeetingPointApi
   */
  public createMeetingPoint(createMeetingPointCommand?: CreateMeetingPointCommand, options?: AxiosRequestConfig) {
    return MeetingPointApiFp(this.configuration)
      .createMeetingPoint(createMeetingPointCommand, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary 刪除聚會點
   * @param {DeleteMeetingPointCommand} [deleteMeetingPointCommand]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof MeetingPointApi
   */
  public deleteMeetingPoint(deleteMeetingPointCommand?: DeleteMeetingPointCommand, options?: AxiosRequestConfig) {
    return MeetingPointApiFp(this.configuration)
      .deleteMeetingPoint(deleteMeetingPointCommand, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary 查詢聚會點
   * @param {FetchAllMeetingPointRequest} [fetchAllMeetingPointRequest]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof MeetingPointApi
   */
  public fetchMeetingPoints(fetchAllMeetingPointRequest?: FetchAllMeetingPointRequest, options?: AxiosRequestConfig) {
    return MeetingPointApiFp(this.configuration)
      .fetchMeetingPoints(fetchAllMeetingPointRequest, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary 查詢聚會點2 註冊使用 不用登入即可查
   * @param {FetchAllMeetingPointRequest} [fetchAllMeetingPointRequest]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof MeetingPointApi
   */
  public fetchMeetingPoints2(fetchAllMeetingPointRequest?: FetchAllMeetingPointRequest, options?: AxiosRequestConfig) {
    return MeetingPointApiFp(this.configuration)
      .fetchMeetingPoints2(fetchAllMeetingPointRequest, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary 查詢聚會點
   * @param {number} [id] id
   * @param {string} [name] 聚會點名稱
   * @param {Array<SortProperty>} [sortProperties] 查詢欄位排序
   * @param {number} [page] 目前頁數
   * @param {number} [size] 每頁筆數
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof MeetingPointApi
   */
  public findMeetingPoint(
    id?: number,
    name?: string,
    sortProperties?: Array<SortProperty>,
    page?: number,
    size?: number,
    options?: AxiosRequestConfig
  ) {
    return MeetingPointApiFp(this.configuration)
      .findMeetingPoint(id, name, sortProperties, page, size, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary 以 Id 查詢列表
   * @param {number} id
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof MeetingPointApi
   */
  public getMeetingPoint(id: number, options?: AxiosRequestConfig) {
    return MeetingPointApiFp(this.configuration)
      .getMeetingPoint(id, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary 修改聚會點
   * @param {UpdateMeetingPointCommand} [updateMeetingPointCommand]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof MeetingPointApi
   */
  public putMeetingPoint(updateMeetingPointCommand?: UpdateMeetingPointCommand, options?: AxiosRequestConfig) {
    return MeetingPointApiFp(this.configuration)
      .putMeetingPoint(updateMeetingPointCommand, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary 查詢列表  (*dynamic sort support)
   * @param {QueryMeetingPointRequest} [queryMeetingPointRequest]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof MeetingPointApi
   */
  public queryMeetingPoints(queryMeetingPointRequest?: QueryMeetingPointRequest, options?: AxiosRequestConfig) {
    return MeetingPointApiFp(this.configuration)
      .queryMeetingPoints(queryMeetingPointRequest, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary 刪除主檔
   * @param {number} id
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof MeetingPointApi
   */
  public removeMeetingPoint(id: number, options?: AxiosRequestConfig) {
    return MeetingPointApiFp(this.configuration)
      .removeMeetingPoint(id, options)
      .then((request) => request(this.axios, this.basePath));
  }
}

/**
 * MembershipApi - axios parameter creator
 * @export
 */
export const MembershipApiAxiosParamCreator = function (configuration?: Configuration) {
  return {
    /**
     *
     * @param {number} [id]
     * @param {string} [portalId]
     * @param {string} [name]
     * @param {string} [engName]
     * @param {string} [userId]
     * @param {number} [categoryId]
     * @param {string} [identifier]
     * @param {string} [idnumber]
     * @param {string} [email]
     * @param {string} [contactPhone]
     * @param {string} [contactCellPhone]
     * @param {string} [contactCellPhone2]
     * @param {string} [contactCity]
     * @param {string} [contactZipCode]
     * @param {string} [contactAddress]
     * @param {string} [homeAddress]
     * @param {string} [bizPhone]
     * @param {string} [fax]
     * @param {string} [gender]
     * @param {string} [birthday]
     * @param {string} [introducer]
     * @param {string} [introducerGroup]
     * @param {string} [relativeName]
     * @param {string} [relativeRelation]
     * @param {string} [relativeCellPhone]
     * @param {boolean} [isHasCommitment]
     * @param {boolean} [isBaptize]
     * @param {number} [baptizeTypeId]
     * @param {string} [baptizeday]
     * @param {string} [baptizeOrgName]
     * @param {string} [baptizeGroup]
     * @param {string} [baptizer]
     * @param {string} [firstSermon]
     * @param {string} [firstGroupMeeting]
     * @param {string} [settleDate]
     * @param {string} [lastMovedDate]
     * @param {boolean} [isContact]
     * @param {boolean} [isGranted]
     * @param {string} [grantedDate]
     * @param {boolean} [isFromExp]
     * @param {string} [sourceCd]
     * @param {string} [groupLeaderDate]
     * @param {boolean} [isAllowLession]
     * @param {string} [career]
     * @param {string} [careerComment]
     * @param {string} [interests]
     * @param {string} [minister]
     * @param {boolean} [isEducation]
     * @param {string} [levelofEducation]
     * @param {number} [educationGrade]
     * @param {string} [educationSchool]
     * @param {string} [schoolTimeCd]
     * @param {number} [marriageId]
     * @param {string} [spouse]
     * @param {string} [child1]
     * @param {string} [child2]
     * @param {string} [child3]
     * @param {string} [child4]
     * @param {string} [father]
     * @param {string} [mother]
     * @param {string} [contactTimes]
     * @param {string} [orgName]
     * @param {string} [department]
     * @param {string} [area]
     * @param {string} [zone]
     * @param {string} [group]
     * @param {string} [orgPriest]
     * @param {string} [orgTitle]
     * @param {number} [groupId]
     * @param {number} [zoneId]
     * @param {number} [areaId]
     * @param {boolean} [isE1]
     * @param {boolean} [isE2]
     * @param {boolean} [isE3]
     * @param {boolean} [isE4]
     * @param {boolean} [isReserved]
     * @param {boolean} [isTerm]
     * @param {boolean} [isGroupAttendExpected]
     * @param {boolean} [isWorshipAttendExpected]
     * @param {string} [statusCd]
     * @param {string} [comment]
     * @param {string} [dateCreate]
     * @param {string} [userCreate]
     * @param {string} [dateUpdate]
     * @param {string} [userUpdate]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createMember: async (
      id?: number,
      portalId?: string,
      name?: string,
      engName?: string,
      userId?: string,
      categoryId?: number,
      identifier?: string,
      idnumber?: string,
      email?: string,
      contactPhone?: string,
      contactCellPhone?: string,
      contactCellPhone2?: string,
      contactCity?: string,
      contactZipCode?: string,
      contactAddress?: string,
      homeAddress?: string,
      bizPhone?: string,
      fax?: string,
      gender?: string,
      birthday?: string,
      introducer?: string,
      introducerGroup?: string,
      relativeName?: string,
      relativeRelation?: string,
      relativeCellPhone?: string,
      isHasCommitment?: boolean,
      isBaptize?: boolean,
      baptizeTypeId?: number,
      baptizeday?: string,
      baptizeOrgName?: string,
      baptizeGroup?: string,
      baptizer?: string,
      firstSermon?: string,
      firstGroupMeeting?: string,
      settleDate?: string,
      lastMovedDate?: string,
      isContact?: boolean,
      isGranted?: boolean,
      grantedDate?: string,
      isFromExp?: boolean,
      sourceCd?: string,
      groupLeaderDate?: string,
      isAllowLession?: boolean,
      career?: string,
      careerComment?: string,
      interests?: string,
      minister?: string,
      isEducation?: boolean,
      levelofEducation?: string,
      educationGrade?: number,
      educationSchool?: string,
      schoolTimeCd?: string,
      marriageId?: number,
      spouse?: string,
      child1?: string,
      child2?: string,
      child3?: string,
      child4?: string,
      father?: string,
      mother?: string,
      contactTimes?: string,
      orgName?: string,
      department?: string,
      area?: string,
      zone?: string,
      group?: string,
      orgPriest?: string,
      orgTitle?: string,
      groupId?: number,
      zoneId?: number,
      areaId?: number,
      isE1?: boolean,
      isE2?: boolean,
      isE3?: boolean,
      isE4?: boolean,
      isReserved?: boolean,
      isTerm?: boolean,
      isGroupAttendExpected?: boolean,
      isWorshipAttendExpected?: boolean,
      statusCd?: string,
      comment?: string,
      dateCreate?: string,
      userCreate?: string,
      dateUpdate?: string,
      userUpdate?: string,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/membership/member/createmem`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: "GET", ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication Example-id-1 required
      await setApiKeyToObject(localVarHeaderParameter, "Example-id-1", configuration);

      // authentication JWT_Authorization required
      await setApiKeyToObject(localVarHeaderParameter, "authorization", configuration);

      // authentication example-id-2 required
      await setApiKeyToObject(localVarHeaderParameter, "example-id-2", configuration);

      if (id !== undefined) {
        localVarQueryParameter["id"] = id;
      }

      if (portalId !== undefined) {
        localVarQueryParameter["portalId"] = portalId;
      }

      if (name !== undefined) {
        localVarQueryParameter["name"] = name;
      }

      if (engName !== undefined) {
        localVarQueryParameter["engName"] = engName;
      }

      if (userId !== undefined) {
        localVarQueryParameter["userId"] = userId;
      }

      if (categoryId !== undefined) {
        localVarQueryParameter["categoryId"] = categoryId;
      }

      if (identifier !== undefined) {
        localVarQueryParameter["identifier"] = identifier;
      }

      if (idnumber !== undefined) {
        localVarQueryParameter["idnumber"] = idnumber;
      }

      if (email !== undefined) {
        localVarQueryParameter["email"] = email;
      }

      if (contactPhone !== undefined) {
        localVarQueryParameter["contactPhone"] = contactPhone;
      }

      if (contactCellPhone !== undefined) {
        localVarQueryParameter["contactCellPhone"] = contactCellPhone;
      }

      if (contactCellPhone2 !== undefined) {
        localVarQueryParameter["contactCellPhone2"] = contactCellPhone2;
      }

      if (contactCity !== undefined) {
        localVarQueryParameter["contactCity"] = contactCity;
      }

      if (contactZipCode !== undefined) {
        localVarQueryParameter["contactZipCode"] = contactZipCode;
      }

      if (contactAddress !== undefined) {
        localVarQueryParameter["contactAddress"] = contactAddress;
      }

      if (homeAddress !== undefined) {
        localVarQueryParameter["homeAddress"] = homeAddress;
      }

      if (bizPhone !== undefined) {
        localVarQueryParameter["bizPhone"] = bizPhone;
      }

      if (fax !== undefined) {
        localVarQueryParameter["fax"] = fax;
      }

      if (gender !== undefined) {
        localVarQueryParameter["gender"] = gender;
      }

      if (birthday !== undefined) {
        localVarQueryParameter["birthday"] =
          (birthday as any) instanceof Date ? (birthday as any).toISOString() : birthday;
      }

      if (introducer !== undefined) {
        localVarQueryParameter["introducer"] = introducer;
      }

      if (introducerGroup !== undefined) {
        localVarQueryParameter["introducerGroup"] = introducerGroup;
      }

      if (relativeName !== undefined) {
        localVarQueryParameter["relativeName"] = relativeName;
      }

      if (relativeRelation !== undefined) {
        localVarQueryParameter["relativeRelation"] = relativeRelation;
      }

      if (relativeCellPhone !== undefined) {
        localVarQueryParameter["relativeCellPhone"] = relativeCellPhone;
      }

      if (isHasCommitment !== undefined) {
        localVarQueryParameter["isHasCommitment"] = isHasCommitment;
      }

      if (isBaptize !== undefined) {
        localVarQueryParameter["isBaptize"] = isBaptize;
      }

      if (baptizeTypeId !== undefined) {
        localVarQueryParameter["baptizeTypeId"] = baptizeTypeId;
      }

      if (baptizeday !== undefined) {
        localVarQueryParameter["baptizeday"] =
          (baptizeday as any) instanceof Date ? (baptizeday as any).toISOString() : baptizeday;
      }

      if (baptizeOrgName !== undefined) {
        localVarQueryParameter["baptizeOrgName"] = baptizeOrgName;
      }

      if (baptizeGroup !== undefined) {
        localVarQueryParameter["baptizeGroup"] = baptizeGroup;
      }

      if (baptizer !== undefined) {
        localVarQueryParameter["baptizer"] = baptizer;
      }

      if (firstSermon !== undefined) {
        localVarQueryParameter["firstSermon"] =
          (firstSermon as any) instanceof Date ? (firstSermon as any).toISOString() : firstSermon;
      }

      if (firstGroupMeeting !== undefined) {
        localVarQueryParameter["firstGroupMeeting"] =
          (firstGroupMeeting as any) instanceof Date ? (firstGroupMeeting as any).toISOString() : firstGroupMeeting;
      }

      if (settleDate !== undefined) {
        localVarQueryParameter["settleDate"] =
          (settleDate as any) instanceof Date ? (settleDate as any).toISOString() : settleDate;
      }

      if (lastMovedDate !== undefined) {
        localVarQueryParameter["lastMovedDate"] =
          (lastMovedDate as any) instanceof Date ? (lastMovedDate as any).toISOString() : lastMovedDate;
      }

      if (isContact !== undefined) {
        localVarQueryParameter["isContact"] = isContact;
      }

      if (isGranted !== undefined) {
        localVarQueryParameter["isGranted"] = isGranted;
      }

      if (grantedDate !== undefined) {
        localVarQueryParameter["grantedDate"] =
          (grantedDate as any) instanceof Date ? (grantedDate as any).toISOString() : grantedDate;
      }

      if (isFromExp !== undefined) {
        localVarQueryParameter["isFromExp"] = isFromExp;
      }

      if (sourceCd !== undefined) {
        localVarQueryParameter["sourceCd"] = sourceCd;
      }

      if (groupLeaderDate !== undefined) {
        localVarQueryParameter["groupLeaderDate"] =
          (groupLeaderDate as any) instanceof Date ? (groupLeaderDate as any).toISOString() : groupLeaderDate;
      }

      if (isAllowLession !== undefined) {
        localVarQueryParameter["isAllowLession"] = isAllowLession;
      }

      if (career !== undefined) {
        localVarQueryParameter["career"] = career;
      }

      if (careerComment !== undefined) {
        localVarQueryParameter["careerComment"] = careerComment;
      }

      if (interests !== undefined) {
        localVarQueryParameter["interests"] = interests;
      }

      if (minister !== undefined) {
        localVarQueryParameter["minister"] = minister;
      }

      if (isEducation !== undefined) {
        localVarQueryParameter["isEducation"] = isEducation;
      }

      if (levelofEducation !== undefined) {
        localVarQueryParameter["levelofEducation"] = levelofEducation;
      }

      if (educationGrade !== undefined) {
        localVarQueryParameter["educationGrade"] = educationGrade;
      }

      if (educationSchool !== undefined) {
        localVarQueryParameter["educationSchool"] = educationSchool;
      }

      if (schoolTimeCd !== undefined) {
        localVarQueryParameter["schoolTimeCd"] = schoolTimeCd;
      }

      if (marriageId !== undefined) {
        localVarQueryParameter["marriageId"] = marriageId;
      }

      if (spouse !== undefined) {
        localVarQueryParameter["spouse"] = spouse;
      }

      if (child1 !== undefined) {
        localVarQueryParameter["child1"] = child1;
      }

      if (child2 !== undefined) {
        localVarQueryParameter["child2"] = child2;
      }

      if (child3 !== undefined) {
        localVarQueryParameter["child3"] = child3;
      }

      if (child4 !== undefined) {
        localVarQueryParameter["child4"] = child4;
      }

      if (father !== undefined) {
        localVarQueryParameter["father"] = father;
      }

      if (mother !== undefined) {
        localVarQueryParameter["mother"] = mother;
      }

      if (contactTimes !== undefined) {
        localVarQueryParameter["contactTimes"] = contactTimes;
      }

      if (orgName !== undefined) {
        localVarQueryParameter["orgName"] = orgName;
      }

      if (department !== undefined) {
        localVarQueryParameter["department"] = department;
      }

      if (area !== undefined) {
        localVarQueryParameter["area"] = area;
      }

      if (zone !== undefined) {
        localVarQueryParameter["zone"] = zone;
      }

      if (group !== undefined) {
        localVarQueryParameter["group"] = group;
      }

      if (orgPriest !== undefined) {
        localVarQueryParameter["orgPriest"] = orgPriest;
      }

      if (orgTitle !== undefined) {
        localVarQueryParameter["orgTitle"] = orgTitle;
      }

      if (groupId !== undefined) {
        localVarQueryParameter["groupId"] = groupId;
      }

      if (zoneId !== undefined) {
        localVarQueryParameter["zoneId"] = zoneId;
      }

      if (areaId !== undefined) {
        localVarQueryParameter["areaId"] = areaId;
      }

      if (isE1 !== undefined) {
        localVarQueryParameter["isE1"] = isE1;
      }

      if (isE2 !== undefined) {
        localVarQueryParameter["isE2"] = isE2;
      }

      if (isE3 !== undefined) {
        localVarQueryParameter["isE3"] = isE3;
      }

      if (isE4 !== undefined) {
        localVarQueryParameter["isE4"] = isE4;
      }

      if (isReserved !== undefined) {
        localVarQueryParameter["isReserved"] = isReserved;
      }

      if (isTerm !== undefined) {
        localVarQueryParameter["isTerm"] = isTerm;
      }

      if (isGroupAttendExpected !== undefined) {
        localVarQueryParameter["isGroupAttendExpected"] = isGroupAttendExpected;
      }

      if (isWorshipAttendExpected !== undefined) {
        localVarQueryParameter["isWorshipAttendExpected"] = isWorshipAttendExpected;
      }

      if (statusCd !== undefined) {
        localVarQueryParameter["statusCd"] = statusCd;
      }

      if (comment !== undefined) {
        localVarQueryParameter["comment"] = comment;
      }

      if (dateCreate !== undefined) {
        localVarQueryParameter["dateCreate"] =
          (dateCreate as any) instanceof Date ? (dateCreate as any).toISOString() : dateCreate;
      }

      if (userCreate !== undefined) {
        localVarQueryParameter["userCreate"] = userCreate;
      }

      if (dateUpdate !== undefined) {
        localVarQueryParameter["dateUpdate"] =
          (dateUpdate as any) instanceof Date ? (dateUpdate as any).toISOString() : dateUpdate;
      }

      if (userUpdate !== undefined) {
        localVarQueryParameter["userUpdate"] = userUpdate;
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {number} [id]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    findMember: async (id?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
      const localVarPath = `/api/membership/member/findid`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: "GET", ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication Example-id-1 required
      await setApiKeyToObject(localVarHeaderParameter, "Example-id-1", configuration);

      // authentication JWT_Authorization required
      await setApiKeyToObject(localVarHeaderParameter, "authorization", configuration);

      // authentication example-id-2 required
      await setApiKeyToObject(localVarHeaderParameter, "example-id-2", configuration);

      if (id !== undefined) {
        localVarQueryParameter["id"] = id;
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * MembershipApi - functional programming interface
 * @export
 */
export const MembershipApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = MembershipApiAxiosParamCreator(configuration);
  return {
    /**
     *
     * @param {number} [id]
     * @param {string} [portalId]
     * @param {string} [name]
     * @param {string} [engName]
     * @param {string} [userId]
     * @param {number} [categoryId]
     * @param {string} [identifier]
     * @param {string} [idnumber]
     * @param {string} [email]
     * @param {string} [contactPhone]
     * @param {string} [contactCellPhone]
     * @param {string} [contactCellPhone2]
     * @param {string} [contactCity]
     * @param {string} [contactZipCode]
     * @param {string} [contactAddress]
     * @param {string} [homeAddress]
     * @param {string} [bizPhone]
     * @param {string} [fax]
     * @param {string} [gender]
     * @param {string} [birthday]
     * @param {string} [introducer]
     * @param {string} [introducerGroup]
     * @param {string} [relativeName]
     * @param {string} [relativeRelation]
     * @param {string} [relativeCellPhone]
     * @param {boolean} [isHasCommitment]
     * @param {boolean} [isBaptize]
     * @param {number} [baptizeTypeId]
     * @param {string} [baptizeday]
     * @param {string} [baptizeOrgName]
     * @param {string} [baptizeGroup]
     * @param {string} [baptizer]
     * @param {string} [firstSermon]
     * @param {string} [firstGroupMeeting]
     * @param {string} [settleDate]
     * @param {string} [lastMovedDate]
     * @param {boolean} [isContact]
     * @param {boolean} [isGranted]
     * @param {string} [grantedDate]
     * @param {boolean} [isFromExp]
     * @param {string} [sourceCd]
     * @param {string} [groupLeaderDate]
     * @param {boolean} [isAllowLession]
     * @param {string} [career]
     * @param {string} [careerComment]
     * @param {string} [interests]
     * @param {string} [minister]
     * @param {boolean} [isEducation]
     * @param {string} [levelofEducation]
     * @param {number} [educationGrade]
     * @param {string} [educationSchool]
     * @param {string} [schoolTimeCd]
     * @param {number} [marriageId]
     * @param {string} [spouse]
     * @param {string} [child1]
     * @param {string} [child2]
     * @param {string} [child3]
     * @param {string} [child4]
     * @param {string} [father]
     * @param {string} [mother]
     * @param {string} [contactTimes]
     * @param {string} [orgName]
     * @param {string} [department]
     * @param {string} [area]
     * @param {string} [zone]
     * @param {string} [group]
     * @param {string} [orgPriest]
     * @param {string} [orgTitle]
     * @param {number} [groupId]
     * @param {number} [zoneId]
     * @param {number} [areaId]
     * @param {boolean} [isE1]
     * @param {boolean} [isE2]
     * @param {boolean} [isE3]
     * @param {boolean} [isE4]
     * @param {boolean} [isReserved]
     * @param {boolean} [isTerm]
     * @param {boolean} [isGroupAttendExpected]
     * @param {boolean} [isWorshipAttendExpected]
     * @param {string} [statusCd]
     * @param {string} [comment]
     * @param {string} [dateCreate]
     * @param {string} [userCreate]
     * @param {string} [dateUpdate]
     * @param {string} [userUpdate]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async createMember(
      id?: number,
      portalId?: string,
      name?: string,
      engName?: string,
      userId?: string,
      categoryId?: number,
      identifier?: string,
      idnumber?: string,
      email?: string,
      contactPhone?: string,
      contactCellPhone?: string,
      contactCellPhone2?: string,
      contactCity?: string,
      contactZipCode?: string,
      contactAddress?: string,
      homeAddress?: string,
      bizPhone?: string,
      fax?: string,
      gender?: string,
      birthday?: string,
      introducer?: string,
      introducerGroup?: string,
      relativeName?: string,
      relativeRelation?: string,
      relativeCellPhone?: string,
      isHasCommitment?: boolean,
      isBaptize?: boolean,
      baptizeTypeId?: number,
      baptizeday?: string,
      baptizeOrgName?: string,
      baptizeGroup?: string,
      baptizer?: string,
      firstSermon?: string,
      firstGroupMeeting?: string,
      settleDate?: string,
      lastMovedDate?: string,
      isContact?: boolean,
      isGranted?: boolean,
      grantedDate?: string,
      isFromExp?: boolean,
      sourceCd?: string,
      groupLeaderDate?: string,
      isAllowLession?: boolean,
      career?: string,
      careerComment?: string,
      interests?: string,
      minister?: string,
      isEducation?: boolean,
      levelofEducation?: string,
      educationGrade?: number,
      educationSchool?: string,
      schoolTimeCd?: string,
      marriageId?: number,
      spouse?: string,
      child1?: string,
      child2?: string,
      child3?: string,
      child4?: string,
      father?: string,
      mother?: string,
      contactTimes?: string,
      orgName?: string,
      department?: string,
      area?: string,
      zone?: string,
      group?: string,
      orgPriest?: string,
      orgTitle?: string,
      groupId?: number,
      zoneId?: number,
      areaId?: number,
      isE1?: boolean,
      isE2?: boolean,
      isE3?: boolean,
      isE4?: boolean,
      isReserved?: boolean,
      isTerm?: boolean,
      isGroupAttendExpected?: boolean,
      isWorshipAttendExpected?: boolean,
      statusCd?: string,
      comment?: string,
      dateCreate?: string,
      userCreate?: string,
      dateUpdate?: string,
      userUpdate?: string,
      options?: AxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<ModMemberViewApiResponse>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.createMember(
        id,
        portalId,
        name,
        engName,
        userId,
        categoryId,
        identifier,
        idnumber,
        email,
        contactPhone,
        contactCellPhone,
        contactCellPhone2,
        contactCity,
        contactZipCode,
        contactAddress,
        homeAddress,
        bizPhone,
        fax,
        gender,
        birthday,
        introducer,
        introducerGroup,
        relativeName,
        relativeRelation,
        relativeCellPhone,
        isHasCommitment,
        isBaptize,
        baptizeTypeId,
        baptizeday,
        baptizeOrgName,
        baptizeGroup,
        baptizer,
        firstSermon,
        firstGroupMeeting,
        settleDate,
        lastMovedDate,
        isContact,
        isGranted,
        grantedDate,
        isFromExp,
        sourceCd,
        groupLeaderDate,
        isAllowLession,
        career,
        careerComment,
        interests,
        minister,
        isEducation,
        levelofEducation,
        educationGrade,
        educationSchool,
        schoolTimeCd,
        marriageId,
        spouse,
        child1,
        child2,
        child3,
        child4,
        father,
        mother,
        contactTimes,
        orgName,
        department,
        area,
        zone,
        group,
        orgPriest,
        orgTitle,
        groupId,
        zoneId,
        areaId,
        isE1,
        isE2,
        isE3,
        isE4,
        isReserved,
        isTerm,
        isGroupAttendExpected,
        isWorshipAttendExpected,
        statusCd,
        comment,
        dateCreate,
        userCreate,
        dateUpdate,
        userUpdate,
        options
      );
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     *
     * @param {number} [id]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async findMember(
      id?: number,
      options?: AxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<ModMemberViewApiResponse>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.findMember(id, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
  };
};

/**
 * MembershipApi - factory interface
 * @export
 */
export const MembershipApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
  const localVarFp = MembershipApiFp(configuration);
  return {
    /**
     *
     * @param {number} [id]
     * @param {string} [portalId]
     * @param {string} [name]
     * @param {string} [engName]
     * @param {string} [userId]
     * @param {number} [categoryId]
     * @param {string} [identifier]
     * @param {string} [idnumber]
     * @param {string} [email]
     * @param {string} [contactPhone]
     * @param {string} [contactCellPhone]
     * @param {string} [contactCellPhone2]
     * @param {string} [contactCity]
     * @param {string} [contactZipCode]
     * @param {string} [contactAddress]
     * @param {string} [homeAddress]
     * @param {string} [bizPhone]
     * @param {string} [fax]
     * @param {string} [gender]
     * @param {string} [birthday]
     * @param {string} [introducer]
     * @param {string} [introducerGroup]
     * @param {string} [relativeName]
     * @param {string} [relativeRelation]
     * @param {string} [relativeCellPhone]
     * @param {boolean} [isHasCommitment]
     * @param {boolean} [isBaptize]
     * @param {number} [baptizeTypeId]
     * @param {string} [baptizeday]
     * @param {string} [baptizeOrgName]
     * @param {string} [baptizeGroup]
     * @param {string} [baptizer]
     * @param {string} [firstSermon]
     * @param {string} [firstGroupMeeting]
     * @param {string} [settleDate]
     * @param {string} [lastMovedDate]
     * @param {boolean} [isContact]
     * @param {boolean} [isGranted]
     * @param {string} [grantedDate]
     * @param {boolean} [isFromExp]
     * @param {string} [sourceCd]
     * @param {string} [groupLeaderDate]
     * @param {boolean} [isAllowLession]
     * @param {string} [career]
     * @param {string} [careerComment]
     * @param {string} [interests]
     * @param {string} [minister]
     * @param {boolean} [isEducation]
     * @param {string} [levelofEducation]
     * @param {number} [educationGrade]
     * @param {string} [educationSchool]
     * @param {string} [schoolTimeCd]
     * @param {number} [marriageId]
     * @param {string} [spouse]
     * @param {string} [child1]
     * @param {string} [child2]
     * @param {string} [child3]
     * @param {string} [child4]
     * @param {string} [father]
     * @param {string} [mother]
     * @param {string} [contactTimes]
     * @param {string} [orgName]
     * @param {string} [department]
     * @param {string} [area]
     * @param {string} [zone]
     * @param {string} [group]
     * @param {string} [orgPriest]
     * @param {string} [orgTitle]
     * @param {number} [groupId]
     * @param {number} [zoneId]
     * @param {number} [areaId]
     * @param {boolean} [isE1]
     * @param {boolean} [isE2]
     * @param {boolean} [isE3]
     * @param {boolean} [isE4]
     * @param {boolean} [isReserved]
     * @param {boolean} [isTerm]
     * @param {boolean} [isGroupAttendExpected]
     * @param {boolean} [isWorshipAttendExpected]
     * @param {string} [statusCd]
     * @param {string} [comment]
     * @param {string} [dateCreate]
     * @param {string} [userCreate]
     * @param {string} [dateUpdate]
     * @param {string} [userUpdate]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createMember(
      id?: number,
      portalId?: string,
      name?: string,
      engName?: string,
      userId?: string,
      categoryId?: number,
      identifier?: string,
      idnumber?: string,
      email?: string,
      contactPhone?: string,
      contactCellPhone?: string,
      contactCellPhone2?: string,
      contactCity?: string,
      contactZipCode?: string,
      contactAddress?: string,
      homeAddress?: string,
      bizPhone?: string,
      fax?: string,
      gender?: string,
      birthday?: string,
      introducer?: string,
      introducerGroup?: string,
      relativeName?: string,
      relativeRelation?: string,
      relativeCellPhone?: string,
      isHasCommitment?: boolean,
      isBaptize?: boolean,
      baptizeTypeId?: number,
      baptizeday?: string,
      baptizeOrgName?: string,
      baptizeGroup?: string,
      baptizer?: string,
      firstSermon?: string,
      firstGroupMeeting?: string,
      settleDate?: string,
      lastMovedDate?: string,
      isContact?: boolean,
      isGranted?: boolean,
      grantedDate?: string,
      isFromExp?: boolean,
      sourceCd?: string,
      groupLeaderDate?: string,
      isAllowLession?: boolean,
      career?: string,
      careerComment?: string,
      interests?: string,
      minister?: string,
      isEducation?: boolean,
      levelofEducation?: string,
      educationGrade?: number,
      educationSchool?: string,
      schoolTimeCd?: string,
      marriageId?: number,
      spouse?: string,
      child1?: string,
      child2?: string,
      child3?: string,
      child4?: string,
      father?: string,
      mother?: string,
      contactTimes?: string,
      orgName?: string,
      department?: string,
      area?: string,
      zone?: string,
      group?: string,
      orgPriest?: string,
      orgTitle?: string,
      groupId?: number,
      zoneId?: number,
      areaId?: number,
      isE1?: boolean,
      isE2?: boolean,
      isE3?: boolean,
      isE4?: boolean,
      isReserved?: boolean,
      isTerm?: boolean,
      isGroupAttendExpected?: boolean,
      isWorshipAttendExpected?: boolean,
      statusCd?: string,
      comment?: string,
      dateCreate?: string,
      userCreate?: string,
      dateUpdate?: string,
      userUpdate?: string,
      options?: any
    ): Promise<ModMemberViewApiResponse> {
      return localVarFp
        .createMember(
          id,
          portalId,
          name,
          engName,
          userId,
          categoryId,
          identifier,
          idnumber,
          email,
          contactPhone,
          contactCellPhone,
          contactCellPhone2,
          contactCity,
          contactZipCode,
          contactAddress,
          homeAddress,
          bizPhone,
          fax,
          gender,
          birthday,
          introducer,
          introducerGroup,
          relativeName,
          relativeRelation,
          relativeCellPhone,
          isHasCommitment,
          isBaptize,
          baptizeTypeId,
          baptizeday,
          baptizeOrgName,
          baptizeGroup,
          baptizer,
          firstSermon,
          firstGroupMeeting,
          settleDate,
          lastMovedDate,
          isContact,
          isGranted,
          grantedDate,
          isFromExp,
          sourceCd,
          groupLeaderDate,
          isAllowLession,
          career,
          careerComment,
          interests,
          minister,
          isEducation,
          levelofEducation,
          educationGrade,
          educationSchool,
          schoolTimeCd,
          marriageId,
          spouse,
          child1,
          child2,
          child3,
          child4,
          father,
          mother,
          contactTimes,
          orgName,
          department,
          area,
          zone,
          group,
          orgPriest,
          orgTitle,
          groupId,
          zoneId,
          areaId,
          isE1,
          isE2,
          isE3,
          isE4,
          isReserved,
          isTerm,
          isGroupAttendExpected,
          isWorshipAttendExpected,
          statusCd,
          comment,
          dateCreate,
          userCreate,
          dateUpdate,
          userUpdate,
          options
        )
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {number} [id]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    findMember(id?: number, options?: any): Promise<ModMemberViewApiResponse> {
      return localVarFp.findMember(id, options).then((request) => request(axios, basePath));
    },
  };
};

/**
 * MembershipApi - interface
 * @export
 * @interface MembershipApi
 */
export interface MembershipApiInterface {
  /**
   *
   * @param {number} [id]
   * @param {string} [portalId]
   * @param {string} [name]
   * @param {string} [engName]
   * @param {string} [userId]
   * @param {number} [categoryId]
   * @param {string} [identifier]
   * @param {string} [idnumber]
   * @param {string} [email]
   * @param {string} [contactPhone]
   * @param {string} [contactCellPhone]
   * @param {string} [contactCellPhone2]
   * @param {string} [contactCity]
   * @param {string} [contactZipCode]
   * @param {string} [contactAddress]
   * @param {string} [homeAddress]
   * @param {string} [bizPhone]
   * @param {string} [fax]
   * @param {string} [gender]
   * @param {string} [birthday]
   * @param {string} [introducer]
   * @param {string} [introducerGroup]
   * @param {string} [relativeName]
   * @param {string} [relativeRelation]
   * @param {string} [relativeCellPhone]
   * @param {boolean} [isHasCommitment]
   * @param {boolean} [isBaptize]
   * @param {number} [baptizeTypeId]
   * @param {string} [baptizeday]
   * @param {string} [baptizeOrgName]
   * @param {string} [baptizeGroup]
   * @param {string} [baptizer]
   * @param {string} [firstSermon]
   * @param {string} [firstGroupMeeting]
   * @param {string} [settleDate]
   * @param {string} [lastMovedDate]
   * @param {boolean} [isContact]
   * @param {boolean} [isGranted]
   * @param {string} [grantedDate]
   * @param {boolean} [isFromExp]
   * @param {string} [sourceCd]
   * @param {string} [groupLeaderDate]
   * @param {boolean} [isAllowLession]
   * @param {string} [career]
   * @param {string} [careerComment]
   * @param {string} [interests]
   * @param {string} [minister]
   * @param {boolean} [isEducation]
   * @param {string} [levelofEducation]
   * @param {number} [educationGrade]
   * @param {string} [educationSchool]
   * @param {string} [schoolTimeCd]
   * @param {number} [marriageId]
   * @param {string} [spouse]
   * @param {string} [child1]
   * @param {string} [child2]
   * @param {string} [child3]
   * @param {string} [child4]
   * @param {string} [father]
   * @param {string} [mother]
   * @param {string} [contactTimes]
   * @param {string} [orgName]
   * @param {string} [department]
   * @param {string} [area]
   * @param {string} [zone]
   * @param {string} [group]
   * @param {string} [orgPriest]
   * @param {string} [orgTitle]
   * @param {number} [groupId]
   * @param {number} [zoneId]
   * @param {number} [areaId]
   * @param {boolean} [isE1]
   * @param {boolean} [isE2]
   * @param {boolean} [isE3]
   * @param {boolean} [isE4]
   * @param {boolean} [isReserved]
   * @param {boolean} [isTerm]
   * @param {boolean} [isGroupAttendExpected]
   * @param {boolean} [isWorshipAttendExpected]
   * @param {string} [statusCd]
   * @param {string} [comment]
   * @param {string} [dateCreate]
   * @param {string} [userCreate]
   * @param {string} [dateUpdate]
   * @param {string} [userUpdate]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof MembershipApiInterface
   */
  createMember(
    id?: number,
    portalId?: string,
    name?: string,
    engName?: string,
    userId?: string,
    categoryId?: number,
    identifier?: string,
    idnumber?: string,
    email?: string,
    contactPhone?: string,
    contactCellPhone?: string,
    contactCellPhone2?: string,
    contactCity?: string,
    contactZipCode?: string,
    contactAddress?: string,
    homeAddress?: string,
    bizPhone?: string,
    fax?: string,
    gender?: string,
    birthday?: string,
    introducer?: string,
    introducerGroup?: string,
    relativeName?: string,
    relativeRelation?: string,
    relativeCellPhone?: string,
    isHasCommitment?: boolean,
    isBaptize?: boolean,
    baptizeTypeId?: number,
    baptizeday?: string,
    baptizeOrgName?: string,
    baptizeGroup?: string,
    baptizer?: string,
    firstSermon?: string,
    firstGroupMeeting?: string,
    settleDate?: string,
    lastMovedDate?: string,
    isContact?: boolean,
    isGranted?: boolean,
    grantedDate?: string,
    isFromExp?: boolean,
    sourceCd?: string,
    groupLeaderDate?: string,
    isAllowLession?: boolean,
    career?: string,
    careerComment?: string,
    interests?: string,
    minister?: string,
    isEducation?: boolean,
    levelofEducation?: string,
    educationGrade?: number,
    educationSchool?: string,
    schoolTimeCd?: string,
    marriageId?: number,
    spouse?: string,
    child1?: string,
    child2?: string,
    child3?: string,
    child4?: string,
    father?: string,
    mother?: string,
    contactTimes?: string,
    orgName?: string,
    department?: string,
    area?: string,
    zone?: string,
    group?: string,
    orgPriest?: string,
    orgTitle?: string,
    groupId?: number,
    zoneId?: number,
    areaId?: number,
    isE1?: boolean,
    isE2?: boolean,
    isE3?: boolean,
    isE4?: boolean,
    isReserved?: boolean,
    isTerm?: boolean,
    isGroupAttendExpected?: boolean,
    isWorshipAttendExpected?: boolean,
    statusCd?: string,
    comment?: string,
    dateCreate?: string,
    userCreate?: string,
    dateUpdate?: string,
    userUpdate?: string,
    options?: AxiosRequestConfig
  ): Promise<ModMemberViewApiResponse>;

  /**
   *
   * @param {number} [id]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof MembershipApiInterface
   */
  findMember(id?: number, options?: AxiosRequestConfig): Promise<ModMemberViewApiResponse>;
}

/**
 * MembershipApi - object-oriented interface
 * @export
 * @class MembershipApi
 * @extends {BaseAPI}
 */
export class MembershipApi extends BaseAPI implements MembershipApiInterface {
  /**
   *
   * @param {number} [id]
   * @param {string} [portalId]
   * @param {string} [name]
   * @param {string} [engName]
   * @param {string} [userId]
   * @param {number} [categoryId]
   * @param {string} [identifier]
   * @param {string} [idnumber]
   * @param {string} [email]
   * @param {string} [contactPhone]
   * @param {string} [contactCellPhone]
   * @param {string} [contactCellPhone2]
   * @param {string} [contactCity]
   * @param {string} [contactZipCode]
   * @param {string} [contactAddress]
   * @param {string} [homeAddress]
   * @param {string} [bizPhone]
   * @param {string} [fax]
   * @param {string} [gender]
   * @param {string} [birthday]
   * @param {string} [introducer]
   * @param {string} [introducerGroup]
   * @param {string} [relativeName]
   * @param {string} [relativeRelation]
   * @param {string} [relativeCellPhone]
   * @param {boolean} [isHasCommitment]
   * @param {boolean} [isBaptize]
   * @param {number} [baptizeTypeId]
   * @param {string} [baptizeday]
   * @param {string} [baptizeOrgName]
   * @param {string} [baptizeGroup]
   * @param {string} [baptizer]
   * @param {string} [firstSermon]
   * @param {string} [firstGroupMeeting]
   * @param {string} [settleDate]
   * @param {string} [lastMovedDate]
   * @param {boolean} [isContact]
   * @param {boolean} [isGranted]
   * @param {string} [grantedDate]
   * @param {boolean} [isFromExp]
   * @param {string} [sourceCd]
   * @param {string} [groupLeaderDate]
   * @param {boolean} [isAllowLession]
   * @param {string} [career]
   * @param {string} [careerComment]
   * @param {string} [interests]
   * @param {string} [minister]
   * @param {boolean} [isEducation]
   * @param {string} [levelofEducation]
   * @param {number} [educationGrade]
   * @param {string} [educationSchool]
   * @param {string} [schoolTimeCd]
   * @param {number} [marriageId]
   * @param {string} [spouse]
   * @param {string} [child1]
   * @param {string} [child2]
   * @param {string} [child3]
   * @param {string} [child4]
   * @param {string} [father]
   * @param {string} [mother]
   * @param {string} [contactTimes]
   * @param {string} [orgName]
   * @param {string} [department]
   * @param {string} [area]
   * @param {string} [zone]
   * @param {string} [group]
   * @param {string} [orgPriest]
   * @param {string} [orgTitle]
   * @param {number} [groupId]
   * @param {number} [zoneId]
   * @param {number} [areaId]
   * @param {boolean} [isE1]
   * @param {boolean} [isE2]
   * @param {boolean} [isE3]
   * @param {boolean} [isE4]
   * @param {boolean} [isReserved]
   * @param {boolean} [isTerm]
   * @param {boolean} [isGroupAttendExpected]
   * @param {boolean} [isWorshipAttendExpected]
   * @param {string} [statusCd]
   * @param {string} [comment]
   * @param {string} [dateCreate]
   * @param {string} [userCreate]
   * @param {string} [dateUpdate]
   * @param {string} [userUpdate]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof MembershipApi
   */
  public createMember(
    id?: number,
    portalId?: string,
    name?: string,
    engName?: string,
    userId?: string,
    categoryId?: number,
    identifier?: string,
    idnumber?: string,
    email?: string,
    contactPhone?: string,
    contactCellPhone?: string,
    contactCellPhone2?: string,
    contactCity?: string,
    contactZipCode?: string,
    contactAddress?: string,
    homeAddress?: string,
    bizPhone?: string,
    fax?: string,
    gender?: string,
    birthday?: string,
    introducer?: string,
    introducerGroup?: string,
    relativeName?: string,
    relativeRelation?: string,
    relativeCellPhone?: string,
    isHasCommitment?: boolean,
    isBaptize?: boolean,
    baptizeTypeId?: number,
    baptizeday?: string,
    baptizeOrgName?: string,
    baptizeGroup?: string,
    baptizer?: string,
    firstSermon?: string,
    firstGroupMeeting?: string,
    settleDate?: string,
    lastMovedDate?: string,
    isContact?: boolean,
    isGranted?: boolean,
    grantedDate?: string,
    isFromExp?: boolean,
    sourceCd?: string,
    groupLeaderDate?: string,
    isAllowLession?: boolean,
    career?: string,
    careerComment?: string,
    interests?: string,
    minister?: string,
    isEducation?: boolean,
    levelofEducation?: string,
    educationGrade?: number,
    educationSchool?: string,
    schoolTimeCd?: string,
    marriageId?: number,
    spouse?: string,
    child1?: string,
    child2?: string,
    child3?: string,
    child4?: string,
    father?: string,
    mother?: string,
    contactTimes?: string,
    orgName?: string,
    department?: string,
    area?: string,
    zone?: string,
    group?: string,
    orgPriest?: string,
    orgTitle?: string,
    groupId?: number,
    zoneId?: number,
    areaId?: number,
    isE1?: boolean,
    isE2?: boolean,
    isE3?: boolean,
    isE4?: boolean,
    isReserved?: boolean,
    isTerm?: boolean,
    isGroupAttendExpected?: boolean,
    isWorshipAttendExpected?: boolean,
    statusCd?: string,
    comment?: string,
    dateCreate?: string,
    userCreate?: string,
    dateUpdate?: string,
    userUpdate?: string,
    options?: AxiosRequestConfig
  ) {
    return MembershipApiFp(this.configuration)
      .createMember(
        id,
        portalId,
        name,
        engName,
        userId,
        categoryId,
        identifier,
        idnumber,
        email,
        contactPhone,
        contactCellPhone,
        contactCellPhone2,
        contactCity,
        contactZipCode,
        contactAddress,
        homeAddress,
        bizPhone,
        fax,
        gender,
        birthday,
        introducer,
        introducerGroup,
        relativeName,
        relativeRelation,
        relativeCellPhone,
        isHasCommitment,
        isBaptize,
        baptizeTypeId,
        baptizeday,
        baptizeOrgName,
        baptizeGroup,
        baptizer,
        firstSermon,
        firstGroupMeeting,
        settleDate,
        lastMovedDate,
        isContact,
        isGranted,
        grantedDate,
        isFromExp,
        sourceCd,
        groupLeaderDate,
        isAllowLession,
        career,
        careerComment,
        interests,
        minister,
        isEducation,
        levelofEducation,
        educationGrade,
        educationSchool,
        schoolTimeCd,
        marriageId,
        spouse,
        child1,
        child2,
        child3,
        child4,
        father,
        mother,
        contactTimes,
        orgName,
        department,
        area,
        zone,
        group,
        orgPriest,
        orgTitle,
        groupId,
        zoneId,
        areaId,
        isE1,
        isE2,
        isE3,
        isE4,
        isReserved,
        isTerm,
        isGroupAttendExpected,
        isWorshipAttendExpected,
        statusCd,
        comment,
        dateCreate,
        userCreate,
        dateUpdate,
        userUpdate,
        options
      )
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {number} [id]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof MembershipApi
   */
  public findMember(id?: number, options?: AxiosRequestConfig) {
    return MembershipApiFp(this.configuration)
      .findMember(id, options)
      .then((request) => request(this.axios, this.basePath));
  }
}

/**
 * MessageInformationApi - axios parameter creator
 * @export
 */
export const MessageInformationApiAxiosParamCreator = function (configuration?: Configuration) {
  return {
    /**
     *
     * @summary 建立訊息管理檔
     * @param {CreateMessageInformationCommand} [createMessageInformationCommand]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createMessageInformation: async (
      createMessageInformationCommand?: CreateMessageInformationCommand,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/messageInformation`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: "POST", ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication Example-id-1 required
      await setApiKeyToObject(localVarHeaderParameter, "Example-id-1", configuration);

      // authentication JWT_Authorization required
      await setApiKeyToObject(localVarHeaderParameter, "authorization", configuration);

      // authentication example-id-2 required
      await setApiKeyToObject(localVarHeaderParameter, "example-id-2", configuration);

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      localVarRequestOptions.data = serializeDataIfNeeded(
        createMessageInformationCommand,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary 刪除訊息管理
     * @param {DeleteMessageInformationCommand} [deleteMessageInformationCommand]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteMessageInformation: async (
      deleteMessageInformationCommand?: DeleteMessageInformationCommand,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/messageInformation`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: "DELETE", ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication Example-id-1 required
      await setApiKeyToObject(localVarHeaderParameter, "Example-id-1", configuration);

      // authentication JWT_Authorization required
      await setApiKeyToObject(localVarHeaderParameter, "authorization", configuration);

      // authentication example-id-2 required
      await setApiKeyToObject(localVarHeaderParameter, "example-id-2", configuration);

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      localVarRequestOptions.data = serializeDataIfNeeded(
        deleteMessageInformationCommand,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary 查詢訊息管理
     * @param {FetchAllMessageInformationRequest} [fetchAllMessageInformationRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    fetchMessageInformations: async (
      fetchAllMessageInformationRequest?: FetchAllMessageInformationRequest,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/messageInformation/fetch`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: "POST", ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication Example-id-1 required
      await setApiKeyToObject(localVarHeaderParameter, "Example-id-1", configuration);

      // authentication JWT_Authorization required
      await setApiKeyToObject(localVarHeaderParameter, "authorization", configuration);

      // authentication example-id-2 required
      await setApiKeyToObject(localVarHeaderParameter, "example-id-2", configuration);

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      localVarRequestOptions.data = serializeDataIfNeeded(
        fetchAllMessageInformationRequest,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary 查詢訊息管理
     * @param {number} [id] id
     * @param {number} [organizationId]
     * @param {number} [meetingPointId] MeetingPoint.Id 聚會點id       //GetUserId from  User.MeetingPointId
     * @param {number} [pastoralId] Pastoral.Id 牧養組織id         //GetUserId from  User.PastoralId
     * @param {number} [ministryRespId] MinistryResp.Id 牧養身分
     * @param {number} [ministryId] Ministry.Id 事工團                                      //GetUserId from MinistryMeetingUser join  MinistryMeeting   &#x3D;&gt; MinistryMeeting.MinistryId&#x3D;輸入的MinistryId
     * @param {number} [courseId] CourseNo 課程名稱 課程代碼          //GetUserId from UserCourse
     * @param {string} [genderType] 性別 對應SystemConfigtype&#x3D;GenderType顯示 namevalue存此欄位0：女姓1：男性     //GetUserId from  User.GenderType
     * @param {string} [birthdayYearRange] //GetUserId from  User.Birthday 年分 like 選的前三位 碼  例如  0 &#x3D;&gt;1920   就是 birthday like \&#39;192%\&#39;   性別 對應SystemConfigtype&#x3D;BirthdayYearRange顯示 namevalue存此欄位0：1920   1：1930  2:1940  3:1950  4:1960  5:1970   6:1980  7:1990  8:2000   9:2010   10:2020
     * @param {string} [professionType] 職業type&#x3D;EduType顯示 namevalue存此欄位0：老師1：家管…    //GetUserId from  User.ProfessionType
     * @param {string} [title] 推播訊息描述
     * @param {string} [descriptions] 推播訊息內容
     * @param {string} [messageSendType] 職業type&#x3D;MessageSendType namevalue存此欄位0：尚未推播    1：已推播
     * @param {string} [statusCd] 狀態
     * @param {Array<SortProperty>} [sortProperties] 查詢欄位排序
     * @param {number} [page] 目前頁數
     * @param {number} [size] 每頁筆數
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    findMessageInformation: async (
      id?: number,
      organizationId?: number,
      meetingPointId?: number,
      pastoralId?: number,
      ministryRespId?: number,
      ministryId?: number,
      courseId?: number,
      genderType?: string,
      birthdayYearRange?: string,
      professionType?: string,
      title?: string,
      descriptions?: string,
      messageSendType?: string,
      statusCd?: string,
      sortProperties?: Array<SortProperty>,
      page?: number,
      size?: number,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/messageInformation`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: "GET", ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication Example-id-1 required
      await setApiKeyToObject(localVarHeaderParameter, "Example-id-1", configuration);

      // authentication JWT_Authorization required
      await setApiKeyToObject(localVarHeaderParameter, "authorization", configuration);

      // authentication example-id-2 required
      await setApiKeyToObject(localVarHeaderParameter, "example-id-2", configuration);

      if (id !== undefined) {
        localVarQueryParameter["id"] = id;
      }

      if (organizationId !== undefined) {
        localVarQueryParameter["organizationId"] = organizationId;
      }

      if (meetingPointId !== undefined) {
        localVarQueryParameter["meetingPointId"] = meetingPointId;
      }

      if (pastoralId !== undefined) {
        localVarQueryParameter["pastoralId"] = pastoralId;
      }

      if (ministryRespId !== undefined) {
        localVarQueryParameter["ministryRespId"] = ministryRespId;
      }

      if (ministryId !== undefined) {
        localVarQueryParameter["ministryId"] = ministryId;
      }

      if (courseId !== undefined) {
        localVarQueryParameter["courseId"] = courseId;
      }

      if (genderType !== undefined) {
        localVarQueryParameter["genderType"] = genderType;
      }

      if (birthdayYearRange !== undefined) {
        localVarQueryParameter["birthdayYearRange"] = birthdayYearRange;
      }

      if (professionType !== undefined) {
        localVarQueryParameter["professionType"] = professionType;
      }

      if (title !== undefined) {
        localVarQueryParameter["title"] = title;
      }

      if (descriptions !== undefined) {
        localVarQueryParameter["descriptions"] = descriptions;
      }

      if (messageSendType !== undefined) {
        localVarQueryParameter["messageSendType"] = messageSendType;
      }

      if (statusCd !== undefined) {
        localVarQueryParameter["statusCd"] = statusCd;
      }

      if (sortProperties) {
        localVarQueryParameter["sortProperties"] = sortProperties;
      }

      if (page !== undefined) {
        localVarQueryParameter["page"] = page;
      }

      if (size !== undefined) {
        localVarQueryParameter["size"] = size;
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary 以 Id 查詢列表
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getMessageInformationOfId: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists("getMessageInformationOfId", "id", id);
      const localVarPath = `/api/messageInformation/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(id)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: "GET", ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication Example-id-1 required
      await setApiKeyToObject(localVarHeaderParameter, "Example-id-1", configuration);

      // authentication JWT_Authorization required
      await setApiKeyToObject(localVarHeaderParameter, "authorization", configuration);

      // authentication example-id-2 required
      await setApiKeyToObject(localVarHeaderParameter, "example-id-2", configuration);

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary 修改訊息管理
     * @param {UpdateMessageInformationCommand} [updateMessageInformationCommand]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    putMessageInformation: async (
      updateMessageInformationCommand?: UpdateMessageInformationCommand,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/messageInformation`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: "PUT", ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication Example-id-1 required
      await setApiKeyToObject(localVarHeaderParameter, "Example-id-1", configuration);

      // authentication JWT_Authorization required
      await setApiKeyToObject(localVarHeaderParameter, "authorization", configuration);

      // authentication example-id-2 required
      await setApiKeyToObject(localVarHeaderParameter, "example-id-2", configuration);

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      localVarRequestOptions.data = serializeDataIfNeeded(
        updateMessageInformationCommand,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary 查詢列表  (*dynamic sort support)
     * @param {QueryMessageInformationRequest} [queryMessageInformationRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    queryMessageInformations: async (
      queryMessageInformationRequest?: QueryMessageInformationRequest,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/messageInformation/query`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: "POST", ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication Example-id-1 required
      await setApiKeyToObject(localVarHeaderParameter, "Example-id-1", configuration);

      // authentication JWT_Authorization required
      await setApiKeyToObject(localVarHeaderParameter, "authorization", configuration);

      // authentication example-id-2 required
      await setApiKeyToObject(localVarHeaderParameter, "example-id-2", configuration);

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      localVarRequestOptions.data = serializeDataIfNeeded(
        queryMessageInformationRequest,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary 刪除主檔
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    removeMessageInformation: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists("removeMessageInformation", "id", id);
      const localVarPath = `/api/messageInformation/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(id)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: "DELETE", ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication Example-id-1 required
      await setApiKeyToObject(localVarHeaderParameter, "Example-id-1", configuration);

      // authentication JWT_Authorization required
      await setApiKeyToObject(localVarHeaderParameter, "authorization", configuration);

      // authentication example-id-2 required
      await setApiKeyToObject(localVarHeaderParameter, "example-id-2", configuration);

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * MessageInformationApi - functional programming interface
 * @export
 */
export const MessageInformationApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = MessageInformationApiAxiosParamCreator(configuration);
  return {
    /**
     *
     * @summary 建立訊息管理檔
     * @param {CreateMessageInformationCommand} [createMessageInformationCommand]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async createMessageInformation(
      createMessageInformationCommand?: CreateMessageInformationCommand,
      options?: AxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<MessageInformationViewApiResponse>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.createMessageInformation(
        createMessageInformationCommand,
        options
      );
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     *
     * @summary 刪除訊息管理
     * @param {DeleteMessageInformationCommand} [deleteMessageInformationCommand]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async deleteMessageInformation(
      deleteMessageInformationCommand?: DeleteMessageInformationCommand,
      options?: AxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<MessageInformationViewApiResponse>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.deleteMessageInformation(
        deleteMessageInformationCommand,
        options
      );
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     *
     * @summary 查詢訊息管理
     * @param {FetchAllMessageInformationRequest} [fetchAllMessageInformationRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async fetchMessageInformations(
      fetchAllMessageInformationRequest?: FetchAllMessageInformationRequest,
      options?: AxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<MessageInformationViewListApiResponse>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.fetchMessageInformations(
        fetchAllMessageInformationRequest,
        options
      );
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     *
     * @summary 查詢訊息管理
     * @param {number} [id] id
     * @param {number} [organizationId]
     * @param {number} [meetingPointId] MeetingPoint.Id 聚會點id       //GetUserId from  User.MeetingPointId
     * @param {number} [pastoralId] Pastoral.Id 牧養組織id         //GetUserId from  User.PastoralId
     * @param {number} [ministryRespId] MinistryResp.Id 牧養身分
     * @param {number} [ministryId] Ministry.Id 事工團                                      //GetUserId from MinistryMeetingUser join  MinistryMeeting   &#x3D;&gt; MinistryMeeting.MinistryId&#x3D;輸入的MinistryId
     * @param {number} [courseId] CourseNo 課程名稱 課程代碼          //GetUserId from UserCourse
     * @param {string} [genderType] 性別 對應SystemConfigtype&#x3D;GenderType顯示 namevalue存此欄位0：女姓1：男性     //GetUserId from  User.GenderType
     * @param {string} [birthdayYearRange] //GetUserId from  User.Birthday 年分 like 選的前三位 碼  例如  0 &#x3D;&gt;1920   就是 birthday like \&#39;192%\&#39;   性別 對應SystemConfigtype&#x3D;BirthdayYearRange顯示 namevalue存此欄位0：1920   1：1930  2:1940  3:1950  4:1960  5:1970   6:1980  7:1990  8:2000   9:2010   10:2020
     * @param {string} [professionType] 職業type&#x3D;EduType顯示 namevalue存此欄位0：老師1：家管…    //GetUserId from  User.ProfessionType
     * @param {string} [title] 推播訊息描述
     * @param {string} [descriptions] 推播訊息內容
     * @param {string} [messageSendType] 職業type&#x3D;MessageSendType namevalue存此欄位0：尚未推播    1：已推播
     * @param {string} [statusCd] 狀態
     * @param {Array<SortProperty>} [sortProperties] 查詢欄位排序
     * @param {number} [page] 目前頁數
     * @param {number} [size] 每頁筆數
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async findMessageInformation(
      id?: number,
      organizationId?: number,
      meetingPointId?: number,
      pastoralId?: number,
      ministryRespId?: number,
      ministryId?: number,
      courseId?: number,
      genderType?: string,
      birthdayYearRange?: string,
      professionType?: string,
      title?: string,
      descriptions?: string,
      messageSendType?: string,
      statusCd?: string,
      sortProperties?: Array<SortProperty>,
      page?: number,
      size?: number,
      options?: AxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<MessageInformationViewPageApiResponse>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.findMessageInformation(
        id,
        organizationId,
        meetingPointId,
        pastoralId,
        ministryRespId,
        ministryId,
        courseId,
        genderType,
        birthdayYearRange,
        professionType,
        title,
        descriptions,
        messageSendType,
        statusCd,
        sortProperties,
        page,
        size,
        options
      );
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     *
     * @summary 以 Id 查詢列表
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getMessageInformationOfId(
      id: number,
      options?: AxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<MessageInformationViewApiResponse>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getMessageInformationOfId(id, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     *
     * @summary 修改訊息管理
     * @param {UpdateMessageInformationCommand} [updateMessageInformationCommand]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async putMessageInformation(
      updateMessageInformationCommand?: UpdateMessageInformationCommand,
      options?: AxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<MessageInformationViewApiResponse>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.putMessageInformation(
        updateMessageInformationCommand,
        options
      );
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     *
     * @summary 查詢列表  (*dynamic sort support)
     * @param {QueryMessageInformationRequest} [queryMessageInformationRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async queryMessageInformations(
      queryMessageInformationRequest?: QueryMessageInformationRequest,
      options?: AxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<MessageInformationViewPageApiResponse>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.queryMessageInformations(
        queryMessageInformationRequest,
        options
      );
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     *
     * @summary 刪除主檔
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async removeMessageInformation(
      id: number,
      options?: AxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<Int32ApiResponse>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.removeMessageInformation(id, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
  };
};

/**
 * MessageInformationApi - factory interface
 * @export
 */
export const MessageInformationApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance
) {
  const localVarFp = MessageInformationApiFp(configuration);
  return {
    /**
     *
     * @summary 建立訊息管理檔
     * @param {CreateMessageInformationCommand} [createMessageInformationCommand]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createMessageInformation(
      createMessageInformationCommand?: CreateMessageInformationCommand,
      options?: any
    ): Promise<MessageInformationViewApiResponse> {
      return localVarFp
        .createMessageInformation(createMessageInformationCommand, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary 刪除訊息管理
     * @param {DeleteMessageInformationCommand} [deleteMessageInformationCommand]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteMessageInformation(
      deleteMessageInformationCommand?: DeleteMessageInformationCommand,
      options?: any
    ): Promise<MessageInformationViewApiResponse> {
      return localVarFp
        .deleteMessageInformation(deleteMessageInformationCommand, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary 查詢訊息管理
     * @param {FetchAllMessageInformationRequest} [fetchAllMessageInformationRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    fetchMessageInformations(
      fetchAllMessageInformationRequest?: FetchAllMessageInformationRequest,
      options?: any
    ): Promise<MessageInformationViewListApiResponse> {
      return localVarFp
        .fetchMessageInformations(fetchAllMessageInformationRequest, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary 查詢訊息管理
     * @param {number} [id] id
     * @param {number} [organizationId]
     * @param {number} [meetingPointId] MeetingPoint.Id 聚會點id       //GetUserId from  User.MeetingPointId
     * @param {number} [pastoralId] Pastoral.Id 牧養組織id         //GetUserId from  User.PastoralId
     * @param {number} [ministryRespId] MinistryResp.Id 牧養身分
     * @param {number} [ministryId] Ministry.Id 事工團                                      //GetUserId from MinistryMeetingUser join  MinistryMeeting   &#x3D;&gt; MinistryMeeting.MinistryId&#x3D;輸入的MinistryId
     * @param {number} [courseId] CourseNo 課程名稱 課程代碼          //GetUserId from UserCourse
     * @param {string} [genderType] 性別 對應SystemConfigtype&#x3D;GenderType顯示 namevalue存此欄位0：女姓1：男性     //GetUserId from  User.GenderType
     * @param {string} [birthdayYearRange] //GetUserId from  User.Birthday 年分 like 選的前三位 碼  例如  0 &#x3D;&gt;1920   就是 birthday like \&#39;192%\&#39;   性別 對應SystemConfigtype&#x3D;BirthdayYearRange顯示 namevalue存此欄位0：1920   1：1930  2:1940  3:1950  4:1960  5:1970   6:1980  7:1990  8:2000   9:2010   10:2020
     * @param {string} [professionType] 職業type&#x3D;EduType顯示 namevalue存此欄位0：老師1：家管…    //GetUserId from  User.ProfessionType
     * @param {string} [title] 推播訊息描述
     * @param {string} [descriptions] 推播訊息內容
     * @param {string} [messageSendType] 職業type&#x3D;MessageSendType namevalue存此欄位0：尚未推播    1：已推播
     * @param {string} [statusCd] 狀態
     * @param {Array<SortProperty>} [sortProperties] 查詢欄位排序
     * @param {number} [page] 目前頁數
     * @param {number} [size] 每頁筆數
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    findMessageInformation(
      id?: number,
      organizationId?: number,
      meetingPointId?: number,
      pastoralId?: number,
      ministryRespId?: number,
      ministryId?: number,
      courseId?: number,
      genderType?: string,
      birthdayYearRange?: string,
      professionType?: string,
      title?: string,
      descriptions?: string,
      messageSendType?: string,
      statusCd?: string,
      sortProperties?: Array<SortProperty>,
      page?: number,
      size?: number,
      options?: any
    ): Promise<MessageInformationViewPageApiResponse> {
      return localVarFp
        .findMessageInformation(
          id,
          organizationId,
          meetingPointId,
          pastoralId,
          ministryRespId,
          ministryId,
          courseId,
          genderType,
          birthdayYearRange,
          professionType,
          title,
          descriptions,
          messageSendType,
          statusCd,
          sortProperties,
          page,
          size,
          options
        )
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary 以 Id 查詢列表
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getMessageInformationOfId(id: number, options?: any): Promise<MessageInformationViewApiResponse> {
      return localVarFp.getMessageInformationOfId(id, options).then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary 修改訊息管理
     * @param {UpdateMessageInformationCommand} [updateMessageInformationCommand]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    putMessageInformation(
      updateMessageInformationCommand?: UpdateMessageInformationCommand,
      options?: any
    ): Promise<MessageInformationViewApiResponse> {
      return localVarFp
        .putMessageInformation(updateMessageInformationCommand, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary 查詢列表  (*dynamic sort support)
     * @param {QueryMessageInformationRequest} [queryMessageInformationRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    queryMessageInformations(
      queryMessageInformationRequest?: QueryMessageInformationRequest,
      options?: any
    ): Promise<MessageInformationViewPageApiResponse> {
      return localVarFp
        .queryMessageInformations(queryMessageInformationRequest, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary 刪除主檔
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    removeMessageInformation(id: number, options?: any): Promise<Int32ApiResponse> {
      return localVarFp.removeMessageInformation(id, options).then((request) => request(axios, basePath));
    },
  };
};

/**
 * MessageInformationApi - interface
 * @export
 * @interface MessageInformationApi
 */
export interface MessageInformationApiInterface {
  /**
   *
   * @summary 建立訊息管理檔
   * @param {CreateMessageInformationCommand} [createMessageInformationCommand]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof MessageInformationApiInterface
   */
  createMessageInformation(
    createMessageInformationCommand?: CreateMessageInformationCommand,
    options?: AxiosRequestConfig
  ): Promise<MessageInformationViewApiResponse>;

  /**
   *
   * @summary 刪除訊息管理
   * @param {DeleteMessageInformationCommand} [deleteMessageInformationCommand]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof MessageInformationApiInterface
   */
  deleteMessageInformation(
    deleteMessageInformationCommand?: DeleteMessageInformationCommand,
    options?: AxiosRequestConfig
  ): Promise<MessageInformationViewApiResponse>;

  /**
   *
   * @summary 查詢訊息管理
   * @param {FetchAllMessageInformationRequest} [fetchAllMessageInformationRequest]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof MessageInformationApiInterface
   */
  fetchMessageInformations(
    fetchAllMessageInformationRequest?: FetchAllMessageInformationRequest,
    options?: AxiosRequestConfig
  ): Promise<MessageInformationViewListApiResponse>;

  /**
   *
   * @summary 查詢訊息管理
   * @param {number} [id] id
   * @param {number} [organizationId]
   * @param {number} [meetingPointId] MeetingPoint.Id 聚會點id       //GetUserId from  User.MeetingPointId
   * @param {number} [pastoralId] Pastoral.Id 牧養組織id         //GetUserId from  User.PastoralId
   * @param {number} [ministryRespId] MinistryResp.Id 牧養身分
   * @param {number} [ministryId] Ministry.Id 事工團                                      //GetUserId from MinistryMeetingUser join  MinistryMeeting   &#x3D;&gt; MinistryMeeting.MinistryId&#x3D;輸入的MinistryId
   * @param {number} [courseId] CourseNo 課程名稱 課程代碼          //GetUserId from UserCourse
   * @param {string} [genderType] 性別 對應SystemConfigtype&#x3D;GenderType顯示 namevalue存此欄位0：女姓1：男性     //GetUserId from  User.GenderType
   * @param {string} [birthdayYearRange] //GetUserId from  User.Birthday 年分 like 選的前三位 碼  例如  0 &#x3D;&gt;1920   就是 birthday like \&#39;192%\&#39;   性別 對應SystemConfigtype&#x3D;BirthdayYearRange顯示 namevalue存此欄位0：1920   1：1930  2:1940  3:1950  4:1960  5:1970   6:1980  7:1990  8:2000   9:2010   10:2020
   * @param {string} [professionType] 職業type&#x3D;EduType顯示 namevalue存此欄位0：老師1：家管…    //GetUserId from  User.ProfessionType
   * @param {string} [title] 推播訊息描述
   * @param {string} [descriptions] 推播訊息內容
   * @param {string} [messageSendType] 職業type&#x3D;MessageSendType namevalue存此欄位0：尚未推播    1：已推播
   * @param {string} [statusCd] 狀態
   * @param {Array<SortProperty>} [sortProperties] 查詢欄位排序
   * @param {number} [page] 目前頁數
   * @param {number} [size] 每頁筆數
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof MessageInformationApiInterface
   */
  findMessageInformation(
    id?: number,
    organizationId?: number,
    meetingPointId?: number,
    pastoralId?: number,
    ministryRespId?: number,
    ministryId?: number,
    courseId?: number,
    genderType?: string,
    birthdayYearRange?: string,
    professionType?: string,
    title?: string,
    descriptions?: string,
    messageSendType?: string,
    statusCd?: string,
    sortProperties?: Array<SortProperty>,
    page?: number,
    size?: number,
    options?: AxiosRequestConfig
  ): Promise<MessageInformationViewPageApiResponse>;

  /**
   *
   * @summary 以 Id 查詢列表
   * @param {number} id
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof MessageInformationApiInterface
   */
  getMessageInformationOfId(id: number, options?: AxiosRequestConfig): Promise<MessageInformationViewApiResponse>;

  /**
   *
   * @summary 修改訊息管理
   * @param {UpdateMessageInformationCommand} [updateMessageInformationCommand]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof MessageInformationApiInterface
   */
  putMessageInformation(
    updateMessageInformationCommand?: UpdateMessageInformationCommand,
    options?: AxiosRequestConfig
  ): Promise<MessageInformationViewApiResponse>;

  /**
   *
   * @summary 查詢列表  (*dynamic sort support)
   * @param {QueryMessageInformationRequest} [queryMessageInformationRequest]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof MessageInformationApiInterface
   */
  queryMessageInformations(
    queryMessageInformationRequest?: QueryMessageInformationRequest,
    options?: AxiosRequestConfig
  ): Promise<MessageInformationViewPageApiResponse>;

  /**
   *
   * @summary 刪除主檔
   * @param {number} id
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof MessageInformationApiInterface
   */
  removeMessageInformation(id: number, options?: AxiosRequestConfig): Promise<Int32ApiResponse>;
}

/**
 * MessageInformationApi - object-oriented interface
 * @export
 * @class MessageInformationApi
 * @extends {BaseAPI}
 */
export class MessageInformationApi extends BaseAPI implements MessageInformationApiInterface {
  /**
   *
   * @summary 建立訊息管理檔
   * @param {CreateMessageInformationCommand} [createMessageInformationCommand]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof MessageInformationApi
   */
  public createMessageInformation(
    createMessageInformationCommand?: CreateMessageInformationCommand,
    options?: AxiosRequestConfig
  ) {
    return MessageInformationApiFp(this.configuration)
      .createMessageInformation(createMessageInformationCommand, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary 刪除訊息管理
   * @param {DeleteMessageInformationCommand} [deleteMessageInformationCommand]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof MessageInformationApi
   */
  public deleteMessageInformation(
    deleteMessageInformationCommand?: DeleteMessageInformationCommand,
    options?: AxiosRequestConfig
  ) {
    return MessageInformationApiFp(this.configuration)
      .deleteMessageInformation(deleteMessageInformationCommand, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary 查詢訊息管理
   * @param {FetchAllMessageInformationRequest} [fetchAllMessageInformationRequest]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof MessageInformationApi
   */
  public fetchMessageInformations(
    fetchAllMessageInformationRequest?: FetchAllMessageInformationRequest,
    options?: AxiosRequestConfig
  ) {
    return MessageInformationApiFp(this.configuration)
      .fetchMessageInformations(fetchAllMessageInformationRequest, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary 查詢訊息管理
   * @param {number} [id] id
   * @param {number} [organizationId]
   * @param {number} [meetingPointId] MeetingPoint.Id 聚會點id       //GetUserId from  User.MeetingPointId
   * @param {number} [pastoralId] Pastoral.Id 牧養組織id         //GetUserId from  User.PastoralId
   * @param {number} [ministryRespId] MinistryResp.Id 牧養身分
   * @param {number} [ministryId] Ministry.Id 事工團                                      //GetUserId from MinistryMeetingUser join  MinistryMeeting   &#x3D;&gt; MinistryMeeting.MinistryId&#x3D;輸入的MinistryId
   * @param {number} [courseId] CourseNo 課程名稱 課程代碼          //GetUserId from UserCourse
   * @param {string} [genderType] 性別 對應SystemConfigtype&#x3D;GenderType顯示 namevalue存此欄位0：女姓1：男性     //GetUserId from  User.GenderType
   * @param {string} [birthdayYearRange] //GetUserId from  User.Birthday 年分 like 選的前三位 碼  例如  0 &#x3D;&gt;1920   就是 birthday like \&#39;192%\&#39;   性別 對應SystemConfigtype&#x3D;BirthdayYearRange顯示 namevalue存此欄位0：1920   1：1930  2:1940  3:1950  4:1960  5:1970   6:1980  7:1990  8:2000   9:2010   10:2020
   * @param {string} [professionType] 職業type&#x3D;EduType顯示 namevalue存此欄位0：老師1：家管…    //GetUserId from  User.ProfessionType
   * @param {string} [title] 推播訊息描述
   * @param {string} [descriptions] 推播訊息內容
   * @param {string} [messageSendType] 職業type&#x3D;MessageSendType namevalue存此欄位0：尚未推播    1：已推播
   * @param {string} [statusCd] 狀態
   * @param {Array<SortProperty>} [sortProperties] 查詢欄位排序
   * @param {number} [page] 目前頁數
   * @param {number} [size] 每頁筆數
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof MessageInformationApi
   */
  public findMessageInformation(
    id?: number,
    organizationId?: number,
    meetingPointId?: number,
    pastoralId?: number,
    ministryRespId?: number,
    ministryId?: number,
    courseId?: number,
    genderType?: string,
    birthdayYearRange?: string,
    professionType?: string,
    title?: string,
    descriptions?: string,
    messageSendType?: string,
    statusCd?: string,
    sortProperties?: Array<SortProperty>,
    page?: number,
    size?: number,
    options?: AxiosRequestConfig
  ) {
    return MessageInformationApiFp(this.configuration)
      .findMessageInformation(
        id,
        organizationId,
        meetingPointId,
        pastoralId,
        ministryRespId,
        ministryId,
        courseId,
        genderType,
        birthdayYearRange,
        professionType,
        title,
        descriptions,
        messageSendType,
        statusCd,
        sortProperties,
        page,
        size,
        options
      )
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary 以 Id 查詢列表
   * @param {number} id
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof MessageInformationApi
   */
  public getMessageInformationOfId(id: number, options?: AxiosRequestConfig) {
    return MessageInformationApiFp(this.configuration)
      .getMessageInformationOfId(id, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary 修改訊息管理
   * @param {UpdateMessageInformationCommand} [updateMessageInformationCommand]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof MessageInformationApi
   */
  public putMessageInformation(
    updateMessageInformationCommand?: UpdateMessageInformationCommand,
    options?: AxiosRequestConfig
  ) {
    return MessageInformationApiFp(this.configuration)
      .putMessageInformation(updateMessageInformationCommand, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary 查詢列表  (*dynamic sort support)
   * @param {QueryMessageInformationRequest} [queryMessageInformationRequest]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof MessageInformationApi
   */
  public queryMessageInformations(
    queryMessageInformationRequest?: QueryMessageInformationRequest,
    options?: AxiosRequestConfig
  ) {
    return MessageInformationApiFp(this.configuration)
      .queryMessageInformations(queryMessageInformationRequest, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary 刪除主檔
   * @param {number} id
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof MessageInformationApi
   */
  public removeMessageInformation(id: number, options?: AxiosRequestConfig) {
    return MessageInformationApiFp(this.configuration)
      .removeMessageInformation(id, options)
      .then((request) => request(this.axios, this.basePath));
  }
}

/**
 * MessageInformationUserApi - axios parameter creator
 * @export
 */
export const MessageInformationUserApiAxiosParamCreator = function (configuration?: Configuration) {
  return {
    /**
     *
     * @summary 建立訊息管理檔
     * @param {CreateMessageInformationUserCommand} [createMessageInformationUserCommand]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createMessageInformationUser: async (
      createMessageInformationUserCommand?: CreateMessageInformationUserCommand,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/messageInformationUser`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: "POST", ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication Example-id-1 required
      await setApiKeyToObject(localVarHeaderParameter, "Example-id-1", configuration);

      // authentication JWT_Authorization required
      await setApiKeyToObject(localVarHeaderParameter, "authorization", configuration);

      // authentication example-id-2 required
      await setApiKeyToObject(localVarHeaderParameter, "example-id-2", configuration);

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      localVarRequestOptions.data = serializeDataIfNeeded(
        createMessageInformationUserCommand,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary 刪除訊息管理
     * @param {DeleteMessageInformationUserCommand} [deleteMessageInformationUserCommand]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteMessageInformationUser: async (
      deleteMessageInformationUserCommand?: DeleteMessageInformationUserCommand,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/messageInformationUser`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: "DELETE", ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication Example-id-1 required
      await setApiKeyToObject(localVarHeaderParameter, "Example-id-1", configuration);

      // authentication JWT_Authorization required
      await setApiKeyToObject(localVarHeaderParameter, "authorization", configuration);

      // authentication example-id-2 required
      await setApiKeyToObject(localVarHeaderParameter, "example-id-2", configuration);

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      localVarRequestOptions.data = serializeDataIfNeeded(
        deleteMessageInformationUserCommand,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary 查詢訊息管理
     * @param {FetchAllMessageInformationUserRequest} [fetchAllMessageInformationUserRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    fetchMessageInformationUsers: async (
      fetchAllMessageInformationUserRequest?: FetchAllMessageInformationUserRequest,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/messageInformationUser/fetch`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: "POST", ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication Example-id-1 required
      await setApiKeyToObject(localVarHeaderParameter, "Example-id-1", configuration);

      // authentication JWT_Authorization required
      await setApiKeyToObject(localVarHeaderParameter, "authorization", configuration);

      // authentication example-id-2 required
      await setApiKeyToObject(localVarHeaderParameter, "example-id-2", configuration);

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      localVarRequestOptions.data = serializeDataIfNeeded(
        fetchAllMessageInformationUserRequest,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary 查詢訊息管理
     * @param {number} [id] id
     * @param {number} [userId] User.Id Userid
     * @param {string} [lineId] User.LineId
     * @param {string} [statusCd] 狀態
     * @param {number} [messageInformationId] Head Id
     * @param {Array<SortProperty>} [sortProperties] 查詢欄位排序
     * @param {number} [page] 目前頁數
     * @param {number} [size] 每頁筆數
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    findMessageInformationUser: async (
      id?: number,
      userId?: number,
      lineId?: string,
      statusCd?: string,
      messageInformationId?: number,
      sortProperties?: Array<SortProperty>,
      page?: number,
      size?: number,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/messageInformationUser`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: "GET", ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication Example-id-1 required
      await setApiKeyToObject(localVarHeaderParameter, "Example-id-1", configuration);

      // authentication JWT_Authorization required
      await setApiKeyToObject(localVarHeaderParameter, "authorization", configuration);

      // authentication example-id-2 required
      await setApiKeyToObject(localVarHeaderParameter, "example-id-2", configuration);

      if (id !== undefined) {
        localVarQueryParameter["id"] = id;
      }

      if (userId !== undefined) {
        localVarQueryParameter["userId"] = userId;
      }

      if (lineId !== undefined) {
        localVarQueryParameter["lineId"] = lineId;
      }

      if (statusCd !== undefined) {
        localVarQueryParameter["statusCd"] = statusCd;
      }

      if (messageInformationId !== undefined) {
        localVarQueryParameter["messageInformationId"] = messageInformationId;
      }

      if (sortProperties) {
        localVarQueryParameter["sortProperties"] = sortProperties;
      }

      if (page !== undefined) {
        localVarQueryParameter["page"] = page;
      }

      if (size !== undefined) {
        localVarQueryParameter["size"] = size;
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary 以 Id 查詢列表
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getMessageInformationUserOfId: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists("getMessageInformationUserOfId", "id", id);
      const localVarPath = `/api/messageInformationUser/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(id)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: "GET", ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication Example-id-1 required
      await setApiKeyToObject(localVarHeaderParameter, "Example-id-1", configuration);

      // authentication JWT_Authorization required
      await setApiKeyToObject(localVarHeaderParameter, "authorization", configuration);

      // authentication example-id-2 required
      await setApiKeyToObject(localVarHeaderParameter, "example-id-2", configuration);

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary 修改訊息管理
     * @param {UpdateMessageInformationUserCommand} [updateMessageInformationUserCommand]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    putMessageInformationUser: async (
      updateMessageInformationUserCommand?: UpdateMessageInformationUserCommand,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/messageInformationUser`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: "PUT", ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication Example-id-1 required
      await setApiKeyToObject(localVarHeaderParameter, "Example-id-1", configuration);

      // authentication JWT_Authorization required
      await setApiKeyToObject(localVarHeaderParameter, "authorization", configuration);

      // authentication example-id-2 required
      await setApiKeyToObject(localVarHeaderParameter, "example-id-2", configuration);

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      localVarRequestOptions.data = serializeDataIfNeeded(
        updateMessageInformationUserCommand,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary 查詢列表  (*dynamic sort support)
     * @param {QueryMessageInformationUserRequest} [queryMessageInformationUserRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    queryMessageInformationUsers: async (
      queryMessageInformationUserRequest?: QueryMessageInformationUserRequest,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/messageInformationUser/query`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: "POST", ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication Example-id-1 required
      await setApiKeyToObject(localVarHeaderParameter, "Example-id-1", configuration);

      // authentication JWT_Authorization required
      await setApiKeyToObject(localVarHeaderParameter, "authorization", configuration);

      // authentication example-id-2 required
      await setApiKeyToObject(localVarHeaderParameter, "example-id-2", configuration);

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      localVarRequestOptions.data = serializeDataIfNeeded(
        queryMessageInformationUserRequest,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary 刪除主檔
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    removeMessageInformationUser: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists("removeMessageInformationUser", "id", id);
      const localVarPath = `/api/messageInformationUser/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(id)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: "DELETE", ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication Example-id-1 required
      await setApiKeyToObject(localVarHeaderParameter, "Example-id-1", configuration);

      // authentication JWT_Authorization required
      await setApiKeyToObject(localVarHeaderParameter, "authorization", configuration);

      // authentication example-id-2 required
      await setApiKeyToObject(localVarHeaderParameter, "example-id-2", configuration);

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * MessageInformationUserApi - functional programming interface
 * @export
 */
export const MessageInformationUserApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = MessageInformationUserApiAxiosParamCreator(configuration);
  return {
    /**
     *
     * @summary 建立訊息管理檔
     * @param {CreateMessageInformationUserCommand} [createMessageInformationUserCommand]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async createMessageInformationUser(
      createMessageInformationUserCommand?: CreateMessageInformationUserCommand,
      options?: AxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<MessageInformationUserViewApiResponse>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.createMessageInformationUser(
        createMessageInformationUserCommand,
        options
      );
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     *
     * @summary 刪除訊息管理
     * @param {DeleteMessageInformationUserCommand} [deleteMessageInformationUserCommand]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async deleteMessageInformationUser(
      deleteMessageInformationUserCommand?: DeleteMessageInformationUserCommand,
      options?: AxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<MessageInformationUserViewApiResponse>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.deleteMessageInformationUser(
        deleteMessageInformationUserCommand,
        options
      );
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     *
     * @summary 查詢訊息管理
     * @param {FetchAllMessageInformationUserRequest} [fetchAllMessageInformationUserRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async fetchMessageInformationUsers(
      fetchAllMessageInformationUserRequest?: FetchAllMessageInformationUserRequest,
      options?: AxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<MessageInformationUserViewListApiResponse>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.fetchMessageInformationUsers(
        fetchAllMessageInformationUserRequest,
        options
      );
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     *
     * @summary 查詢訊息管理
     * @param {number} [id] id
     * @param {number} [userId] User.Id Userid
     * @param {string} [lineId] User.LineId
     * @param {string} [statusCd] 狀態
     * @param {number} [messageInformationId] Head Id
     * @param {Array<SortProperty>} [sortProperties] 查詢欄位排序
     * @param {number} [page] 目前頁數
     * @param {number} [size] 每頁筆數
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async findMessageInformationUser(
      id?: number,
      userId?: number,
      lineId?: string,
      statusCd?: string,
      messageInformationId?: number,
      sortProperties?: Array<SortProperty>,
      page?: number,
      size?: number,
      options?: AxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<MessageInformationUserViewPageApiResponse>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.findMessageInformationUser(
        id,
        userId,
        lineId,
        statusCd,
        messageInformationId,
        sortProperties,
        page,
        size,
        options
      );
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     *
     * @summary 以 Id 查詢列表
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getMessageInformationUserOfId(
      id: number,
      options?: AxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<MessageInformationUserViewApiResponse>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getMessageInformationUserOfId(id, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     *
     * @summary 修改訊息管理
     * @param {UpdateMessageInformationUserCommand} [updateMessageInformationUserCommand]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async putMessageInformationUser(
      updateMessageInformationUserCommand?: UpdateMessageInformationUserCommand,
      options?: AxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<MessageInformationUserViewApiResponse>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.putMessageInformationUser(
        updateMessageInformationUserCommand,
        options
      );
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     *
     * @summary 查詢列表  (*dynamic sort support)
     * @param {QueryMessageInformationUserRequest} [queryMessageInformationUserRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async queryMessageInformationUsers(
      queryMessageInformationUserRequest?: QueryMessageInformationUserRequest,
      options?: AxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<MessageInformationUserViewPageApiResponse>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.queryMessageInformationUsers(
        queryMessageInformationUserRequest,
        options
      );
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     *
     * @summary 刪除主檔
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async removeMessageInformationUser(
      id: number,
      options?: AxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<Int32ApiResponse>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.removeMessageInformationUser(id, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
  };
};

/**
 * MessageInformationUserApi - factory interface
 * @export
 */
export const MessageInformationUserApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance
) {
  const localVarFp = MessageInformationUserApiFp(configuration);
  return {
    /**
     *
     * @summary 建立訊息管理檔
     * @param {CreateMessageInformationUserCommand} [createMessageInformationUserCommand]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createMessageInformationUser(
      createMessageInformationUserCommand?: CreateMessageInformationUserCommand,
      options?: any
    ): Promise<MessageInformationUserViewApiResponse> {
      return localVarFp
        .createMessageInformationUser(createMessageInformationUserCommand, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary 刪除訊息管理
     * @param {DeleteMessageInformationUserCommand} [deleteMessageInformationUserCommand]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteMessageInformationUser(
      deleteMessageInformationUserCommand?: DeleteMessageInformationUserCommand,
      options?: any
    ): Promise<MessageInformationUserViewApiResponse> {
      return localVarFp
        .deleteMessageInformationUser(deleteMessageInformationUserCommand, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary 查詢訊息管理
     * @param {FetchAllMessageInformationUserRequest} [fetchAllMessageInformationUserRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    fetchMessageInformationUsers(
      fetchAllMessageInformationUserRequest?: FetchAllMessageInformationUserRequest,
      options?: any
    ): Promise<MessageInformationUserViewListApiResponse> {
      return localVarFp
        .fetchMessageInformationUsers(fetchAllMessageInformationUserRequest, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary 查詢訊息管理
     * @param {number} [id] id
     * @param {number} [userId] User.Id Userid
     * @param {string} [lineId] User.LineId
     * @param {string} [statusCd] 狀態
     * @param {number} [messageInformationId] Head Id
     * @param {Array<SortProperty>} [sortProperties] 查詢欄位排序
     * @param {number} [page] 目前頁數
     * @param {number} [size] 每頁筆數
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    findMessageInformationUser(
      id?: number,
      userId?: number,
      lineId?: string,
      statusCd?: string,
      messageInformationId?: number,
      sortProperties?: Array<SortProperty>,
      page?: number,
      size?: number,
      options?: any
    ): Promise<MessageInformationUserViewPageApiResponse> {
      return localVarFp
        .findMessageInformationUser(
          id,
          userId,
          lineId,
          statusCd,
          messageInformationId,
          sortProperties,
          page,
          size,
          options
        )
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary 以 Id 查詢列表
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getMessageInformationUserOfId(id: number, options?: any): Promise<MessageInformationUserViewApiResponse> {
      return localVarFp.getMessageInformationUserOfId(id, options).then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary 修改訊息管理
     * @param {UpdateMessageInformationUserCommand} [updateMessageInformationUserCommand]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    putMessageInformationUser(
      updateMessageInformationUserCommand?: UpdateMessageInformationUserCommand,
      options?: any
    ): Promise<MessageInformationUserViewApiResponse> {
      return localVarFp
        .putMessageInformationUser(updateMessageInformationUserCommand, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary 查詢列表  (*dynamic sort support)
     * @param {QueryMessageInformationUserRequest} [queryMessageInformationUserRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    queryMessageInformationUsers(
      queryMessageInformationUserRequest?: QueryMessageInformationUserRequest,
      options?: any
    ): Promise<MessageInformationUserViewPageApiResponse> {
      return localVarFp
        .queryMessageInformationUsers(queryMessageInformationUserRequest, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary 刪除主檔
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    removeMessageInformationUser(id: number, options?: any): Promise<Int32ApiResponse> {
      return localVarFp.removeMessageInformationUser(id, options).then((request) => request(axios, basePath));
    },
  };
};

/**
 * MessageInformationUserApi - interface
 * @export
 * @interface MessageInformationUserApi
 */
export interface MessageInformationUserApiInterface {
  /**
   *
   * @summary 建立訊息管理檔
   * @param {CreateMessageInformationUserCommand} [createMessageInformationUserCommand]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof MessageInformationUserApiInterface
   */
  createMessageInformationUser(
    createMessageInformationUserCommand?: CreateMessageInformationUserCommand,
    options?: AxiosRequestConfig
  ): Promise<MessageInformationUserViewApiResponse>;

  /**
   *
   * @summary 刪除訊息管理
   * @param {DeleteMessageInformationUserCommand} [deleteMessageInformationUserCommand]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof MessageInformationUserApiInterface
   */
  deleteMessageInformationUser(
    deleteMessageInformationUserCommand?: DeleteMessageInformationUserCommand,
    options?: AxiosRequestConfig
  ): Promise<MessageInformationUserViewApiResponse>;

  /**
   *
   * @summary 查詢訊息管理
   * @param {FetchAllMessageInformationUserRequest} [fetchAllMessageInformationUserRequest]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof MessageInformationUserApiInterface
   */
  fetchMessageInformationUsers(
    fetchAllMessageInformationUserRequest?: FetchAllMessageInformationUserRequest,
    options?: AxiosRequestConfig
  ): Promise<MessageInformationUserViewListApiResponse>;

  /**
   *
   * @summary 查詢訊息管理
   * @param {number} [id] id
   * @param {number} [userId] User.Id Userid
   * @param {string} [lineId] User.LineId
   * @param {string} [statusCd] 狀態
   * @param {number} [messageInformationId] Head Id
   * @param {Array<SortProperty>} [sortProperties] 查詢欄位排序
   * @param {number} [page] 目前頁數
   * @param {number} [size] 每頁筆數
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof MessageInformationUserApiInterface
   */
  findMessageInformationUser(
    id?: number,
    userId?: number,
    lineId?: string,
    statusCd?: string,
    messageInformationId?: number,
    sortProperties?: Array<SortProperty>,
    page?: number,
    size?: number,
    options?: AxiosRequestConfig
  ): Promise<MessageInformationUserViewPageApiResponse>;

  /**
   *
   * @summary 以 Id 查詢列表
   * @param {number} id
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof MessageInformationUserApiInterface
   */
  getMessageInformationUserOfId(
    id: number,
    options?: AxiosRequestConfig
  ): Promise<MessageInformationUserViewApiResponse>;

  /**
   *
   * @summary 修改訊息管理
   * @param {UpdateMessageInformationUserCommand} [updateMessageInformationUserCommand]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof MessageInformationUserApiInterface
   */
  putMessageInformationUser(
    updateMessageInformationUserCommand?: UpdateMessageInformationUserCommand,
    options?: AxiosRequestConfig
  ): Promise<MessageInformationUserViewApiResponse>;

  /**
   *
   * @summary 查詢列表  (*dynamic sort support)
   * @param {QueryMessageInformationUserRequest} [queryMessageInformationUserRequest]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof MessageInformationUserApiInterface
   */
  queryMessageInformationUsers(
    queryMessageInformationUserRequest?: QueryMessageInformationUserRequest,
    options?: AxiosRequestConfig
  ): Promise<MessageInformationUserViewPageApiResponse>;

  /**
   *
   * @summary 刪除主檔
   * @param {number} id
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof MessageInformationUserApiInterface
   */
  removeMessageInformationUser(id: number, options?: AxiosRequestConfig): Promise<Int32ApiResponse>;
}

/**
 * MessageInformationUserApi - object-oriented interface
 * @export
 * @class MessageInformationUserApi
 * @extends {BaseAPI}
 */
export class MessageInformationUserApi extends BaseAPI implements MessageInformationUserApiInterface {
  /**
   *
   * @summary 建立訊息管理檔
   * @param {CreateMessageInformationUserCommand} [createMessageInformationUserCommand]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof MessageInformationUserApi
   */
  public createMessageInformationUser(
    createMessageInformationUserCommand?: CreateMessageInformationUserCommand,
    options?: AxiosRequestConfig
  ) {
    return MessageInformationUserApiFp(this.configuration)
      .createMessageInformationUser(createMessageInformationUserCommand, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary 刪除訊息管理
   * @param {DeleteMessageInformationUserCommand} [deleteMessageInformationUserCommand]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof MessageInformationUserApi
   */
  public deleteMessageInformationUser(
    deleteMessageInformationUserCommand?: DeleteMessageInformationUserCommand,
    options?: AxiosRequestConfig
  ) {
    return MessageInformationUserApiFp(this.configuration)
      .deleteMessageInformationUser(deleteMessageInformationUserCommand, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary 查詢訊息管理
   * @param {FetchAllMessageInformationUserRequest} [fetchAllMessageInformationUserRequest]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof MessageInformationUserApi
   */
  public fetchMessageInformationUsers(
    fetchAllMessageInformationUserRequest?: FetchAllMessageInformationUserRequest,
    options?: AxiosRequestConfig
  ) {
    return MessageInformationUserApiFp(this.configuration)
      .fetchMessageInformationUsers(fetchAllMessageInformationUserRequest, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary 查詢訊息管理
   * @param {number} [id] id
   * @param {number} [userId] User.Id Userid
   * @param {string} [lineId] User.LineId
   * @param {string} [statusCd] 狀態
   * @param {number} [messageInformationId] Head Id
   * @param {Array<SortProperty>} [sortProperties] 查詢欄位排序
   * @param {number} [page] 目前頁數
   * @param {number} [size] 每頁筆數
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof MessageInformationUserApi
   */
  public findMessageInformationUser(
    id?: number,
    userId?: number,
    lineId?: string,
    statusCd?: string,
    messageInformationId?: number,
    sortProperties?: Array<SortProperty>,
    page?: number,
    size?: number,
    options?: AxiosRequestConfig
  ) {
    return MessageInformationUserApiFp(this.configuration)
      .findMessageInformationUser(
        id,
        userId,
        lineId,
        statusCd,
        messageInformationId,
        sortProperties,
        page,
        size,
        options
      )
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary 以 Id 查詢列表
   * @param {number} id
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof MessageInformationUserApi
   */
  public getMessageInformationUserOfId(id: number, options?: AxiosRequestConfig) {
    return MessageInformationUserApiFp(this.configuration)
      .getMessageInformationUserOfId(id, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary 修改訊息管理
   * @param {UpdateMessageInformationUserCommand} [updateMessageInformationUserCommand]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof MessageInformationUserApi
   */
  public putMessageInformationUser(
    updateMessageInformationUserCommand?: UpdateMessageInformationUserCommand,
    options?: AxiosRequestConfig
  ) {
    return MessageInformationUserApiFp(this.configuration)
      .putMessageInformationUser(updateMessageInformationUserCommand, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary 查詢列表  (*dynamic sort support)
   * @param {QueryMessageInformationUserRequest} [queryMessageInformationUserRequest]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof MessageInformationUserApi
   */
  public queryMessageInformationUsers(
    queryMessageInformationUserRequest?: QueryMessageInformationUserRequest,
    options?: AxiosRequestConfig
  ) {
    return MessageInformationUserApiFp(this.configuration)
      .queryMessageInformationUsers(queryMessageInformationUserRequest, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary 刪除主檔
   * @param {number} id
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof MessageInformationUserApi
   */
  public removeMessageInformationUser(id: number, options?: AxiosRequestConfig) {
    return MessageInformationUserApiFp(this.configuration)
      .removeMessageInformationUser(id, options)
      .then((request) => request(this.axios, this.basePath));
  }
}

/**
 * MinistryApi - axios parameter creator
 * @export
 */
export const MinistryApiAxiosParamCreator = function (configuration?: Configuration) {
  return {
    /**
     *
     * @summary 建立事工團
     * @param {AddMinistryCommand} [addMinistryCommand]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createMinistry: async (
      addMinistryCommand?: AddMinistryCommand,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/ministry`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: "POST", ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication Example-id-1 required
      await setApiKeyToObject(localVarHeaderParameter, "Example-id-1", configuration);

      // authentication JWT_Authorization required
      await setApiKeyToObject(localVarHeaderParameter, "authorization", configuration);

      // authentication example-id-2 required
      await setApiKeyToObject(localVarHeaderParameter, "example-id-2", configuration);

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      localVarRequestOptions.data = serializeDataIfNeeded(addMinistryCommand, localVarRequestOptions, configuration);

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary 刪除部門
     * @param {DeleteMinistryCommand} [deleteMinistryCommand]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteMinistry: async (
      deleteMinistryCommand?: DeleteMinistryCommand,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/ministry`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: "DELETE", ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication Example-id-1 required
      await setApiKeyToObject(localVarHeaderParameter, "Example-id-1", configuration);

      // authentication JWT_Authorization required
      await setApiKeyToObject(localVarHeaderParameter, "authorization", configuration);

      // authentication example-id-2 required
      await setApiKeyToObject(localVarHeaderParameter, "example-id-2", configuration);

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      localVarRequestOptions.data = serializeDataIfNeeded(deleteMinistryCommand, localVarRequestOptions, configuration);

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary 查詢部門
     * @param {FetchAllMinistryRequest} [fetchAllMinistryRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    fetchMinistrys: async (
      fetchAllMinistryRequest?: FetchAllMinistryRequest,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/ministry/fetch`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: "POST", ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication Example-id-1 required
      await setApiKeyToObject(localVarHeaderParameter, "Example-id-1", configuration);

      // authentication JWT_Authorization required
      await setApiKeyToObject(localVarHeaderParameter, "authorization", configuration);

      // authentication example-id-2 required
      await setApiKeyToObject(localVarHeaderParameter, "example-id-2", configuration);

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      localVarRequestOptions.data = serializeDataIfNeeded(
        fetchAllMinistryRequest,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary 查詢部門
     * @param {number} [id] id
     * @param {number} [organizationId] 堂點
     * @param {number} [ministryDefId] 事工團分類id
     * @param {string} [ministryNo] 事工團編號
     * @param {string} [name] 事工團名稱
     * @param {string} [childMinistry] 是否兒童事工團
     * @param {string} [ministryStatus] 事工團狀態
     * @param {Array<SortProperty>} [sortProperties] 查詢欄位排序
     * @param {number} [page] 目前頁數
     * @param {number} [size] 每頁筆數
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    findMinistry: async (
      id?: number,
      organizationId?: number,
      ministryDefId?: number,
      ministryNo?: string,
      name?: string,
      childMinistry?: string,
      ministryStatus?: string,
      sortProperties?: Array<SortProperty>,
      page?: number,
      size?: number,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/ministry`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: "GET", ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication Example-id-1 required
      await setApiKeyToObject(localVarHeaderParameter, "Example-id-1", configuration);

      // authentication JWT_Authorization required
      await setApiKeyToObject(localVarHeaderParameter, "authorization", configuration);

      // authentication example-id-2 required
      await setApiKeyToObject(localVarHeaderParameter, "example-id-2", configuration);

      if (id !== undefined) {
        localVarQueryParameter["id"] = id;
      }

      if (organizationId !== undefined) {
        localVarQueryParameter["organizationId"] = organizationId;
      }

      if (ministryDefId !== undefined) {
        localVarQueryParameter["ministryDefId"] = ministryDefId;
      }

      if (ministryNo !== undefined) {
        localVarQueryParameter["ministryNo"] = ministryNo;
      }

      if (name !== undefined) {
        localVarQueryParameter["name"] = name;
      }

      if (childMinistry !== undefined) {
        localVarQueryParameter["childMinistry"] = childMinistry;
      }

      if (ministryStatus !== undefined) {
        localVarQueryParameter["ministryStatus"] = ministryStatus;
      }

      if (sortProperties) {
        localVarQueryParameter["sortProperties"] = sortProperties;
      }

      if (page !== undefined) {
        localVarQueryParameter["page"] = page;
      }

      if (size !== undefined) {
        localVarQueryParameter["size"] = size;
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary 以 Id 查詢用戶資料
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getMinistry: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists("getMinistry", "id", id);
      const localVarPath = `/api/ministry/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(id)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: "GET", ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication Example-id-1 required
      await setApiKeyToObject(localVarHeaderParameter, "Example-id-1", configuration);

      // authentication JWT_Authorization required
      await setApiKeyToObject(localVarHeaderParameter, "authorization", configuration);

      // authentication example-id-2 required
      await setApiKeyToObject(localVarHeaderParameter, "example-id-2", configuration);

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary 修改部門
     * @param {AddMinistryCommand} [addMinistryCommand]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    putMinistry: async (
      addMinistryCommand?: AddMinistryCommand,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/ministry`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: "PUT", ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication Example-id-1 required
      await setApiKeyToObject(localVarHeaderParameter, "Example-id-1", configuration);

      // authentication JWT_Authorization required
      await setApiKeyToObject(localVarHeaderParameter, "authorization", configuration);

      // authentication example-id-2 required
      await setApiKeyToObject(localVarHeaderParameter, "example-id-2", configuration);

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      localVarRequestOptions.data = serializeDataIfNeeded(addMinistryCommand, localVarRequestOptions, configuration);

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary 查詢部門  (*dynamic sort support)
     * @param {QueryMinistryRequest} [queryMinistryRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    queryMinistry: async (
      queryMinistryRequest?: QueryMinistryRequest,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/ministry/query`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: "POST", ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication Example-id-1 required
      await setApiKeyToObject(localVarHeaderParameter, "Example-id-1", configuration);

      // authentication JWT_Authorization required
      await setApiKeyToObject(localVarHeaderParameter, "authorization", configuration);

      // authentication example-id-2 required
      await setApiKeyToObject(localVarHeaderParameter, "example-id-2", configuration);

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      localVarRequestOptions.data = serializeDataIfNeeded(queryMinistryRequest, localVarRequestOptions, configuration);

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary 查詢所有事工團會議及異動清單  (*dynamic sort support)
     * @param {QueryMinistryRequest} [queryMinistryRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    queryMinistryRecord: async (
      queryMinistryRequest?: QueryMinistryRequest,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/ministry/queryRecord`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: "POST", ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication Example-id-1 required
      await setApiKeyToObject(localVarHeaderParameter, "Example-id-1", configuration);

      // authentication JWT_Authorization required
      await setApiKeyToObject(localVarHeaderParameter, "authorization", configuration);

      // authentication example-id-2 required
      await setApiKeyToObject(localVarHeaderParameter, "example-id-2", configuration);

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      localVarRequestOptions.data = serializeDataIfNeeded(queryMinistryRequest, localVarRequestOptions, configuration);

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary 刪除主檔
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    removeMinistry: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists("removeMinistry", "id", id);
      const localVarPath = `/api/ministry/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(id)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: "DELETE", ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication Example-id-1 required
      await setApiKeyToObject(localVarHeaderParameter, "Example-id-1", configuration);

      // authentication JWT_Authorization required
      await setApiKeyToObject(localVarHeaderParameter, "authorization", configuration);

      // authentication example-id-2 required
      await setApiKeyToObject(localVarHeaderParameter, "example-id-2", configuration);

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * MinistryApi - functional programming interface
 * @export
 */
export const MinistryApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = MinistryApiAxiosParamCreator(configuration);
  return {
    /**
     *
     * @summary 建立事工團
     * @param {AddMinistryCommand} [addMinistryCommand]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async createMinistry(
      addMinistryCommand?: AddMinistryCommand,
      options?: AxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<UMinistryCommandResponseApiResponse>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.createMinistry(addMinistryCommand, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     *
     * @summary 刪除部門
     * @param {DeleteMinistryCommand} [deleteMinistryCommand]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async deleteMinistry(
      deleteMinistryCommand?: DeleteMinistryCommand,
      options?: AxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<MinistryViewApiResponse>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.deleteMinistry(deleteMinistryCommand, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     *
     * @summary 查詢部門
     * @param {FetchAllMinistryRequest} [fetchAllMinistryRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async fetchMinistrys(
      fetchAllMinistryRequest?: FetchAllMinistryRequest,
      options?: AxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<MinistryViewListApiResponse>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.fetchMinistrys(fetchAllMinistryRequest, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     *
     * @summary 查詢部門
     * @param {number} [id] id
     * @param {number} [organizationId] 堂點
     * @param {number} [ministryDefId] 事工團分類id
     * @param {string} [ministryNo] 事工團編號
     * @param {string} [name] 事工團名稱
     * @param {string} [childMinistry] 是否兒童事工團
     * @param {string} [ministryStatus] 事工團狀態
     * @param {Array<SortProperty>} [sortProperties] 查詢欄位排序
     * @param {number} [page] 目前頁數
     * @param {number} [size] 每頁筆數
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async findMinistry(
      id?: number,
      organizationId?: number,
      ministryDefId?: number,
      ministryNo?: string,
      name?: string,
      childMinistry?: string,
      ministryStatus?: string,
      sortProperties?: Array<SortProperty>,
      page?: number,
      size?: number,
      options?: AxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<MinistryViewPageApiResponse>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.findMinistry(
        id,
        organizationId,
        ministryDefId,
        ministryNo,
        name,
        childMinistry,
        ministryStatus,
        sortProperties,
        page,
        size,
        options
      );
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     *
     * @summary 以 Id 查詢用戶資料
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getMinistry(
      id: number,
      options?: AxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<MinistryViewApiResponse>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getMinistry(id, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     *
     * @summary 修改部門
     * @param {AddMinistryCommand} [addMinistryCommand]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async putMinistry(
      addMinistryCommand?: AddMinistryCommand,
      options?: AxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<MinistryViewApiResponse>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.putMinistry(addMinistryCommand, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     *
     * @summary 查詢部門  (*dynamic sort support)
     * @param {QueryMinistryRequest} [queryMinistryRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async queryMinistry(
      queryMinistryRequest?: QueryMinistryRequest,
      options?: AxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<MinistryViewPageApiResponse>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.queryMinistry(queryMinistryRequest, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     *
     * @summary 查詢所有事工團會議及異動清單  (*dynamic sort support)
     * @param {QueryMinistryRequest} [queryMinistryRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async queryMinistryRecord(
      queryMinistryRequest?: QueryMinistryRequest,
      options?: AxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<MinistryViewPageApiResponse>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.queryMinistryRecord(queryMinistryRequest, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     *
     * @summary 刪除主檔
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async removeMinistry(
      id: number,
      options?: AxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<Int32ApiResponse>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.removeMinistry(id, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
  };
};

/**
 * MinistryApi - factory interface
 * @export
 */
export const MinistryApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
  const localVarFp = MinistryApiFp(configuration);
  return {
    /**
     *
     * @summary 建立事工團
     * @param {AddMinistryCommand} [addMinistryCommand]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createMinistry(
      addMinistryCommand?: AddMinistryCommand,
      options?: any
    ): Promise<UMinistryCommandResponseApiResponse> {
      return localVarFp.createMinistry(addMinistryCommand, options).then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary 刪除部門
     * @param {DeleteMinistryCommand} [deleteMinistryCommand]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteMinistry(deleteMinistryCommand?: DeleteMinistryCommand, options?: any): Promise<MinistryViewApiResponse> {
      return localVarFp.deleteMinistry(deleteMinistryCommand, options).then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary 查詢部門
     * @param {FetchAllMinistryRequest} [fetchAllMinistryRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    fetchMinistrys(
      fetchAllMinistryRequest?: FetchAllMinistryRequest,
      options?: any
    ): Promise<MinistryViewListApiResponse> {
      return localVarFp.fetchMinistrys(fetchAllMinistryRequest, options).then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary 查詢部門
     * @param {number} [id] id
     * @param {number} [organizationId] 堂點
     * @param {number} [ministryDefId] 事工團分類id
     * @param {string} [ministryNo] 事工團編號
     * @param {string} [name] 事工團名稱
     * @param {string} [childMinistry] 是否兒童事工團
     * @param {string} [ministryStatus] 事工團狀態
     * @param {Array<SortProperty>} [sortProperties] 查詢欄位排序
     * @param {number} [page] 目前頁數
     * @param {number} [size] 每頁筆數
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    findMinistry(
      id?: number,
      organizationId?: number,
      ministryDefId?: number,
      ministryNo?: string,
      name?: string,
      childMinistry?: string,
      ministryStatus?: string,
      sortProperties?: Array<SortProperty>,
      page?: number,
      size?: number,
      options?: any
    ): Promise<MinistryViewPageApiResponse> {
      return localVarFp
        .findMinistry(
          id,
          organizationId,
          ministryDefId,
          ministryNo,
          name,
          childMinistry,
          ministryStatus,
          sortProperties,
          page,
          size,
          options
        )
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary 以 Id 查詢用戶資料
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getMinistry(id: number, options?: any): Promise<MinistryViewApiResponse> {
      return localVarFp.getMinistry(id, options).then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary 修改部門
     * @param {AddMinistryCommand} [addMinistryCommand]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    putMinistry(addMinistryCommand?: AddMinistryCommand, options?: any): Promise<MinistryViewApiResponse> {
      return localVarFp.putMinistry(addMinistryCommand, options).then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary 查詢部門  (*dynamic sort support)
     * @param {QueryMinistryRequest} [queryMinistryRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    queryMinistry(queryMinistryRequest?: QueryMinistryRequest, options?: any): Promise<MinistryViewPageApiResponse> {
      return localVarFp.queryMinistry(queryMinistryRequest, options).then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary 查詢所有事工團會議及異動清單  (*dynamic sort support)
     * @param {QueryMinistryRequest} [queryMinistryRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    queryMinistryRecord(
      queryMinistryRequest?: QueryMinistryRequest,
      options?: any
    ): Promise<MinistryViewPageApiResponse> {
      return localVarFp.queryMinistryRecord(queryMinistryRequest, options).then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary 刪除主檔
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    removeMinistry(id: number, options?: any): Promise<Int32ApiResponse> {
      return localVarFp.removeMinistry(id, options).then((request) => request(axios, basePath));
    },
  };
};

/**
 * MinistryApi - interface
 * @export
 * @interface MinistryApi
 */
export interface MinistryApiInterface {
  /**
   *
   * @summary 建立事工團
   * @param {AddMinistryCommand} [addMinistryCommand]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof MinistryApiInterface
   */
  createMinistry(
    addMinistryCommand?: AddMinistryCommand,
    options?: AxiosRequestConfig
  ): Promise<UMinistryCommandResponseApiResponse>;

  /**
   *
   * @summary 刪除部門
   * @param {DeleteMinistryCommand} [deleteMinistryCommand]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof MinistryApiInterface
   */
  deleteMinistry(
    deleteMinistryCommand?: DeleteMinistryCommand,
    options?: AxiosRequestConfig
  ): Promise<MinistryViewApiResponse>;

  /**
   *
   * @summary 查詢部門
   * @param {FetchAllMinistryRequest} [fetchAllMinistryRequest]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof MinistryApiInterface
   */
  fetchMinistrys(
    fetchAllMinistryRequest?: FetchAllMinistryRequest,
    options?: AxiosRequestConfig
  ): Promise<MinistryViewListApiResponse>;

  /**
   *
   * @summary 查詢部門
   * @param {number} [id] id
   * @param {number} [organizationId] 堂點
   * @param {number} [ministryDefId] 事工團分類id
   * @param {string} [ministryNo] 事工團編號
   * @param {string} [name] 事工團名稱
   * @param {string} [childMinistry] 是否兒童事工團
   * @param {string} [ministryStatus] 事工團狀態
   * @param {Array<SortProperty>} [sortProperties] 查詢欄位排序
   * @param {number} [page] 目前頁數
   * @param {number} [size] 每頁筆數
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof MinistryApiInterface
   */
  findMinistry(
    id?: number,
    organizationId?: number,
    ministryDefId?: number,
    ministryNo?: string,
    name?: string,
    childMinistry?: string,
    ministryStatus?: string,
    sortProperties?: Array<SortProperty>,
    page?: number,
    size?: number,
    options?: AxiosRequestConfig
  ): Promise<MinistryViewPageApiResponse>;

  /**
   *
   * @summary 以 Id 查詢用戶資料
   * @param {number} id
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof MinistryApiInterface
   */
  getMinistry(id: number, options?: AxiosRequestConfig): Promise<MinistryViewApiResponse>;

  /**
   *
   * @summary 修改部門
   * @param {AddMinistryCommand} [addMinistryCommand]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof MinistryApiInterface
   */
  putMinistry(addMinistryCommand?: AddMinistryCommand, options?: AxiosRequestConfig): Promise<MinistryViewApiResponse>;

  /**
   *
   * @summary 查詢部門  (*dynamic sort support)
   * @param {QueryMinistryRequest} [queryMinistryRequest]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof MinistryApiInterface
   */
  queryMinistry(
    queryMinistryRequest?: QueryMinistryRequest,
    options?: AxiosRequestConfig
  ): Promise<MinistryViewPageApiResponse>;

  /**
   *
   * @summary 查詢所有事工團會議及異動清單  (*dynamic sort support)
   * @param {QueryMinistryRequest} [queryMinistryRequest]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof MinistryApiInterface
   */
  queryMinistryRecord(
    queryMinistryRequest?: QueryMinistryRequest,
    options?: AxiosRequestConfig
  ): Promise<MinistryViewPageApiResponse>;

  /**
   *
   * @summary 刪除主檔
   * @param {number} id
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof MinistryApiInterface
   */
  removeMinistry(id: number, options?: AxiosRequestConfig): Promise<Int32ApiResponse>;
}

/**
 * MinistryApi - object-oriented interface
 * @export
 * @class MinistryApi
 * @extends {BaseAPI}
 */
export class MinistryApi extends BaseAPI implements MinistryApiInterface {
  /**
   *
   * @summary 建立事工團
   * @param {AddMinistryCommand} [addMinistryCommand]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof MinistryApi
   */
  public createMinistry(addMinistryCommand?: AddMinistryCommand, options?: AxiosRequestConfig) {
    return MinistryApiFp(this.configuration)
      .createMinistry(addMinistryCommand, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary 刪除部門
   * @param {DeleteMinistryCommand} [deleteMinistryCommand]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof MinistryApi
   */
  public deleteMinistry(deleteMinistryCommand?: DeleteMinistryCommand, options?: AxiosRequestConfig) {
    return MinistryApiFp(this.configuration)
      .deleteMinistry(deleteMinistryCommand, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary 查詢部門
   * @param {FetchAllMinistryRequest} [fetchAllMinistryRequest]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof MinistryApi
   */
  public fetchMinistrys(fetchAllMinistryRequest?: FetchAllMinistryRequest, options?: AxiosRequestConfig) {
    return MinistryApiFp(this.configuration)
      .fetchMinistrys(fetchAllMinistryRequest, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary 查詢部門
   * @param {number} [id] id
   * @param {number} [organizationId] 堂點
   * @param {number} [ministryDefId] 事工團分類id
   * @param {string} [ministryNo] 事工團編號
   * @param {string} [name] 事工團名稱
   * @param {string} [childMinistry] 是否兒童事工團
   * @param {string} [ministryStatus] 事工團狀態
   * @param {Array<SortProperty>} [sortProperties] 查詢欄位排序
   * @param {number} [page] 目前頁數
   * @param {number} [size] 每頁筆數
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof MinistryApi
   */
  public findMinistry(
    id?: number,
    organizationId?: number,
    ministryDefId?: number,
    ministryNo?: string,
    name?: string,
    childMinistry?: string,
    ministryStatus?: string,
    sortProperties?: Array<SortProperty>,
    page?: number,
    size?: number,
    options?: AxiosRequestConfig
  ) {
    return MinistryApiFp(this.configuration)
      .findMinistry(
        id,
        organizationId,
        ministryDefId,
        ministryNo,
        name,
        childMinistry,
        ministryStatus,
        sortProperties,
        page,
        size,
        options
      )
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary 以 Id 查詢用戶資料
   * @param {number} id
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof MinistryApi
   */
  public getMinistry(id: number, options?: AxiosRequestConfig) {
    return MinistryApiFp(this.configuration)
      .getMinistry(id, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary 修改部門
   * @param {AddMinistryCommand} [addMinistryCommand]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof MinistryApi
   */
  public putMinistry(addMinistryCommand?: AddMinistryCommand, options?: AxiosRequestConfig) {
    return MinistryApiFp(this.configuration)
      .putMinistry(addMinistryCommand, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary 查詢部門  (*dynamic sort support)
   * @param {QueryMinistryRequest} [queryMinistryRequest]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof MinistryApi
   */
  public queryMinistry(queryMinistryRequest?: QueryMinistryRequest, options?: AxiosRequestConfig) {
    return MinistryApiFp(this.configuration)
      .queryMinistry(queryMinistryRequest, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary 查詢所有事工團會議及異動清單  (*dynamic sort support)
   * @param {QueryMinistryRequest} [queryMinistryRequest]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof MinistryApi
   */
  public queryMinistryRecord(queryMinistryRequest?: QueryMinistryRequest, options?: AxiosRequestConfig) {
    return MinistryApiFp(this.configuration)
      .queryMinistryRecord(queryMinistryRequest, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary 刪除主檔
   * @param {number} id
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof MinistryApi
   */
  public removeMinistry(id: number, options?: AxiosRequestConfig) {
    return MinistryApiFp(this.configuration)
      .removeMinistry(id, options)
      .then((request) => request(this.axios, this.basePath));
  }
}

/**
 * MinistryDefApi - axios parameter creator
 * @export
 */
export const MinistryDefApiAxiosParamCreator = function (configuration?: Configuration) {
  return {
    /**
     *
     * @summary 建立事工團類別
     * @param {CreateMinistryDefCommand} [createMinistryDefCommand]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createMinistryDef: async (
      createMinistryDefCommand?: CreateMinistryDefCommand,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/ministryDef`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: "POST", ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication Example-id-1 required
      await setApiKeyToObject(localVarHeaderParameter, "Example-id-1", configuration);

      // authentication JWT_Authorization required
      await setApiKeyToObject(localVarHeaderParameter, "authorization", configuration);

      // authentication example-id-2 required
      await setApiKeyToObject(localVarHeaderParameter, "example-id-2", configuration);

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      localVarRequestOptions.data = serializeDataIfNeeded(
        createMinistryDefCommand,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary 刪除事工團類別
     * @param {DeleteMinistryDefCommand} [deleteMinistryDefCommand]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteMinistryDef: async (
      deleteMinistryDefCommand?: DeleteMinistryDefCommand,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/ministryDef`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: "DELETE", ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication Example-id-1 required
      await setApiKeyToObject(localVarHeaderParameter, "Example-id-1", configuration);

      // authentication JWT_Authorization required
      await setApiKeyToObject(localVarHeaderParameter, "authorization", configuration);

      // authentication example-id-2 required
      await setApiKeyToObject(localVarHeaderParameter, "example-id-2", configuration);

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      localVarRequestOptions.data = serializeDataIfNeeded(
        deleteMinistryDefCommand,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary 查詢事工團類別
     * @param {FetchAllMinistryDefRequest} [fetchAllMinistryDefRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    fetchMinistryDefs: async (
      fetchAllMinistryDefRequest?: FetchAllMinistryDefRequest,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/ministryDef/fetch`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: "POST", ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication Example-id-1 required
      await setApiKeyToObject(localVarHeaderParameter, "Example-id-1", configuration);

      // authentication JWT_Authorization required
      await setApiKeyToObject(localVarHeaderParameter, "authorization", configuration);

      // authentication example-id-2 required
      await setApiKeyToObject(localVarHeaderParameter, "example-id-2", configuration);

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      localVarRequestOptions.data = serializeDataIfNeeded(
        fetchAllMinistryDefRequest,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary 查詢事工團類別
     * @param {number} [id] id
     * @param {string} [ministryDefNo] 事工團分類代碼
     * @param {string} [name] 事工團分類名稱
     * @param {string} [ministryDefStatus] 事工團類別狀態
     * @param {string} [ministryDefType] 事工團類別  MinistryDefType 0一般事工團   1小組
     * @param {Array<SortProperty>} [sortProperties] 查詢欄位排序
     * @param {number} [page] 目前頁數
     * @param {number} [size] 每頁筆數
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    findMinistryDef: async (
      id?: number,
      ministryDefNo?: string,
      name?: string,
      ministryDefStatus?: string,
      ministryDefType?: string,
      sortProperties?: Array<SortProperty>,
      page?: number,
      size?: number,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/ministryDef`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: "GET", ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication Example-id-1 required
      await setApiKeyToObject(localVarHeaderParameter, "Example-id-1", configuration);

      // authentication JWT_Authorization required
      await setApiKeyToObject(localVarHeaderParameter, "authorization", configuration);

      // authentication example-id-2 required
      await setApiKeyToObject(localVarHeaderParameter, "example-id-2", configuration);

      if (id !== undefined) {
        localVarQueryParameter["id"] = id;
      }

      if (ministryDefNo !== undefined) {
        localVarQueryParameter["ministryDefNo"] = ministryDefNo;
      }

      if (name !== undefined) {
        localVarQueryParameter["name"] = name;
      }

      if (ministryDefStatus !== undefined) {
        localVarQueryParameter["ministryDefStatus"] = ministryDefStatus;
      }

      if (ministryDefType !== undefined) {
        localVarQueryParameter["ministryDefType"] = ministryDefType;
      }

      if (sortProperties) {
        localVarQueryParameter["sortProperties"] = sortProperties;
      }

      if (page !== undefined) {
        localVarQueryParameter["page"] = page;
      }

      if (size !== undefined) {
        localVarQueryParameter["size"] = size;
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary 以 Id 查詢列表
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getMinistryDef: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists("getMinistryDef", "id", id);
      const localVarPath = `/api/ministryDef/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(id)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: "GET", ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication Example-id-1 required
      await setApiKeyToObject(localVarHeaderParameter, "Example-id-1", configuration);

      // authentication JWT_Authorization required
      await setApiKeyToObject(localVarHeaderParameter, "authorization", configuration);

      // authentication example-id-2 required
      await setApiKeyToObject(localVarHeaderParameter, "example-id-2", configuration);

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary 修改事工團類別
     * @param {UpdateMinistryDefCommand} [updateMinistryDefCommand]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    putMinistryDef: async (
      updateMinistryDefCommand?: UpdateMinistryDefCommand,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/ministryDef`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: "PUT", ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication Example-id-1 required
      await setApiKeyToObject(localVarHeaderParameter, "Example-id-1", configuration);

      // authentication JWT_Authorization required
      await setApiKeyToObject(localVarHeaderParameter, "authorization", configuration);

      // authentication example-id-2 required
      await setApiKeyToObject(localVarHeaderParameter, "example-id-2", configuration);

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      localVarRequestOptions.data = serializeDataIfNeeded(
        updateMinistryDefCommand,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary 查詢列表  (*dynamic sort support)
     * @param {QueryMinistryDefRequest} [queryMinistryDefRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    queryMinistryDefs: async (
      queryMinistryDefRequest?: QueryMinistryDefRequest,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/ministryDef/query`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: "POST", ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication Example-id-1 required
      await setApiKeyToObject(localVarHeaderParameter, "Example-id-1", configuration);

      // authentication JWT_Authorization required
      await setApiKeyToObject(localVarHeaderParameter, "authorization", configuration);

      // authentication example-id-2 required
      await setApiKeyToObject(localVarHeaderParameter, "example-id-2", configuration);

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      localVarRequestOptions.data = serializeDataIfNeeded(
        queryMinistryDefRequest,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary 刪除主檔
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    removeMinistryDef: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists("removeMinistryDef", "id", id);
      const localVarPath = `/api/ministryDef/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(id)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: "DELETE", ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication Example-id-1 required
      await setApiKeyToObject(localVarHeaderParameter, "Example-id-1", configuration);

      // authentication JWT_Authorization required
      await setApiKeyToObject(localVarHeaderParameter, "authorization", configuration);

      // authentication example-id-2 required
      await setApiKeyToObject(localVarHeaderParameter, "example-id-2", configuration);

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * MinistryDefApi - functional programming interface
 * @export
 */
export const MinistryDefApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = MinistryDefApiAxiosParamCreator(configuration);
  return {
    /**
     *
     * @summary 建立事工團類別
     * @param {CreateMinistryDefCommand} [createMinistryDefCommand]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async createMinistryDef(
      createMinistryDefCommand?: CreateMinistryDefCommand,
      options?: AxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<MinistryDefViewApiResponse>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.createMinistryDef(createMinistryDefCommand, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     *
     * @summary 刪除事工團類別
     * @param {DeleteMinistryDefCommand} [deleteMinistryDefCommand]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async deleteMinistryDef(
      deleteMinistryDefCommand?: DeleteMinistryDefCommand,
      options?: AxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<MinistryDefViewApiResponse>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.deleteMinistryDef(deleteMinistryDefCommand, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     *
     * @summary 查詢事工團類別
     * @param {FetchAllMinistryDefRequest} [fetchAllMinistryDefRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async fetchMinistryDefs(
      fetchAllMinistryDefRequest?: FetchAllMinistryDefRequest,
      options?: AxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<MinistryDefViewListApiResponse>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.fetchMinistryDefs(fetchAllMinistryDefRequest, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     *
     * @summary 查詢事工團類別
     * @param {number} [id] id
     * @param {string} [ministryDefNo] 事工團分類代碼
     * @param {string} [name] 事工團分類名稱
     * @param {string} [ministryDefStatus] 事工團類別狀態
     * @param {string} [ministryDefType] 事工團類別  MinistryDefType 0一般事工團   1小組
     * @param {Array<SortProperty>} [sortProperties] 查詢欄位排序
     * @param {number} [page] 目前頁數
     * @param {number} [size] 每頁筆數
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async findMinistryDef(
      id?: number,
      ministryDefNo?: string,
      name?: string,
      ministryDefStatus?: string,
      ministryDefType?: string,
      sortProperties?: Array<SortProperty>,
      page?: number,
      size?: number,
      options?: AxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<MinistryDefViewPageApiResponse>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.findMinistryDef(
        id,
        ministryDefNo,
        name,
        ministryDefStatus,
        ministryDefType,
        sortProperties,
        page,
        size,
        options
      );
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     *
     * @summary 以 Id 查詢列表
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getMinistryDef(
      id: number,
      options?: AxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<MinistryDefViewApiResponse>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getMinistryDef(id, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     *
     * @summary 修改事工團類別
     * @param {UpdateMinistryDefCommand} [updateMinistryDefCommand]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async putMinistryDef(
      updateMinistryDefCommand?: UpdateMinistryDefCommand,
      options?: AxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<MinistryDefViewApiResponse>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.putMinistryDef(updateMinistryDefCommand, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     *
     * @summary 查詢列表  (*dynamic sort support)
     * @param {QueryMinistryDefRequest} [queryMinistryDefRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async queryMinistryDefs(
      queryMinistryDefRequest?: QueryMinistryDefRequest,
      options?: AxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<MinistryDefViewPageApiResponse>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.queryMinistryDefs(queryMinistryDefRequest, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     *
     * @summary 刪除主檔
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async removeMinistryDef(
      id: number,
      options?: AxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<Int32ApiResponse>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.removeMinistryDef(id, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
  };
};

/**
 * MinistryDefApi - factory interface
 * @export
 */
export const MinistryDefApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance
) {
  const localVarFp = MinistryDefApiFp(configuration);
  return {
    /**
     *
     * @summary 建立事工團類別
     * @param {CreateMinistryDefCommand} [createMinistryDefCommand]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createMinistryDef(
      createMinistryDefCommand?: CreateMinistryDefCommand,
      options?: any
    ): Promise<MinistryDefViewApiResponse> {
      return localVarFp
        .createMinistryDef(createMinistryDefCommand, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary 刪除事工團類別
     * @param {DeleteMinistryDefCommand} [deleteMinistryDefCommand]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteMinistryDef(
      deleteMinistryDefCommand?: DeleteMinistryDefCommand,
      options?: any
    ): Promise<MinistryDefViewApiResponse> {
      return localVarFp
        .deleteMinistryDef(deleteMinistryDefCommand, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary 查詢事工團類別
     * @param {FetchAllMinistryDefRequest} [fetchAllMinistryDefRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    fetchMinistryDefs(
      fetchAllMinistryDefRequest?: FetchAllMinistryDefRequest,
      options?: any
    ): Promise<MinistryDefViewListApiResponse> {
      return localVarFp
        .fetchMinistryDefs(fetchAllMinistryDefRequest, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary 查詢事工團類別
     * @param {number} [id] id
     * @param {string} [ministryDefNo] 事工團分類代碼
     * @param {string} [name] 事工團分類名稱
     * @param {string} [ministryDefStatus] 事工團類別狀態
     * @param {string} [ministryDefType] 事工團類別  MinistryDefType 0一般事工團   1小組
     * @param {Array<SortProperty>} [sortProperties] 查詢欄位排序
     * @param {number} [page] 目前頁數
     * @param {number} [size] 每頁筆數
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    findMinistryDef(
      id?: number,
      ministryDefNo?: string,
      name?: string,
      ministryDefStatus?: string,
      ministryDefType?: string,
      sortProperties?: Array<SortProperty>,
      page?: number,
      size?: number,
      options?: any
    ): Promise<MinistryDefViewPageApiResponse> {
      return localVarFp
        .findMinistryDef(
          id,
          ministryDefNo,
          name,
          ministryDefStatus,
          ministryDefType,
          sortProperties,
          page,
          size,
          options
        )
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary 以 Id 查詢列表
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getMinistryDef(id: number, options?: any): Promise<MinistryDefViewApiResponse> {
      return localVarFp.getMinistryDef(id, options).then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary 修改事工團類別
     * @param {UpdateMinistryDefCommand} [updateMinistryDefCommand]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    putMinistryDef(
      updateMinistryDefCommand?: UpdateMinistryDefCommand,
      options?: any
    ): Promise<MinistryDefViewApiResponse> {
      return localVarFp.putMinistryDef(updateMinistryDefCommand, options).then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary 查詢列表  (*dynamic sort support)
     * @param {QueryMinistryDefRequest} [queryMinistryDefRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    queryMinistryDefs(
      queryMinistryDefRequest?: QueryMinistryDefRequest,
      options?: any
    ): Promise<MinistryDefViewPageApiResponse> {
      return localVarFp.queryMinistryDefs(queryMinistryDefRequest, options).then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary 刪除主檔
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    removeMinistryDef(id: number, options?: any): Promise<Int32ApiResponse> {
      return localVarFp.removeMinistryDef(id, options).then((request) => request(axios, basePath));
    },
  };
};

/**
 * MinistryDefApi - interface
 * @export
 * @interface MinistryDefApi
 */
export interface MinistryDefApiInterface {
  /**
   *
   * @summary 建立事工團類別
   * @param {CreateMinistryDefCommand} [createMinistryDefCommand]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof MinistryDefApiInterface
   */
  createMinistryDef(
    createMinistryDefCommand?: CreateMinistryDefCommand,
    options?: AxiosRequestConfig
  ): Promise<MinistryDefViewApiResponse>;

  /**
   *
   * @summary 刪除事工團類別
   * @param {DeleteMinistryDefCommand} [deleteMinistryDefCommand]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof MinistryDefApiInterface
   */
  deleteMinistryDef(
    deleteMinistryDefCommand?: DeleteMinistryDefCommand,
    options?: AxiosRequestConfig
  ): Promise<MinistryDefViewApiResponse>;

  /**
   *
   * @summary 查詢事工團類別
   * @param {FetchAllMinistryDefRequest} [fetchAllMinistryDefRequest]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof MinistryDefApiInterface
   */
  fetchMinistryDefs(
    fetchAllMinistryDefRequest?: FetchAllMinistryDefRequest,
    options?: AxiosRequestConfig
  ): Promise<MinistryDefViewListApiResponse>;

  /**
   *
   * @summary 查詢事工團類別
   * @param {number} [id] id
   * @param {string} [ministryDefNo] 事工團分類代碼
   * @param {string} [name] 事工團分類名稱
   * @param {string} [ministryDefStatus] 事工團類別狀態
   * @param {string} [ministryDefType] 事工團類別  MinistryDefType 0一般事工團   1小組
   * @param {Array<SortProperty>} [sortProperties] 查詢欄位排序
   * @param {number} [page] 目前頁數
   * @param {number} [size] 每頁筆數
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof MinistryDefApiInterface
   */
  findMinistryDef(
    id?: number,
    ministryDefNo?: string,
    name?: string,
    ministryDefStatus?: string,
    ministryDefType?: string,
    sortProperties?: Array<SortProperty>,
    page?: number,
    size?: number,
    options?: AxiosRequestConfig
  ): Promise<MinistryDefViewPageApiResponse>;

  /**
   *
   * @summary 以 Id 查詢列表
   * @param {number} id
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof MinistryDefApiInterface
   */
  getMinistryDef(id: number, options?: AxiosRequestConfig): Promise<MinistryDefViewApiResponse>;

  /**
   *
   * @summary 修改事工團類別
   * @param {UpdateMinistryDefCommand} [updateMinistryDefCommand]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof MinistryDefApiInterface
   */
  putMinistryDef(
    updateMinistryDefCommand?: UpdateMinistryDefCommand,
    options?: AxiosRequestConfig
  ): Promise<MinistryDefViewApiResponse>;

  /**
   *
   * @summary 查詢列表  (*dynamic sort support)
   * @param {QueryMinistryDefRequest} [queryMinistryDefRequest]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof MinistryDefApiInterface
   */
  queryMinistryDefs(
    queryMinistryDefRequest?: QueryMinistryDefRequest,
    options?: AxiosRequestConfig
  ): Promise<MinistryDefViewPageApiResponse>;

  /**
   *
   * @summary 刪除主檔
   * @param {number} id
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof MinistryDefApiInterface
   */
  removeMinistryDef(id: number, options?: AxiosRequestConfig): Promise<Int32ApiResponse>;
}

/**
 * MinistryDefApi - object-oriented interface
 * @export
 * @class MinistryDefApi
 * @extends {BaseAPI}
 */
export class MinistryDefApi extends BaseAPI implements MinistryDefApiInterface {
  /**
   *
   * @summary 建立事工團類別
   * @param {CreateMinistryDefCommand} [createMinistryDefCommand]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof MinistryDefApi
   */
  public createMinistryDef(createMinistryDefCommand?: CreateMinistryDefCommand, options?: AxiosRequestConfig) {
    return MinistryDefApiFp(this.configuration)
      .createMinistryDef(createMinistryDefCommand, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary 刪除事工團類別
   * @param {DeleteMinistryDefCommand} [deleteMinistryDefCommand]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof MinistryDefApi
   */
  public deleteMinistryDef(deleteMinistryDefCommand?: DeleteMinistryDefCommand, options?: AxiosRequestConfig) {
    return MinistryDefApiFp(this.configuration)
      .deleteMinistryDef(deleteMinistryDefCommand, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary 查詢事工團類別
   * @param {FetchAllMinistryDefRequest} [fetchAllMinistryDefRequest]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof MinistryDefApi
   */
  public fetchMinistryDefs(fetchAllMinistryDefRequest?: FetchAllMinistryDefRequest, options?: AxiosRequestConfig) {
    return MinistryDefApiFp(this.configuration)
      .fetchMinistryDefs(fetchAllMinistryDefRequest, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary 查詢事工團類別
   * @param {number} [id] id
   * @param {string} [ministryDefNo] 事工團分類代碼
   * @param {string} [name] 事工團分類名稱
   * @param {string} [ministryDefStatus] 事工團類別狀態
   * @param {string} [ministryDefType] 事工團類別  MinistryDefType 0一般事工團   1小組
   * @param {Array<SortProperty>} [sortProperties] 查詢欄位排序
   * @param {number} [page] 目前頁數
   * @param {number} [size] 每頁筆數
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof MinistryDefApi
   */
  public findMinistryDef(
    id?: number,
    ministryDefNo?: string,
    name?: string,
    ministryDefStatus?: string,
    ministryDefType?: string,
    sortProperties?: Array<SortProperty>,
    page?: number,
    size?: number,
    options?: AxiosRequestConfig
  ) {
    return MinistryDefApiFp(this.configuration)
      .findMinistryDef(id, ministryDefNo, name, ministryDefStatus, ministryDefType, sortProperties, page, size, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary 以 Id 查詢列表
   * @param {number} id
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof MinistryDefApi
   */
  public getMinistryDef(id: number, options?: AxiosRequestConfig) {
    return MinistryDefApiFp(this.configuration)
      .getMinistryDef(id, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary 修改事工團類別
   * @param {UpdateMinistryDefCommand} [updateMinistryDefCommand]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof MinistryDefApi
   */
  public putMinistryDef(updateMinistryDefCommand?: UpdateMinistryDefCommand, options?: AxiosRequestConfig) {
    return MinistryDefApiFp(this.configuration)
      .putMinistryDef(updateMinistryDefCommand, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary 查詢列表  (*dynamic sort support)
   * @param {QueryMinistryDefRequest} [queryMinistryDefRequest]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof MinistryDefApi
   */
  public queryMinistryDefs(queryMinistryDefRequest?: QueryMinistryDefRequest, options?: AxiosRequestConfig) {
    return MinistryDefApiFp(this.configuration)
      .queryMinistryDefs(queryMinistryDefRequest, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary 刪除主檔
   * @param {number} id
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof MinistryDefApi
   */
  public removeMinistryDef(id: number, options?: AxiosRequestConfig) {
    return MinistryDefApiFp(this.configuration)
      .removeMinistryDef(id, options)
      .then((request) => request(this.axios, this.basePath));
  }
}

/**
 * MinistryMeetingApi - axios parameter creator
 * @export
 */
export const MinistryMeetingApiAxiosParamCreator = function (configuration?: Configuration) {
  return {
    /**
     *
     * @summary 建立會議
     * @param {CreateMinistryMeetingCommand} [createMinistryMeetingCommand]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createMinistryMeeting: async (
      createMinistryMeetingCommand?: CreateMinistryMeetingCommand,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/ministryMeeting`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: "POST", ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication Example-id-1 required
      await setApiKeyToObject(localVarHeaderParameter, "Example-id-1", configuration);

      // authentication JWT_Authorization required
      await setApiKeyToObject(localVarHeaderParameter, "authorization", configuration);

      // authentication example-id-2 required
      await setApiKeyToObject(localVarHeaderParameter, "example-id-2", configuration);

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      localVarRequestOptions.data = serializeDataIfNeeded(
        createMinistryMeetingCommand,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary 刪除會議
     * @param {DeleteMinistryMeetingCommand} [deleteMinistryMeetingCommand]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteMinistryMeeting: async (
      deleteMinistryMeetingCommand?: DeleteMinistryMeetingCommand,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/ministryMeeting`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: "DELETE", ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication Example-id-1 required
      await setApiKeyToObject(localVarHeaderParameter, "Example-id-1", configuration);

      // authentication JWT_Authorization required
      await setApiKeyToObject(localVarHeaderParameter, "authorization", configuration);

      // authentication example-id-2 required
      await setApiKeyToObject(localVarHeaderParameter, "example-id-2", configuration);

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      localVarRequestOptions.data = serializeDataIfNeeded(
        deleteMinistryMeetingCommand,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary 查詢會議
     * @param {number} [id] id
     * @param {number} [ministryId] Ministry.Id
     * @param {string} [meetingDayOfWeek] 小組聚會每周哪一天
     * @param {string} [meetingTime] 聚會時間
     * @param {string} [meetingAddress] 聚會地點
     * @param {string} [meetingDay] 聚會日期
     * @param {string} [isExp] 是否為外展對應SystemConfigtype&#x3D;IsNY顯示 namevalue存此欄位0：N1：Y
     * @param {string} [isSearchable] 是否可查詢，否表示隱藏小組
     * @param {string} [meetType] 聚會狀態對應SystemConfigtype&#x3D;MeetType顯示 namevalue存此欄位0：尚未開始1：正常舉行2：停辦
     * @param {Array<SortProperty>} [sortProperties] 查詢欄位排序
     * @param {number} [page] 目前頁數
     * @param {number} [size] 每頁筆數
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    findMinistryMeeting: async (
      id?: number,
      ministryId?: number,
      meetingDayOfWeek?: string,
      meetingTime?: string,
      meetingAddress?: string,
      meetingDay?: string,
      isExp?: string,
      isSearchable?: string,
      meetType?: string,
      sortProperties?: Array<SortProperty>,
      page?: number,
      size?: number,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/ministryMeeting`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: "GET", ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication Example-id-1 required
      await setApiKeyToObject(localVarHeaderParameter, "Example-id-1", configuration);

      // authentication JWT_Authorization required
      await setApiKeyToObject(localVarHeaderParameter, "authorization", configuration);

      // authentication example-id-2 required
      await setApiKeyToObject(localVarHeaderParameter, "example-id-2", configuration);

      if (id !== undefined) {
        localVarQueryParameter["id"] = id;
      }

      if (ministryId !== undefined) {
        localVarQueryParameter["ministryId"] = ministryId;
      }

      if (meetingDayOfWeek !== undefined) {
        localVarQueryParameter["meetingDayOfWeek"] = meetingDayOfWeek;
      }

      if (meetingTime !== undefined) {
        localVarQueryParameter["meetingTime"] = meetingTime;
      }

      if (meetingAddress !== undefined) {
        localVarQueryParameter["meetingAddress"] = meetingAddress;
      }

      if (meetingDay !== undefined) {
        localVarQueryParameter["meetingDay"] =
          (meetingDay as any) instanceof Date ? (meetingDay as any).toISOString() : meetingDay;
      }

      if (isExp !== undefined) {
        localVarQueryParameter["isExp"] = isExp;
      }

      if (isSearchable !== undefined) {
        localVarQueryParameter["isSearchable"] = isSearchable;
      }

      if (meetType !== undefined) {
        localVarQueryParameter["meetType"] = meetType;
      }

      if (sortProperties) {
        localVarQueryParameter["sortProperties"] = sortProperties;
      }

      if (page !== undefined) {
        localVarQueryParameter["page"] = page;
      }

      if (size !== undefined) {
        localVarQueryParameter["size"] = size;
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary 以 Id 查詢列表
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getMinistryMeetingOfId: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists("getMinistryMeetingOfId", "id", id);
      const localVarPath = `/api/ministryMeeting/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(id)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: "GET", ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication Example-id-1 required
      await setApiKeyToObject(localVarHeaderParameter, "Example-id-1", configuration);

      // authentication JWT_Authorization required
      await setApiKeyToObject(localVarHeaderParameter, "authorization", configuration);

      // authentication example-id-2 required
      await setApiKeyToObject(localVarHeaderParameter, "example-id-2", configuration);

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary 修改會議
     * @param {UpdateMinistryMeetingCommand} [updateMinistryMeetingCommand]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    putMinistryMeeting: async (
      updateMinistryMeetingCommand?: UpdateMinistryMeetingCommand,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/ministryMeeting`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: "PUT", ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication Example-id-1 required
      await setApiKeyToObject(localVarHeaderParameter, "Example-id-1", configuration);

      // authentication JWT_Authorization required
      await setApiKeyToObject(localVarHeaderParameter, "authorization", configuration);

      // authentication example-id-2 required
      await setApiKeyToObject(localVarHeaderParameter, "example-id-2", configuration);

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      localVarRequestOptions.data = serializeDataIfNeeded(
        updateMinistryMeetingCommand,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary 查詢列表  (*dynamic sort support)
     * @param {QueryMinistryMeetingRequest} [queryMinistryMeetingRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    queryMinistryMeetings: async (
      queryMinistryMeetingRequest?: QueryMinistryMeetingRequest,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/ministryMeeting/query`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: "POST", ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication Example-id-1 required
      await setApiKeyToObject(localVarHeaderParameter, "Example-id-1", configuration);

      // authentication JWT_Authorization required
      await setApiKeyToObject(localVarHeaderParameter, "authorization", configuration);

      // authentication example-id-2 required
      await setApiKeyToObject(localVarHeaderParameter, "example-id-2", configuration);

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      localVarRequestOptions.data = serializeDataIfNeeded(
        queryMinistryMeetingRequest,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary 刪除主檔
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    removeMinistryMeeting: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists("removeMinistryMeeting", "id", id);
      const localVarPath = `/api/ministryMeeting/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(id)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: "DELETE", ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication Example-id-1 required
      await setApiKeyToObject(localVarHeaderParameter, "Example-id-1", configuration);

      // authentication JWT_Authorization required
      await setApiKeyToObject(localVarHeaderParameter, "authorization", configuration);

      // authentication example-id-2 required
      await setApiKeyToObject(localVarHeaderParameter, "example-id-2", configuration);

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * MinistryMeetingApi - functional programming interface
 * @export
 */
export const MinistryMeetingApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = MinistryMeetingApiAxiosParamCreator(configuration);
  return {
    /**
     *
     * @summary 建立會議
     * @param {CreateMinistryMeetingCommand} [createMinistryMeetingCommand]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async createMinistryMeeting(
      createMinistryMeetingCommand?: CreateMinistryMeetingCommand,
      options?: AxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<MinistryMeetingViewApiResponse>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.createMinistryMeeting(
        createMinistryMeetingCommand,
        options
      );
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     *
     * @summary 刪除會議
     * @param {DeleteMinistryMeetingCommand} [deleteMinistryMeetingCommand]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async deleteMinistryMeeting(
      deleteMinistryMeetingCommand?: DeleteMinistryMeetingCommand,
      options?: AxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<MinistryMeetingViewApiResponse>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.deleteMinistryMeeting(
        deleteMinistryMeetingCommand,
        options
      );
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     *
     * @summary 查詢會議
     * @param {number} [id] id
     * @param {number} [ministryId] Ministry.Id
     * @param {string} [meetingDayOfWeek] 小組聚會每周哪一天
     * @param {string} [meetingTime] 聚會時間
     * @param {string} [meetingAddress] 聚會地點
     * @param {string} [meetingDay] 聚會日期
     * @param {string} [isExp] 是否為外展對應SystemConfigtype&#x3D;IsNY顯示 namevalue存此欄位0：N1：Y
     * @param {string} [isSearchable] 是否可查詢，否表示隱藏小組
     * @param {string} [meetType] 聚會狀態對應SystemConfigtype&#x3D;MeetType顯示 namevalue存此欄位0：尚未開始1：正常舉行2：停辦
     * @param {Array<SortProperty>} [sortProperties] 查詢欄位排序
     * @param {number} [page] 目前頁數
     * @param {number} [size] 每頁筆數
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async findMinistryMeeting(
      id?: number,
      ministryId?: number,
      meetingDayOfWeek?: string,
      meetingTime?: string,
      meetingAddress?: string,
      meetingDay?: string,
      isExp?: string,
      isSearchable?: string,
      meetType?: string,
      sortProperties?: Array<SortProperty>,
      page?: number,
      size?: number,
      options?: AxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<MinistryMeetingViewPageApiResponse>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.findMinistryMeeting(
        id,
        ministryId,
        meetingDayOfWeek,
        meetingTime,
        meetingAddress,
        meetingDay,
        isExp,
        isSearchable,
        meetType,
        sortProperties,
        page,
        size,
        options
      );
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     *
     * @summary 以 Id 查詢列表
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getMinistryMeetingOfId(
      id: number,
      options?: AxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<MinistryMeetingViewApiResponse>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getMinistryMeetingOfId(id, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     *
     * @summary 修改會議
     * @param {UpdateMinistryMeetingCommand} [updateMinistryMeetingCommand]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async putMinistryMeeting(
      updateMinistryMeetingCommand?: UpdateMinistryMeetingCommand,
      options?: AxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<MinistryMeetingViewApiResponse>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.putMinistryMeeting(
        updateMinistryMeetingCommand,
        options
      );
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     *
     * @summary 查詢列表  (*dynamic sort support)
     * @param {QueryMinistryMeetingRequest} [queryMinistryMeetingRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async queryMinistryMeetings(
      queryMinistryMeetingRequest?: QueryMinistryMeetingRequest,
      options?: AxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<MinistryMeetingViewPageApiResponse>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.queryMinistryMeetings(
        queryMinistryMeetingRequest,
        options
      );
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     *
     * @summary 刪除主檔
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async removeMinistryMeeting(
      id: number,
      options?: AxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<Int32ApiResponse>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.removeMinistryMeeting(id, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
  };
};

/**
 * MinistryMeetingApi - factory interface
 * @export
 */
export const MinistryMeetingApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance
) {
  const localVarFp = MinistryMeetingApiFp(configuration);
  return {
    /**
     *
     * @summary 建立會議
     * @param {CreateMinistryMeetingCommand} [createMinistryMeetingCommand]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createMinistryMeeting(
      createMinistryMeetingCommand?: CreateMinistryMeetingCommand,
      options?: any
    ): Promise<MinistryMeetingViewApiResponse> {
      return localVarFp
        .createMinistryMeeting(createMinistryMeetingCommand, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary 刪除會議
     * @param {DeleteMinistryMeetingCommand} [deleteMinistryMeetingCommand]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteMinistryMeeting(
      deleteMinistryMeetingCommand?: DeleteMinistryMeetingCommand,
      options?: any
    ): Promise<MinistryMeetingViewApiResponse> {
      return localVarFp
        .deleteMinistryMeeting(deleteMinistryMeetingCommand, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary 查詢會議
     * @param {number} [id] id
     * @param {number} [ministryId] Ministry.Id
     * @param {string} [meetingDayOfWeek] 小組聚會每周哪一天
     * @param {string} [meetingTime] 聚會時間
     * @param {string} [meetingAddress] 聚會地點
     * @param {string} [meetingDay] 聚會日期
     * @param {string} [isExp] 是否為外展對應SystemConfigtype&#x3D;IsNY顯示 namevalue存此欄位0：N1：Y
     * @param {string} [isSearchable] 是否可查詢，否表示隱藏小組
     * @param {string} [meetType] 聚會狀態對應SystemConfigtype&#x3D;MeetType顯示 namevalue存此欄位0：尚未開始1：正常舉行2：停辦
     * @param {Array<SortProperty>} [sortProperties] 查詢欄位排序
     * @param {number} [page] 目前頁數
     * @param {number} [size] 每頁筆數
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    findMinistryMeeting(
      id?: number,
      ministryId?: number,
      meetingDayOfWeek?: string,
      meetingTime?: string,
      meetingAddress?: string,
      meetingDay?: string,
      isExp?: string,
      isSearchable?: string,
      meetType?: string,
      sortProperties?: Array<SortProperty>,
      page?: number,
      size?: number,
      options?: any
    ): Promise<MinistryMeetingViewPageApiResponse> {
      return localVarFp
        .findMinistryMeeting(
          id,
          ministryId,
          meetingDayOfWeek,
          meetingTime,
          meetingAddress,
          meetingDay,
          isExp,
          isSearchable,
          meetType,
          sortProperties,
          page,
          size,
          options
        )
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary 以 Id 查詢列表
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getMinistryMeetingOfId(id: number, options?: any): Promise<MinistryMeetingViewApiResponse> {
      return localVarFp.getMinistryMeetingOfId(id, options).then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary 修改會議
     * @param {UpdateMinistryMeetingCommand} [updateMinistryMeetingCommand]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    putMinistryMeeting(
      updateMinistryMeetingCommand?: UpdateMinistryMeetingCommand,
      options?: any
    ): Promise<MinistryMeetingViewApiResponse> {
      return localVarFp
        .putMinistryMeeting(updateMinistryMeetingCommand, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary 查詢列表  (*dynamic sort support)
     * @param {QueryMinistryMeetingRequest} [queryMinistryMeetingRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    queryMinistryMeetings(
      queryMinistryMeetingRequest?: QueryMinistryMeetingRequest,
      options?: any
    ): Promise<MinistryMeetingViewPageApiResponse> {
      return localVarFp
        .queryMinistryMeetings(queryMinistryMeetingRequest, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary 刪除主檔
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    removeMinistryMeeting(id: number, options?: any): Promise<Int32ApiResponse> {
      return localVarFp.removeMinistryMeeting(id, options).then((request) => request(axios, basePath));
    },
  };
};

/**
 * MinistryMeetingApi - interface
 * @export
 * @interface MinistryMeetingApi
 */
export interface MinistryMeetingApiInterface {
  /**
   *
   * @summary 建立會議
   * @param {CreateMinistryMeetingCommand} [createMinistryMeetingCommand]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof MinistryMeetingApiInterface
   */
  createMinistryMeeting(
    createMinistryMeetingCommand?: CreateMinistryMeetingCommand,
    options?: AxiosRequestConfig
  ): Promise<MinistryMeetingViewApiResponse>;

  /**
   *
   * @summary 刪除會議
   * @param {DeleteMinistryMeetingCommand} [deleteMinistryMeetingCommand]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof MinistryMeetingApiInterface
   */
  deleteMinistryMeeting(
    deleteMinistryMeetingCommand?: DeleteMinistryMeetingCommand,
    options?: AxiosRequestConfig
  ): Promise<MinistryMeetingViewApiResponse>;

  /**
   *
   * @summary 查詢會議
   * @param {number} [id] id
   * @param {number} [ministryId] Ministry.Id
   * @param {string} [meetingDayOfWeek] 小組聚會每周哪一天
   * @param {string} [meetingTime] 聚會時間
   * @param {string} [meetingAddress] 聚會地點
   * @param {string} [meetingDay] 聚會日期
   * @param {string} [isExp] 是否為外展對應SystemConfigtype&#x3D;IsNY顯示 namevalue存此欄位0：N1：Y
   * @param {string} [isSearchable] 是否可查詢，否表示隱藏小組
   * @param {string} [meetType] 聚會狀態對應SystemConfigtype&#x3D;MeetType顯示 namevalue存此欄位0：尚未開始1：正常舉行2：停辦
   * @param {Array<SortProperty>} [sortProperties] 查詢欄位排序
   * @param {number} [page] 目前頁數
   * @param {number} [size] 每頁筆數
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof MinistryMeetingApiInterface
   */
  findMinistryMeeting(
    id?: number,
    ministryId?: number,
    meetingDayOfWeek?: string,
    meetingTime?: string,
    meetingAddress?: string,
    meetingDay?: string,
    isExp?: string,
    isSearchable?: string,
    meetType?: string,
    sortProperties?: Array<SortProperty>,
    page?: number,
    size?: number,
    options?: AxiosRequestConfig
  ): Promise<MinistryMeetingViewPageApiResponse>;

  /**
   *
   * @summary 以 Id 查詢列表
   * @param {number} id
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof MinistryMeetingApiInterface
   */
  getMinistryMeetingOfId(id: number, options?: AxiosRequestConfig): Promise<MinistryMeetingViewApiResponse>;

  /**
   *
   * @summary 修改會議
   * @param {UpdateMinistryMeetingCommand} [updateMinistryMeetingCommand]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof MinistryMeetingApiInterface
   */
  putMinistryMeeting(
    updateMinistryMeetingCommand?: UpdateMinistryMeetingCommand,
    options?: AxiosRequestConfig
  ): Promise<MinistryMeetingViewApiResponse>;

  /**
   *
   * @summary 查詢列表  (*dynamic sort support)
   * @param {QueryMinistryMeetingRequest} [queryMinistryMeetingRequest]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof MinistryMeetingApiInterface
   */
  queryMinistryMeetings(
    queryMinistryMeetingRequest?: QueryMinistryMeetingRequest,
    options?: AxiosRequestConfig
  ): Promise<MinistryMeetingViewPageApiResponse>;

  /**
   *
   * @summary 刪除主檔
   * @param {number} id
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof MinistryMeetingApiInterface
   */
  removeMinistryMeeting(id: number, options?: AxiosRequestConfig): Promise<Int32ApiResponse>;
}

/**
 * MinistryMeetingApi - object-oriented interface
 * @export
 * @class MinistryMeetingApi
 * @extends {BaseAPI}
 */
export class MinistryMeetingApi extends BaseAPI implements MinistryMeetingApiInterface {
  /**
   *
   * @summary 建立會議
   * @param {CreateMinistryMeetingCommand} [createMinistryMeetingCommand]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof MinistryMeetingApi
   */
  public createMinistryMeeting(
    createMinistryMeetingCommand?: CreateMinistryMeetingCommand,
    options?: AxiosRequestConfig
  ) {
    return MinistryMeetingApiFp(this.configuration)
      .createMinistryMeeting(createMinistryMeetingCommand, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary 刪除會議
   * @param {DeleteMinistryMeetingCommand} [deleteMinistryMeetingCommand]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof MinistryMeetingApi
   */
  public deleteMinistryMeeting(
    deleteMinistryMeetingCommand?: DeleteMinistryMeetingCommand,
    options?: AxiosRequestConfig
  ) {
    return MinistryMeetingApiFp(this.configuration)
      .deleteMinistryMeeting(deleteMinistryMeetingCommand, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary 查詢會議
   * @param {number} [id] id
   * @param {number} [ministryId] Ministry.Id
   * @param {string} [meetingDayOfWeek] 小組聚會每周哪一天
   * @param {string} [meetingTime] 聚會時間
   * @param {string} [meetingAddress] 聚會地點
   * @param {string} [meetingDay] 聚會日期
   * @param {string} [isExp] 是否為外展對應SystemConfigtype&#x3D;IsNY顯示 namevalue存此欄位0：N1：Y
   * @param {string} [isSearchable] 是否可查詢，否表示隱藏小組
   * @param {string} [meetType] 聚會狀態對應SystemConfigtype&#x3D;MeetType顯示 namevalue存此欄位0：尚未開始1：正常舉行2：停辦
   * @param {Array<SortProperty>} [sortProperties] 查詢欄位排序
   * @param {number} [page] 目前頁數
   * @param {number} [size] 每頁筆數
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof MinistryMeetingApi
   */
  public findMinistryMeeting(
    id?: number,
    ministryId?: number,
    meetingDayOfWeek?: string,
    meetingTime?: string,
    meetingAddress?: string,
    meetingDay?: string,
    isExp?: string,
    isSearchable?: string,
    meetType?: string,
    sortProperties?: Array<SortProperty>,
    page?: number,
    size?: number,
    options?: AxiosRequestConfig
  ) {
    return MinistryMeetingApiFp(this.configuration)
      .findMinistryMeeting(
        id,
        ministryId,
        meetingDayOfWeek,
        meetingTime,
        meetingAddress,
        meetingDay,
        isExp,
        isSearchable,
        meetType,
        sortProperties,
        page,
        size,
        options
      )
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary 以 Id 查詢列表
   * @param {number} id
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof MinistryMeetingApi
   */
  public getMinistryMeetingOfId(id: number, options?: AxiosRequestConfig) {
    return MinistryMeetingApiFp(this.configuration)
      .getMinistryMeetingOfId(id, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary 修改會議
   * @param {UpdateMinistryMeetingCommand} [updateMinistryMeetingCommand]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof MinistryMeetingApi
   */
  public putMinistryMeeting(updateMinistryMeetingCommand?: UpdateMinistryMeetingCommand, options?: AxiosRequestConfig) {
    return MinistryMeetingApiFp(this.configuration)
      .putMinistryMeeting(updateMinistryMeetingCommand, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary 查詢列表  (*dynamic sort support)
   * @param {QueryMinistryMeetingRequest} [queryMinistryMeetingRequest]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof MinistryMeetingApi
   */
  public queryMinistryMeetings(
    queryMinistryMeetingRequest?: QueryMinistryMeetingRequest,
    options?: AxiosRequestConfig
  ) {
    return MinistryMeetingApiFp(this.configuration)
      .queryMinistryMeetings(queryMinistryMeetingRequest, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary 刪除主檔
   * @param {number} id
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof MinistryMeetingApi
   */
  public removeMinistryMeeting(id: number, options?: AxiosRequestConfig) {
    return MinistryMeetingApiFp(this.configuration)
      .removeMinistryMeeting(id, options)
      .then((request) => request(this.axios, this.basePath));
  }
}

/**
 * MinistryMeetingUserApi - axios parameter creator
 * @export
 */
export const MinistryMeetingUserApiAxiosParamCreator = function (configuration?: Configuration) {
  return {
    /**
     *
     * @summary 建立會議簽到
     * @param {CreateMinistryMeetingUserCommand} [createMinistryMeetingUserCommand]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createMinistryMeetingUser: async (
      createMinistryMeetingUserCommand?: CreateMinistryMeetingUserCommand,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/ministryMeetingUser`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: "POST", ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication Example-id-1 required
      await setApiKeyToObject(localVarHeaderParameter, "Example-id-1", configuration);

      // authentication JWT_Authorization required
      await setApiKeyToObject(localVarHeaderParameter, "authorization", configuration);

      // authentication example-id-2 required
      await setApiKeyToObject(localVarHeaderParameter, "example-id-2", configuration);

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      localVarRequestOptions.data = serializeDataIfNeeded(
        createMinistryMeetingUserCommand,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary 刪除會議簽到
     * @param {DeleteMinistryMeetingUserCommand} [deleteMinistryMeetingUserCommand]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteMinistryMeetingUser: async (
      deleteMinistryMeetingUserCommand?: DeleteMinistryMeetingUserCommand,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/ministryMeetingUser`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: "DELETE", ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication Example-id-1 required
      await setApiKeyToObject(localVarHeaderParameter, "Example-id-1", configuration);

      // authentication JWT_Authorization required
      await setApiKeyToObject(localVarHeaderParameter, "authorization", configuration);

      // authentication example-id-2 required
      await setApiKeyToObject(localVarHeaderParameter, "example-id-2", configuration);

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      localVarRequestOptions.data = serializeDataIfNeeded(
        deleteMinistryMeetingUserCommand,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary 查詢會議簽到
     * @param {FetchAllMinistryMeetingUserRequest} [fetchAllMinistryMeetingUserRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    fetchMinistryMeetingUsers: async (
      fetchAllMinistryMeetingUserRequest?: FetchAllMinistryMeetingUserRequest,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/ministryMeetingUser/fetch`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: "POST", ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication Example-id-1 required
      await setApiKeyToObject(localVarHeaderParameter, "Example-id-1", configuration);

      // authentication JWT_Authorization required
      await setApiKeyToObject(localVarHeaderParameter, "authorization", configuration);

      // authentication example-id-2 required
      await setApiKeyToObject(localVarHeaderParameter, "example-id-2", configuration);

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      localVarRequestOptions.data = serializeDataIfNeeded(
        fetchAllMinistryMeetingUserRequest,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary 查詢會議簽到
     * @param {number} [id] id
     * @param {number} [ministryMeetingId] MinistryMeeting.Id
     * @param {number} [userId] User.Id
     * @param {number} [attendanceType] 是否聚會出席狀態        對應SystemConfig        type &#x3D; MeetAttendanceType顯示 namevalue存此欄位0：尚未開課1：已出席2:未出席
     * @param {string} [ministryDefName] MinistryDef.Name
     * @param {number} [ministryDefId] MinistryDef.Id
     * @param {number} [ministryId] Ministry.Id
     * @param {string} [ministryName] Ministry.Name
     * @param {string} [ministryRespName] MinistryResp.Name
     * @param {string} [meetingDayS] MeetingDayS
     * @param {string} [meetingDayE] MeetingDayS
     * @param {number} [ministryRespUserStatus] 異動紀錄
     * @param {Array<SortProperty>} [sortProperties] 查詢欄位排序
     * @param {number} [page] 目前頁數
     * @param {number} [size] 每頁筆數
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    findMinistryMeetingUser: async (
      id?: number,
      ministryMeetingId?: number,
      userId?: number,
      attendanceType?: number,
      ministryDefName?: string,
      ministryDefId?: number,
      ministryId?: number,
      ministryName?: string,
      ministryRespName?: string,
      meetingDayS?: string,
      meetingDayE?: string,
      ministryRespUserStatus?: number,
      sortProperties?: Array<SortProperty>,
      page?: number,
      size?: number,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/ministryMeetingUser`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: "GET", ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication Example-id-1 required
      await setApiKeyToObject(localVarHeaderParameter, "Example-id-1", configuration);

      // authentication JWT_Authorization required
      await setApiKeyToObject(localVarHeaderParameter, "authorization", configuration);

      // authentication example-id-2 required
      await setApiKeyToObject(localVarHeaderParameter, "example-id-2", configuration);

      if (id !== undefined) {
        localVarQueryParameter["id"] = id;
      }

      if (ministryMeetingId !== undefined) {
        localVarQueryParameter["ministryMeetingId"] = ministryMeetingId;
      }

      if (userId !== undefined) {
        localVarQueryParameter["userId"] = userId;
      }

      if (attendanceType !== undefined) {
        localVarQueryParameter["attendanceType"] = attendanceType;
      }

      if (ministryDefName !== undefined) {
        localVarQueryParameter["ministryDefName"] = ministryDefName;
      }

      if (ministryDefId !== undefined) {
        localVarQueryParameter["ministryDefId"] = ministryDefId;
      }

      if (ministryId !== undefined) {
        localVarQueryParameter["ministryId"] = ministryId;
      }

      if (ministryName !== undefined) {
        localVarQueryParameter["ministryName"] = ministryName;
      }

      if (ministryRespName !== undefined) {
        localVarQueryParameter["ministryRespName"] = ministryRespName;
      }

      if (meetingDayS !== undefined) {
        localVarQueryParameter["meetingDayS"] =
          (meetingDayS as any) instanceof Date ? (meetingDayS as any).toISOString() : meetingDayS;
      }

      if (meetingDayE !== undefined) {
        localVarQueryParameter["meetingDayE"] =
          (meetingDayE as any) instanceof Date ? (meetingDayE as any).toISOString() : meetingDayE;
      }

      if (ministryRespUserStatus !== undefined) {
        localVarQueryParameter["ministryRespUserStatus"] = ministryRespUserStatus;
      }

      if (sortProperties) {
        localVarQueryParameter["sortProperties"] = sortProperties;
      }

      if (page !== undefined) {
        localVarQueryParameter["page"] = page;
      }

      if (size !== undefined) {
        localVarQueryParameter["size"] = size;
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary 以 Id 查詢列表
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getMinistryMeetingUser: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists("getMinistryMeetingUser", "id", id);
      const localVarPath = `/api/ministryMeetingUser/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(id)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: "GET", ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication Example-id-1 required
      await setApiKeyToObject(localVarHeaderParameter, "Example-id-1", configuration);

      // authentication JWT_Authorization required
      await setApiKeyToObject(localVarHeaderParameter, "authorization", configuration);

      // authentication example-id-2 required
      await setApiKeyToObject(localVarHeaderParameter, "example-id-2", configuration);

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary 修改會議簽到
     * @param {UpdateMinistryMeetingUserCommand} [updateMinistryMeetingUserCommand]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    putMinistryMeetingUser: async (
      updateMinistryMeetingUserCommand?: UpdateMinistryMeetingUserCommand,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/ministryMeetingUser`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: "PUT", ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication Example-id-1 required
      await setApiKeyToObject(localVarHeaderParameter, "Example-id-1", configuration);

      // authentication JWT_Authorization required
      await setApiKeyToObject(localVarHeaderParameter, "authorization", configuration);

      // authentication example-id-2 required
      await setApiKeyToObject(localVarHeaderParameter, "example-id-2", configuration);

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      localVarRequestOptions.data = serializeDataIfNeeded(
        updateMinistryMeetingUserCommand,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary 查詢列表  (*dynamic sort support)
     * @param {QueryMinistryMeetingUserRequest} [queryMinistryMeetingUserRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    queryMinistryMeetingUsers: async (
      queryMinistryMeetingUserRequest?: QueryMinistryMeetingUserRequest,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/ministryMeetingUser/query`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: "POST", ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication Example-id-1 required
      await setApiKeyToObject(localVarHeaderParameter, "Example-id-1", configuration);

      // authentication JWT_Authorization required
      await setApiKeyToObject(localVarHeaderParameter, "authorization", configuration);

      // authentication example-id-2 required
      await setApiKeyToObject(localVarHeaderParameter, "example-id-2", configuration);

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      localVarRequestOptions.data = serializeDataIfNeeded(
        queryMinistryMeetingUserRequest,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary 刪除主檔
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    removeMinistryMeetingUser: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists("removeMinistryMeetingUser", "id", id);
      const localVarPath = `/api/ministryMeetingUser/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(id)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: "DELETE", ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication Example-id-1 required
      await setApiKeyToObject(localVarHeaderParameter, "Example-id-1", configuration);

      // authentication JWT_Authorization required
      await setApiKeyToObject(localVarHeaderParameter, "authorization", configuration);

      // authentication example-id-2 required
      await setApiKeyToObject(localVarHeaderParameter, "example-id-2", configuration);

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * MinistryMeetingUserApi - functional programming interface
 * @export
 */
export const MinistryMeetingUserApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = MinistryMeetingUserApiAxiosParamCreator(configuration);
  return {
    /**
     *
     * @summary 建立會議簽到
     * @param {CreateMinistryMeetingUserCommand} [createMinistryMeetingUserCommand]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async createMinistryMeetingUser(
      createMinistryMeetingUserCommand?: CreateMinistryMeetingUserCommand,
      options?: AxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<MinistryMeetingUserViewApiResponse>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.createMinistryMeetingUser(
        createMinistryMeetingUserCommand,
        options
      );
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     *
     * @summary 刪除會議簽到
     * @param {DeleteMinistryMeetingUserCommand} [deleteMinistryMeetingUserCommand]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async deleteMinistryMeetingUser(
      deleteMinistryMeetingUserCommand?: DeleteMinistryMeetingUserCommand,
      options?: AxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<MinistryMeetingUserViewApiResponse>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.deleteMinistryMeetingUser(
        deleteMinistryMeetingUserCommand,
        options
      );
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     *
     * @summary 查詢會議簽到
     * @param {FetchAllMinistryMeetingUserRequest} [fetchAllMinistryMeetingUserRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async fetchMinistryMeetingUsers(
      fetchAllMinistryMeetingUserRequest?: FetchAllMinistryMeetingUserRequest,
      options?: AxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<MinistryMeetingUserViewListApiResponse>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.fetchMinistryMeetingUsers(
        fetchAllMinistryMeetingUserRequest,
        options
      );
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     *
     * @summary 查詢會議簽到
     * @param {number} [id] id
     * @param {number} [ministryMeetingId] MinistryMeeting.Id
     * @param {number} [userId] User.Id
     * @param {number} [attendanceType] 是否聚會出席狀態        對應SystemConfig        type &#x3D; MeetAttendanceType顯示 namevalue存此欄位0：尚未開課1：已出席2:未出席
     * @param {string} [ministryDefName] MinistryDef.Name
     * @param {number} [ministryDefId] MinistryDef.Id
     * @param {number} [ministryId] Ministry.Id
     * @param {string} [ministryName] Ministry.Name
     * @param {string} [ministryRespName] MinistryResp.Name
     * @param {string} [meetingDayS] MeetingDayS
     * @param {string} [meetingDayE] MeetingDayS
     * @param {number} [ministryRespUserStatus] 異動紀錄
     * @param {Array<SortProperty>} [sortProperties] 查詢欄位排序
     * @param {number} [page] 目前頁數
     * @param {number} [size] 每頁筆數
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async findMinistryMeetingUser(
      id?: number,
      ministryMeetingId?: number,
      userId?: number,
      attendanceType?: number,
      ministryDefName?: string,
      ministryDefId?: number,
      ministryId?: number,
      ministryName?: string,
      ministryRespName?: string,
      meetingDayS?: string,
      meetingDayE?: string,
      ministryRespUserStatus?: number,
      sortProperties?: Array<SortProperty>,
      page?: number,
      size?: number,
      options?: AxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<MinistryMeetingUserViewPageApiResponse>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.findMinistryMeetingUser(
        id,
        ministryMeetingId,
        userId,
        attendanceType,
        ministryDefName,
        ministryDefId,
        ministryId,
        ministryName,
        ministryRespName,
        meetingDayS,
        meetingDayE,
        ministryRespUserStatus,
        sortProperties,
        page,
        size,
        options
      );
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     *
     * @summary 以 Id 查詢列表
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getMinistryMeetingUser(
      id: number,
      options?: AxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<MinistryMeetingUserViewApiResponse>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getMinistryMeetingUser(id, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     *
     * @summary 修改會議簽到
     * @param {UpdateMinistryMeetingUserCommand} [updateMinistryMeetingUserCommand]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async putMinistryMeetingUser(
      updateMinistryMeetingUserCommand?: UpdateMinistryMeetingUserCommand,
      options?: AxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<MinistryMeetingUserViewApiResponse>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.putMinistryMeetingUser(
        updateMinistryMeetingUserCommand,
        options
      );
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     *
     * @summary 查詢列表  (*dynamic sort support)
     * @param {QueryMinistryMeetingUserRequest} [queryMinistryMeetingUserRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async queryMinistryMeetingUsers(
      queryMinistryMeetingUserRequest?: QueryMinistryMeetingUserRequest,
      options?: AxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<MinistryMeetingUserViewPageApiResponse>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.queryMinistryMeetingUsers(
        queryMinistryMeetingUserRequest,
        options
      );
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     *
     * @summary 刪除主檔
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async removeMinistryMeetingUser(
      id: number,
      options?: AxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<Int32ApiResponse>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.removeMinistryMeetingUser(id, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
  };
};

/**
 * MinistryMeetingUserApi - factory interface
 * @export
 */
export const MinistryMeetingUserApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance
) {
  const localVarFp = MinistryMeetingUserApiFp(configuration);
  return {
    /**
     *
     * @summary 建立會議簽到
     * @param {CreateMinistryMeetingUserCommand} [createMinistryMeetingUserCommand]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createMinistryMeetingUser(
      createMinistryMeetingUserCommand?: CreateMinistryMeetingUserCommand,
      options?: any
    ): Promise<MinistryMeetingUserViewApiResponse> {
      return localVarFp
        .createMinistryMeetingUser(createMinistryMeetingUserCommand, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary 刪除會議簽到
     * @param {DeleteMinistryMeetingUserCommand} [deleteMinistryMeetingUserCommand]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteMinistryMeetingUser(
      deleteMinistryMeetingUserCommand?: DeleteMinistryMeetingUserCommand,
      options?: any
    ): Promise<MinistryMeetingUserViewApiResponse> {
      return localVarFp
        .deleteMinistryMeetingUser(deleteMinistryMeetingUserCommand, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary 查詢會議簽到
     * @param {FetchAllMinistryMeetingUserRequest} [fetchAllMinistryMeetingUserRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    fetchMinistryMeetingUsers(
      fetchAllMinistryMeetingUserRequest?: FetchAllMinistryMeetingUserRequest,
      options?: any
    ): Promise<MinistryMeetingUserViewListApiResponse> {
      return localVarFp
        .fetchMinistryMeetingUsers(fetchAllMinistryMeetingUserRequest, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary 查詢會議簽到
     * @param {number} [id] id
     * @param {number} [ministryMeetingId] MinistryMeeting.Id
     * @param {number} [userId] User.Id
     * @param {number} [attendanceType] 是否聚會出席狀態        對應SystemConfig        type &#x3D; MeetAttendanceType顯示 namevalue存此欄位0：尚未開課1：已出席2:未出席
     * @param {string} [ministryDefName] MinistryDef.Name
     * @param {number} [ministryDefId] MinistryDef.Id
     * @param {number} [ministryId] Ministry.Id
     * @param {string} [ministryName] Ministry.Name
     * @param {string} [ministryRespName] MinistryResp.Name
     * @param {string} [meetingDayS] MeetingDayS
     * @param {string} [meetingDayE] MeetingDayS
     * @param {number} [ministryRespUserStatus] 異動紀錄
     * @param {Array<SortProperty>} [sortProperties] 查詢欄位排序
     * @param {number} [page] 目前頁數
     * @param {number} [size] 每頁筆數
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    findMinistryMeetingUser(
      id?: number,
      ministryMeetingId?: number,
      userId?: number,
      attendanceType?: number,
      ministryDefName?: string,
      ministryDefId?: number,
      ministryId?: number,
      ministryName?: string,
      ministryRespName?: string,
      meetingDayS?: string,
      meetingDayE?: string,
      ministryRespUserStatus?: number,
      sortProperties?: Array<SortProperty>,
      page?: number,
      size?: number,
      options?: any
    ): Promise<MinistryMeetingUserViewPageApiResponse> {
      return localVarFp
        .findMinistryMeetingUser(
          id,
          ministryMeetingId,
          userId,
          attendanceType,
          ministryDefName,
          ministryDefId,
          ministryId,
          ministryName,
          ministryRespName,
          meetingDayS,
          meetingDayE,
          ministryRespUserStatus,
          sortProperties,
          page,
          size,
          options
        )
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary 以 Id 查詢列表
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getMinistryMeetingUser(id: number, options?: any): Promise<MinistryMeetingUserViewApiResponse> {
      return localVarFp.getMinistryMeetingUser(id, options).then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary 修改會議簽到
     * @param {UpdateMinistryMeetingUserCommand} [updateMinistryMeetingUserCommand]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    putMinistryMeetingUser(
      updateMinistryMeetingUserCommand?: UpdateMinistryMeetingUserCommand,
      options?: any
    ): Promise<MinistryMeetingUserViewApiResponse> {
      return localVarFp
        .putMinistryMeetingUser(updateMinistryMeetingUserCommand, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary 查詢列表  (*dynamic sort support)
     * @param {QueryMinistryMeetingUserRequest} [queryMinistryMeetingUserRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    queryMinistryMeetingUsers(
      queryMinistryMeetingUserRequest?: QueryMinistryMeetingUserRequest,
      options?: any
    ): Promise<MinistryMeetingUserViewPageApiResponse> {
      return localVarFp
        .queryMinistryMeetingUsers(queryMinistryMeetingUserRequest, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary 刪除主檔
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    removeMinistryMeetingUser(id: number, options?: any): Promise<Int32ApiResponse> {
      return localVarFp.removeMinistryMeetingUser(id, options).then((request) => request(axios, basePath));
    },
  };
};

/**
 * MinistryMeetingUserApi - interface
 * @export
 * @interface MinistryMeetingUserApi
 */
export interface MinistryMeetingUserApiInterface {
  /**
   *
   * @summary 建立會議簽到
   * @param {CreateMinistryMeetingUserCommand} [createMinistryMeetingUserCommand]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof MinistryMeetingUserApiInterface
   */
  createMinistryMeetingUser(
    createMinistryMeetingUserCommand?: CreateMinistryMeetingUserCommand,
    options?: AxiosRequestConfig
  ): Promise<MinistryMeetingUserViewApiResponse>;

  /**
   *
   * @summary 刪除會議簽到
   * @param {DeleteMinistryMeetingUserCommand} [deleteMinistryMeetingUserCommand]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof MinistryMeetingUserApiInterface
   */
  deleteMinistryMeetingUser(
    deleteMinistryMeetingUserCommand?: DeleteMinistryMeetingUserCommand,
    options?: AxiosRequestConfig
  ): Promise<MinistryMeetingUserViewApiResponse>;

  /**
   *
   * @summary 查詢會議簽到
   * @param {FetchAllMinistryMeetingUserRequest} [fetchAllMinistryMeetingUserRequest]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof MinistryMeetingUserApiInterface
   */
  fetchMinistryMeetingUsers(
    fetchAllMinistryMeetingUserRequest?: FetchAllMinistryMeetingUserRequest,
    options?: AxiosRequestConfig
  ): Promise<MinistryMeetingUserViewListApiResponse>;

  /**
   *
   * @summary 查詢會議簽到
   * @param {number} [id] id
   * @param {number} [ministryMeetingId] MinistryMeeting.Id
   * @param {number} [userId] User.Id
   * @param {number} [attendanceType] 是否聚會出席狀態        對應SystemConfig        type &#x3D; MeetAttendanceType顯示 namevalue存此欄位0：尚未開課1：已出席2:未出席
   * @param {string} [ministryDefName] MinistryDef.Name
   * @param {number} [ministryDefId] MinistryDef.Id
   * @param {number} [ministryId] Ministry.Id
   * @param {string} [ministryName] Ministry.Name
   * @param {string} [ministryRespName] MinistryResp.Name
   * @param {string} [meetingDayS] MeetingDayS
   * @param {string} [meetingDayE] MeetingDayS
   * @param {number} [ministryRespUserStatus] 異動紀錄
   * @param {Array<SortProperty>} [sortProperties] 查詢欄位排序
   * @param {number} [page] 目前頁數
   * @param {number} [size] 每頁筆數
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof MinistryMeetingUserApiInterface
   */
  findMinistryMeetingUser(
    id?: number,
    ministryMeetingId?: number,
    userId?: number,
    attendanceType?: number,
    ministryDefName?: string,
    ministryDefId?: number,
    ministryId?: number,
    ministryName?: string,
    ministryRespName?: string,
    meetingDayS?: string,
    meetingDayE?: string,
    ministryRespUserStatus?: number,
    sortProperties?: Array<SortProperty>,
    page?: number,
    size?: number,
    options?: AxiosRequestConfig
  ): Promise<MinistryMeetingUserViewPageApiResponse>;

  /**
   *
   * @summary 以 Id 查詢列表
   * @param {number} id
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof MinistryMeetingUserApiInterface
   */
  getMinistryMeetingUser(id: number, options?: AxiosRequestConfig): Promise<MinistryMeetingUserViewApiResponse>;

  /**
   *
   * @summary 修改會議簽到
   * @param {UpdateMinistryMeetingUserCommand} [updateMinistryMeetingUserCommand]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof MinistryMeetingUserApiInterface
   */
  putMinistryMeetingUser(
    updateMinistryMeetingUserCommand?: UpdateMinistryMeetingUserCommand,
    options?: AxiosRequestConfig
  ): Promise<MinistryMeetingUserViewApiResponse>;

  /**
   *
   * @summary 查詢列表  (*dynamic sort support)
   * @param {QueryMinistryMeetingUserRequest} [queryMinistryMeetingUserRequest]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof MinistryMeetingUserApiInterface
   */
  queryMinistryMeetingUsers(
    queryMinistryMeetingUserRequest?: QueryMinistryMeetingUserRequest,
    options?: AxiosRequestConfig
  ): Promise<MinistryMeetingUserViewPageApiResponse>;

  /**
   *
   * @summary 刪除主檔
   * @param {number} id
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof MinistryMeetingUserApiInterface
   */
  removeMinistryMeetingUser(id: number, options?: AxiosRequestConfig): Promise<Int32ApiResponse>;
}

/**
 * MinistryMeetingUserApi - object-oriented interface
 * @export
 * @class MinistryMeetingUserApi
 * @extends {BaseAPI}
 */
export class MinistryMeetingUserApi extends BaseAPI implements MinistryMeetingUserApiInterface {
  /**
   *
   * @summary 建立會議簽到
   * @param {CreateMinistryMeetingUserCommand} [createMinistryMeetingUserCommand]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof MinistryMeetingUserApi
   */
  public createMinistryMeetingUser(
    createMinistryMeetingUserCommand?: CreateMinistryMeetingUserCommand,
    options?: AxiosRequestConfig
  ) {
    return MinistryMeetingUserApiFp(this.configuration)
      .createMinistryMeetingUser(createMinistryMeetingUserCommand, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary 刪除會議簽到
   * @param {DeleteMinistryMeetingUserCommand} [deleteMinistryMeetingUserCommand]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof MinistryMeetingUserApi
   */
  public deleteMinistryMeetingUser(
    deleteMinistryMeetingUserCommand?: DeleteMinistryMeetingUserCommand,
    options?: AxiosRequestConfig
  ) {
    return MinistryMeetingUserApiFp(this.configuration)
      .deleteMinistryMeetingUser(deleteMinistryMeetingUserCommand, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary 查詢會議簽到
   * @param {FetchAllMinistryMeetingUserRequest} [fetchAllMinistryMeetingUserRequest]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof MinistryMeetingUserApi
   */
  public fetchMinistryMeetingUsers(
    fetchAllMinistryMeetingUserRequest?: FetchAllMinistryMeetingUserRequest,
    options?: AxiosRequestConfig
  ) {
    return MinistryMeetingUserApiFp(this.configuration)
      .fetchMinistryMeetingUsers(fetchAllMinistryMeetingUserRequest, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary 查詢會議簽到
   * @param {number} [id] id
   * @param {number} [ministryMeetingId] MinistryMeeting.Id
   * @param {number} [userId] User.Id
   * @param {number} [attendanceType] 是否聚會出席狀態        對應SystemConfig        type &#x3D; MeetAttendanceType顯示 namevalue存此欄位0：尚未開課1：已出席2:未出席
   * @param {string} [ministryDefName] MinistryDef.Name
   * @param {number} [ministryDefId] MinistryDef.Id
   * @param {number} [ministryId] Ministry.Id
   * @param {string} [ministryName] Ministry.Name
   * @param {string} [ministryRespName] MinistryResp.Name
   * @param {string} [meetingDayS] MeetingDayS
   * @param {string} [meetingDayE] MeetingDayS
   * @param {number} [ministryRespUserStatus] 異動紀錄
   * @param {Array<SortProperty>} [sortProperties] 查詢欄位排序
   * @param {number} [page] 目前頁數
   * @param {number} [size] 每頁筆數
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof MinistryMeetingUserApi
   */
  public findMinistryMeetingUser(
    id?: number,
    ministryMeetingId?: number,
    userId?: number,
    attendanceType?: number,
    ministryDefName?: string,
    ministryDefId?: number,
    ministryId?: number,
    ministryName?: string,
    ministryRespName?: string,
    meetingDayS?: string,
    meetingDayE?: string,
    ministryRespUserStatus?: number,
    sortProperties?: Array<SortProperty>,
    page?: number,
    size?: number,
    options?: AxiosRequestConfig
  ) {
    return MinistryMeetingUserApiFp(this.configuration)
      .findMinistryMeetingUser(
        id,
        ministryMeetingId,
        userId,
        attendanceType,
        ministryDefName,
        ministryDefId,
        ministryId,
        ministryName,
        ministryRespName,
        meetingDayS,
        meetingDayE,
        ministryRespUserStatus,
        sortProperties,
        page,
        size,
        options
      )
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary 以 Id 查詢列表
   * @param {number} id
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof MinistryMeetingUserApi
   */
  public getMinistryMeetingUser(id: number, options?: AxiosRequestConfig) {
    return MinistryMeetingUserApiFp(this.configuration)
      .getMinistryMeetingUser(id, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary 修改會議簽到
   * @param {UpdateMinistryMeetingUserCommand} [updateMinistryMeetingUserCommand]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof MinistryMeetingUserApi
   */
  public putMinistryMeetingUser(
    updateMinistryMeetingUserCommand?: UpdateMinistryMeetingUserCommand,
    options?: AxiosRequestConfig
  ) {
    return MinistryMeetingUserApiFp(this.configuration)
      .putMinistryMeetingUser(updateMinistryMeetingUserCommand, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary 查詢列表  (*dynamic sort support)
   * @param {QueryMinistryMeetingUserRequest} [queryMinistryMeetingUserRequest]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof MinistryMeetingUserApi
   */
  public queryMinistryMeetingUsers(
    queryMinistryMeetingUserRequest?: QueryMinistryMeetingUserRequest,
    options?: AxiosRequestConfig
  ) {
    return MinistryMeetingUserApiFp(this.configuration)
      .queryMinistryMeetingUsers(queryMinistryMeetingUserRequest, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary 刪除主檔
   * @param {number} id
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof MinistryMeetingUserApi
   */
  public removeMinistryMeetingUser(id: number, options?: AxiosRequestConfig) {
    return MinistryMeetingUserApiFp(this.configuration)
      .removeMinistryMeetingUser(id, options)
      .then((request) => request(this.axios, this.basePath));
  }
}

/**
 * MinistryRecordApi - axios parameter creator
 * @export
 */
export const MinistryRecordApiAxiosParamCreator = function (configuration?: Configuration) {
  return {
    /**
     *
     * @summary 查詢所有事工團會議及異動清單  (*dynamic sort support)
     * @param {QueryMinistryRequest} [queryMinistryRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    queryMinistry: async (
      queryMinistryRequest?: QueryMinistryRequest,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/ministryRecord/query`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: "POST", ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication Example-id-1 required
      await setApiKeyToObject(localVarHeaderParameter, "Example-id-1", configuration);

      // authentication JWT_Authorization required
      await setApiKeyToObject(localVarHeaderParameter, "authorization", configuration);

      // authentication example-id-2 required
      await setApiKeyToObject(localVarHeaderParameter, "example-id-2", configuration);

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      localVarRequestOptions.data = serializeDataIfNeeded(queryMinistryRequest, localVarRequestOptions, configuration);

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * MinistryRecordApi - functional programming interface
 * @export
 */
export const MinistryRecordApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = MinistryRecordApiAxiosParamCreator(configuration);
  return {
    /**
     *
     * @summary 查詢所有事工團會議及異動清單  (*dynamic sort support)
     * @param {QueryMinistryRequest} [queryMinistryRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async queryMinistry(
      queryMinistryRequest?: QueryMinistryRequest,
      options?: AxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<MinistryViewPageApiResponse>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.queryMinistry(queryMinistryRequest, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
  };
};

/**
 * MinistryRecordApi - factory interface
 * @export
 */
export const MinistryRecordApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance
) {
  const localVarFp = MinistryRecordApiFp(configuration);
  return {
    /**
     *
     * @summary 查詢所有事工團會議及異動清單  (*dynamic sort support)
     * @param {QueryMinistryRequest} [queryMinistryRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    queryMinistry(queryMinistryRequest?: QueryMinistryRequest, options?: any): Promise<MinistryViewPageApiResponse> {
      return localVarFp.queryMinistry(queryMinistryRequest, options).then((request) => request(axios, basePath));
    },
  };
};

/**
 * MinistryRecordApi - interface
 * @export
 * @interface MinistryRecordApi
 */
export interface MinistryRecordApiInterface {
  /**
   *
   * @summary 查詢所有事工團會議及異動清單  (*dynamic sort support)
   * @param {QueryMinistryRequest} [queryMinistryRequest]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof MinistryRecordApiInterface
   */
  queryMinistry(
    queryMinistryRequest?: QueryMinistryRequest,
    options?: AxiosRequestConfig
  ): Promise<MinistryViewPageApiResponse>;
}

/**
 * MinistryRecordApi - object-oriented interface
 * @export
 * @class MinistryRecordApi
 * @extends {BaseAPI}
 */
export class MinistryRecordApi extends BaseAPI implements MinistryRecordApiInterface {
  /**
   *
   * @summary 查詢所有事工團會議及異動清單  (*dynamic sort support)
   * @param {QueryMinistryRequest} [queryMinistryRequest]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof MinistryRecordApi
   */
  public queryMinistry(queryMinistryRequest?: QueryMinistryRequest, options?: AxiosRequestConfig) {
    return MinistryRecordApiFp(this.configuration)
      .queryMinistry(queryMinistryRequest, options)
      .then((request) => request(this.axios, this.basePath));
  }
}

/**
 * MinistryRespApi - axios parameter creator
 * @export
 */
export const MinistryRespApiAxiosParamCreator = function (configuration?: Configuration) {
  return {
    /**
     *
     * @summary 建立事工團職份
     * @param {CreateMinistryRespCommand} [createMinistryRespCommand]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createMinistryResp: async (
      createMinistryRespCommand?: CreateMinistryRespCommand,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/ministryResp`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: "POST", ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication Example-id-1 required
      await setApiKeyToObject(localVarHeaderParameter, "Example-id-1", configuration);

      // authentication JWT_Authorization required
      await setApiKeyToObject(localVarHeaderParameter, "authorization", configuration);

      // authentication example-id-2 required
      await setApiKeyToObject(localVarHeaderParameter, "example-id-2", configuration);

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      localVarRequestOptions.data = serializeDataIfNeeded(
        createMinistryRespCommand,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary 刪除事工團職份
     * @param {DeleteMinistryRespCommand} [deleteMinistryRespCommand]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteMinistryResp: async (
      deleteMinistryRespCommand?: DeleteMinistryRespCommand,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/ministryResp`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: "DELETE", ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication Example-id-1 required
      await setApiKeyToObject(localVarHeaderParameter, "Example-id-1", configuration);

      // authentication JWT_Authorization required
      await setApiKeyToObject(localVarHeaderParameter, "authorization", configuration);

      // authentication example-id-2 required
      await setApiKeyToObject(localVarHeaderParameter, "example-id-2", configuration);

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      localVarRequestOptions.data = serializeDataIfNeeded(
        deleteMinistryRespCommand,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary 查詢事工團職份
     * @param {FetchAllMinistryRespRequest} [fetchAllMinistryRespRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    fetchMinistryResps: async (
      fetchAllMinistryRespRequest?: FetchAllMinistryRespRequest,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/ministryResp/fetch`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: "POST", ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication Example-id-1 required
      await setApiKeyToObject(localVarHeaderParameter, "Example-id-1", configuration);

      // authentication JWT_Authorization required
      await setApiKeyToObject(localVarHeaderParameter, "authorization", configuration);

      // authentication example-id-2 required
      await setApiKeyToObject(localVarHeaderParameter, "example-id-2", configuration);

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      localVarRequestOptions.data = serializeDataIfNeeded(
        fetchAllMinistryRespRequest,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary 查詢事工團職份
     * @param {number} [id] id
     * @param {number} [ministryId] 事工團.Id
     * @param {number} [seq] 順序
     * @param {string} [name] 事工團職份名稱
     * @param {string} [manageType] 是否管理職是否管理職        對應type&#x3D;IsYN        顯示 name        value存此欄位 0：N 1：Y
     * @param {Array<SortProperty>} [sortProperties] 查詢欄位排序
     * @param {number} [page] 目前頁數
     * @param {number} [size] 每頁筆數
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    findMinistryResp: async (
      id?: number,
      ministryId?: number,
      seq?: number,
      name?: string,
      manageType?: string,
      sortProperties?: Array<SortProperty>,
      page?: number,
      size?: number,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/ministryResp`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: "GET", ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication Example-id-1 required
      await setApiKeyToObject(localVarHeaderParameter, "Example-id-1", configuration);

      // authentication JWT_Authorization required
      await setApiKeyToObject(localVarHeaderParameter, "authorization", configuration);

      // authentication example-id-2 required
      await setApiKeyToObject(localVarHeaderParameter, "example-id-2", configuration);

      if (id !== undefined) {
        localVarQueryParameter["id"] = id;
      }

      if (ministryId !== undefined) {
        localVarQueryParameter["ministryId"] = ministryId;
      }

      if (seq !== undefined) {
        localVarQueryParameter["seq"] = seq;
      }

      if (name !== undefined) {
        localVarQueryParameter["name"] = name;
      }

      if (manageType !== undefined) {
        localVarQueryParameter["manageType"] = manageType;
      }

      if (sortProperties) {
        localVarQueryParameter["sortProperties"] = sortProperties;
      }

      if (page !== undefined) {
        localVarQueryParameter["page"] = page;
      }

      if (size !== undefined) {
        localVarQueryParameter["size"] = size;
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary 以 Id 查詢列表
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getMinistryResp: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists("getMinistryResp", "id", id);
      const localVarPath = `/api/ministryResp/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(id)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: "GET", ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication Example-id-1 required
      await setApiKeyToObject(localVarHeaderParameter, "Example-id-1", configuration);

      // authentication JWT_Authorization required
      await setApiKeyToObject(localVarHeaderParameter, "authorization", configuration);

      // authentication example-id-2 required
      await setApiKeyToObject(localVarHeaderParameter, "example-id-2", configuration);

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary 修改事工團職份
     * @param {UpdateMinistryRespCommand} [updateMinistryRespCommand]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    putMinistryResp: async (
      updateMinistryRespCommand?: UpdateMinistryRespCommand,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/ministryResp`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: "PUT", ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication Example-id-1 required
      await setApiKeyToObject(localVarHeaderParameter, "Example-id-1", configuration);

      // authentication JWT_Authorization required
      await setApiKeyToObject(localVarHeaderParameter, "authorization", configuration);

      // authentication example-id-2 required
      await setApiKeyToObject(localVarHeaderParameter, "example-id-2", configuration);

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      localVarRequestOptions.data = serializeDataIfNeeded(
        updateMinistryRespCommand,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary 查詢列表  (*dynamic sort support)
     * @param {QueryMinistryRespRequest} [queryMinistryRespRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    queryMinistryResps: async (
      queryMinistryRespRequest?: QueryMinistryRespRequest,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/ministryResp/query`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: "POST", ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication Example-id-1 required
      await setApiKeyToObject(localVarHeaderParameter, "Example-id-1", configuration);

      // authentication JWT_Authorization required
      await setApiKeyToObject(localVarHeaderParameter, "authorization", configuration);

      // authentication example-id-2 required
      await setApiKeyToObject(localVarHeaderParameter, "example-id-2", configuration);

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      localVarRequestOptions.data = serializeDataIfNeeded(
        queryMinistryRespRequest,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary 刪除主檔
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    removeMinistryResp: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists("removeMinistryResp", "id", id);
      const localVarPath = `/api/ministryResp/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(id)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: "DELETE", ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication Example-id-1 required
      await setApiKeyToObject(localVarHeaderParameter, "Example-id-1", configuration);

      // authentication JWT_Authorization required
      await setApiKeyToObject(localVarHeaderParameter, "authorization", configuration);

      // authentication example-id-2 required
      await setApiKeyToObject(localVarHeaderParameter, "example-id-2", configuration);

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * MinistryRespApi - functional programming interface
 * @export
 */
export const MinistryRespApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = MinistryRespApiAxiosParamCreator(configuration);
  return {
    /**
     *
     * @summary 建立事工團職份
     * @param {CreateMinistryRespCommand} [createMinistryRespCommand]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async createMinistryResp(
      createMinistryRespCommand?: CreateMinistryRespCommand,
      options?: AxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<MinistryRespViewApiResponse>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.createMinistryResp(createMinistryRespCommand, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     *
     * @summary 刪除事工團職份
     * @param {DeleteMinistryRespCommand} [deleteMinistryRespCommand]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async deleteMinistryResp(
      deleteMinistryRespCommand?: DeleteMinistryRespCommand,
      options?: AxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<MinistryRespViewApiResponse>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.deleteMinistryResp(deleteMinistryRespCommand, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     *
     * @summary 查詢事工團職份
     * @param {FetchAllMinistryRespRequest} [fetchAllMinistryRespRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async fetchMinistryResps(
      fetchAllMinistryRespRequest?: FetchAllMinistryRespRequest,
      options?: AxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<MinistryRespViewListApiResponse>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.fetchMinistryResps(
        fetchAllMinistryRespRequest,
        options
      );
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     *
     * @summary 查詢事工團職份
     * @param {number} [id] id
     * @param {number} [ministryId] 事工團.Id
     * @param {number} [seq] 順序
     * @param {string} [name] 事工團職份名稱
     * @param {string} [manageType] 是否管理職是否管理職        對應type&#x3D;IsYN        顯示 name        value存此欄位 0：N 1：Y
     * @param {Array<SortProperty>} [sortProperties] 查詢欄位排序
     * @param {number} [page] 目前頁數
     * @param {number} [size] 每頁筆數
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async findMinistryResp(
      id?: number,
      ministryId?: number,
      seq?: number,
      name?: string,
      manageType?: string,
      sortProperties?: Array<SortProperty>,
      page?: number,
      size?: number,
      options?: AxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<MinistryRespViewPageApiResponse>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.findMinistryResp(
        id,
        ministryId,
        seq,
        name,
        manageType,
        sortProperties,
        page,
        size,
        options
      );
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     *
     * @summary 以 Id 查詢列表
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getMinistryResp(
      id: number,
      options?: AxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<MinistryRespViewApiResponse>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getMinistryResp(id, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     *
     * @summary 修改事工團職份
     * @param {UpdateMinistryRespCommand} [updateMinistryRespCommand]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async putMinistryResp(
      updateMinistryRespCommand?: UpdateMinistryRespCommand,
      options?: AxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<MinistryRespViewApiResponse>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.putMinistryResp(updateMinistryRespCommand, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     *
     * @summary 查詢列表  (*dynamic sort support)
     * @param {QueryMinistryRespRequest} [queryMinistryRespRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async queryMinistryResps(
      queryMinistryRespRequest?: QueryMinistryRespRequest,
      options?: AxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<MinistryRespViewPageApiResponse>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.queryMinistryResps(queryMinistryRespRequest, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     *
     * @summary 刪除主檔
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async removeMinistryResp(
      id: number,
      options?: AxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<Int32ApiResponse>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.removeMinistryResp(id, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
  };
};

/**
 * MinistryRespApi - factory interface
 * @export
 */
export const MinistryRespApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance
) {
  const localVarFp = MinistryRespApiFp(configuration);
  return {
    /**
     *
     * @summary 建立事工團職份
     * @param {CreateMinistryRespCommand} [createMinistryRespCommand]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createMinistryResp(
      createMinistryRespCommand?: CreateMinistryRespCommand,
      options?: any
    ): Promise<MinistryRespViewApiResponse> {
      return localVarFp
        .createMinistryResp(createMinistryRespCommand, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary 刪除事工團職份
     * @param {DeleteMinistryRespCommand} [deleteMinistryRespCommand]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteMinistryResp(
      deleteMinistryRespCommand?: DeleteMinistryRespCommand,
      options?: any
    ): Promise<MinistryRespViewApiResponse> {
      return localVarFp
        .deleteMinistryResp(deleteMinistryRespCommand, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary 查詢事工團職份
     * @param {FetchAllMinistryRespRequest} [fetchAllMinistryRespRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    fetchMinistryResps(
      fetchAllMinistryRespRequest?: FetchAllMinistryRespRequest,
      options?: any
    ): Promise<MinistryRespViewListApiResponse> {
      return localVarFp
        .fetchMinistryResps(fetchAllMinistryRespRequest, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary 查詢事工團職份
     * @param {number} [id] id
     * @param {number} [ministryId] 事工團.Id
     * @param {number} [seq] 順序
     * @param {string} [name] 事工團職份名稱
     * @param {string} [manageType] 是否管理職是否管理職        對應type&#x3D;IsYN        顯示 name        value存此欄位 0：N 1：Y
     * @param {Array<SortProperty>} [sortProperties] 查詢欄位排序
     * @param {number} [page] 目前頁數
     * @param {number} [size] 每頁筆數
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    findMinistryResp(
      id?: number,
      ministryId?: number,
      seq?: number,
      name?: string,
      manageType?: string,
      sortProperties?: Array<SortProperty>,
      page?: number,
      size?: number,
      options?: any
    ): Promise<MinistryRespViewPageApiResponse> {
      return localVarFp
        .findMinistryResp(id, ministryId, seq, name, manageType, sortProperties, page, size, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary 以 Id 查詢列表
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getMinistryResp(id: number, options?: any): Promise<MinistryRespViewApiResponse> {
      return localVarFp.getMinistryResp(id, options).then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary 修改事工團職份
     * @param {UpdateMinistryRespCommand} [updateMinistryRespCommand]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    putMinistryResp(
      updateMinistryRespCommand?: UpdateMinistryRespCommand,
      options?: any
    ): Promise<MinistryRespViewApiResponse> {
      return localVarFp.putMinistryResp(updateMinistryRespCommand, options).then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary 查詢列表  (*dynamic sort support)
     * @param {QueryMinistryRespRequest} [queryMinistryRespRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    queryMinistryResps(
      queryMinistryRespRequest?: QueryMinistryRespRequest,
      options?: any
    ): Promise<MinistryRespViewPageApiResponse> {
      return localVarFp
        .queryMinistryResps(queryMinistryRespRequest, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary 刪除主檔
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    removeMinistryResp(id: number, options?: any): Promise<Int32ApiResponse> {
      return localVarFp.removeMinistryResp(id, options).then((request) => request(axios, basePath));
    },
  };
};

/**
 * MinistryRespApi - interface
 * @export
 * @interface MinistryRespApi
 */
export interface MinistryRespApiInterface {
  /**
   *
   * @summary 建立事工團職份
   * @param {CreateMinistryRespCommand} [createMinistryRespCommand]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof MinistryRespApiInterface
   */
  createMinistryResp(
    createMinistryRespCommand?: CreateMinistryRespCommand,
    options?: AxiosRequestConfig
  ): Promise<MinistryRespViewApiResponse>;

  /**
   *
   * @summary 刪除事工團職份
   * @param {DeleteMinistryRespCommand} [deleteMinistryRespCommand]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof MinistryRespApiInterface
   */
  deleteMinistryResp(
    deleteMinistryRespCommand?: DeleteMinistryRespCommand,
    options?: AxiosRequestConfig
  ): Promise<MinistryRespViewApiResponse>;

  /**
   *
   * @summary 查詢事工團職份
   * @param {FetchAllMinistryRespRequest} [fetchAllMinistryRespRequest]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof MinistryRespApiInterface
   */
  fetchMinistryResps(
    fetchAllMinistryRespRequest?: FetchAllMinistryRespRequest,
    options?: AxiosRequestConfig
  ): Promise<MinistryRespViewListApiResponse>;

  /**
   *
   * @summary 查詢事工團職份
   * @param {number} [id] id
   * @param {number} [ministryId] 事工團.Id
   * @param {number} [seq] 順序
   * @param {string} [name] 事工團職份名稱
   * @param {string} [manageType] 是否管理職是否管理職        對應type&#x3D;IsYN        顯示 name        value存此欄位 0：N 1：Y
   * @param {Array<SortProperty>} [sortProperties] 查詢欄位排序
   * @param {number} [page] 目前頁數
   * @param {number} [size] 每頁筆數
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof MinistryRespApiInterface
   */
  findMinistryResp(
    id?: number,
    ministryId?: number,
    seq?: number,
    name?: string,
    manageType?: string,
    sortProperties?: Array<SortProperty>,
    page?: number,
    size?: number,
    options?: AxiosRequestConfig
  ): Promise<MinistryRespViewPageApiResponse>;

  /**
   *
   * @summary 以 Id 查詢列表
   * @param {number} id
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof MinistryRespApiInterface
   */
  getMinistryResp(id: number, options?: AxiosRequestConfig): Promise<MinistryRespViewApiResponse>;

  /**
   *
   * @summary 修改事工團職份
   * @param {UpdateMinistryRespCommand} [updateMinistryRespCommand]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof MinistryRespApiInterface
   */
  putMinistryResp(
    updateMinistryRespCommand?: UpdateMinistryRespCommand,
    options?: AxiosRequestConfig
  ): Promise<MinistryRespViewApiResponse>;

  /**
   *
   * @summary 查詢列表  (*dynamic sort support)
   * @param {QueryMinistryRespRequest} [queryMinistryRespRequest]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof MinistryRespApiInterface
   */
  queryMinistryResps(
    queryMinistryRespRequest?: QueryMinistryRespRequest,
    options?: AxiosRequestConfig
  ): Promise<MinistryRespViewPageApiResponse>;

  /**
   *
   * @summary 刪除主檔
   * @param {number} id
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof MinistryRespApiInterface
   */
  removeMinistryResp(id: number, options?: AxiosRequestConfig): Promise<Int32ApiResponse>;
}

/**
 * MinistryRespApi - object-oriented interface
 * @export
 * @class MinistryRespApi
 * @extends {BaseAPI}
 */
export class MinistryRespApi extends BaseAPI implements MinistryRespApiInterface {
  /**
   *
   * @summary 建立事工團職份
   * @param {CreateMinistryRespCommand} [createMinistryRespCommand]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof MinistryRespApi
   */
  public createMinistryResp(createMinistryRespCommand?: CreateMinistryRespCommand, options?: AxiosRequestConfig) {
    return MinistryRespApiFp(this.configuration)
      .createMinistryResp(createMinistryRespCommand, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary 刪除事工團職份
   * @param {DeleteMinistryRespCommand} [deleteMinistryRespCommand]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof MinistryRespApi
   */
  public deleteMinistryResp(deleteMinistryRespCommand?: DeleteMinistryRespCommand, options?: AxiosRequestConfig) {
    return MinistryRespApiFp(this.configuration)
      .deleteMinistryResp(deleteMinistryRespCommand, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary 查詢事工團職份
   * @param {FetchAllMinistryRespRequest} [fetchAllMinistryRespRequest]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof MinistryRespApi
   */
  public fetchMinistryResps(fetchAllMinistryRespRequest?: FetchAllMinistryRespRequest, options?: AxiosRequestConfig) {
    return MinistryRespApiFp(this.configuration)
      .fetchMinistryResps(fetchAllMinistryRespRequest, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary 查詢事工團職份
   * @param {number} [id] id
   * @param {number} [ministryId] 事工團.Id
   * @param {number} [seq] 順序
   * @param {string} [name] 事工團職份名稱
   * @param {string} [manageType] 是否管理職是否管理職        對應type&#x3D;IsYN        顯示 name        value存此欄位 0：N 1：Y
   * @param {Array<SortProperty>} [sortProperties] 查詢欄位排序
   * @param {number} [page] 目前頁數
   * @param {number} [size] 每頁筆數
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof MinistryRespApi
   */
  public findMinistryResp(
    id?: number,
    ministryId?: number,
    seq?: number,
    name?: string,
    manageType?: string,
    sortProperties?: Array<SortProperty>,
    page?: number,
    size?: number,
    options?: AxiosRequestConfig
  ) {
    return MinistryRespApiFp(this.configuration)
      .findMinistryResp(id, ministryId, seq, name, manageType, sortProperties, page, size, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary 以 Id 查詢列表
   * @param {number} id
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof MinistryRespApi
   */
  public getMinistryResp(id: number, options?: AxiosRequestConfig) {
    return MinistryRespApiFp(this.configuration)
      .getMinistryResp(id, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary 修改事工團職份
   * @param {UpdateMinistryRespCommand} [updateMinistryRespCommand]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof MinistryRespApi
   */
  public putMinistryResp(updateMinistryRespCommand?: UpdateMinistryRespCommand, options?: AxiosRequestConfig) {
    return MinistryRespApiFp(this.configuration)
      .putMinistryResp(updateMinistryRespCommand, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary 查詢列表  (*dynamic sort support)
   * @param {QueryMinistryRespRequest} [queryMinistryRespRequest]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof MinistryRespApi
   */
  public queryMinistryResps(queryMinistryRespRequest?: QueryMinistryRespRequest, options?: AxiosRequestConfig) {
    return MinistryRespApiFp(this.configuration)
      .queryMinistryResps(queryMinistryRespRequest, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary 刪除主檔
   * @param {number} id
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof MinistryRespApi
   */
  public removeMinistryResp(id: number, options?: AxiosRequestConfig) {
    return MinistryRespApiFp(this.configuration)
      .removeMinistryResp(id, options)
      .then((request) => request(this.axios, this.basePath));
  }
}

/**
 * MinistryRespUserApi - axios parameter creator
 * @export
 */
export const MinistryRespUserApiAxiosParamCreator = function (configuration?: Configuration) {
  return {
    /**
     *
     * @summary 建立事工團職份團員
     * @param {CreateMinistryRespUserCommand} [createMinistryRespUserCommand]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createMinistryRespUser: async (
      createMinistryRespUserCommand?: CreateMinistryRespUserCommand,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/ministryRespUser`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: "POST", ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication Example-id-1 required
      await setApiKeyToObject(localVarHeaderParameter, "Example-id-1", configuration);

      // authentication JWT_Authorization required
      await setApiKeyToObject(localVarHeaderParameter, "authorization", configuration);

      // authentication example-id-2 required
      await setApiKeyToObject(localVarHeaderParameter, "example-id-2", configuration);

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      localVarRequestOptions.data = serializeDataIfNeeded(
        createMinistryRespUserCommand,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary 刪除事工團職份團員
     * @param {DeleteMinistryRespUserCommand} [deleteMinistryRespUserCommand]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteMinistryRespUser: async (
      deleteMinistryRespUserCommand?: DeleteMinistryRespUserCommand,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/ministryRespUser`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: "DELETE", ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication Example-id-1 required
      await setApiKeyToObject(localVarHeaderParameter, "Example-id-1", configuration);

      // authentication JWT_Authorization required
      await setApiKeyToObject(localVarHeaderParameter, "authorization", configuration);

      // authentication example-id-2 required
      await setApiKeyToObject(localVarHeaderParameter, "example-id-2", configuration);

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      localVarRequestOptions.data = serializeDataIfNeeded(
        deleteMinistryRespUserCommand,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary 查詢事工團職份團員
     * @param {FetchAllMinistryRespUserRequest} [fetchAllMinistryRespUserRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    fetchMinistryRespUsers: async (
      fetchAllMinistryRespUserRequest?: FetchAllMinistryRespUserRequest,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/ministryRespUser/fetch`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: "POST", ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication Example-id-1 required
      await setApiKeyToObject(localVarHeaderParameter, "Example-id-1", configuration);

      // authentication JWT_Authorization required
      await setApiKeyToObject(localVarHeaderParameter, "authorization", configuration);

      // authentication example-id-2 required
      await setApiKeyToObject(localVarHeaderParameter, "example-id-2", configuration);

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      localVarRequestOptions.data = serializeDataIfNeeded(
        fetchAllMinistryRespUserRequest,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary 查詢事工團職份團員
     * @param {number} [id] id
     * @param {number} [userId] User ID
     * @param {number} [ministryRespId] 事工團職分明細主檔id
     * @param {Array<SortProperty>} [sortProperties] 查詢欄位排序
     * @param {number} [page] 目前頁數
     * @param {number} [size] 每頁筆數
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    findMinistryRespUser: async (
      id?: number,
      userId?: number,
      ministryRespId?: number,
      sortProperties?: Array<SortProperty>,
      page?: number,
      size?: number,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/ministryRespUser`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: "GET", ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication Example-id-1 required
      await setApiKeyToObject(localVarHeaderParameter, "Example-id-1", configuration);

      // authentication JWT_Authorization required
      await setApiKeyToObject(localVarHeaderParameter, "authorization", configuration);

      // authentication example-id-2 required
      await setApiKeyToObject(localVarHeaderParameter, "example-id-2", configuration);

      if (id !== undefined) {
        localVarQueryParameter["id"] = id;
      }

      if (userId !== undefined) {
        localVarQueryParameter["userId"] = userId;
      }

      if (ministryRespId !== undefined) {
        localVarQueryParameter["ministryRespId"] = ministryRespId;
      }

      if (sortProperties) {
        localVarQueryParameter["sortProperties"] = sortProperties;
      }

      if (page !== undefined) {
        localVarQueryParameter["page"] = page;
      }

      if (size !== undefined) {
        localVarQueryParameter["size"] = size;
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary 以 Id 查詢列表
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getMinistryRespUser: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists("getMinistryRespUser", "id", id);
      const localVarPath = `/api/ministryRespUser/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(id)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: "GET", ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication Example-id-1 required
      await setApiKeyToObject(localVarHeaderParameter, "Example-id-1", configuration);

      // authentication JWT_Authorization required
      await setApiKeyToObject(localVarHeaderParameter, "authorization", configuration);

      // authentication example-id-2 required
      await setApiKeyToObject(localVarHeaderParameter, "example-id-2", configuration);

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary 修改事工團職份團員
     * @param {UpdateMinistryRespUserCommand} [updateMinistryRespUserCommand]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    putMinistryRespUser: async (
      updateMinistryRespUserCommand?: UpdateMinistryRespUserCommand,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/ministryRespUser`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: "PUT", ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication Example-id-1 required
      await setApiKeyToObject(localVarHeaderParameter, "Example-id-1", configuration);

      // authentication JWT_Authorization required
      await setApiKeyToObject(localVarHeaderParameter, "authorization", configuration);

      // authentication example-id-2 required
      await setApiKeyToObject(localVarHeaderParameter, "example-id-2", configuration);

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      localVarRequestOptions.data = serializeDataIfNeeded(
        updateMinistryRespUserCommand,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary 查詢列表  (*dynamic sort support)
     * @param {QueryMinistryRespUserRequest} [queryMinistryRespUserRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    queryMinistryRespUsers: async (
      queryMinistryRespUserRequest?: QueryMinistryRespUserRequest,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/ministryRespUser/query`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: "POST", ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication Example-id-1 required
      await setApiKeyToObject(localVarHeaderParameter, "Example-id-1", configuration);

      // authentication JWT_Authorization required
      await setApiKeyToObject(localVarHeaderParameter, "authorization", configuration);

      // authentication example-id-2 required
      await setApiKeyToObject(localVarHeaderParameter, "example-id-2", configuration);

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      localVarRequestOptions.data = serializeDataIfNeeded(
        queryMinistryRespUserRequest,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary 刪除主檔
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    removeMinistryRespUser: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists("removeMinistryRespUser", "id", id);
      const localVarPath = `/api/ministryRespUser/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(id)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: "DELETE", ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication Example-id-1 required
      await setApiKeyToObject(localVarHeaderParameter, "Example-id-1", configuration);

      // authentication JWT_Authorization required
      await setApiKeyToObject(localVarHeaderParameter, "authorization", configuration);

      // authentication example-id-2 required
      await setApiKeyToObject(localVarHeaderParameter, "example-id-2", configuration);

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * MinistryRespUserApi - functional programming interface
 * @export
 */
export const MinistryRespUserApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = MinistryRespUserApiAxiosParamCreator(configuration);
  return {
    /**
     *
     * @summary 建立事工團職份團員
     * @param {CreateMinistryRespUserCommand} [createMinistryRespUserCommand]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async createMinistryRespUser(
      createMinistryRespUserCommand?: CreateMinistryRespUserCommand,
      options?: AxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<MinistryRespUserViewApiResponse>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.createMinistryRespUser(
        createMinistryRespUserCommand,
        options
      );
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     *
     * @summary 刪除事工團職份團員
     * @param {DeleteMinistryRespUserCommand} [deleteMinistryRespUserCommand]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async deleteMinistryRespUser(
      deleteMinistryRespUserCommand?: DeleteMinistryRespUserCommand,
      options?: AxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<MinistryRespUserViewApiResponse>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.deleteMinistryRespUser(
        deleteMinistryRespUserCommand,
        options
      );
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     *
     * @summary 查詢事工團職份團員
     * @param {FetchAllMinistryRespUserRequest} [fetchAllMinistryRespUserRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async fetchMinistryRespUsers(
      fetchAllMinistryRespUserRequest?: FetchAllMinistryRespUserRequest,
      options?: AxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<MinistryRespUserViewListApiResponse>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.fetchMinistryRespUsers(
        fetchAllMinistryRespUserRequest,
        options
      );
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     *
     * @summary 查詢事工團職份團員
     * @param {number} [id] id
     * @param {number} [userId] User ID
     * @param {number} [ministryRespId] 事工團職分明細主檔id
     * @param {Array<SortProperty>} [sortProperties] 查詢欄位排序
     * @param {number} [page] 目前頁數
     * @param {number} [size] 每頁筆數
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async findMinistryRespUser(
      id?: number,
      userId?: number,
      ministryRespId?: number,
      sortProperties?: Array<SortProperty>,
      page?: number,
      size?: number,
      options?: AxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<MinistryRespUserViewPageApiResponse>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.findMinistryRespUser(
        id,
        userId,
        ministryRespId,
        sortProperties,
        page,
        size,
        options
      );
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     *
     * @summary 以 Id 查詢列表
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getMinistryRespUser(
      id: number,
      options?: AxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<MinistryRespUserViewApiResponse>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getMinistryRespUser(id, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     *
     * @summary 修改事工團職份團員
     * @param {UpdateMinistryRespUserCommand} [updateMinistryRespUserCommand]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async putMinistryRespUser(
      updateMinistryRespUserCommand?: UpdateMinistryRespUserCommand,
      options?: AxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<MinistryRespUserViewApiResponse>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.putMinistryRespUser(
        updateMinistryRespUserCommand,
        options
      );
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     *
     * @summary 查詢列表  (*dynamic sort support)
     * @param {QueryMinistryRespUserRequest} [queryMinistryRespUserRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async queryMinistryRespUsers(
      queryMinistryRespUserRequest?: QueryMinistryRespUserRequest,
      options?: AxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<MinistryRespUserViewPageApiResponse>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.queryMinistryRespUsers(
        queryMinistryRespUserRequest,
        options
      );
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     *
     * @summary 刪除主檔
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async removeMinistryRespUser(
      id: number,
      options?: AxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<Int32ApiResponse>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.removeMinistryRespUser(id, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
  };
};

/**
 * MinistryRespUserApi - factory interface
 * @export
 */
export const MinistryRespUserApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance
) {
  const localVarFp = MinistryRespUserApiFp(configuration);
  return {
    /**
     *
     * @summary 建立事工團職份團員
     * @param {CreateMinistryRespUserCommand} [createMinistryRespUserCommand]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createMinistryRespUser(
      createMinistryRespUserCommand?: CreateMinistryRespUserCommand,
      options?: any
    ): Promise<MinistryRespUserViewApiResponse> {
      return localVarFp
        .createMinistryRespUser(createMinistryRespUserCommand, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary 刪除事工團職份團員
     * @param {DeleteMinistryRespUserCommand} [deleteMinistryRespUserCommand]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteMinistryRespUser(
      deleteMinistryRespUserCommand?: DeleteMinistryRespUserCommand,
      options?: any
    ): Promise<MinistryRespUserViewApiResponse> {
      return localVarFp
        .deleteMinistryRespUser(deleteMinistryRespUserCommand, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary 查詢事工團職份團員
     * @param {FetchAllMinistryRespUserRequest} [fetchAllMinistryRespUserRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    fetchMinistryRespUsers(
      fetchAllMinistryRespUserRequest?: FetchAllMinistryRespUserRequest,
      options?: any
    ): Promise<MinistryRespUserViewListApiResponse> {
      return localVarFp
        .fetchMinistryRespUsers(fetchAllMinistryRespUserRequest, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary 查詢事工團職份團員
     * @param {number} [id] id
     * @param {number} [userId] User ID
     * @param {number} [ministryRespId] 事工團職分明細主檔id
     * @param {Array<SortProperty>} [sortProperties] 查詢欄位排序
     * @param {number} [page] 目前頁數
     * @param {number} [size] 每頁筆數
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    findMinistryRespUser(
      id?: number,
      userId?: number,
      ministryRespId?: number,
      sortProperties?: Array<SortProperty>,
      page?: number,
      size?: number,
      options?: any
    ): Promise<MinistryRespUserViewPageApiResponse> {
      return localVarFp
        .findMinistryRespUser(id, userId, ministryRespId, sortProperties, page, size, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary 以 Id 查詢列表
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getMinistryRespUser(id: number, options?: any): Promise<MinistryRespUserViewApiResponse> {
      return localVarFp.getMinistryRespUser(id, options).then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary 修改事工團職份團員
     * @param {UpdateMinistryRespUserCommand} [updateMinistryRespUserCommand]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    putMinistryRespUser(
      updateMinistryRespUserCommand?: UpdateMinistryRespUserCommand,
      options?: any
    ): Promise<MinistryRespUserViewApiResponse> {
      return localVarFp
        .putMinistryRespUser(updateMinistryRespUserCommand, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary 查詢列表  (*dynamic sort support)
     * @param {QueryMinistryRespUserRequest} [queryMinistryRespUserRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    queryMinistryRespUsers(
      queryMinistryRespUserRequest?: QueryMinistryRespUserRequest,
      options?: any
    ): Promise<MinistryRespUserViewPageApiResponse> {
      return localVarFp
        .queryMinistryRespUsers(queryMinistryRespUserRequest, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary 刪除主檔
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    removeMinistryRespUser(id: number, options?: any): Promise<Int32ApiResponse> {
      return localVarFp.removeMinistryRespUser(id, options).then((request) => request(axios, basePath));
    },
  };
};

/**
 * MinistryRespUserApi - interface
 * @export
 * @interface MinistryRespUserApi
 */
export interface MinistryRespUserApiInterface {
  /**
   *
   * @summary 建立事工團職份團員
   * @param {CreateMinistryRespUserCommand} [createMinistryRespUserCommand]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof MinistryRespUserApiInterface
   */
  createMinistryRespUser(
    createMinistryRespUserCommand?: CreateMinistryRespUserCommand,
    options?: AxiosRequestConfig
  ): Promise<MinistryRespUserViewApiResponse>;

  /**
   *
   * @summary 刪除事工團職份團員
   * @param {DeleteMinistryRespUserCommand} [deleteMinistryRespUserCommand]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof MinistryRespUserApiInterface
   */
  deleteMinistryRespUser(
    deleteMinistryRespUserCommand?: DeleteMinistryRespUserCommand,
    options?: AxiosRequestConfig
  ): Promise<MinistryRespUserViewApiResponse>;

  /**
   *
   * @summary 查詢事工團職份團員
   * @param {FetchAllMinistryRespUserRequest} [fetchAllMinistryRespUserRequest]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof MinistryRespUserApiInterface
   */
  fetchMinistryRespUsers(
    fetchAllMinistryRespUserRequest?: FetchAllMinistryRespUserRequest,
    options?: AxiosRequestConfig
  ): Promise<MinistryRespUserViewListApiResponse>;

  /**
   *
   * @summary 查詢事工團職份團員
   * @param {number} [id] id
   * @param {number} [userId] User ID
   * @param {number} [ministryRespId] 事工團職分明細主檔id
   * @param {Array<SortProperty>} [sortProperties] 查詢欄位排序
   * @param {number} [page] 目前頁數
   * @param {number} [size] 每頁筆數
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof MinistryRespUserApiInterface
   */
  findMinistryRespUser(
    id?: number,
    userId?: number,
    ministryRespId?: number,
    sortProperties?: Array<SortProperty>,
    page?: number,
    size?: number,
    options?: AxiosRequestConfig
  ): Promise<MinistryRespUserViewPageApiResponse>;

  /**
   *
   * @summary 以 Id 查詢列表
   * @param {number} id
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof MinistryRespUserApiInterface
   */
  getMinistryRespUser(id: number, options?: AxiosRequestConfig): Promise<MinistryRespUserViewApiResponse>;

  /**
   *
   * @summary 修改事工團職份團員
   * @param {UpdateMinistryRespUserCommand} [updateMinistryRespUserCommand]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof MinistryRespUserApiInterface
   */
  putMinistryRespUser(
    updateMinistryRespUserCommand?: UpdateMinistryRespUserCommand,
    options?: AxiosRequestConfig
  ): Promise<MinistryRespUserViewApiResponse>;

  /**
   *
   * @summary 查詢列表  (*dynamic sort support)
   * @param {QueryMinistryRespUserRequest} [queryMinistryRespUserRequest]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof MinistryRespUserApiInterface
   */
  queryMinistryRespUsers(
    queryMinistryRespUserRequest?: QueryMinistryRespUserRequest,
    options?: AxiosRequestConfig
  ): Promise<MinistryRespUserViewPageApiResponse>;

  /**
   *
   * @summary 刪除主檔
   * @param {number} id
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof MinistryRespUserApiInterface
   */
  removeMinistryRespUser(id: number, options?: AxiosRequestConfig): Promise<Int32ApiResponse>;
}

/**
 * MinistryRespUserApi - object-oriented interface
 * @export
 * @class MinistryRespUserApi
 * @extends {BaseAPI}
 */
export class MinistryRespUserApi extends BaseAPI implements MinistryRespUserApiInterface {
  /**
   *
   * @summary 建立事工團職份團員
   * @param {CreateMinistryRespUserCommand} [createMinistryRespUserCommand]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof MinistryRespUserApi
   */
  public createMinistryRespUser(
    createMinistryRespUserCommand?: CreateMinistryRespUserCommand,
    options?: AxiosRequestConfig
  ) {
    return MinistryRespUserApiFp(this.configuration)
      .createMinistryRespUser(createMinistryRespUserCommand, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary 刪除事工團職份團員
   * @param {DeleteMinistryRespUserCommand} [deleteMinistryRespUserCommand]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof MinistryRespUserApi
   */
  public deleteMinistryRespUser(
    deleteMinistryRespUserCommand?: DeleteMinistryRespUserCommand,
    options?: AxiosRequestConfig
  ) {
    return MinistryRespUserApiFp(this.configuration)
      .deleteMinistryRespUser(deleteMinistryRespUserCommand, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary 查詢事工團職份團員
   * @param {FetchAllMinistryRespUserRequest} [fetchAllMinistryRespUserRequest]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof MinistryRespUserApi
   */
  public fetchMinistryRespUsers(
    fetchAllMinistryRespUserRequest?: FetchAllMinistryRespUserRequest,
    options?: AxiosRequestConfig
  ) {
    return MinistryRespUserApiFp(this.configuration)
      .fetchMinistryRespUsers(fetchAllMinistryRespUserRequest, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary 查詢事工團職份團員
   * @param {number} [id] id
   * @param {number} [userId] User ID
   * @param {number} [ministryRespId] 事工團職分明細主檔id
   * @param {Array<SortProperty>} [sortProperties] 查詢欄位排序
   * @param {number} [page] 目前頁數
   * @param {number} [size] 每頁筆數
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof MinistryRespUserApi
   */
  public findMinistryRespUser(
    id?: number,
    userId?: number,
    ministryRespId?: number,
    sortProperties?: Array<SortProperty>,
    page?: number,
    size?: number,
    options?: AxiosRequestConfig
  ) {
    return MinistryRespUserApiFp(this.configuration)
      .findMinistryRespUser(id, userId, ministryRespId, sortProperties, page, size, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary 以 Id 查詢列表
   * @param {number} id
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof MinistryRespUserApi
   */
  public getMinistryRespUser(id: number, options?: AxiosRequestConfig) {
    return MinistryRespUserApiFp(this.configuration)
      .getMinistryRespUser(id, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary 修改事工團職份團員
   * @param {UpdateMinistryRespUserCommand} [updateMinistryRespUserCommand]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof MinistryRespUserApi
   */
  public putMinistryRespUser(
    updateMinistryRespUserCommand?: UpdateMinistryRespUserCommand,
    options?: AxiosRequestConfig
  ) {
    return MinistryRespUserApiFp(this.configuration)
      .putMinistryRespUser(updateMinistryRespUserCommand, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary 查詢列表  (*dynamic sort support)
   * @param {QueryMinistryRespUserRequest} [queryMinistryRespUserRequest]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof MinistryRespUserApi
   */
  public queryMinistryRespUsers(
    queryMinistryRespUserRequest?: QueryMinistryRespUserRequest,
    options?: AxiosRequestConfig
  ) {
    return MinistryRespUserApiFp(this.configuration)
      .queryMinistryRespUsers(queryMinistryRespUserRequest, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary 刪除主檔
   * @param {number} id
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof MinistryRespUserApi
   */
  public removeMinistryRespUser(id: number, options?: AxiosRequestConfig) {
    return MinistryRespUserApiFp(this.configuration)
      .removeMinistryRespUser(id, options)
      .then((request) => request(this.axios, this.basePath));
  }
}

/**
 * MinistryScheduleApi - axios parameter creator
 * @export
 */
export const MinistryScheduleApiAxiosParamCreator = function (configuration?: Configuration) {
  return {
    /**
     *
     * @summary 建立排程
     * @param {CreateMinistryScheduleCommand} [createMinistryScheduleCommand]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createMinistrySchedule: async (
      createMinistryScheduleCommand?: CreateMinistryScheduleCommand,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/ministrySchedule`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: "POST", ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication Example-id-1 required
      await setApiKeyToObject(localVarHeaderParameter, "Example-id-1", configuration);

      // authentication JWT_Authorization required
      await setApiKeyToObject(localVarHeaderParameter, "authorization", configuration);

      // authentication example-id-2 required
      await setApiKeyToObject(localVarHeaderParameter, "example-id-2", configuration);

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      localVarRequestOptions.data = serializeDataIfNeeded(
        createMinistryScheduleCommand,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary 刪除排程
     * @param {DeleteMinistryScheduleCommand} [deleteMinistryScheduleCommand]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteMinistrySchedule: async (
      deleteMinistryScheduleCommand?: DeleteMinistryScheduleCommand,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/ministrySchedule`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: "DELETE", ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication Example-id-1 required
      await setApiKeyToObject(localVarHeaderParameter, "Example-id-1", configuration);

      // authentication JWT_Authorization required
      await setApiKeyToObject(localVarHeaderParameter, "authorization", configuration);

      // authentication example-id-2 required
      await setApiKeyToObject(localVarHeaderParameter, "example-id-2", configuration);

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      localVarRequestOptions.data = serializeDataIfNeeded(
        deleteMinistryScheduleCommand,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary 查詢排程
     * @param {FetchAllMinistryScheduleRequest} [fetchAllMinistryScheduleRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    fetchMinistrySchedules: async (
      fetchAllMinistryScheduleRequest?: FetchAllMinistryScheduleRequest,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/ministrySchedule/fetch`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: "POST", ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication Example-id-1 required
      await setApiKeyToObject(localVarHeaderParameter, "Example-id-1", configuration);

      // authentication JWT_Authorization required
      await setApiKeyToObject(localVarHeaderParameter, "authorization", configuration);

      // authentication example-id-2 required
      await setApiKeyToObject(localVarHeaderParameter, "example-id-2", configuration);

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      localVarRequestOptions.data = serializeDataIfNeeded(
        fetchAllMinistryScheduleRequest,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary 查詢排程
     * @param {number} [id] Id
     * @param {number} [ministryId] Ministry.Id
     * @param {string} [name] 排程名稱
     * @param {string} [cycleType] 週期類別        對應type&#x3D;CycleType        顯示 name         value存此欄位 0：固定週期 1：非固定週期(偶發類型)
     * @param {string} [repeatTime] 重複間隔
     * @param {string} [repeatTimeUnit] 重複間隔單位        對應type&#x3D;RepeatTimeUnit        顯示 name        value存此欄位 0：日 1：週 2：月 3：年
     * @param {string} [endDateType] 結束時間類別        對應type&#x3D;EndDateType        顯示 name        value存此欄位 0：持續不停 1：於 2：重複
     * @param {string} [endDate] 結束時間日期
     * @param {string} [repeaTimes] 結束時間日期
     * @param {Array<SortProperty>} [sortProperties] 查詢欄位排序
     * @param {number} [page] 目前頁數
     * @param {number} [size] 每頁筆數
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    findMinistrySchedule: async (
      id?: number,
      ministryId?: number,
      name?: string,
      cycleType?: string,
      repeatTime?: string,
      repeatTimeUnit?: string,
      endDateType?: string,
      endDate?: string,
      repeaTimes?: string,
      sortProperties?: Array<SortProperty>,
      page?: number,
      size?: number,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/ministrySchedule`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: "GET", ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication Example-id-1 required
      await setApiKeyToObject(localVarHeaderParameter, "Example-id-1", configuration);

      // authentication JWT_Authorization required
      await setApiKeyToObject(localVarHeaderParameter, "authorization", configuration);

      // authentication example-id-2 required
      await setApiKeyToObject(localVarHeaderParameter, "example-id-2", configuration);

      if (id !== undefined) {
        localVarQueryParameter["id"] = id;
      }

      if (ministryId !== undefined) {
        localVarQueryParameter["ministryId"] = ministryId;
      }

      if (name !== undefined) {
        localVarQueryParameter["name"] = name;
      }

      if (cycleType !== undefined) {
        localVarQueryParameter["cycleType"] = cycleType;
      }

      if (repeatTime !== undefined) {
        localVarQueryParameter["repeatTime"] = repeatTime;
      }

      if (repeatTimeUnit !== undefined) {
        localVarQueryParameter["repeatTimeUnit"] = repeatTimeUnit;
      }

      if (endDateType !== undefined) {
        localVarQueryParameter["endDateType"] = endDateType;
      }

      if (endDate !== undefined) {
        localVarQueryParameter["endDate"] = endDate;
      }

      if (repeaTimes !== undefined) {
        localVarQueryParameter["repeaTimes"] = repeaTimes;
      }

      if (sortProperties) {
        localVarQueryParameter["sortProperties"] = sortProperties;
      }

      if (page !== undefined) {
        localVarQueryParameter["page"] = page;
      }

      if (size !== undefined) {
        localVarQueryParameter["size"] = size;
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary 以 Id 查詢列表
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getMinistrySchedule: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists("getMinistrySchedule", "id", id);
      const localVarPath = `/api/ministrySchedule/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(id)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: "GET", ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication Example-id-1 required
      await setApiKeyToObject(localVarHeaderParameter, "Example-id-1", configuration);

      // authentication JWT_Authorization required
      await setApiKeyToObject(localVarHeaderParameter, "authorization", configuration);

      // authentication example-id-2 required
      await setApiKeyToObject(localVarHeaderParameter, "example-id-2", configuration);

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary 修改排程
     * @param {CreateMinistryScheduleCommand} [createMinistryScheduleCommand]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    putMinistrySchedule: async (
      createMinistryScheduleCommand?: CreateMinistryScheduleCommand,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/ministrySchedule`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: "PUT", ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication Example-id-1 required
      await setApiKeyToObject(localVarHeaderParameter, "Example-id-1", configuration);

      // authentication JWT_Authorization required
      await setApiKeyToObject(localVarHeaderParameter, "authorization", configuration);

      // authentication example-id-2 required
      await setApiKeyToObject(localVarHeaderParameter, "example-id-2", configuration);

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      localVarRequestOptions.data = serializeDataIfNeeded(
        createMinistryScheduleCommand,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary 查詢列表  (*dynamic sort support)
     * @param {QueryMinistryScheduleRequest} [queryMinistryScheduleRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    queryMinistrySchedules: async (
      queryMinistryScheduleRequest?: QueryMinistryScheduleRequest,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/ministrySchedule/query`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: "POST", ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication Example-id-1 required
      await setApiKeyToObject(localVarHeaderParameter, "Example-id-1", configuration);

      // authentication JWT_Authorization required
      await setApiKeyToObject(localVarHeaderParameter, "authorization", configuration);

      // authentication example-id-2 required
      await setApiKeyToObject(localVarHeaderParameter, "example-id-2", configuration);

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      localVarRequestOptions.data = serializeDataIfNeeded(
        queryMinistryScheduleRequest,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary 刪除主檔
     * @param {number} id
     * @param {Array<DeleteMinistryScheduleDetailCommand>} ministryScheduleDetails
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    removeMinistrySchedule: async (
      id: number,
      ministryScheduleDetails: Array<DeleteMinistryScheduleDetailCommand>,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists("removeMinistrySchedule", "id", id);
      // verify required parameter 'ministryScheduleDetails' is not null or undefined
      assertParamExists("removeMinistrySchedule", "ministryScheduleDetails", ministryScheduleDetails);
      const localVarPath = `/api/ministrySchedule/{id}`
        .replace(`{${"id"}}`, encodeURIComponent(String(id)))
        .replace(`{${"ministryScheduleDetails"}}`, encodeURIComponent(String(ministryScheduleDetails)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: "DELETE", ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication Example-id-1 required
      await setApiKeyToObject(localVarHeaderParameter, "Example-id-1", configuration);

      // authentication JWT_Authorization required
      await setApiKeyToObject(localVarHeaderParameter, "authorization", configuration);

      // authentication example-id-2 required
      await setApiKeyToObject(localVarHeaderParameter, "example-id-2", configuration);

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * MinistryScheduleApi - functional programming interface
 * @export
 */
export const MinistryScheduleApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = MinistryScheduleApiAxiosParamCreator(configuration);
  return {
    /**
     *
     * @summary 建立排程
     * @param {CreateMinistryScheduleCommand} [createMinistryScheduleCommand]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async createMinistrySchedule(
      createMinistryScheduleCommand?: CreateMinistryScheduleCommand,
      options?: AxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<MinistryScheduleViewApiResponse>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.createMinistrySchedule(
        createMinistryScheduleCommand,
        options
      );
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     *
     * @summary 刪除排程
     * @param {DeleteMinistryScheduleCommand} [deleteMinistryScheduleCommand]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async deleteMinistrySchedule(
      deleteMinistryScheduleCommand?: DeleteMinistryScheduleCommand,
      options?: AxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<MinistryScheduleViewApiResponse>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.deleteMinistrySchedule(
        deleteMinistryScheduleCommand,
        options
      );
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     *
     * @summary 查詢排程
     * @param {FetchAllMinistryScheduleRequest} [fetchAllMinistryScheduleRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async fetchMinistrySchedules(
      fetchAllMinistryScheduleRequest?: FetchAllMinistryScheduleRequest,
      options?: AxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<MinistryScheduleViewListApiResponse>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.fetchMinistrySchedules(
        fetchAllMinistryScheduleRequest,
        options
      );
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     *
     * @summary 查詢排程
     * @param {number} [id] Id
     * @param {number} [ministryId] Ministry.Id
     * @param {string} [name] 排程名稱
     * @param {string} [cycleType] 週期類別        對應type&#x3D;CycleType        顯示 name         value存此欄位 0：固定週期 1：非固定週期(偶發類型)
     * @param {string} [repeatTime] 重複間隔
     * @param {string} [repeatTimeUnit] 重複間隔單位        對應type&#x3D;RepeatTimeUnit        顯示 name        value存此欄位 0：日 1：週 2：月 3：年
     * @param {string} [endDateType] 結束時間類別        對應type&#x3D;EndDateType        顯示 name        value存此欄位 0：持續不停 1：於 2：重複
     * @param {string} [endDate] 結束時間日期
     * @param {string} [repeaTimes] 結束時間日期
     * @param {Array<SortProperty>} [sortProperties] 查詢欄位排序
     * @param {number} [page] 目前頁數
     * @param {number} [size] 每頁筆數
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async findMinistrySchedule(
      id?: number,
      ministryId?: number,
      name?: string,
      cycleType?: string,
      repeatTime?: string,
      repeatTimeUnit?: string,
      endDateType?: string,
      endDate?: string,
      repeaTimes?: string,
      sortProperties?: Array<SortProperty>,
      page?: number,
      size?: number,
      options?: AxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<MinistryScheduleViewPageApiResponse>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.findMinistrySchedule(
        id,
        ministryId,
        name,
        cycleType,
        repeatTime,
        repeatTimeUnit,
        endDateType,
        endDate,
        repeaTimes,
        sortProperties,
        page,
        size,
        options
      );
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     *
     * @summary 以 Id 查詢列表
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getMinistrySchedule(
      id: number,
      options?: AxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<MinistryScheduleViewApiResponse>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getMinistrySchedule(id, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     *
     * @summary 修改排程
     * @param {CreateMinistryScheduleCommand} [createMinistryScheduleCommand]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async putMinistrySchedule(
      createMinistryScheduleCommand?: CreateMinistryScheduleCommand,
      options?: AxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<MinistryScheduleViewApiResponse>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.putMinistrySchedule(
        createMinistryScheduleCommand,
        options
      );
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     *
     * @summary 查詢列表  (*dynamic sort support)
     * @param {QueryMinistryScheduleRequest} [queryMinistryScheduleRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async queryMinistrySchedules(
      queryMinistryScheduleRequest?: QueryMinistryScheduleRequest,
      options?: AxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<MinistryScheduleViewPageApiResponse>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.queryMinistrySchedules(
        queryMinistryScheduleRequest,
        options
      );
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     *
     * @summary 刪除主檔
     * @param {number} id
     * @param {Array<DeleteMinistryScheduleDetailCommand>} ministryScheduleDetails
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async removeMinistrySchedule(
      id: number,
      ministryScheduleDetails: Array<DeleteMinistryScheduleDetailCommand>,
      options?: AxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<Int32ApiResponse>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.removeMinistrySchedule(
        id,
        ministryScheduleDetails,
        options
      );
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
  };
};

/**
 * MinistryScheduleApi - factory interface
 * @export
 */
export const MinistryScheduleApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance
) {
  const localVarFp = MinistryScheduleApiFp(configuration);
  return {
    /**
     *
     * @summary 建立排程
     * @param {CreateMinistryScheduleCommand} [createMinistryScheduleCommand]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createMinistrySchedule(
      createMinistryScheduleCommand?: CreateMinistryScheduleCommand,
      options?: any
    ): Promise<MinistryScheduleViewApiResponse> {
      return localVarFp
        .createMinistrySchedule(createMinistryScheduleCommand, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary 刪除排程
     * @param {DeleteMinistryScheduleCommand} [deleteMinistryScheduleCommand]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteMinistrySchedule(
      deleteMinistryScheduleCommand?: DeleteMinistryScheduleCommand,
      options?: any
    ): Promise<MinistryScheduleViewApiResponse> {
      return localVarFp
        .deleteMinistrySchedule(deleteMinistryScheduleCommand, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary 查詢排程
     * @param {FetchAllMinistryScheduleRequest} [fetchAllMinistryScheduleRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    fetchMinistrySchedules(
      fetchAllMinistryScheduleRequest?: FetchAllMinistryScheduleRequest,
      options?: any
    ): Promise<MinistryScheduleViewListApiResponse> {
      return localVarFp
        .fetchMinistrySchedules(fetchAllMinistryScheduleRequest, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary 查詢排程
     * @param {number} [id] Id
     * @param {number} [ministryId] Ministry.Id
     * @param {string} [name] 排程名稱
     * @param {string} [cycleType] 週期類別        對應type&#x3D;CycleType        顯示 name         value存此欄位 0：固定週期 1：非固定週期(偶發類型)
     * @param {string} [repeatTime] 重複間隔
     * @param {string} [repeatTimeUnit] 重複間隔單位        對應type&#x3D;RepeatTimeUnit        顯示 name        value存此欄位 0：日 1：週 2：月 3：年
     * @param {string} [endDateType] 結束時間類別        對應type&#x3D;EndDateType        顯示 name        value存此欄位 0：持續不停 1：於 2：重複
     * @param {string} [endDate] 結束時間日期
     * @param {string} [repeaTimes] 結束時間日期
     * @param {Array<SortProperty>} [sortProperties] 查詢欄位排序
     * @param {number} [page] 目前頁數
     * @param {number} [size] 每頁筆數
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    findMinistrySchedule(
      id?: number,
      ministryId?: number,
      name?: string,
      cycleType?: string,
      repeatTime?: string,
      repeatTimeUnit?: string,
      endDateType?: string,
      endDate?: string,
      repeaTimes?: string,
      sortProperties?: Array<SortProperty>,
      page?: number,
      size?: number,
      options?: any
    ): Promise<MinistryScheduleViewPageApiResponse> {
      return localVarFp
        .findMinistrySchedule(
          id,
          ministryId,
          name,
          cycleType,
          repeatTime,
          repeatTimeUnit,
          endDateType,
          endDate,
          repeaTimes,
          sortProperties,
          page,
          size,
          options
        )
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary 以 Id 查詢列表
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getMinistrySchedule(id: number, options?: any): Promise<MinistryScheduleViewApiResponse> {
      return localVarFp.getMinistrySchedule(id, options).then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary 修改排程
     * @param {CreateMinistryScheduleCommand} [createMinistryScheduleCommand]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    putMinistrySchedule(
      createMinistryScheduleCommand?: CreateMinistryScheduleCommand,
      options?: any
    ): Promise<MinistryScheduleViewApiResponse> {
      return localVarFp
        .putMinistrySchedule(createMinistryScheduleCommand, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary 查詢列表  (*dynamic sort support)
     * @param {QueryMinistryScheduleRequest} [queryMinistryScheduleRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    queryMinistrySchedules(
      queryMinistryScheduleRequest?: QueryMinistryScheduleRequest,
      options?: any
    ): Promise<MinistryScheduleViewPageApiResponse> {
      return localVarFp
        .queryMinistrySchedules(queryMinistryScheduleRequest, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary 刪除主檔
     * @param {number} id
     * @param {Array<DeleteMinistryScheduleDetailCommand>} ministryScheduleDetails
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    removeMinistrySchedule(
      id: number,
      ministryScheduleDetails: Array<DeleteMinistryScheduleDetailCommand>,
      options?: any
    ): Promise<Int32ApiResponse> {
      return localVarFp
        .removeMinistrySchedule(id, ministryScheduleDetails, options)
        .then((request) => request(axios, basePath));
    },
  };
};

/**
 * MinistryScheduleApi - interface
 * @export
 * @interface MinistryScheduleApi
 */
export interface MinistryScheduleApiInterface {
  /**
   *
   * @summary 建立排程
   * @param {CreateMinistryScheduleCommand} [createMinistryScheduleCommand]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof MinistryScheduleApiInterface
   */
  createMinistrySchedule(
    createMinistryScheduleCommand?: CreateMinistryScheduleCommand,
    options?: AxiosRequestConfig
  ): Promise<MinistryScheduleViewApiResponse>;

  /**
   *
   * @summary 刪除排程
   * @param {DeleteMinistryScheduleCommand} [deleteMinistryScheduleCommand]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof MinistryScheduleApiInterface
   */
  deleteMinistrySchedule(
    deleteMinistryScheduleCommand?: DeleteMinistryScheduleCommand,
    options?: AxiosRequestConfig
  ): Promise<MinistryScheduleViewApiResponse>;

  /**
   *
   * @summary 查詢排程
   * @param {FetchAllMinistryScheduleRequest} [fetchAllMinistryScheduleRequest]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof MinistryScheduleApiInterface
   */
  fetchMinistrySchedules(
    fetchAllMinistryScheduleRequest?: FetchAllMinistryScheduleRequest,
    options?: AxiosRequestConfig
  ): Promise<MinistryScheduleViewListApiResponse>;

  /**
   *
   * @summary 查詢排程
   * @param {number} [id] Id
   * @param {number} [ministryId] Ministry.Id
   * @param {string} [name] 排程名稱
   * @param {string} [cycleType] 週期類別        對應type&#x3D;CycleType        顯示 name         value存此欄位 0：固定週期 1：非固定週期(偶發類型)
   * @param {string} [repeatTime] 重複間隔
   * @param {string} [repeatTimeUnit] 重複間隔單位        對應type&#x3D;RepeatTimeUnit        顯示 name        value存此欄位 0：日 1：週 2：月 3：年
   * @param {string} [endDateType] 結束時間類別        對應type&#x3D;EndDateType        顯示 name        value存此欄位 0：持續不停 1：於 2：重複
   * @param {string} [endDate] 結束時間日期
   * @param {string} [repeaTimes] 結束時間日期
   * @param {Array<SortProperty>} [sortProperties] 查詢欄位排序
   * @param {number} [page] 目前頁數
   * @param {number} [size] 每頁筆數
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof MinistryScheduleApiInterface
   */
  findMinistrySchedule(
    id?: number,
    ministryId?: number,
    name?: string,
    cycleType?: string,
    repeatTime?: string,
    repeatTimeUnit?: string,
    endDateType?: string,
    endDate?: string,
    repeaTimes?: string,
    sortProperties?: Array<SortProperty>,
    page?: number,
    size?: number,
    options?: AxiosRequestConfig
  ): Promise<MinistryScheduleViewPageApiResponse>;

  /**
   *
   * @summary 以 Id 查詢列表
   * @param {number} id
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof MinistryScheduleApiInterface
   */
  getMinistrySchedule(id: number, options?: AxiosRequestConfig): Promise<MinistryScheduleViewApiResponse>;

  /**
   *
   * @summary 修改排程
   * @param {CreateMinistryScheduleCommand} [createMinistryScheduleCommand]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof MinistryScheduleApiInterface
   */
  putMinistrySchedule(
    createMinistryScheduleCommand?: CreateMinistryScheduleCommand,
    options?: AxiosRequestConfig
  ): Promise<MinistryScheduleViewApiResponse>;

  /**
   *
   * @summary 查詢列表  (*dynamic sort support)
   * @param {QueryMinistryScheduleRequest} [queryMinistryScheduleRequest]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof MinistryScheduleApiInterface
   */
  queryMinistrySchedules(
    queryMinistryScheduleRequest?: QueryMinistryScheduleRequest,
    options?: AxiosRequestConfig
  ): Promise<MinistryScheduleViewPageApiResponse>;

  /**
   *
   * @summary 刪除主檔
   * @param {number} id
   * @param {Array<DeleteMinistryScheduleDetailCommand>} ministryScheduleDetails
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof MinistryScheduleApiInterface
   */
  removeMinistrySchedule(
    id: number,
    ministryScheduleDetails: Array<DeleteMinistryScheduleDetailCommand>,
    options?: AxiosRequestConfig
  ): Promise<Int32ApiResponse>;
}

/**
 * MinistryScheduleApi - object-oriented interface
 * @export
 * @class MinistryScheduleApi
 * @extends {BaseAPI}
 */
export class MinistryScheduleApi extends BaseAPI implements MinistryScheduleApiInterface {
  /**
   *
   * @summary 建立排程
   * @param {CreateMinistryScheduleCommand} [createMinistryScheduleCommand]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof MinistryScheduleApi
   */
  public createMinistrySchedule(
    createMinistryScheduleCommand?: CreateMinistryScheduleCommand,
    options?: AxiosRequestConfig
  ) {
    return MinistryScheduleApiFp(this.configuration)
      .createMinistrySchedule(createMinistryScheduleCommand, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary 刪除排程
   * @param {DeleteMinistryScheduleCommand} [deleteMinistryScheduleCommand]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof MinistryScheduleApi
   */
  public deleteMinistrySchedule(
    deleteMinistryScheduleCommand?: DeleteMinistryScheduleCommand,
    options?: AxiosRequestConfig
  ) {
    return MinistryScheduleApiFp(this.configuration)
      .deleteMinistrySchedule(deleteMinistryScheduleCommand, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary 查詢排程
   * @param {FetchAllMinistryScheduleRequest} [fetchAllMinistryScheduleRequest]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof MinistryScheduleApi
   */
  public fetchMinistrySchedules(
    fetchAllMinistryScheduleRequest?: FetchAllMinistryScheduleRequest,
    options?: AxiosRequestConfig
  ) {
    return MinistryScheduleApiFp(this.configuration)
      .fetchMinistrySchedules(fetchAllMinistryScheduleRequest, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary 查詢排程
   * @param {number} [id] Id
   * @param {number} [ministryId] Ministry.Id
   * @param {string} [name] 排程名稱
   * @param {string} [cycleType] 週期類別        對應type&#x3D;CycleType        顯示 name         value存此欄位 0：固定週期 1：非固定週期(偶發類型)
   * @param {string} [repeatTime] 重複間隔
   * @param {string} [repeatTimeUnit] 重複間隔單位        對應type&#x3D;RepeatTimeUnit        顯示 name        value存此欄位 0：日 1：週 2：月 3：年
   * @param {string} [endDateType] 結束時間類別        對應type&#x3D;EndDateType        顯示 name        value存此欄位 0：持續不停 1：於 2：重複
   * @param {string} [endDate] 結束時間日期
   * @param {string} [repeaTimes] 結束時間日期
   * @param {Array<SortProperty>} [sortProperties] 查詢欄位排序
   * @param {number} [page] 目前頁數
   * @param {number} [size] 每頁筆數
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof MinistryScheduleApi
   */
  public findMinistrySchedule(
    id?: number,
    ministryId?: number,
    name?: string,
    cycleType?: string,
    repeatTime?: string,
    repeatTimeUnit?: string,
    endDateType?: string,
    endDate?: string,
    repeaTimes?: string,
    sortProperties?: Array<SortProperty>,
    page?: number,
    size?: number,
    options?: AxiosRequestConfig
  ) {
    return MinistryScheduleApiFp(this.configuration)
      .findMinistrySchedule(
        id,
        ministryId,
        name,
        cycleType,
        repeatTime,
        repeatTimeUnit,
        endDateType,
        endDate,
        repeaTimes,
        sortProperties,
        page,
        size,
        options
      )
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary 以 Id 查詢列表
   * @param {number} id
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof MinistryScheduleApi
   */
  public getMinistrySchedule(id: number, options?: AxiosRequestConfig) {
    return MinistryScheduleApiFp(this.configuration)
      .getMinistrySchedule(id, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary 修改排程
   * @param {CreateMinistryScheduleCommand} [createMinistryScheduleCommand]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof MinistryScheduleApi
   */
  public putMinistrySchedule(
    createMinistryScheduleCommand?: CreateMinistryScheduleCommand,
    options?: AxiosRequestConfig
  ) {
    return MinistryScheduleApiFp(this.configuration)
      .putMinistrySchedule(createMinistryScheduleCommand, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary 查詢列表  (*dynamic sort support)
   * @param {QueryMinistryScheduleRequest} [queryMinistryScheduleRequest]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof MinistryScheduleApi
   */
  public queryMinistrySchedules(
    queryMinistryScheduleRequest?: QueryMinistryScheduleRequest,
    options?: AxiosRequestConfig
  ) {
    return MinistryScheduleApiFp(this.configuration)
      .queryMinistrySchedules(queryMinistryScheduleRequest, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary 刪除主檔
   * @param {number} id
   * @param {Array<DeleteMinistryScheduleDetailCommand>} ministryScheduleDetails
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof MinistryScheduleApi
   */
  public removeMinistrySchedule(
    id: number,
    ministryScheduleDetails: Array<DeleteMinistryScheduleDetailCommand>,
    options?: AxiosRequestConfig
  ) {
    return MinistryScheduleApiFp(this.configuration)
      .removeMinistrySchedule(id, ministryScheduleDetails, options)
      .then((request) => request(this.axios, this.basePath));
  }
}

/**
 * OrganizationApi - axios parameter creator
 * @export
 */
export const OrganizationApiAxiosParamCreator = function (configuration?: Configuration) {
  return {
    /**
     *
     * @summary 建立教會組織
     * @param {CreateOrganizationCommand} [createOrganizationCommand]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createOrganization: async (
      createOrganizationCommand?: CreateOrganizationCommand,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/organization`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: "POST", ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication Example-id-1 required
      await setApiKeyToObject(localVarHeaderParameter, "Example-id-1", configuration);

      // authentication JWT_Authorization required
      await setApiKeyToObject(localVarHeaderParameter, "authorization", configuration);

      // authentication example-id-2 required
      await setApiKeyToObject(localVarHeaderParameter, "example-id-2", configuration);

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      localVarRequestOptions.data = serializeDataIfNeeded(
        createOrganizationCommand,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary 刪除教會組織
     * @param {DeleteOrganizationCommand} [deleteOrganizationCommand]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteOrganization: async (
      deleteOrganizationCommand?: DeleteOrganizationCommand,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/organization`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: "DELETE", ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication Example-id-1 required
      await setApiKeyToObject(localVarHeaderParameter, "Example-id-1", configuration);

      // authentication JWT_Authorization required
      await setApiKeyToObject(localVarHeaderParameter, "authorization", configuration);

      // authentication example-id-2 required
      await setApiKeyToObject(localVarHeaderParameter, "example-id-2", configuration);

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      localVarRequestOptions.data = serializeDataIfNeeded(
        deleteOrganizationCommand,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary 查詢教會組織
     * @param {FetchAllOrganizationRequest} [fetchAllOrganizationRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    fetchOrganizations: async (
      fetchAllOrganizationRequest?: FetchAllOrganizationRequest,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/organization/fetch`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: "POST", ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication Example-id-1 required
      await setApiKeyToObject(localVarHeaderParameter, "Example-id-1", configuration);

      // authentication JWT_Authorization required
      await setApiKeyToObject(localVarHeaderParameter, "authorization", configuration);

      // authentication example-id-2 required
      await setApiKeyToObject(localVarHeaderParameter, "example-id-2", configuration);

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      localVarRequestOptions.data = serializeDataIfNeeded(
        fetchAllOrganizationRequest,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary 查詢教會組織 By註冊使用 不檢查權限
     * @param {FetchAllOrganizationRequest} [fetchAllOrganizationRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    fetchOrganizations2: async (
      fetchAllOrganizationRequest?: FetchAllOrganizationRequest,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/organization/anonymous/fetch`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: "POST", ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication Example-id-1 required
      await setApiKeyToObject(localVarHeaderParameter, "Example-id-1", configuration);

      // authentication JWT_Authorization required
      await setApiKeyToObject(localVarHeaderParameter, "authorization", configuration);

      // authentication example-id-2 required
      await setApiKeyToObject(localVarHeaderParameter, "example-id-2", configuration);

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      localVarRequestOptions.data = serializeDataIfNeeded(
        fetchAllOrganizationRequest,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary 查詢教會組織
     * @param {number} [id] Id
     * @param {number} [organizationId] 以前欄位Id
     * @param {number} [upperOrganizationId] 上層
     * @param {number} [pastoralId] 舊欄位對應部門id Portal.Id
     * @param {string} [name] 組織名稱
     * @param {string} [pastorName] 主任牧師名稱
     * @param {number} [pastorId] 主任牧師User.Id
     * @param {string} [pastor] 主任牧師身分證
     * @param {string} [pastorphone] 主任牧師電話
     * @param {string} [phone]
     * @param {string} [fax] 教會電話
     * @param {string} [email] 教會傳真
     * @param {string} [site] 教會Email
     * @param {string} [zip] 教會網址
     * @param {string} [address] 教會郵遞區號
     * @param {string} [invoiceIdentifier] 教會地址
     * @param {string} [invoiceTitle] 教會統一編號抬頭
     * @param {string} [isInvoiceTitle] 是否需要發票抬頭        對應SystemConfig        type &#x3D; IsYN顯示 namevalue存此欄位0：N1：Y
     * @param {string} [orgStatus] 組織狀態        對應SystemConfig        type &#x3D;OrgStatus顯示 namevalue存此欄位0：停用 1：正常
     * @param {string} [deptName]
     * @param {number} [deptId] DeptId
     * @param {Array<SortProperty>} [sortProperties] 查詢欄位排序
     * @param {number} [page] 目前頁數
     * @param {number} [size] 每頁筆數
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    findOrganizations: async (
      id?: number,
      organizationId?: number,
      upperOrganizationId?: number,
      pastoralId?: number,
      name?: string,
      pastorName?: string,
      pastorId?: number,
      pastor?: string,
      pastorphone?: string,
      phone?: string,
      fax?: string,
      email?: string,
      site?: string,
      zip?: string,
      address?: string,
      invoiceIdentifier?: string,
      invoiceTitle?: string,
      isInvoiceTitle?: string,
      orgStatus?: string,
      deptName?: string,
      deptId?: number,
      sortProperties?: Array<SortProperty>,
      page?: number,
      size?: number,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/organization`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: "GET", ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication Example-id-1 required
      await setApiKeyToObject(localVarHeaderParameter, "Example-id-1", configuration);

      // authentication JWT_Authorization required
      await setApiKeyToObject(localVarHeaderParameter, "authorization", configuration);

      // authentication example-id-2 required
      await setApiKeyToObject(localVarHeaderParameter, "example-id-2", configuration);

      if (id !== undefined) {
        localVarQueryParameter["id"] = id;
      }

      if (organizationId !== undefined) {
        localVarQueryParameter["organizationId"] = organizationId;
      }

      if (upperOrganizationId !== undefined) {
        localVarQueryParameter["upperOrganizationId"] = upperOrganizationId;
      }

      if (pastoralId !== undefined) {
        localVarQueryParameter["pastoralId"] = pastoralId;
      }

      if (name !== undefined) {
        localVarQueryParameter["name"] = name;
      }

      if (pastorName !== undefined) {
        localVarQueryParameter["pastorName"] = pastorName;
      }

      if (pastorId !== undefined) {
        localVarQueryParameter["pastorId"] = pastorId;
      }

      if (pastor !== undefined) {
        localVarQueryParameter["pastor"] = pastor;
      }

      if (pastorphone !== undefined) {
        localVarQueryParameter["pastorphone"] = pastorphone;
      }

      if (phone !== undefined) {
        localVarQueryParameter["phone"] = phone;
      }

      if (fax !== undefined) {
        localVarQueryParameter["fax"] = fax;
      }

      if (email !== undefined) {
        localVarQueryParameter["email"] = email;
      }

      if (site !== undefined) {
        localVarQueryParameter["site"] = site;
      }

      if (zip !== undefined) {
        localVarQueryParameter["zip"] = zip;
      }

      if (address !== undefined) {
        localVarQueryParameter["address"] = address;
      }

      if (invoiceIdentifier !== undefined) {
        localVarQueryParameter["invoiceIdentifier"] = invoiceIdentifier;
      }

      if (invoiceTitle !== undefined) {
        localVarQueryParameter["invoiceTitle"] = invoiceTitle;
      }

      if (isInvoiceTitle !== undefined) {
        localVarQueryParameter["isInvoiceTitle"] = isInvoiceTitle;
      }

      if (orgStatus !== undefined) {
        localVarQueryParameter["orgStatus"] = orgStatus;
      }

      if (deptName !== undefined) {
        localVarQueryParameter["deptName"] = deptName;
      }

      if (deptId !== undefined) {
        localVarQueryParameter["deptId"] = deptId;
      }

      if (sortProperties) {
        localVarQueryParameter["sortProperties"] = sortProperties;
      }

      if (page !== undefined) {
        localVarQueryParameter["page"] = page;
      }

      if (size !== undefined) {
        localVarQueryParameter["size"] = size;
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary 以 Id 查詢列表
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getOrganization: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists("getOrganization", "id", id);
      const localVarPath = `/api/organization/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(id)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: "GET", ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication Example-id-1 required
      await setApiKeyToObject(localVarHeaderParameter, "Example-id-1", configuration);

      // authentication JWT_Authorization required
      await setApiKeyToObject(localVarHeaderParameter, "authorization", configuration);

      // authentication example-id-2 required
      await setApiKeyToObject(localVarHeaderParameter, "example-id-2", configuration);

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary 修改教會組織
     * @param {UpdateOrganizationCommand} [updateOrganizationCommand]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    putOrganization: async (
      updateOrganizationCommand?: UpdateOrganizationCommand,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/organization`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: "PUT", ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication Example-id-1 required
      await setApiKeyToObject(localVarHeaderParameter, "Example-id-1", configuration);

      // authentication JWT_Authorization required
      await setApiKeyToObject(localVarHeaderParameter, "authorization", configuration);

      // authentication example-id-2 required
      await setApiKeyToObject(localVarHeaderParameter, "example-id-2", configuration);

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      localVarRequestOptions.data = serializeDataIfNeeded(
        updateOrganizationCommand,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary 查詢列表  (*dynamic sort support)
     * @param {QueryOrganizationRequest} [queryOrganizationRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    queryOrganizations: async (
      queryOrganizationRequest?: QueryOrganizationRequest,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/organization/query`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: "POST", ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication Example-id-1 required
      await setApiKeyToObject(localVarHeaderParameter, "Example-id-1", configuration);

      // authentication JWT_Authorization required
      await setApiKeyToObject(localVarHeaderParameter, "authorization", configuration);

      // authentication example-id-2 required
      await setApiKeyToObject(localVarHeaderParameter, "example-id-2", configuration);

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      localVarRequestOptions.data = serializeDataIfNeeded(
        queryOrganizationRequest,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary 刪除主檔
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    removeOrganization: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists("removeOrganization", "id", id);
      const localVarPath = `/api/organization/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(id)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: "DELETE", ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication Example-id-1 required
      await setApiKeyToObject(localVarHeaderParameter, "Example-id-1", configuration);

      // authentication JWT_Authorization required
      await setApiKeyToObject(localVarHeaderParameter, "authorization", configuration);

      // authentication example-id-2 required
      await setApiKeyToObject(localVarHeaderParameter, "example-id-2", configuration);

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * OrganizationApi - functional programming interface
 * @export
 */
export const OrganizationApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = OrganizationApiAxiosParamCreator(configuration);
  return {
    /**
     *
     * @summary 建立教會組織
     * @param {CreateOrganizationCommand} [createOrganizationCommand]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async createOrganization(
      createOrganizationCommand?: CreateOrganizationCommand,
      options?: AxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<OrganizationViewApiResponse>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.createOrganization(createOrganizationCommand, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     *
     * @summary 刪除教會組織
     * @param {DeleteOrganizationCommand} [deleteOrganizationCommand]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async deleteOrganization(
      deleteOrganizationCommand?: DeleteOrganizationCommand,
      options?: AxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<OrganizationViewApiResponse>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.deleteOrganization(deleteOrganizationCommand, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     *
     * @summary 查詢教會組織
     * @param {FetchAllOrganizationRequest} [fetchAllOrganizationRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async fetchOrganizations(
      fetchAllOrganizationRequest?: FetchAllOrganizationRequest,
      options?: AxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<OrganizationViewListApiResponse>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.fetchOrganizations(
        fetchAllOrganizationRequest,
        options
      );
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     *
     * @summary 查詢教會組織 By註冊使用 不檢查權限
     * @param {FetchAllOrganizationRequest} [fetchAllOrganizationRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async fetchOrganizations2(
      fetchAllOrganizationRequest?: FetchAllOrganizationRequest,
      options?: AxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<OrganizationViewListApiResponse>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.fetchOrganizations2(
        fetchAllOrganizationRequest,
        options
      );
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     *
     * @summary 查詢教會組織
     * @param {number} [id] Id
     * @param {number} [organizationId] 以前欄位Id
     * @param {number} [upperOrganizationId] 上層
     * @param {number} [pastoralId] 舊欄位對應部門id Portal.Id
     * @param {string} [name] 組織名稱
     * @param {string} [pastorName] 主任牧師名稱
     * @param {number} [pastorId] 主任牧師User.Id
     * @param {string} [pastor] 主任牧師身分證
     * @param {string} [pastorphone] 主任牧師電話
     * @param {string} [phone]
     * @param {string} [fax] 教會電話
     * @param {string} [email] 教會傳真
     * @param {string} [site] 教會Email
     * @param {string} [zip] 教會網址
     * @param {string} [address] 教會郵遞區號
     * @param {string} [invoiceIdentifier] 教會地址
     * @param {string} [invoiceTitle] 教會統一編號抬頭
     * @param {string} [isInvoiceTitle] 是否需要發票抬頭        對應SystemConfig        type &#x3D; IsYN顯示 namevalue存此欄位0：N1：Y
     * @param {string} [orgStatus] 組織狀態        對應SystemConfig        type &#x3D;OrgStatus顯示 namevalue存此欄位0：停用 1：正常
     * @param {string} [deptName]
     * @param {number} [deptId] DeptId
     * @param {Array<SortProperty>} [sortProperties] 查詢欄位排序
     * @param {number} [page] 目前頁數
     * @param {number} [size] 每頁筆數
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async findOrganizations(
      id?: number,
      organizationId?: number,
      upperOrganizationId?: number,
      pastoralId?: number,
      name?: string,
      pastorName?: string,
      pastorId?: number,
      pastor?: string,
      pastorphone?: string,
      phone?: string,
      fax?: string,
      email?: string,
      site?: string,
      zip?: string,
      address?: string,
      invoiceIdentifier?: string,
      invoiceTitle?: string,
      isInvoiceTitle?: string,
      orgStatus?: string,
      deptName?: string,
      deptId?: number,
      sortProperties?: Array<SortProperty>,
      page?: number,
      size?: number,
      options?: AxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<OrganizationViewPageApiResponse>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.findOrganizations(
        id,
        organizationId,
        upperOrganizationId,
        pastoralId,
        name,
        pastorName,
        pastorId,
        pastor,
        pastorphone,
        phone,
        fax,
        email,
        site,
        zip,
        address,
        invoiceIdentifier,
        invoiceTitle,
        isInvoiceTitle,
        orgStatus,
        deptName,
        deptId,
        sortProperties,
        page,
        size,
        options
      );
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     *
     * @summary 以 Id 查詢列表
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getOrganization(
      id: number,
      options?: AxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<OrganizationViewApiResponse>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getOrganization(id, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     *
     * @summary 修改教會組織
     * @param {UpdateOrganizationCommand} [updateOrganizationCommand]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async putOrganization(
      updateOrganizationCommand?: UpdateOrganizationCommand,
      options?: AxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<OrganizationViewApiResponse>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.putOrganization(updateOrganizationCommand, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     *
     * @summary 查詢列表  (*dynamic sort support)
     * @param {QueryOrganizationRequest} [queryOrganizationRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async queryOrganizations(
      queryOrganizationRequest?: QueryOrganizationRequest,
      options?: AxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<OrganizationViewPageApiResponse>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.queryOrganizations(queryOrganizationRequest, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     *
     * @summary 刪除主檔
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async removeOrganization(
      id: number,
      options?: AxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<Int32ApiResponse>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.removeOrganization(id, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
  };
};

/**
 * OrganizationApi - factory interface
 * @export
 */
export const OrganizationApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance
) {
  const localVarFp = OrganizationApiFp(configuration);
  return {
    /**
     *
     * @summary 建立教會組織
     * @param {CreateOrganizationCommand} [createOrganizationCommand]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createOrganization(
      createOrganizationCommand?: CreateOrganizationCommand,
      options?: any
    ): Promise<OrganizationViewApiResponse> {
      return localVarFp
        .createOrganization(createOrganizationCommand, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary 刪除教會組織
     * @param {DeleteOrganizationCommand} [deleteOrganizationCommand]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteOrganization(
      deleteOrganizationCommand?: DeleteOrganizationCommand,
      options?: any
    ): Promise<OrganizationViewApiResponse> {
      return localVarFp
        .deleteOrganization(deleteOrganizationCommand, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary 查詢教會組織
     * @param {FetchAllOrganizationRequest} [fetchAllOrganizationRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    fetchOrganizations(
      fetchAllOrganizationRequest?: FetchAllOrganizationRequest,
      options?: any
    ): Promise<OrganizationViewListApiResponse> {
      return localVarFp
        .fetchOrganizations(fetchAllOrganizationRequest, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary 查詢教會組織 By註冊使用 不檢查權限
     * @param {FetchAllOrganizationRequest} [fetchAllOrganizationRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    fetchOrganizations2(
      fetchAllOrganizationRequest?: FetchAllOrganizationRequest,
      options?: any
    ): Promise<OrganizationViewListApiResponse> {
      return localVarFp
        .fetchOrganizations2(fetchAllOrganizationRequest, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary 查詢教會組織
     * @param {number} [id] Id
     * @param {number} [organizationId] 以前欄位Id
     * @param {number} [upperOrganizationId] 上層
     * @param {number} [pastoralId] 舊欄位對應部門id Portal.Id
     * @param {string} [name] 組織名稱
     * @param {string} [pastorName] 主任牧師名稱
     * @param {number} [pastorId] 主任牧師User.Id
     * @param {string} [pastor] 主任牧師身分證
     * @param {string} [pastorphone] 主任牧師電話
     * @param {string} [phone]
     * @param {string} [fax] 教會電話
     * @param {string} [email] 教會傳真
     * @param {string} [site] 教會Email
     * @param {string} [zip] 教會網址
     * @param {string} [address] 教會郵遞區號
     * @param {string} [invoiceIdentifier] 教會地址
     * @param {string} [invoiceTitle] 教會統一編號抬頭
     * @param {string} [isInvoiceTitle] 是否需要發票抬頭        對應SystemConfig        type &#x3D; IsYN顯示 namevalue存此欄位0：N1：Y
     * @param {string} [orgStatus] 組織狀態        對應SystemConfig        type &#x3D;OrgStatus顯示 namevalue存此欄位0：停用 1：正常
     * @param {string} [deptName]
     * @param {number} [deptId] DeptId
     * @param {Array<SortProperty>} [sortProperties] 查詢欄位排序
     * @param {number} [page] 目前頁數
     * @param {number} [size] 每頁筆數
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    findOrganizations(
      id?: number,
      organizationId?: number,
      upperOrganizationId?: number,
      pastoralId?: number,
      name?: string,
      pastorName?: string,
      pastorId?: number,
      pastor?: string,
      pastorphone?: string,
      phone?: string,
      fax?: string,
      email?: string,
      site?: string,
      zip?: string,
      address?: string,
      invoiceIdentifier?: string,
      invoiceTitle?: string,
      isInvoiceTitle?: string,
      orgStatus?: string,
      deptName?: string,
      deptId?: number,
      sortProperties?: Array<SortProperty>,
      page?: number,
      size?: number,
      options?: any
    ): Promise<OrganizationViewPageApiResponse> {
      return localVarFp
        .findOrganizations(
          id,
          organizationId,
          upperOrganizationId,
          pastoralId,
          name,
          pastorName,
          pastorId,
          pastor,
          pastorphone,
          phone,
          fax,
          email,
          site,
          zip,
          address,
          invoiceIdentifier,
          invoiceTitle,
          isInvoiceTitle,
          orgStatus,
          deptName,
          deptId,
          sortProperties,
          page,
          size,
          options
        )
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary 以 Id 查詢列表
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getOrganization(id: number, options?: any): Promise<OrganizationViewApiResponse> {
      return localVarFp.getOrganization(id, options).then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary 修改教會組織
     * @param {UpdateOrganizationCommand} [updateOrganizationCommand]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    putOrganization(
      updateOrganizationCommand?: UpdateOrganizationCommand,
      options?: any
    ): Promise<OrganizationViewApiResponse> {
      return localVarFp.putOrganization(updateOrganizationCommand, options).then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary 查詢列表  (*dynamic sort support)
     * @param {QueryOrganizationRequest} [queryOrganizationRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    queryOrganizations(
      queryOrganizationRequest?: QueryOrganizationRequest,
      options?: any
    ): Promise<OrganizationViewPageApiResponse> {
      return localVarFp
        .queryOrganizations(queryOrganizationRequest, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary 刪除主檔
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    removeOrganization(id: number, options?: any): Promise<Int32ApiResponse> {
      return localVarFp.removeOrganization(id, options).then((request) => request(axios, basePath));
    },
  };
};

/**
 * OrganizationApi - interface
 * @export
 * @interface OrganizationApi
 */
export interface OrganizationApiInterface {
  /**
   *
   * @summary 建立教會組織
   * @param {CreateOrganizationCommand} [createOrganizationCommand]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof OrganizationApiInterface
   */
  createOrganization(
    createOrganizationCommand?: CreateOrganizationCommand,
    options?: AxiosRequestConfig
  ): Promise<OrganizationViewApiResponse>;

  /**
   *
   * @summary 刪除教會組織
   * @param {DeleteOrganizationCommand} [deleteOrganizationCommand]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof OrganizationApiInterface
   */
  deleteOrganization(
    deleteOrganizationCommand?: DeleteOrganizationCommand,
    options?: AxiosRequestConfig
  ): Promise<OrganizationViewApiResponse>;

  /**
   *
   * @summary 查詢教會組織
   * @param {FetchAllOrganizationRequest} [fetchAllOrganizationRequest]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof OrganizationApiInterface
   */
  fetchOrganizations(
    fetchAllOrganizationRequest?: FetchAllOrganizationRequest,
    options?: AxiosRequestConfig
  ): Promise<OrganizationViewListApiResponse>;

  /**
   *
   * @summary 查詢教會組織 By註冊使用 不檢查權限
   * @param {FetchAllOrganizationRequest} [fetchAllOrganizationRequest]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof OrganizationApiInterface
   */
  fetchOrganizations2(
    fetchAllOrganizationRequest?: FetchAllOrganizationRequest,
    options?: AxiosRequestConfig
  ): Promise<OrganizationViewListApiResponse>;

  /**
   *
   * @summary 查詢教會組織
   * @param {number} [id] Id
   * @param {number} [organizationId] 以前欄位Id
   * @param {number} [upperOrganizationId] 上層
   * @param {number} [pastoralId] 舊欄位對應部門id Portal.Id
   * @param {string} [name] 組織名稱
   * @param {string} [pastorName] 主任牧師名稱
   * @param {number} [pastorId] 主任牧師User.Id
   * @param {string} [pastor] 主任牧師身分證
   * @param {string} [pastorphone] 主任牧師電話
   * @param {string} [phone]
   * @param {string} [fax] 教會電話
   * @param {string} [email] 教會傳真
   * @param {string} [site] 教會Email
   * @param {string} [zip] 教會網址
   * @param {string} [address] 教會郵遞區號
   * @param {string} [invoiceIdentifier] 教會地址
   * @param {string} [invoiceTitle] 教會統一編號抬頭
   * @param {string} [isInvoiceTitle] 是否需要發票抬頭        對應SystemConfig        type &#x3D; IsYN顯示 namevalue存此欄位0：N1：Y
   * @param {string} [orgStatus] 組織狀態        對應SystemConfig        type &#x3D;OrgStatus顯示 namevalue存此欄位0：停用 1：正常
   * @param {string} [deptName]
   * @param {number} [deptId] DeptId
   * @param {Array<SortProperty>} [sortProperties] 查詢欄位排序
   * @param {number} [page] 目前頁數
   * @param {number} [size] 每頁筆數
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof OrganizationApiInterface
   */
  findOrganizations(
    id?: number,
    organizationId?: number,
    upperOrganizationId?: number,
    pastoralId?: number,
    name?: string,
    pastorName?: string,
    pastorId?: number,
    pastor?: string,
    pastorphone?: string,
    phone?: string,
    fax?: string,
    email?: string,
    site?: string,
    zip?: string,
    address?: string,
    invoiceIdentifier?: string,
    invoiceTitle?: string,
    isInvoiceTitle?: string,
    orgStatus?: string,
    deptName?: string,
    deptId?: number,
    sortProperties?: Array<SortProperty>,
    page?: number,
    size?: number,
    options?: AxiosRequestConfig
  ): Promise<OrganizationViewPageApiResponse>;

  /**
   *
   * @summary 以 Id 查詢列表
   * @param {number} id
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof OrganizationApiInterface
   */
  getOrganization(id: number, options?: AxiosRequestConfig): Promise<OrganizationViewApiResponse>;

  /**
   *
   * @summary 修改教會組織
   * @param {UpdateOrganizationCommand} [updateOrganizationCommand]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof OrganizationApiInterface
   */
  putOrganization(
    updateOrganizationCommand?: UpdateOrganizationCommand,
    options?: AxiosRequestConfig
  ): Promise<OrganizationViewApiResponse>;

  /**
   *
   * @summary 查詢列表  (*dynamic sort support)
   * @param {QueryOrganizationRequest} [queryOrganizationRequest]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof OrganizationApiInterface
   */
  queryOrganizations(
    queryOrganizationRequest?: QueryOrganizationRequest,
    options?: AxiosRequestConfig
  ): Promise<OrganizationViewPageApiResponse>;

  /**
   *
   * @summary 刪除主檔
   * @param {number} id
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof OrganizationApiInterface
   */
  removeOrganization(id: number, options?: AxiosRequestConfig): Promise<Int32ApiResponse>;
}

/**
 * OrganizationApi - object-oriented interface
 * @export
 * @class OrganizationApi
 * @extends {BaseAPI}
 */
export class OrganizationApi extends BaseAPI implements OrganizationApiInterface {
  /**
   *
   * @summary 建立教會組織
   * @param {CreateOrganizationCommand} [createOrganizationCommand]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof OrganizationApi
   */
  public createOrganization(createOrganizationCommand?: CreateOrganizationCommand, options?: AxiosRequestConfig) {
    return OrganizationApiFp(this.configuration)
      .createOrganization(createOrganizationCommand, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary 刪除教會組織
   * @param {DeleteOrganizationCommand} [deleteOrganizationCommand]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof OrganizationApi
   */
  public deleteOrganization(deleteOrganizationCommand?: DeleteOrganizationCommand, options?: AxiosRequestConfig) {
    return OrganizationApiFp(this.configuration)
      .deleteOrganization(deleteOrganizationCommand, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary 查詢教會組織
   * @param {FetchAllOrganizationRequest} [fetchAllOrganizationRequest]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof OrganizationApi
   */
  public fetchOrganizations(fetchAllOrganizationRequest?: FetchAllOrganizationRequest, options?: AxiosRequestConfig) {
    return OrganizationApiFp(this.configuration)
      .fetchOrganizations(fetchAllOrganizationRequest, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary 查詢教會組織 By註冊使用 不檢查權限
   * @param {FetchAllOrganizationRequest} [fetchAllOrganizationRequest]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof OrganizationApi
   */
  public fetchOrganizations2(fetchAllOrganizationRequest?: FetchAllOrganizationRequest, options?: AxiosRequestConfig) {
    return OrganizationApiFp(this.configuration)
      .fetchOrganizations2(fetchAllOrganizationRequest, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary 查詢教會組織
   * @param {number} [id] Id
   * @param {number} [organizationId] 以前欄位Id
   * @param {number} [upperOrganizationId] 上層
   * @param {number} [pastoralId] 舊欄位對應部門id Portal.Id
   * @param {string} [name] 組織名稱
   * @param {string} [pastorName] 主任牧師名稱
   * @param {number} [pastorId] 主任牧師User.Id
   * @param {string} [pastor] 主任牧師身分證
   * @param {string} [pastorphone] 主任牧師電話
   * @param {string} [phone]
   * @param {string} [fax] 教會電話
   * @param {string} [email] 教會傳真
   * @param {string} [site] 教會Email
   * @param {string} [zip] 教會網址
   * @param {string} [address] 教會郵遞區號
   * @param {string} [invoiceIdentifier] 教會地址
   * @param {string} [invoiceTitle] 教會統一編號抬頭
   * @param {string} [isInvoiceTitle] 是否需要發票抬頭        對應SystemConfig        type &#x3D; IsYN顯示 namevalue存此欄位0：N1：Y
   * @param {string} [orgStatus] 組織狀態        對應SystemConfig        type &#x3D;OrgStatus顯示 namevalue存此欄位0：停用 1：正常
   * @param {string} [deptName]
   * @param {number} [deptId] DeptId
   * @param {Array<SortProperty>} [sortProperties] 查詢欄位排序
   * @param {number} [page] 目前頁數
   * @param {number} [size] 每頁筆數
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof OrganizationApi
   */
  public findOrganizations(
    id?: number,
    organizationId?: number,
    upperOrganizationId?: number,
    pastoralId?: number,
    name?: string,
    pastorName?: string,
    pastorId?: number,
    pastor?: string,
    pastorphone?: string,
    phone?: string,
    fax?: string,
    email?: string,
    site?: string,
    zip?: string,
    address?: string,
    invoiceIdentifier?: string,
    invoiceTitle?: string,
    isInvoiceTitle?: string,
    orgStatus?: string,
    deptName?: string,
    deptId?: number,
    sortProperties?: Array<SortProperty>,
    page?: number,
    size?: number,
    options?: AxiosRequestConfig
  ) {
    return OrganizationApiFp(this.configuration)
      .findOrganizations(
        id,
        organizationId,
        upperOrganizationId,
        pastoralId,
        name,
        pastorName,
        pastorId,
        pastor,
        pastorphone,
        phone,
        fax,
        email,
        site,
        zip,
        address,
        invoiceIdentifier,
        invoiceTitle,
        isInvoiceTitle,
        orgStatus,
        deptName,
        deptId,
        sortProperties,
        page,
        size,
        options
      )
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary 以 Id 查詢列表
   * @param {number} id
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof OrganizationApi
   */
  public getOrganization(id: number, options?: AxiosRequestConfig) {
    return OrganizationApiFp(this.configuration)
      .getOrganization(id, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary 修改教會組織
   * @param {UpdateOrganizationCommand} [updateOrganizationCommand]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof OrganizationApi
   */
  public putOrganization(updateOrganizationCommand?: UpdateOrganizationCommand, options?: AxiosRequestConfig) {
    return OrganizationApiFp(this.configuration)
      .putOrganization(updateOrganizationCommand, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary 查詢列表  (*dynamic sort support)
   * @param {QueryOrganizationRequest} [queryOrganizationRequest]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof OrganizationApi
   */
  public queryOrganizations(queryOrganizationRequest?: QueryOrganizationRequest, options?: AxiosRequestConfig) {
    return OrganizationApiFp(this.configuration)
      .queryOrganizations(queryOrganizationRequest, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary 刪除主檔
   * @param {number} id
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof OrganizationApi
   */
  public removeOrganization(id: number, options?: AxiosRequestConfig) {
    return OrganizationApiFp(this.configuration)
      .removeOrganization(id, options)
      .then((request) => request(this.axios, this.basePath));
  }
}

/**
 * PastoralApi - axios parameter creator
 * @export
 */
export const PastoralApiAxiosParamCreator = function (configuration?: Configuration) {
  return {
    /**
     *
     * @summary 建立部門
     * @param {CreatePastoralCommand} [createPastoralCommand]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createPastoral: async (
      createPastoralCommand?: CreatePastoralCommand,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/pastoral`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: "POST", ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication Example-id-1 required
      await setApiKeyToObject(localVarHeaderParameter, "Example-id-1", configuration);

      // authentication JWT_Authorization required
      await setApiKeyToObject(localVarHeaderParameter, "authorization", configuration);

      // authentication example-id-2 required
      await setApiKeyToObject(localVarHeaderParameter, "example-id-2", configuration);

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      localVarRequestOptions.data = serializeDataIfNeeded(createPastoralCommand, localVarRequestOptions, configuration);

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary 刪除部門
     * @param {DeletePastoralCommand} [deletePastoralCommand]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deletePastoral: async (
      deletePastoralCommand?: DeletePastoralCommand,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/pastoral`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: "DELETE", ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication Example-id-1 required
      await setApiKeyToObject(localVarHeaderParameter, "Example-id-1", configuration);

      // authentication JWT_Authorization required
      await setApiKeyToObject(localVarHeaderParameter, "authorization", configuration);

      // authentication example-id-2 required
      await setApiKeyToObject(localVarHeaderParameter, "example-id-2", configuration);

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      localVarRequestOptions.data = serializeDataIfNeeded(deletePastoralCommand, localVarRequestOptions, configuration);

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary 查詢 for Flat
     * @param {FetchPastoralFlatRequest} [fetchPastoralFlatRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    fetchPastoralFlat: async (
      fetchPastoralFlatRequest?: FetchPastoralFlatRequest,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/pastoral/flat/fetch`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: "POST", ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication Example-id-1 required
      await setApiKeyToObject(localVarHeaderParameter, "Example-id-1", configuration);

      // authentication JWT_Authorization required
      await setApiKeyToObject(localVarHeaderParameter, "authorization", configuration);

      // authentication example-id-2 required
      await setApiKeyToObject(localVarHeaderParameter, "example-id-2", configuration);

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      localVarRequestOptions.data = serializeDataIfNeeded(
        fetchPastoralFlatRequest,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary 查詢部門
     * @param {FetchAllPastoralRequest} [fetchAllPastoralRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    fetchPastorals: async (
      fetchAllPastoralRequest?: FetchAllPastoralRequest,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/pastoral/fetch`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: "POST", ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication Example-id-1 required
      await setApiKeyToObject(localVarHeaderParameter, "Example-id-1", configuration);

      // authentication JWT_Authorization required
      await setApiKeyToObject(localVarHeaderParameter, "authorization", configuration);

      // authentication example-id-2 required
      await setApiKeyToObject(localVarHeaderParameter, "example-id-2", configuration);

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      localVarRequestOptions.data = serializeDataIfNeeded(
        fetchAllPastoralRequest,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary 查詢部門
     * @param {number} [id] id
     * @param {number} [upperPastoralId] 組織上層Id (分多階層)        堂點       牧區 督區 區 小組
     * @param {string} [name] 分組區域名稱
     * @param {string} [title] 分組區域職稱
     * @param {string} [groupNo] 小組編號//八碼數字 系統自動產生(為小組時才需填入)
     * @param {number} [leaderId] 領導人 UserId
     * @param {string} [leaderIdnumber] 領導人身分證
     * @param {number} [leader2Id] 領導人2 UserId
     * @param {string} [leader2Idnumber] 領導人2身分證
     * @param {number} [leader3Id] 領導人3 UserId
     * @param {string} [leader3Idnumber] 領導人3身分證
     * @param {number} [supervisorId] 最大權限人UserId
     * @param {number} [upperOrganizationId]
     * @param {number} [orgId]
     * @param {number} [typeId]
     * @param {Array<SortProperty>} [sortProperties] 查詢欄位排序
     * @param {number} [page] 目前頁數
     * @param {number} [size] 每頁筆數
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    findPastoral: async (
      id?: number,
      upperPastoralId?: number,
      name?: string,
      title?: string,
      groupNo?: string,
      leaderId?: number,
      leaderIdnumber?: string,
      leader2Id?: number,
      leader2Idnumber?: string,
      leader3Id?: number,
      leader3Idnumber?: string,
      supervisorId?: number,
      upperOrganizationId?: number,
      orgId?: number,
      typeId?: number,
      sortProperties?: Array<SortProperty>,
      page?: number,
      size?: number,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/pastoral`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: "GET", ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication Example-id-1 required
      await setApiKeyToObject(localVarHeaderParameter, "Example-id-1", configuration);

      // authentication JWT_Authorization required
      await setApiKeyToObject(localVarHeaderParameter, "authorization", configuration);

      // authentication example-id-2 required
      await setApiKeyToObject(localVarHeaderParameter, "example-id-2", configuration);

      if (id !== undefined) {
        localVarQueryParameter["id"] = id;
      }

      if (upperPastoralId !== undefined) {
        localVarQueryParameter["upperPastoralId"] = upperPastoralId;
      }

      if (name !== undefined) {
        localVarQueryParameter["name"] = name;
      }

      if (title !== undefined) {
        localVarQueryParameter["title"] = title;
      }

      if (groupNo !== undefined) {
        localVarQueryParameter["groupNo"] = groupNo;
      }

      if (leaderId !== undefined) {
        localVarQueryParameter["leaderId"] = leaderId;
      }

      if (leaderIdnumber !== undefined) {
        localVarQueryParameter["leaderIdnumber"] = leaderIdnumber;
      }

      if (leader2Id !== undefined) {
        localVarQueryParameter["leader2Id"] = leader2Id;
      }

      if (leader2Idnumber !== undefined) {
        localVarQueryParameter["leader2Idnumber"] = leader2Idnumber;
      }

      if (leader3Id !== undefined) {
        localVarQueryParameter["leader3Id"] = leader3Id;
      }

      if (leader3Idnumber !== undefined) {
        localVarQueryParameter["leader3Idnumber"] = leader3Idnumber;
      }

      if (supervisorId !== undefined) {
        localVarQueryParameter["supervisorId"] = supervisorId;
      }

      if (upperOrganizationId !== undefined) {
        localVarQueryParameter["upperOrganizationId"] = upperOrganizationId;
      }

      if (orgId !== undefined) {
        localVarQueryParameter["orgId"] = orgId;
      }

      if (typeId !== undefined) {
        localVarQueryParameter["typeId"] = typeId;
      }

      if (sortProperties) {
        localVarQueryParameter["sortProperties"] = sortProperties;
      }

      if (page !== undefined) {
        localVarQueryParameter["page"] = page;
      }

      if (size !== undefined) {
        localVarQueryParameter["size"] = size;
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary 修改部門
     * @param {UpdatePastoralCommand} [updatePastoralCommand]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    putPastoral: async (
      updatePastoralCommand?: UpdatePastoralCommand,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/pastoral`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: "PUT", ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication Example-id-1 required
      await setApiKeyToObject(localVarHeaderParameter, "Example-id-1", configuration);

      // authentication JWT_Authorization required
      await setApiKeyToObject(localVarHeaderParameter, "authorization", configuration);

      // authentication example-id-2 required
      await setApiKeyToObject(localVarHeaderParameter, "example-id-2", configuration);

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      localVarRequestOptions.data = serializeDataIfNeeded(updatePastoralCommand, localVarRequestOptions, configuration);

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary 查詢Tree
     * @param {QueryPastoralTreeRequest} [queryPastoralTreeRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    queryPastoralTree: async (
      queryPastoralTreeRequest?: QueryPastoralTreeRequest,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/pastoral/tree/fetch`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: "POST", ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication Example-id-1 required
      await setApiKeyToObject(localVarHeaderParameter, "Example-id-1", configuration);

      // authentication JWT_Authorization required
      await setApiKeyToObject(localVarHeaderParameter, "authorization", configuration);

      // authentication example-id-2 required
      await setApiKeyToObject(localVarHeaderParameter, "example-id-2", configuration);

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      localVarRequestOptions.data = serializeDataIfNeeded(
        queryPastoralTreeRequest,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary 查詢列表  (*dynamic sort support)
     * @param {QueryPastoralRequest} [queryPastoralRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    queryPastorals: async (
      queryPastoralRequest?: QueryPastoralRequest,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/pastoral/query`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: "POST", ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication Example-id-1 required
      await setApiKeyToObject(localVarHeaderParameter, "Example-id-1", configuration);

      // authentication JWT_Authorization required
      await setApiKeyToObject(localVarHeaderParameter, "authorization", configuration);

      // authentication example-id-2 required
      await setApiKeyToObject(localVarHeaderParameter, "example-id-2", configuration);

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      localVarRequestOptions.data = serializeDataIfNeeded(queryPastoralRequest, localVarRequestOptions, configuration);

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary 刪除主檔
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    removePastoral: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists("removePastoral", "id", id);
      const localVarPath = `/api/pastoral/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(id)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: "DELETE", ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication Example-id-1 required
      await setApiKeyToObject(localVarHeaderParameter, "Example-id-1", configuration);

      // authentication JWT_Authorization required
      await setApiKeyToObject(localVarHeaderParameter, "authorization", configuration);

      // authentication example-id-2 required
      await setApiKeyToObject(localVarHeaderParameter, "example-id-2", configuration);

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * PastoralApi - functional programming interface
 * @export
 */
export const PastoralApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = PastoralApiAxiosParamCreator(configuration);
  return {
    /**
     *
     * @summary 建立部門
     * @param {CreatePastoralCommand} [createPastoralCommand]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async createPastoral(
      createPastoralCommand?: CreatePastoralCommand,
      options?: AxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<PastoralViewApiResponse>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.createPastoral(createPastoralCommand, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     *
     * @summary 刪除部門
     * @param {DeletePastoralCommand} [deletePastoralCommand]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async deletePastoral(
      deletePastoralCommand?: DeletePastoralCommand,
      options?: AxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<PastoralViewApiResponse>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.deletePastoral(deletePastoralCommand, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     *
     * @summary 查詢 for Flat
     * @param {FetchPastoralFlatRequest} [fetchPastoralFlatRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async fetchPastoralFlat(
      fetchPastoralFlatRequest?: FetchPastoralFlatRequest,
      options?: AxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<PastoralViewListApiResponse>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.fetchPastoralFlat(fetchPastoralFlatRequest, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     *
     * @summary 查詢部門
     * @param {FetchAllPastoralRequest} [fetchAllPastoralRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async fetchPastorals(
      fetchAllPastoralRequest?: FetchAllPastoralRequest,
      options?: AxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<PastoralViewListApiResponse>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.fetchPastorals(fetchAllPastoralRequest, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     *
     * @summary 查詢部門
     * @param {number} [id] id
     * @param {number} [upperPastoralId] 組織上層Id (分多階層)        堂點       牧區 督區 區 小組
     * @param {string} [name] 分組區域名稱
     * @param {string} [title] 分組區域職稱
     * @param {string} [groupNo] 小組編號//八碼數字 系統自動產生(為小組時才需填入)
     * @param {number} [leaderId] 領導人 UserId
     * @param {string} [leaderIdnumber] 領導人身分證
     * @param {number} [leader2Id] 領導人2 UserId
     * @param {string} [leader2Idnumber] 領導人2身分證
     * @param {number} [leader3Id] 領導人3 UserId
     * @param {string} [leader3Idnumber] 領導人3身分證
     * @param {number} [supervisorId] 最大權限人UserId
     * @param {number} [upperOrganizationId]
     * @param {number} [orgId]
     * @param {number} [typeId]
     * @param {Array<SortProperty>} [sortProperties] 查詢欄位排序
     * @param {number} [page] 目前頁數
     * @param {number} [size] 每頁筆數
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async findPastoral(
      id?: number,
      upperPastoralId?: number,
      name?: string,
      title?: string,
      groupNo?: string,
      leaderId?: number,
      leaderIdnumber?: string,
      leader2Id?: number,
      leader2Idnumber?: string,
      leader3Id?: number,
      leader3Idnumber?: string,
      supervisorId?: number,
      upperOrganizationId?: number,
      orgId?: number,
      typeId?: number,
      sortProperties?: Array<SortProperty>,
      page?: number,
      size?: number,
      options?: AxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<PastoralViewPageApiResponse>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.findPastoral(
        id,
        upperPastoralId,
        name,
        title,
        groupNo,
        leaderId,
        leaderIdnumber,
        leader2Id,
        leader2Idnumber,
        leader3Id,
        leader3Idnumber,
        supervisorId,
        upperOrganizationId,
        orgId,
        typeId,
        sortProperties,
        page,
        size,
        options
      );
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     *
     * @summary 修改部門
     * @param {UpdatePastoralCommand} [updatePastoralCommand]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async putPastoral(
      updatePastoralCommand?: UpdatePastoralCommand,
      options?: AxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<PastoralViewApiResponse>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.putPastoral(updatePastoralCommand, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     *
     * @summary 查詢Tree
     * @param {QueryPastoralTreeRequest} [queryPastoralTreeRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async queryPastoralTree(
      queryPastoralTreeRequest?: QueryPastoralTreeRequest,
      options?: AxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<PastoralTreeViewApiResponse>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.queryPastoralTree(queryPastoralTreeRequest, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     *
     * @summary 查詢列表  (*dynamic sort support)
     * @param {QueryPastoralRequest} [queryPastoralRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async queryPastorals(
      queryPastoralRequest?: QueryPastoralRequest,
      options?: AxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<PastoralViewPageApiResponse>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.queryPastorals(queryPastoralRequest, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     *
     * @summary 刪除主檔
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async removePastoral(
      id: number,
      options?: AxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<Int32ApiResponse>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.removePastoral(id, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
  };
};

/**
 * PastoralApi - factory interface
 * @export
 */
export const PastoralApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
  const localVarFp = PastoralApiFp(configuration);
  return {
    /**
     *
     * @summary 建立部門
     * @param {CreatePastoralCommand} [createPastoralCommand]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createPastoral(createPastoralCommand?: CreatePastoralCommand, options?: any): Promise<PastoralViewApiResponse> {
      return localVarFp.createPastoral(createPastoralCommand, options).then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary 刪除部門
     * @param {DeletePastoralCommand} [deletePastoralCommand]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deletePastoral(deletePastoralCommand?: DeletePastoralCommand, options?: any): Promise<PastoralViewApiResponse> {
      return localVarFp.deletePastoral(deletePastoralCommand, options).then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary 查詢 for Flat
     * @param {FetchPastoralFlatRequest} [fetchPastoralFlatRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    fetchPastoralFlat(
      fetchPastoralFlatRequest?: FetchPastoralFlatRequest,
      options?: any
    ): Promise<PastoralViewListApiResponse> {
      return localVarFp
        .fetchPastoralFlat(fetchPastoralFlatRequest, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary 查詢部門
     * @param {FetchAllPastoralRequest} [fetchAllPastoralRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    fetchPastorals(
      fetchAllPastoralRequest?: FetchAllPastoralRequest,
      options?: any
    ): Promise<PastoralViewListApiResponse> {
      return localVarFp.fetchPastorals(fetchAllPastoralRequest, options).then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary 查詢部門
     * @param {number} [id] id
     * @param {number} [upperPastoralId] 組織上層Id (分多階層)        堂點       牧區 督區 區 小組
     * @param {string} [name] 分組區域名稱
     * @param {string} [title] 分組區域職稱
     * @param {string} [groupNo] 小組編號//八碼數字 系統自動產生(為小組時才需填入)
     * @param {number} [leaderId] 領導人 UserId
     * @param {string} [leaderIdnumber] 領導人身分證
     * @param {number} [leader2Id] 領導人2 UserId
     * @param {string} [leader2Idnumber] 領導人2身分證
     * @param {number} [leader3Id] 領導人3 UserId
     * @param {string} [leader3Idnumber] 領導人3身分證
     * @param {number} [supervisorId] 最大權限人UserId
     * @param {number} [upperOrganizationId]
     * @param {number} [orgId]
     * @param {number} [typeId]
     * @param {Array<SortProperty>} [sortProperties] 查詢欄位排序
     * @param {number} [page] 目前頁數
     * @param {number} [size] 每頁筆數
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    findPastoral(
      id?: number,
      upperPastoralId?: number,
      name?: string,
      title?: string,
      groupNo?: string,
      leaderId?: number,
      leaderIdnumber?: string,
      leader2Id?: number,
      leader2Idnumber?: string,
      leader3Id?: number,
      leader3Idnumber?: string,
      supervisorId?: number,
      upperOrganizationId?: number,
      orgId?: number,
      typeId?: number,
      sortProperties?: Array<SortProperty>,
      page?: number,
      size?: number,
      options?: any
    ): Promise<PastoralViewPageApiResponse> {
      return localVarFp
        .findPastoral(
          id,
          upperPastoralId,
          name,
          title,
          groupNo,
          leaderId,
          leaderIdnumber,
          leader2Id,
          leader2Idnumber,
          leader3Id,
          leader3Idnumber,
          supervisorId,
          upperOrganizationId,
          orgId,
          typeId,
          sortProperties,
          page,
          size,
          options
        )
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary 修改部門
     * @param {UpdatePastoralCommand} [updatePastoralCommand]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    putPastoral(updatePastoralCommand?: UpdatePastoralCommand, options?: any): Promise<PastoralViewApiResponse> {
      return localVarFp.putPastoral(updatePastoralCommand, options).then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary 查詢Tree
     * @param {QueryPastoralTreeRequest} [queryPastoralTreeRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    queryPastoralTree(
      queryPastoralTreeRequest?: QueryPastoralTreeRequest,
      options?: any
    ): Promise<PastoralTreeViewApiResponse> {
      return localVarFp
        .queryPastoralTree(queryPastoralTreeRequest, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary 查詢列表  (*dynamic sort support)
     * @param {QueryPastoralRequest} [queryPastoralRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    queryPastorals(queryPastoralRequest?: QueryPastoralRequest, options?: any): Promise<PastoralViewPageApiResponse> {
      return localVarFp.queryPastorals(queryPastoralRequest, options).then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary 刪除主檔
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    removePastoral(id: number, options?: any): Promise<Int32ApiResponse> {
      return localVarFp.removePastoral(id, options).then((request) => request(axios, basePath));
    },
  };
};

/**
 * PastoralApi - interface
 * @export
 * @interface PastoralApi
 */
export interface PastoralApiInterface {
  /**
   *
   * @summary 建立部門
   * @param {CreatePastoralCommand} [createPastoralCommand]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof PastoralApiInterface
   */
  createPastoral(
    createPastoralCommand?: CreatePastoralCommand,
    options?: AxiosRequestConfig
  ): Promise<PastoralViewApiResponse>;

  /**
   *
   * @summary 刪除部門
   * @param {DeletePastoralCommand} [deletePastoralCommand]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof PastoralApiInterface
   */
  deletePastoral(
    deletePastoralCommand?: DeletePastoralCommand,
    options?: AxiosRequestConfig
  ): Promise<PastoralViewApiResponse>;

  /**
   *
   * @summary 查詢 for Flat
   * @param {FetchPastoralFlatRequest} [fetchPastoralFlatRequest]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof PastoralApiInterface
   */
  fetchPastoralFlat(
    fetchPastoralFlatRequest?: FetchPastoralFlatRequest,
    options?: AxiosRequestConfig
  ): Promise<PastoralViewListApiResponse>;

  /**
   *
   * @summary 查詢部門
   * @param {FetchAllPastoralRequest} [fetchAllPastoralRequest]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof PastoralApiInterface
   */
  fetchPastorals(
    fetchAllPastoralRequest?: FetchAllPastoralRequest,
    options?: AxiosRequestConfig
  ): Promise<PastoralViewListApiResponse>;

  /**
   *
   * @summary 查詢部門
   * @param {number} [id] id
   * @param {number} [upperPastoralId] 組織上層Id (分多階層)        堂點       牧區 督區 區 小組
   * @param {string} [name] 分組區域名稱
   * @param {string} [title] 分組區域職稱
   * @param {string} [groupNo] 小組編號//八碼數字 系統自動產生(為小組時才需填入)
   * @param {number} [leaderId] 領導人 UserId
   * @param {string} [leaderIdnumber] 領導人身分證
   * @param {number} [leader2Id] 領導人2 UserId
   * @param {string} [leader2Idnumber] 領導人2身分證
   * @param {number} [leader3Id] 領導人3 UserId
   * @param {string} [leader3Idnumber] 領導人3身分證
   * @param {number} [supervisorId] 最大權限人UserId
   * @param {number} [upperOrganizationId]
   * @param {number} [orgId]
   * @param {number} [typeId]
   * @param {Array<SortProperty>} [sortProperties] 查詢欄位排序
   * @param {number} [page] 目前頁數
   * @param {number} [size] 每頁筆數
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof PastoralApiInterface
   */
  findPastoral(
    id?: number,
    upperPastoralId?: number,
    name?: string,
    title?: string,
    groupNo?: string,
    leaderId?: number,
    leaderIdnumber?: string,
    leader2Id?: number,
    leader2Idnumber?: string,
    leader3Id?: number,
    leader3Idnumber?: string,
    supervisorId?: number,
    upperOrganizationId?: number,
    orgId?: number,
    typeId?: number,
    sortProperties?: Array<SortProperty>,
    page?: number,
    size?: number,
    options?: AxiosRequestConfig
  ): Promise<PastoralViewPageApiResponse>;

  /**
   *
   * @summary 修改部門
   * @param {UpdatePastoralCommand} [updatePastoralCommand]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof PastoralApiInterface
   */
  putPastoral(
    updatePastoralCommand?: UpdatePastoralCommand,
    options?: AxiosRequestConfig
  ): Promise<PastoralViewApiResponse>;

  /**
   *
   * @summary 查詢Tree
   * @param {QueryPastoralTreeRequest} [queryPastoralTreeRequest]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof PastoralApiInterface
   */
  queryPastoralTree(
    queryPastoralTreeRequest?: QueryPastoralTreeRequest,
    options?: AxiosRequestConfig
  ): Promise<PastoralTreeViewApiResponse>;

  /**
   *
   * @summary 查詢列表  (*dynamic sort support)
   * @param {QueryPastoralRequest} [queryPastoralRequest]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof PastoralApiInterface
   */
  queryPastorals(
    queryPastoralRequest?: QueryPastoralRequest,
    options?: AxiosRequestConfig
  ): Promise<PastoralViewPageApiResponse>;

  /**
   *
   * @summary 刪除主檔
   * @param {number} id
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof PastoralApiInterface
   */
  removePastoral(id: number, options?: AxiosRequestConfig): Promise<Int32ApiResponse>;
}

/**
 * PastoralApi - object-oriented interface
 * @export
 * @class PastoralApi
 * @extends {BaseAPI}
 */
export class PastoralApi extends BaseAPI implements PastoralApiInterface {
  /**
   *
   * @summary 建立部門
   * @param {CreatePastoralCommand} [createPastoralCommand]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof PastoralApi
   */
  public createPastoral(createPastoralCommand?: CreatePastoralCommand, options?: AxiosRequestConfig) {
    return PastoralApiFp(this.configuration)
      .createPastoral(createPastoralCommand, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary 刪除部門
   * @param {DeletePastoralCommand} [deletePastoralCommand]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof PastoralApi
   */
  public deletePastoral(deletePastoralCommand?: DeletePastoralCommand, options?: AxiosRequestConfig) {
    return PastoralApiFp(this.configuration)
      .deletePastoral(deletePastoralCommand, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary 查詢 for Flat
   * @param {FetchPastoralFlatRequest} [fetchPastoralFlatRequest]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof PastoralApi
   */
  public fetchPastoralFlat(fetchPastoralFlatRequest?: FetchPastoralFlatRequest, options?: AxiosRequestConfig) {
    return PastoralApiFp(this.configuration)
      .fetchPastoralFlat(fetchPastoralFlatRequest, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary 查詢部門
   * @param {FetchAllPastoralRequest} [fetchAllPastoralRequest]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof PastoralApi
   */
  public fetchPastorals(fetchAllPastoralRequest?: FetchAllPastoralRequest, options?: AxiosRequestConfig) {
    return PastoralApiFp(this.configuration)
      .fetchPastorals(fetchAllPastoralRequest, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary 查詢部門
   * @param {number} [id] id
   * @param {number} [upperPastoralId] 組織上層Id (分多階層)        堂點       牧區 督區 區 小組
   * @param {string} [name] 分組區域名稱
   * @param {string} [title] 分組區域職稱
   * @param {string} [groupNo] 小組編號//八碼數字 系統自動產生(為小組時才需填入)
   * @param {number} [leaderId] 領導人 UserId
   * @param {string} [leaderIdnumber] 領導人身分證
   * @param {number} [leader2Id] 領導人2 UserId
   * @param {string} [leader2Idnumber] 領導人2身分證
   * @param {number} [leader3Id] 領導人3 UserId
   * @param {string} [leader3Idnumber] 領導人3身分證
   * @param {number} [supervisorId] 最大權限人UserId
   * @param {number} [upperOrganizationId]
   * @param {number} [orgId]
   * @param {number} [typeId]
   * @param {Array<SortProperty>} [sortProperties] 查詢欄位排序
   * @param {number} [page] 目前頁數
   * @param {number} [size] 每頁筆數
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof PastoralApi
   */
  public findPastoral(
    id?: number,
    upperPastoralId?: number,
    name?: string,
    title?: string,
    groupNo?: string,
    leaderId?: number,
    leaderIdnumber?: string,
    leader2Id?: number,
    leader2Idnumber?: string,
    leader3Id?: number,
    leader3Idnumber?: string,
    supervisorId?: number,
    upperOrganizationId?: number,
    orgId?: number,
    typeId?: number,
    sortProperties?: Array<SortProperty>,
    page?: number,
    size?: number,
    options?: AxiosRequestConfig
  ) {
    return PastoralApiFp(this.configuration)
      .findPastoral(
        id,
        upperPastoralId,
        name,
        title,
        groupNo,
        leaderId,
        leaderIdnumber,
        leader2Id,
        leader2Idnumber,
        leader3Id,
        leader3Idnumber,
        supervisorId,
        upperOrganizationId,
        orgId,
        typeId,
        sortProperties,
        page,
        size,
        options
      )
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary 修改部門
   * @param {UpdatePastoralCommand} [updatePastoralCommand]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof PastoralApi
   */
  public putPastoral(updatePastoralCommand?: UpdatePastoralCommand, options?: AxiosRequestConfig) {
    return PastoralApiFp(this.configuration)
      .putPastoral(updatePastoralCommand, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary 查詢Tree
   * @param {QueryPastoralTreeRequest} [queryPastoralTreeRequest]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof PastoralApi
   */
  public queryPastoralTree(queryPastoralTreeRequest?: QueryPastoralTreeRequest, options?: AxiosRequestConfig) {
    return PastoralApiFp(this.configuration)
      .queryPastoralTree(queryPastoralTreeRequest, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary 查詢列表  (*dynamic sort support)
   * @param {QueryPastoralRequest} [queryPastoralRequest]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof PastoralApi
   */
  public queryPastorals(queryPastoralRequest?: QueryPastoralRequest, options?: AxiosRequestConfig) {
    return PastoralApiFp(this.configuration)
      .queryPastorals(queryPastoralRequest, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary 刪除主檔
   * @param {number} id
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof PastoralApi
   */
  public removePastoral(id: number, options?: AxiosRequestConfig) {
    return PastoralApiFp(this.configuration)
      .removePastoral(id, options)
      .then((request) => request(this.axios, this.basePath));
  }
}

/**
 * PastoralMeetingApi - axios parameter creator
 * @export
 */
export const PastoralMeetingApiAxiosParamCreator = function (configuration?: Configuration) {
  return {
    /**
     *
     * @summary 建立會議
     * @param {CreatePastoralMeetingCommand} [createPastoralMeetingCommand]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createPastoralMeeting: async (
      createPastoralMeetingCommand?: CreatePastoralMeetingCommand,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/pastoralMeeting`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: "POST", ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication Example-id-1 required
      await setApiKeyToObject(localVarHeaderParameter, "Example-id-1", configuration);

      // authentication JWT_Authorization required
      await setApiKeyToObject(localVarHeaderParameter, "authorization", configuration);

      // authentication example-id-2 required
      await setApiKeyToObject(localVarHeaderParameter, "example-id-2", configuration);

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      localVarRequestOptions.data = serializeDataIfNeeded(
        createPastoralMeetingCommand,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary 刪除會議
     * @param {DeletePastoralMeetingCommand} [deletePastoralMeetingCommand]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deletePastoralMeeting: async (
      deletePastoralMeetingCommand?: DeletePastoralMeetingCommand,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/pastoralMeeting`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: "DELETE", ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication Example-id-1 required
      await setApiKeyToObject(localVarHeaderParameter, "Example-id-1", configuration);

      // authentication JWT_Authorization required
      await setApiKeyToObject(localVarHeaderParameter, "authorization", configuration);

      // authentication example-id-2 required
      await setApiKeyToObject(localVarHeaderParameter, "example-id-2", configuration);

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      localVarRequestOptions.data = serializeDataIfNeeded(
        deletePastoralMeetingCommand,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary 查詢會議
     * @param {FetchAllPastoralMeetingRequest} [fetchAllPastoralMeetingRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    fetchPastoralMeetings: async (
      fetchAllPastoralMeetingRequest?: FetchAllPastoralMeetingRequest,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/pastoralMeeting/fetch`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: "POST", ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication Example-id-1 required
      await setApiKeyToObject(localVarHeaderParameter, "Example-id-1", configuration);

      // authentication JWT_Authorization required
      await setApiKeyToObject(localVarHeaderParameter, "authorization", configuration);

      // authentication example-id-2 required
      await setApiKeyToObject(localVarHeaderParameter, "example-id-2", configuration);

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      localVarRequestOptions.data = serializeDataIfNeeded(
        fetchAllPastoralMeetingRequest,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary 查詢會議
     * @param {number} [id] id
     * @param {number} [pastoralId] Pastoral.Id
     * @param {string} [meetingDayOfWeek] 小組聚會每周哪一天
     * @param {string} [meetingTime] 聚會時間
     * @param {string} [meetingAddress] 聚會地點
     * @param {string} [meetingDay] 聚會日期
     * @param {string} [isExp] 是否為外展對應SystemConfigtype&#x3D;IsNY顯示 namevalue存此欄位0：N1：Y
     * @param {string} [isSearchable] 是否可查詢，否表示隱藏小組
     * @param {string} [meetType] 聚會狀態對應SystemConfigtype&#x3D;MeetType顯示 namevalue存此欄位0：尚未開始1：正常舉行2：停辦
     * @param {Array<SortProperty>} [sortProperties] 查詢欄位排序
     * @param {number} [page] 目前頁數
     * @param {number} [size] 每頁筆數
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    findPastoralMeeting: async (
      id?: number,
      pastoralId?: number,
      meetingDayOfWeek?: string,
      meetingTime?: string,
      meetingAddress?: string,
      meetingDay?: string,
      isExp?: string,
      isSearchable?: string,
      meetType?: string,
      sortProperties?: Array<SortProperty>,
      page?: number,
      size?: number,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/pastoralMeeting`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: "GET", ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication Example-id-1 required
      await setApiKeyToObject(localVarHeaderParameter, "Example-id-1", configuration);

      // authentication JWT_Authorization required
      await setApiKeyToObject(localVarHeaderParameter, "authorization", configuration);

      // authentication example-id-2 required
      await setApiKeyToObject(localVarHeaderParameter, "example-id-2", configuration);

      if (id !== undefined) {
        localVarQueryParameter["id"] = id;
      }

      if (pastoralId !== undefined) {
        localVarQueryParameter["pastoralId"] = pastoralId;
      }

      if (meetingDayOfWeek !== undefined) {
        localVarQueryParameter["meetingDayOfWeek"] = meetingDayOfWeek;
      }

      if (meetingTime !== undefined) {
        localVarQueryParameter["meetingTime"] = meetingTime;
      }

      if (meetingAddress !== undefined) {
        localVarQueryParameter["meetingAddress"] = meetingAddress;
      }

      if (meetingDay !== undefined) {
        localVarQueryParameter["meetingDay"] =
          (meetingDay as any) instanceof Date ? (meetingDay as any).toISOString() : meetingDay;
      }

      if (isExp !== undefined) {
        localVarQueryParameter["isExp"] = isExp;
      }

      if (isSearchable !== undefined) {
        localVarQueryParameter["isSearchable"] = isSearchable;
      }

      if (meetType !== undefined) {
        localVarQueryParameter["meetType"] = meetType;
      }

      if (sortProperties) {
        localVarQueryParameter["sortProperties"] = sortProperties;
      }

      if (page !== undefined) {
        localVarQueryParameter["page"] = page;
      }

      if (size !== undefined) {
        localVarQueryParameter["size"] = size;
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary 以 Id 查詢列表
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getPastoralMeetingOfId: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists("getPastoralMeetingOfId", "id", id);
      const localVarPath = `/api/pastoralMeeting/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(id)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: "GET", ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication Example-id-1 required
      await setApiKeyToObject(localVarHeaderParameter, "Example-id-1", configuration);

      // authentication JWT_Authorization required
      await setApiKeyToObject(localVarHeaderParameter, "authorization", configuration);

      // authentication example-id-2 required
      await setApiKeyToObject(localVarHeaderParameter, "example-id-2", configuration);

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary 修改會議
     * @param {UpdatePastoralMeetingCommand} [updatePastoralMeetingCommand]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    putPastoralMeeting: async (
      updatePastoralMeetingCommand?: UpdatePastoralMeetingCommand,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/pastoralMeeting`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: "PUT", ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication Example-id-1 required
      await setApiKeyToObject(localVarHeaderParameter, "Example-id-1", configuration);

      // authentication JWT_Authorization required
      await setApiKeyToObject(localVarHeaderParameter, "authorization", configuration);

      // authentication example-id-2 required
      await setApiKeyToObject(localVarHeaderParameter, "example-id-2", configuration);

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      localVarRequestOptions.data = serializeDataIfNeeded(
        updatePastoralMeetingCommand,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary 查詢列表  (*dynamic sort support)
     * @param {QueryPastoralMeetingRequest} [queryPastoralMeetingRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    queryPastoralMeetings: async (
      queryPastoralMeetingRequest?: QueryPastoralMeetingRequest,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/pastoralMeeting/query`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: "POST", ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication Example-id-1 required
      await setApiKeyToObject(localVarHeaderParameter, "Example-id-1", configuration);

      // authentication JWT_Authorization required
      await setApiKeyToObject(localVarHeaderParameter, "authorization", configuration);

      // authentication example-id-2 required
      await setApiKeyToObject(localVarHeaderParameter, "example-id-2", configuration);

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      localVarRequestOptions.data = serializeDataIfNeeded(
        queryPastoralMeetingRequest,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary 刪除主檔
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    removePastoralMeeting: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists("removePastoralMeeting", "id", id);
      const localVarPath = `/api/pastoralMeeting/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(id)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: "DELETE", ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication Example-id-1 required
      await setApiKeyToObject(localVarHeaderParameter, "Example-id-1", configuration);

      // authentication JWT_Authorization required
      await setApiKeyToObject(localVarHeaderParameter, "authorization", configuration);

      // authentication example-id-2 required
      await setApiKeyToObject(localVarHeaderParameter, "example-id-2", configuration);

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * PastoralMeetingApi - functional programming interface
 * @export
 */
export const PastoralMeetingApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = PastoralMeetingApiAxiosParamCreator(configuration);
  return {
    /**
     *
     * @summary 建立會議
     * @param {CreatePastoralMeetingCommand} [createPastoralMeetingCommand]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async createPastoralMeeting(
      createPastoralMeetingCommand?: CreatePastoralMeetingCommand,
      options?: AxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<PastoralMeetingViewApiResponse>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.createPastoralMeeting(
        createPastoralMeetingCommand,
        options
      );
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     *
     * @summary 刪除會議
     * @param {DeletePastoralMeetingCommand} [deletePastoralMeetingCommand]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async deletePastoralMeeting(
      deletePastoralMeetingCommand?: DeletePastoralMeetingCommand,
      options?: AxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<PastoralMeetingViewApiResponse>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.deletePastoralMeeting(
        deletePastoralMeetingCommand,
        options
      );
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     *
     * @summary 查詢會議
     * @param {FetchAllPastoralMeetingRequest} [fetchAllPastoralMeetingRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async fetchPastoralMeetings(
      fetchAllPastoralMeetingRequest?: FetchAllPastoralMeetingRequest,
      options?: AxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<PastoralMeetingViewListApiResponse>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.fetchPastoralMeetings(
        fetchAllPastoralMeetingRequest,
        options
      );
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     *
     * @summary 查詢會議
     * @param {number} [id] id
     * @param {number} [pastoralId] Pastoral.Id
     * @param {string} [meetingDayOfWeek] 小組聚會每周哪一天
     * @param {string} [meetingTime] 聚會時間
     * @param {string} [meetingAddress] 聚會地點
     * @param {string} [meetingDay] 聚會日期
     * @param {string} [isExp] 是否為外展對應SystemConfigtype&#x3D;IsNY顯示 namevalue存此欄位0：N1：Y
     * @param {string} [isSearchable] 是否可查詢，否表示隱藏小組
     * @param {string} [meetType] 聚會狀態對應SystemConfigtype&#x3D;MeetType顯示 namevalue存此欄位0：尚未開始1：正常舉行2：停辦
     * @param {Array<SortProperty>} [sortProperties] 查詢欄位排序
     * @param {number} [page] 目前頁數
     * @param {number} [size] 每頁筆數
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async findPastoralMeeting(
      id?: number,
      pastoralId?: number,
      meetingDayOfWeek?: string,
      meetingTime?: string,
      meetingAddress?: string,
      meetingDay?: string,
      isExp?: string,
      isSearchable?: string,
      meetType?: string,
      sortProperties?: Array<SortProperty>,
      page?: number,
      size?: number,
      options?: AxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<PastoralMeetingViewPageApiResponse>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.findPastoralMeeting(
        id,
        pastoralId,
        meetingDayOfWeek,
        meetingTime,
        meetingAddress,
        meetingDay,
        isExp,
        isSearchable,
        meetType,
        sortProperties,
        page,
        size,
        options
      );
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     *
     * @summary 以 Id 查詢列表
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getPastoralMeetingOfId(
      id: number,
      options?: AxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<PastoralMeetingViewApiResponse>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getPastoralMeetingOfId(id, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     *
     * @summary 修改會議
     * @param {UpdatePastoralMeetingCommand} [updatePastoralMeetingCommand]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async putPastoralMeeting(
      updatePastoralMeetingCommand?: UpdatePastoralMeetingCommand,
      options?: AxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<PastoralMeetingViewApiResponse>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.putPastoralMeeting(
        updatePastoralMeetingCommand,
        options
      );
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     *
     * @summary 查詢列表  (*dynamic sort support)
     * @param {QueryPastoralMeetingRequest} [queryPastoralMeetingRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async queryPastoralMeetings(
      queryPastoralMeetingRequest?: QueryPastoralMeetingRequest,
      options?: AxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<PastoralMeetingViewPageApiResponse>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.queryPastoralMeetings(
        queryPastoralMeetingRequest,
        options
      );
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     *
     * @summary 刪除主檔
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async removePastoralMeeting(
      id: number,
      options?: AxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<Int32ApiResponse>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.removePastoralMeeting(id, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
  };
};

/**
 * PastoralMeetingApi - factory interface
 * @export
 */
export const PastoralMeetingApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance
) {
  const localVarFp = PastoralMeetingApiFp(configuration);
  return {
    /**
     *
     * @summary 建立會議
     * @param {CreatePastoralMeetingCommand} [createPastoralMeetingCommand]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createPastoralMeeting(
      createPastoralMeetingCommand?: CreatePastoralMeetingCommand,
      options?: any
    ): Promise<PastoralMeetingViewApiResponse> {
      return localVarFp
        .createPastoralMeeting(createPastoralMeetingCommand, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary 刪除會議
     * @param {DeletePastoralMeetingCommand} [deletePastoralMeetingCommand]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deletePastoralMeeting(
      deletePastoralMeetingCommand?: DeletePastoralMeetingCommand,
      options?: any
    ): Promise<PastoralMeetingViewApiResponse> {
      return localVarFp
        .deletePastoralMeeting(deletePastoralMeetingCommand, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary 查詢會議
     * @param {FetchAllPastoralMeetingRequest} [fetchAllPastoralMeetingRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    fetchPastoralMeetings(
      fetchAllPastoralMeetingRequest?: FetchAllPastoralMeetingRequest,
      options?: any
    ): Promise<PastoralMeetingViewListApiResponse> {
      return localVarFp
        .fetchPastoralMeetings(fetchAllPastoralMeetingRequest, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary 查詢會議
     * @param {number} [id] id
     * @param {number} [pastoralId] Pastoral.Id
     * @param {string} [meetingDayOfWeek] 小組聚會每周哪一天
     * @param {string} [meetingTime] 聚會時間
     * @param {string} [meetingAddress] 聚會地點
     * @param {string} [meetingDay] 聚會日期
     * @param {string} [isExp] 是否為外展對應SystemConfigtype&#x3D;IsNY顯示 namevalue存此欄位0：N1：Y
     * @param {string} [isSearchable] 是否可查詢，否表示隱藏小組
     * @param {string} [meetType] 聚會狀態對應SystemConfigtype&#x3D;MeetType顯示 namevalue存此欄位0：尚未開始1：正常舉行2：停辦
     * @param {Array<SortProperty>} [sortProperties] 查詢欄位排序
     * @param {number} [page] 目前頁數
     * @param {number} [size] 每頁筆數
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    findPastoralMeeting(
      id?: number,
      pastoralId?: number,
      meetingDayOfWeek?: string,
      meetingTime?: string,
      meetingAddress?: string,
      meetingDay?: string,
      isExp?: string,
      isSearchable?: string,
      meetType?: string,
      sortProperties?: Array<SortProperty>,
      page?: number,
      size?: number,
      options?: any
    ): Promise<PastoralMeetingViewPageApiResponse> {
      return localVarFp
        .findPastoralMeeting(
          id,
          pastoralId,
          meetingDayOfWeek,
          meetingTime,
          meetingAddress,
          meetingDay,
          isExp,
          isSearchable,
          meetType,
          sortProperties,
          page,
          size,
          options
        )
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary 以 Id 查詢列表
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getPastoralMeetingOfId(id: number, options?: any): Promise<PastoralMeetingViewApiResponse> {
      return localVarFp.getPastoralMeetingOfId(id, options).then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary 修改會議
     * @param {UpdatePastoralMeetingCommand} [updatePastoralMeetingCommand]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    putPastoralMeeting(
      updatePastoralMeetingCommand?: UpdatePastoralMeetingCommand,
      options?: any
    ): Promise<PastoralMeetingViewApiResponse> {
      return localVarFp
        .putPastoralMeeting(updatePastoralMeetingCommand, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary 查詢列表  (*dynamic sort support)
     * @param {QueryPastoralMeetingRequest} [queryPastoralMeetingRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    queryPastoralMeetings(
      queryPastoralMeetingRequest?: QueryPastoralMeetingRequest,
      options?: any
    ): Promise<PastoralMeetingViewPageApiResponse> {
      return localVarFp
        .queryPastoralMeetings(queryPastoralMeetingRequest, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary 刪除主檔
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    removePastoralMeeting(id: number, options?: any): Promise<Int32ApiResponse> {
      return localVarFp.removePastoralMeeting(id, options).then((request) => request(axios, basePath));
    },
  };
};

/**
 * PastoralMeetingApi - interface
 * @export
 * @interface PastoralMeetingApi
 */
export interface PastoralMeetingApiInterface {
  /**
   *
   * @summary 建立會議
   * @param {CreatePastoralMeetingCommand} [createPastoralMeetingCommand]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof PastoralMeetingApiInterface
   */
  createPastoralMeeting(
    createPastoralMeetingCommand?: CreatePastoralMeetingCommand,
    options?: AxiosRequestConfig
  ): Promise<PastoralMeetingViewApiResponse>;

  /**
   *
   * @summary 刪除會議
   * @param {DeletePastoralMeetingCommand} [deletePastoralMeetingCommand]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof PastoralMeetingApiInterface
   */
  deletePastoralMeeting(
    deletePastoralMeetingCommand?: DeletePastoralMeetingCommand,
    options?: AxiosRequestConfig
  ): Promise<PastoralMeetingViewApiResponse>;

  /**
   *
   * @summary 查詢會議
   * @param {FetchAllPastoralMeetingRequest} [fetchAllPastoralMeetingRequest]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof PastoralMeetingApiInterface
   */
  fetchPastoralMeetings(
    fetchAllPastoralMeetingRequest?: FetchAllPastoralMeetingRequest,
    options?: AxiosRequestConfig
  ): Promise<PastoralMeetingViewListApiResponse>;

  /**
   *
   * @summary 查詢會議
   * @param {number} [id] id
   * @param {number} [pastoralId] Pastoral.Id
   * @param {string} [meetingDayOfWeek] 小組聚會每周哪一天
   * @param {string} [meetingTime] 聚會時間
   * @param {string} [meetingAddress] 聚會地點
   * @param {string} [meetingDay] 聚會日期
   * @param {string} [isExp] 是否為外展對應SystemConfigtype&#x3D;IsNY顯示 namevalue存此欄位0：N1：Y
   * @param {string} [isSearchable] 是否可查詢，否表示隱藏小組
   * @param {string} [meetType] 聚會狀態對應SystemConfigtype&#x3D;MeetType顯示 namevalue存此欄位0：尚未開始1：正常舉行2：停辦
   * @param {Array<SortProperty>} [sortProperties] 查詢欄位排序
   * @param {number} [page] 目前頁數
   * @param {number} [size] 每頁筆數
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof PastoralMeetingApiInterface
   */
  findPastoralMeeting(
    id?: number,
    pastoralId?: number,
    meetingDayOfWeek?: string,
    meetingTime?: string,
    meetingAddress?: string,
    meetingDay?: string,
    isExp?: string,
    isSearchable?: string,
    meetType?: string,
    sortProperties?: Array<SortProperty>,
    page?: number,
    size?: number,
    options?: AxiosRequestConfig
  ): Promise<PastoralMeetingViewPageApiResponse>;

  /**
   *
   * @summary 以 Id 查詢列表
   * @param {number} id
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof PastoralMeetingApiInterface
   */
  getPastoralMeetingOfId(id: number, options?: AxiosRequestConfig): Promise<PastoralMeetingViewApiResponse>;

  /**
   *
   * @summary 修改會議
   * @param {UpdatePastoralMeetingCommand} [updatePastoralMeetingCommand]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof PastoralMeetingApiInterface
   */
  putPastoralMeeting(
    updatePastoralMeetingCommand?: UpdatePastoralMeetingCommand,
    options?: AxiosRequestConfig
  ): Promise<PastoralMeetingViewApiResponse>;

  /**
   *
   * @summary 查詢列表  (*dynamic sort support)
   * @param {QueryPastoralMeetingRequest} [queryPastoralMeetingRequest]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof PastoralMeetingApiInterface
   */
  queryPastoralMeetings(
    queryPastoralMeetingRequest?: QueryPastoralMeetingRequest,
    options?: AxiosRequestConfig
  ): Promise<PastoralMeetingViewPageApiResponse>;

  /**
   *
   * @summary 刪除主檔
   * @param {number} id
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof PastoralMeetingApiInterface
   */
  removePastoralMeeting(id: number, options?: AxiosRequestConfig): Promise<Int32ApiResponse>;
}

/**
 * PastoralMeetingApi - object-oriented interface
 * @export
 * @class PastoralMeetingApi
 * @extends {BaseAPI}
 */
export class PastoralMeetingApi extends BaseAPI implements PastoralMeetingApiInterface {
  /**
   *
   * @summary 建立會議
   * @param {CreatePastoralMeetingCommand} [createPastoralMeetingCommand]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof PastoralMeetingApi
   */
  public createPastoralMeeting(
    createPastoralMeetingCommand?: CreatePastoralMeetingCommand,
    options?: AxiosRequestConfig
  ) {
    return PastoralMeetingApiFp(this.configuration)
      .createPastoralMeeting(createPastoralMeetingCommand, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary 刪除會議
   * @param {DeletePastoralMeetingCommand} [deletePastoralMeetingCommand]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof PastoralMeetingApi
   */
  public deletePastoralMeeting(
    deletePastoralMeetingCommand?: DeletePastoralMeetingCommand,
    options?: AxiosRequestConfig
  ) {
    return PastoralMeetingApiFp(this.configuration)
      .deletePastoralMeeting(deletePastoralMeetingCommand, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary 查詢會議
   * @param {FetchAllPastoralMeetingRequest} [fetchAllPastoralMeetingRequest]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof PastoralMeetingApi
   */
  public fetchPastoralMeetings(
    fetchAllPastoralMeetingRequest?: FetchAllPastoralMeetingRequest,
    options?: AxiosRequestConfig
  ) {
    return PastoralMeetingApiFp(this.configuration)
      .fetchPastoralMeetings(fetchAllPastoralMeetingRequest, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary 查詢會議
   * @param {number} [id] id
   * @param {number} [pastoralId] Pastoral.Id
   * @param {string} [meetingDayOfWeek] 小組聚會每周哪一天
   * @param {string} [meetingTime] 聚會時間
   * @param {string} [meetingAddress] 聚會地點
   * @param {string} [meetingDay] 聚會日期
   * @param {string} [isExp] 是否為外展對應SystemConfigtype&#x3D;IsNY顯示 namevalue存此欄位0：N1：Y
   * @param {string} [isSearchable] 是否可查詢，否表示隱藏小組
   * @param {string} [meetType] 聚會狀態對應SystemConfigtype&#x3D;MeetType顯示 namevalue存此欄位0：尚未開始1：正常舉行2：停辦
   * @param {Array<SortProperty>} [sortProperties] 查詢欄位排序
   * @param {number} [page] 目前頁數
   * @param {number} [size] 每頁筆數
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof PastoralMeetingApi
   */
  public findPastoralMeeting(
    id?: number,
    pastoralId?: number,
    meetingDayOfWeek?: string,
    meetingTime?: string,
    meetingAddress?: string,
    meetingDay?: string,
    isExp?: string,
    isSearchable?: string,
    meetType?: string,
    sortProperties?: Array<SortProperty>,
    page?: number,
    size?: number,
    options?: AxiosRequestConfig
  ) {
    return PastoralMeetingApiFp(this.configuration)
      .findPastoralMeeting(
        id,
        pastoralId,
        meetingDayOfWeek,
        meetingTime,
        meetingAddress,
        meetingDay,
        isExp,
        isSearchable,
        meetType,
        sortProperties,
        page,
        size,
        options
      )
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary 以 Id 查詢列表
   * @param {number} id
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof PastoralMeetingApi
   */
  public getPastoralMeetingOfId(id: number, options?: AxiosRequestConfig) {
    return PastoralMeetingApiFp(this.configuration)
      .getPastoralMeetingOfId(id, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary 修改會議
   * @param {UpdatePastoralMeetingCommand} [updatePastoralMeetingCommand]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof PastoralMeetingApi
   */
  public putPastoralMeeting(updatePastoralMeetingCommand?: UpdatePastoralMeetingCommand, options?: AxiosRequestConfig) {
    return PastoralMeetingApiFp(this.configuration)
      .putPastoralMeeting(updatePastoralMeetingCommand, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary 查詢列表  (*dynamic sort support)
   * @param {QueryPastoralMeetingRequest} [queryPastoralMeetingRequest]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof PastoralMeetingApi
   */
  public queryPastoralMeetings(
    queryPastoralMeetingRequest?: QueryPastoralMeetingRequest,
    options?: AxiosRequestConfig
  ) {
    return PastoralMeetingApiFp(this.configuration)
      .queryPastoralMeetings(queryPastoralMeetingRequest, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary 刪除主檔
   * @param {number} id
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof PastoralMeetingApi
   */
  public removePastoralMeeting(id: number, options?: AxiosRequestConfig) {
    return PastoralMeetingApiFp(this.configuration)
      .removePastoralMeeting(id, options)
      .then((request) => request(this.axios, this.basePath));
  }
}

/**
 * PastoralMeetingUserApi - axios parameter creator
 * @export
 */
export const PastoralMeetingUserApiAxiosParamCreator = function (configuration?: Configuration) {
  return {
    /**
     *
     * @summary 建立會議簽到
     * @param {CreatePastoralMeetingUserCommand} [createPastoralMeetingUserCommand]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createPastoralMeetingUser: async (
      createPastoralMeetingUserCommand?: CreatePastoralMeetingUserCommand,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/pastoralMeetingUser`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: "POST", ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication Example-id-1 required
      await setApiKeyToObject(localVarHeaderParameter, "Example-id-1", configuration);

      // authentication JWT_Authorization required
      await setApiKeyToObject(localVarHeaderParameter, "authorization", configuration);

      // authentication example-id-2 required
      await setApiKeyToObject(localVarHeaderParameter, "example-id-2", configuration);

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      localVarRequestOptions.data = serializeDataIfNeeded(
        createPastoralMeetingUserCommand,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary 刪除會議簽到
     * @param {DeletePastoralMeetingUserCommand} [deletePastoralMeetingUserCommand]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deletePastoralMeetingUser: async (
      deletePastoralMeetingUserCommand?: DeletePastoralMeetingUserCommand,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/pastoralMeetingUser`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: "DELETE", ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication Example-id-1 required
      await setApiKeyToObject(localVarHeaderParameter, "Example-id-1", configuration);

      // authentication JWT_Authorization required
      await setApiKeyToObject(localVarHeaderParameter, "authorization", configuration);

      // authentication example-id-2 required
      await setApiKeyToObject(localVarHeaderParameter, "example-id-2", configuration);

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      localVarRequestOptions.data = serializeDataIfNeeded(
        deletePastoralMeetingUserCommand,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary 查詢會議簽到
     * @param {FetchAllPastoralMeetingUserRequest} [fetchAllPastoralMeetingUserRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    fetchPastoralMeetingUsers: async (
      fetchAllPastoralMeetingUserRequest?: FetchAllPastoralMeetingUserRequest,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/pastoralMeetingUser/fetch`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: "POST", ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication Example-id-1 required
      await setApiKeyToObject(localVarHeaderParameter, "Example-id-1", configuration);

      // authentication JWT_Authorization required
      await setApiKeyToObject(localVarHeaderParameter, "authorization", configuration);

      // authentication example-id-2 required
      await setApiKeyToObject(localVarHeaderParameter, "example-id-2", configuration);

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      localVarRequestOptions.data = serializeDataIfNeeded(
        fetchAllPastoralMeetingUserRequest,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary 查詢會議簽到
     * @param {number} [id] id
     * @param {number} [pastoralMeetingId] PastoralMeeting.Id
     * @param {number} [userId] User.Id
     * @param {number} [meetAttendanceType] 是否聚會出席狀態        對應SystemConfig        type &#x3D; MeetAttendanceType顯示 namevalue存此欄位0：尚未開課1：已出席2:未出席
     * @param {Array<SortProperty>} [sortProperties] 查詢欄位排序
     * @param {number} [page] 目前頁數
     * @param {number} [size] 每頁筆數
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    findPastoralMeetingUser: async (
      id?: number,
      pastoralMeetingId?: number,
      userId?: number,
      meetAttendanceType?: number,
      sortProperties?: Array<SortProperty>,
      page?: number,
      size?: number,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/pastoralMeetingUser`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: "GET", ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication Example-id-1 required
      await setApiKeyToObject(localVarHeaderParameter, "Example-id-1", configuration);

      // authentication JWT_Authorization required
      await setApiKeyToObject(localVarHeaderParameter, "authorization", configuration);

      // authentication example-id-2 required
      await setApiKeyToObject(localVarHeaderParameter, "example-id-2", configuration);

      if (id !== undefined) {
        localVarQueryParameter["id"] = id;
      }

      if (pastoralMeetingId !== undefined) {
        localVarQueryParameter["pastoralMeetingId"] = pastoralMeetingId;
      }

      if (userId !== undefined) {
        localVarQueryParameter["userId"] = userId;
      }

      if (meetAttendanceType !== undefined) {
        localVarQueryParameter["meetAttendanceType"] = meetAttendanceType;
      }

      if (sortProperties) {
        localVarQueryParameter["sortProperties"] = sortProperties;
      }

      if (page !== undefined) {
        localVarQueryParameter["page"] = page;
      }

      if (size !== undefined) {
        localVarQueryParameter["size"] = size;
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary 以 Id 查詢列表
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getPastoralMeetingUser: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists("getPastoralMeetingUser", "id", id);
      const localVarPath = `/api/pastoralMeetingUser/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(id)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: "GET", ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication Example-id-1 required
      await setApiKeyToObject(localVarHeaderParameter, "Example-id-1", configuration);

      // authentication JWT_Authorization required
      await setApiKeyToObject(localVarHeaderParameter, "authorization", configuration);

      // authentication example-id-2 required
      await setApiKeyToObject(localVarHeaderParameter, "example-id-2", configuration);

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary 修改會議簽到
     * @param {UpdatePastoralMeetingUserCommand} [updatePastoralMeetingUserCommand]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    putPastoralMeetingUser: async (
      updatePastoralMeetingUserCommand?: UpdatePastoralMeetingUserCommand,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/pastoralMeetingUser`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: "PUT", ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication Example-id-1 required
      await setApiKeyToObject(localVarHeaderParameter, "Example-id-1", configuration);

      // authentication JWT_Authorization required
      await setApiKeyToObject(localVarHeaderParameter, "authorization", configuration);

      // authentication example-id-2 required
      await setApiKeyToObject(localVarHeaderParameter, "example-id-2", configuration);

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      localVarRequestOptions.data = serializeDataIfNeeded(
        updatePastoralMeetingUserCommand,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary 查詢列表  (*dynamic sort support)
     * @param {QueryPastoralMeetingUserRequest} [queryPastoralMeetingUserRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    queryPastoralMeetingUsers: async (
      queryPastoralMeetingUserRequest?: QueryPastoralMeetingUserRequest,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/pastoralMeetingUser/query`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: "POST", ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication Example-id-1 required
      await setApiKeyToObject(localVarHeaderParameter, "Example-id-1", configuration);

      // authentication JWT_Authorization required
      await setApiKeyToObject(localVarHeaderParameter, "authorization", configuration);

      // authentication example-id-2 required
      await setApiKeyToObject(localVarHeaderParameter, "example-id-2", configuration);

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      localVarRequestOptions.data = serializeDataIfNeeded(
        queryPastoralMeetingUserRequest,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary 刪除主檔
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    removePastoralMeetingUser: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists("removePastoralMeetingUser", "id", id);
      const localVarPath = `/api/pastoralMeetingUser/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(id)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: "DELETE", ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication Example-id-1 required
      await setApiKeyToObject(localVarHeaderParameter, "Example-id-1", configuration);

      // authentication JWT_Authorization required
      await setApiKeyToObject(localVarHeaderParameter, "authorization", configuration);

      // authentication example-id-2 required
      await setApiKeyToObject(localVarHeaderParameter, "example-id-2", configuration);

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * PastoralMeetingUserApi - functional programming interface
 * @export
 */
export const PastoralMeetingUserApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = PastoralMeetingUserApiAxiosParamCreator(configuration);
  return {
    /**
     *
     * @summary 建立會議簽到
     * @param {CreatePastoralMeetingUserCommand} [createPastoralMeetingUserCommand]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async createPastoralMeetingUser(
      createPastoralMeetingUserCommand?: CreatePastoralMeetingUserCommand,
      options?: AxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<PastoralMeetingUserViewApiResponse>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.createPastoralMeetingUser(
        createPastoralMeetingUserCommand,
        options
      );
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     *
     * @summary 刪除會議簽到
     * @param {DeletePastoralMeetingUserCommand} [deletePastoralMeetingUserCommand]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async deletePastoralMeetingUser(
      deletePastoralMeetingUserCommand?: DeletePastoralMeetingUserCommand,
      options?: AxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<PastoralMeetingUserViewApiResponse>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.deletePastoralMeetingUser(
        deletePastoralMeetingUserCommand,
        options
      );
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     *
     * @summary 查詢會議簽到
     * @param {FetchAllPastoralMeetingUserRequest} [fetchAllPastoralMeetingUserRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async fetchPastoralMeetingUsers(
      fetchAllPastoralMeetingUserRequest?: FetchAllPastoralMeetingUserRequest,
      options?: AxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<PastoralMeetingUserViewListApiResponse>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.fetchPastoralMeetingUsers(
        fetchAllPastoralMeetingUserRequest,
        options
      );
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     *
     * @summary 查詢會議簽到
     * @param {number} [id] id
     * @param {number} [pastoralMeetingId] PastoralMeeting.Id
     * @param {number} [userId] User.Id
     * @param {number} [meetAttendanceType] 是否聚會出席狀態        對應SystemConfig        type &#x3D; MeetAttendanceType顯示 namevalue存此欄位0：尚未開課1：已出席2:未出席
     * @param {Array<SortProperty>} [sortProperties] 查詢欄位排序
     * @param {number} [page] 目前頁數
     * @param {number} [size] 每頁筆數
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async findPastoralMeetingUser(
      id?: number,
      pastoralMeetingId?: number,
      userId?: number,
      meetAttendanceType?: number,
      sortProperties?: Array<SortProperty>,
      page?: number,
      size?: number,
      options?: AxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<PastoralMeetingUserViewPageApiResponse>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.findPastoralMeetingUser(
        id,
        pastoralMeetingId,
        userId,
        meetAttendanceType,
        sortProperties,
        page,
        size,
        options
      );
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     *
     * @summary 以 Id 查詢列表
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getPastoralMeetingUser(
      id: number,
      options?: AxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<PastoralMeetingUserViewApiResponse>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getPastoralMeetingUser(id, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     *
     * @summary 修改會議簽到
     * @param {UpdatePastoralMeetingUserCommand} [updatePastoralMeetingUserCommand]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async putPastoralMeetingUser(
      updatePastoralMeetingUserCommand?: UpdatePastoralMeetingUserCommand,
      options?: AxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<PastoralMeetingUserViewApiResponse>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.putPastoralMeetingUser(
        updatePastoralMeetingUserCommand,
        options
      );
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     *
     * @summary 查詢列表  (*dynamic sort support)
     * @param {QueryPastoralMeetingUserRequest} [queryPastoralMeetingUserRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async queryPastoralMeetingUsers(
      queryPastoralMeetingUserRequest?: QueryPastoralMeetingUserRequest,
      options?: AxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<PastoralMeetingUserViewPageApiResponse>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.queryPastoralMeetingUsers(
        queryPastoralMeetingUserRequest,
        options
      );
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     *
     * @summary 刪除主檔
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async removePastoralMeetingUser(
      id: number,
      options?: AxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<Int32ApiResponse>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.removePastoralMeetingUser(id, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
  };
};

/**
 * PastoralMeetingUserApi - factory interface
 * @export
 */
export const PastoralMeetingUserApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance
) {
  const localVarFp = PastoralMeetingUserApiFp(configuration);
  return {
    /**
     *
     * @summary 建立會議簽到
     * @param {CreatePastoralMeetingUserCommand} [createPastoralMeetingUserCommand]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createPastoralMeetingUser(
      createPastoralMeetingUserCommand?: CreatePastoralMeetingUserCommand,
      options?: any
    ): Promise<PastoralMeetingUserViewApiResponse> {
      return localVarFp
        .createPastoralMeetingUser(createPastoralMeetingUserCommand, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary 刪除會議簽到
     * @param {DeletePastoralMeetingUserCommand} [deletePastoralMeetingUserCommand]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deletePastoralMeetingUser(
      deletePastoralMeetingUserCommand?: DeletePastoralMeetingUserCommand,
      options?: any
    ): Promise<PastoralMeetingUserViewApiResponse> {
      return localVarFp
        .deletePastoralMeetingUser(deletePastoralMeetingUserCommand, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary 查詢會議簽到
     * @param {FetchAllPastoralMeetingUserRequest} [fetchAllPastoralMeetingUserRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    fetchPastoralMeetingUsers(
      fetchAllPastoralMeetingUserRequest?: FetchAllPastoralMeetingUserRequest,
      options?: any
    ): Promise<PastoralMeetingUserViewListApiResponse> {
      return localVarFp
        .fetchPastoralMeetingUsers(fetchAllPastoralMeetingUserRequest, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary 查詢會議簽到
     * @param {number} [id] id
     * @param {number} [pastoralMeetingId] PastoralMeeting.Id
     * @param {number} [userId] User.Id
     * @param {number} [meetAttendanceType] 是否聚會出席狀態        對應SystemConfig        type &#x3D; MeetAttendanceType顯示 namevalue存此欄位0：尚未開課1：已出席2:未出席
     * @param {Array<SortProperty>} [sortProperties] 查詢欄位排序
     * @param {number} [page] 目前頁數
     * @param {number} [size] 每頁筆數
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    findPastoralMeetingUser(
      id?: number,
      pastoralMeetingId?: number,
      userId?: number,
      meetAttendanceType?: number,
      sortProperties?: Array<SortProperty>,
      page?: number,
      size?: number,
      options?: any
    ): Promise<PastoralMeetingUserViewPageApiResponse> {
      return localVarFp
        .findPastoralMeetingUser(id, pastoralMeetingId, userId, meetAttendanceType, sortProperties, page, size, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary 以 Id 查詢列表
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getPastoralMeetingUser(id: number, options?: any): Promise<PastoralMeetingUserViewApiResponse> {
      return localVarFp.getPastoralMeetingUser(id, options).then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary 修改會議簽到
     * @param {UpdatePastoralMeetingUserCommand} [updatePastoralMeetingUserCommand]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    putPastoralMeetingUser(
      updatePastoralMeetingUserCommand?: UpdatePastoralMeetingUserCommand,
      options?: any
    ): Promise<PastoralMeetingUserViewApiResponse> {
      return localVarFp
        .putPastoralMeetingUser(updatePastoralMeetingUserCommand, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary 查詢列表  (*dynamic sort support)
     * @param {QueryPastoralMeetingUserRequest} [queryPastoralMeetingUserRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    queryPastoralMeetingUsers(
      queryPastoralMeetingUserRequest?: QueryPastoralMeetingUserRequest,
      options?: any
    ): Promise<PastoralMeetingUserViewPageApiResponse> {
      return localVarFp
        .queryPastoralMeetingUsers(queryPastoralMeetingUserRequest, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary 刪除主檔
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    removePastoralMeetingUser(id: number, options?: any): Promise<Int32ApiResponse> {
      return localVarFp.removePastoralMeetingUser(id, options).then((request) => request(axios, basePath));
    },
  };
};

/**
 * PastoralMeetingUserApi - interface
 * @export
 * @interface PastoralMeetingUserApi
 */
export interface PastoralMeetingUserApiInterface {
  /**
   *
   * @summary 建立會議簽到
   * @param {CreatePastoralMeetingUserCommand} [createPastoralMeetingUserCommand]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof PastoralMeetingUserApiInterface
   */
  createPastoralMeetingUser(
    createPastoralMeetingUserCommand?: CreatePastoralMeetingUserCommand,
    options?: AxiosRequestConfig
  ): Promise<PastoralMeetingUserViewApiResponse>;

  /**
   *
   * @summary 刪除會議簽到
   * @param {DeletePastoralMeetingUserCommand} [deletePastoralMeetingUserCommand]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof PastoralMeetingUserApiInterface
   */
  deletePastoralMeetingUser(
    deletePastoralMeetingUserCommand?: DeletePastoralMeetingUserCommand,
    options?: AxiosRequestConfig
  ): Promise<PastoralMeetingUserViewApiResponse>;

  /**
   *
   * @summary 查詢會議簽到
   * @param {FetchAllPastoralMeetingUserRequest} [fetchAllPastoralMeetingUserRequest]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof PastoralMeetingUserApiInterface
   */
  fetchPastoralMeetingUsers(
    fetchAllPastoralMeetingUserRequest?: FetchAllPastoralMeetingUserRequest,
    options?: AxiosRequestConfig
  ): Promise<PastoralMeetingUserViewListApiResponse>;

  /**
   *
   * @summary 查詢會議簽到
   * @param {number} [id] id
   * @param {number} [pastoralMeetingId] PastoralMeeting.Id
   * @param {number} [userId] User.Id
   * @param {number} [meetAttendanceType] 是否聚會出席狀態        對應SystemConfig        type &#x3D; MeetAttendanceType顯示 namevalue存此欄位0：尚未開課1：已出席2:未出席
   * @param {Array<SortProperty>} [sortProperties] 查詢欄位排序
   * @param {number} [page] 目前頁數
   * @param {number} [size] 每頁筆數
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof PastoralMeetingUserApiInterface
   */
  findPastoralMeetingUser(
    id?: number,
    pastoralMeetingId?: number,
    userId?: number,
    meetAttendanceType?: number,
    sortProperties?: Array<SortProperty>,
    page?: number,
    size?: number,
    options?: AxiosRequestConfig
  ): Promise<PastoralMeetingUserViewPageApiResponse>;

  /**
   *
   * @summary 以 Id 查詢列表
   * @param {number} id
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof PastoralMeetingUserApiInterface
   */
  getPastoralMeetingUser(id: number, options?: AxiosRequestConfig): Promise<PastoralMeetingUserViewApiResponse>;

  /**
   *
   * @summary 修改會議簽到
   * @param {UpdatePastoralMeetingUserCommand} [updatePastoralMeetingUserCommand]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof PastoralMeetingUserApiInterface
   */
  putPastoralMeetingUser(
    updatePastoralMeetingUserCommand?: UpdatePastoralMeetingUserCommand,
    options?: AxiosRequestConfig
  ): Promise<PastoralMeetingUserViewApiResponse>;

  /**
   *
   * @summary 查詢列表  (*dynamic sort support)
   * @param {QueryPastoralMeetingUserRequest} [queryPastoralMeetingUserRequest]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof PastoralMeetingUserApiInterface
   */
  queryPastoralMeetingUsers(
    queryPastoralMeetingUserRequest?: QueryPastoralMeetingUserRequest,
    options?: AxiosRequestConfig
  ): Promise<PastoralMeetingUserViewPageApiResponse>;

  /**
   *
   * @summary 刪除主檔
   * @param {number} id
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof PastoralMeetingUserApiInterface
   */
  removePastoralMeetingUser(id: number, options?: AxiosRequestConfig): Promise<Int32ApiResponse>;
}

/**
 * PastoralMeetingUserApi - object-oriented interface
 * @export
 * @class PastoralMeetingUserApi
 * @extends {BaseAPI}
 */
export class PastoralMeetingUserApi extends BaseAPI implements PastoralMeetingUserApiInterface {
  /**
   *
   * @summary 建立會議簽到
   * @param {CreatePastoralMeetingUserCommand} [createPastoralMeetingUserCommand]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof PastoralMeetingUserApi
   */
  public createPastoralMeetingUser(
    createPastoralMeetingUserCommand?: CreatePastoralMeetingUserCommand,
    options?: AxiosRequestConfig
  ) {
    return PastoralMeetingUserApiFp(this.configuration)
      .createPastoralMeetingUser(createPastoralMeetingUserCommand, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary 刪除會議簽到
   * @param {DeletePastoralMeetingUserCommand} [deletePastoralMeetingUserCommand]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof PastoralMeetingUserApi
   */
  public deletePastoralMeetingUser(
    deletePastoralMeetingUserCommand?: DeletePastoralMeetingUserCommand,
    options?: AxiosRequestConfig
  ) {
    return PastoralMeetingUserApiFp(this.configuration)
      .deletePastoralMeetingUser(deletePastoralMeetingUserCommand, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary 查詢會議簽到
   * @param {FetchAllPastoralMeetingUserRequest} [fetchAllPastoralMeetingUserRequest]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof PastoralMeetingUserApi
   */
  public fetchPastoralMeetingUsers(
    fetchAllPastoralMeetingUserRequest?: FetchAllPastoralMeetingUserRequest,
    options?: AxiosRequestConfig
  ) {
    return PastoralMeetingUserApiFp(this.configuration)
      .fetchPastoralMeetingUsers(fetchAllPastoralMeetingUserRequest, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary 查詢會議簽到
   * @param {number} [id] id
   * @param {number} [pastoralMeetingId] PastoralMeeting.Id
   * @param {number} [userId] User.Id
   * @param {number} [meetAttendanceType] 是否聚會出席狀態        對應SystemConfig        type &#x3D; MeetAttendanceType顯示 namevalue存此欄位0：尚未開課1：已出席2:未出席
   * @param {Array<SortProperty>} [sortProperties] 查詢欄位排序
   * @param {number} [page] 目前頁數
   * @param {number} [size] 每頁筆數
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof PastoralMeetingUserApi
   */
  public findPastoralMeetingUser(
    id?: number,
    pastoralMeetingId?: number,
    userId?: number,
    meetAttendanceType?: number,
    sortProperties?: Array<SortProperty>,
    page?: number,
    size?: number,
    options?: AxiosRequestConfig
  ) {
    return PastoralMeetingUserApiFp(this.configuration)
      .findPastoralMeetingUser(id, pastoralMeetingId, userId, meetAttendanceType, sortProperties, page, size, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary 以 Id 查詢列表
   * @param {number} id
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof PastoralMeetingUserApi
   */
  public getPastoralMeetingUser(id: number, options?: AxiosRequestConfig) {
    return PastoralMeetingUserApiFp(this.configuration)
      .getPastoralMeetingUser(id, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary 修改會議簽到
   * @param {UpdatePastoralMeetingUserCommand} [updatePastoralMeetingUserCommand]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof PastoralMeetingUserApi
   */
  public putPastoralMeetingUser(
    updatePastoralMeetingUserCommand?: UpdatePastoralMeetingUserCommand,
    options?: AxiosRequestConfig
  ) {
    return PastoralMeetingUserApiFp(this.configuration)
      .putPastoralMeetingUser(updatePastoralMeetingUserCommand, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary 查詢列表  (*dynamic sort support)
   * @param {QueryPastoralMeetingUserRequest} [queryPastoralMeetingUserRequest]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof PastoralMeetingUserApi
   */
  public queryPastoralMeetingUsers(
    queryPastoralMeetingUserRequest?: QueryPastoralMeetingUserRequest,
    options?: AxiosRequestConfig
  ) {
    return PastoralMeetingUserApiFp(this.configuration)
      .queryPastoralMeetingUsers(queryPastoralMeetingUserRequest, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary 刪除主檔
   * @param {number} id
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof PastoralMeetingUserApi
   */
  public removePastoralMeetingUser(id: number, options?: AxiosRequestConfig) {
    return PastoralMeetingUserApiFp(this.configuration)
      .removePastoralMeetingUser(id, options)
      .then((request) => request(this.axios, this.basePath));
  }
}

/**
 * PrivilegeApi - axios parameter creator
 * @export
 */
export const PrivilegeApiAxiosParamCreator = function (configuration?: Configuration) {
  return {
    /**
     *
     * @summary 建立角色
     * @param {CreatePrivilegeCommand} [createPrivilegeCommand]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createPrivilege: async (
      createPrivilegeCommand?: CreatePrivilegeCommand,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/privilege`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: "POST", ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication Example-id-1 required
      await setApiKeyToObject(localVarHeaderParameter, "Example-id-1", configuration);

      // authentication JWT_Authorization required
      await setApiKeyToObject(localVarHeaderParameter, "authorization", configuration);

      // authentication example-id-2 required
      await setApiKeyToObject(localVarHeaderParameter, "example-id-2", configuration);

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      localVarRequestOptions.data = serializeDataIfNeeded(
        createPrivilegeCommand,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary 刪除維修單主檔
     * @param {DeletePrivilegeCommand} [deletePrivilegeCommand]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deletePrivilege: async (
      deletePrivilegeCommand?: DeletePrivilegeCommand,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/privilege`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: "DELETE", ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication Example-id-1 required
      await setApiKeyToObject(localVarHeaderParameter, "Example-id-1", configuration);

      // authentication JWT_Authorization required
      await setApiKeyToObject(localVarHeaderParameter, "authorization", configuration);

      // authentication example-id-2 required
      await setApiKeyToObject(localVarHeaderParameter, "example-id-2", configuration);

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      localVarRequestOptions.data = serializeDataIfNeeded(
        deletePrivilegeCommand,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary 查詢維修單
     * @param {FetchAllPrivilegeRequest} [fetchAllPrivilegeRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    fetchPrivileges: async (
      fetchAllPrivilegeRequest?: FetchAllPrivilegeRequest,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/privilege/fetch`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: "POST", ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication Example-id-1 required
      await setApiKeyToObject(localVarHeaderParameter, "Example-id-1", configuration);

      // authentication JWT_Authorization required
      await setApiKeyToObject(localVarHeaderParameter, "authorization", configuration);

      // authentication example-id-2 required
      await setApiKeyToObject(localVarHeaderParameter, "example-id-2", configuration);

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      localVarRequestOptions.data = serializeDataIfNeeded(
        fetchAllPrivilegeRequest,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary 查詢角色  (*dynamic sort support)
     * @param {QueryPrivilegeRequest} [queryPrivilegeRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getPrivilege: async (
      queryPrivilegeRequest?: QueryPrivilegeRequest,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/privilege`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: "GET", ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication Example-id-1 required
      await setApiKeyToObject(localVarHeaderParameter, "Example-id-1", configuration);

      // authentication JWT_Authorization required
      await setApiKeyToObject(localVarHeaderParameter, "authorization", configuration);

      // authentication example-id-2 required
      await setApiKeyToObject(localVarHeaderParameter, "example-id-2", configuration);

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      localVarRequestOptions.data = serializeDataIfNeeded(queryPrivilegeRequest, localVarRequestOptions, configuration);

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary 以 Id 查詢列表
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getPrivilege_1: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists("getPrivilege_1", "id", id);
      const localVarPath = `/api/privilege/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(id)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: "GET", ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication Example-id-1 required
      await setApiKeyToObject(localVarHeaderParameter, "Example-id-1", configuration);

      // authentication JWT_Authorization required
      await setApiKeyToObject(localVarHeaderParameter, "authorization", configuration);

      // authentication example-id-2 required
      await setApiKeyToObject(localVarHeaderParameter, "example-id-2", configuration);

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary 修改
     * @param {PatchPrivilegeCommand} [patchPrivilegeCommand]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    patchPrivilege: async (
      patchPrivilegeCommand?: PatchPrivilegeCommand,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/privilege`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: "PATCH", ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication Example-id-1 required
      await setApiKeyToObject(localVarHeaderParameter, "Example-id-1", configuration);

      // authentication JWT_Authorization required
      await setApiKeyToObject(localVarHeaderParameter, "authorization", configuration);

      // authentication example-id-2 required
      await setApiKeyToObject(localVarHeaderParameter, "example-id-2", configuration);

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      localVarRequestOptions.data = serializeDataIfNeeded(patchPrivilegeCommand, localVarRequestOptions, configuration);

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary 修改角色
     * @param {UpdatePrivilegeCommand} [updatePrivilegeCommand]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    putPrivilege: async (
      updatePrivilegeCommand?: UpdatePrivilegeCommand,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/privilege`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: "PUT", ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication Example-id-1 required
      await setApiKeyToObject(localVarHeaderParameter, "Example-id-1", configuration);

      // authentication JWT_Authorization required
      await setApiKeyToObject(localVarHeaderParameter, "authorization", configuration);

      // authentication example-id-2 required
      await setApiKeyToObject(localVarHeaderParameter, "example-id-2", configuration);

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      localVarRequestOptions.data = serializeDataIfNeeded(
        updatePrivilegeCommand,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary 查詢列表  (*dynamic sort support)
     * @param {QueryPrivilegeRequest} [queryPrivilegeRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    queryPrivileges: async (
      queryPrivilegeRequest?: QueryPrivilegeRequest,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/privilege/query`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: "POST", ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication Example-id-1 required
      await setApiKeyToObject(localVarHeaderParameter, "Example-id-1", configuration);

      // authentication JWT_Authorization required
      await setApiKeyToObject(localVarHeaderParameter, "authorization", configuration);

      // authentication example-id-2 required
      await setApiKeyToObject(localVarHeaderParameter, "example-id-2", configuration);

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      localVarRequestOptions.data = serializeDataIfNeeded(queryPrivilegeRequest, localVarRequestOptions, configuration);

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary 刪除主檔
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    removePrivilege: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists("removePrivilege", "id", id);
      const localVarPath = `/api/privilege/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(id)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: "DELETE", ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication Example-id-1 required
      await setApiKeyToObject(localVarHeaderParameter, "Example-id-1", configuration);

      // authentication JWT_Authorization required
      await setApiKeyToObject(localVarHeaderParameter, "authorization", configuration);

      // authentication example-id-2 required
      await setApiKeyToObject(localVarHeaderParameter, "example-id-2", configuration);

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * PrivilegeApi - functional programming interface
 * @export
 */
export const PrivilegeApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = PrivilegeApiAxiosParamCreator(configuration);
  return {
    /**
     *
     * @summary 建立角色
     * @param {CreatePrivilegeCommand} [createPrivilegeCommand]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async createPrivilege(
      createPrivilegeCommand?: CreatePrivilegeCommand,
      options?: AxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<PrivilegeViewApiResponse>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.createPrivilege(createPrivilegeCommand, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     *
     * @summary 刪除維修單主檔
     * @param {DeletePrivilegeCommand} [deletePrivilegeCommand]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async deletePrivilege(
      deletePrivilegeCommand?: DeletePrivilegeCommand,
      options?: AxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<PrivilegeViewApiResponse>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.deletePrivilege(deletePrivilegeCommand, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     *
     * @summary 查詢維修單
     * @param {FetchAllPrivilegeRequest} [fetchAllPrivilegeRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async fetchPrivileges(
      fetchAllPrivilegeRequest?: FetchAllPrivilegeRequest,
      options?: AxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<PrivilegeViewListApiResponse>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.fetchPrivileges(fetchAllPrivilegeRequest, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     *
     * @summary 查詢角色  (*dynamic sort support)
     * @param {QueryPrivilegeRequest} [queryPrivilegeRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getPrivilege(
      queryPrivilegeRequest?: QueryPrivilegeRequest,
      options?: AxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<PrivilegeViewPageApiResponse>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getPrivilege(queryPrivilegeRequest, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     *
     * @summary 以 Id 查詢列表
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getPrivilege_1(
      id: string,
      options?: AxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<PrivilegeViewApiResponse>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getPrivilege_1(id, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     *
     * @summary 修改
     * @param {PatchPrivilegeCommand} [patchPrivilegeCommand]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async patchPrivilege(
      patchPrivilegeCommand?: PatchPrivilegeCommand,
      options?: AxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<PrivilegeViewApiResponse>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.patchPrivilege(patchPrivilegeCommand, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     *
     * @summary 修改角色
     * @param {UpdatePrivilegeCommand} [updatePrivilegeCommand]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async putPrivilege(
      updatePrivilegeCommand?: UpdatePrivilegeCommand,
      options?: AxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<PrivilegeViewApiResponse>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.putPrivilege(updatePrivilegeCommand, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     *
     * @summary 查詢列表  (*dynamic sort support)
     * @param {QueryPrivilegeRequest} [queryPrivilegeRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async queryPrivileges(
      queryPrivilegeRequest?: QueryPrivilegeRequest,
      options?: AxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<PrivilegeViewPageApiResponse>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.queryPrivileges(queryPrivilegeRequest, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     *
     * @summary 刪除主檔
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async removePrivilege(
      id: string,
      options?: AxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<Int32ApiResponse>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.removePrivilege(id, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
  };
};

/**
 * PrivilegeApi - factory interface
 * @export
 */
export const PrivilegeApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
  const localVarFp = PrivilegeApiFp(configuration);
  return {
    /**
     *
     * @summary 建立角色
     * @param {CreatePrivilegeCommand} [createPrivilegeCommand]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createPrivilege(createPrivilegeCommand?: CreatePrivilegeCommand, options?: any): Promise<PrivilegeViewApiResponse> {
      return localVarFp.createPrivilege(createPrivilegeCommand, options).then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary 刪除維修單主檔
     * @param {DeletePrivilegeCommand} [deletePrivilegeCommand]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deletePrivilege(deletePrivilegeCommand?: DeletePrivilegeCommand, options?: any): Promise<PrivilegeViewApiResponse> {
      return localVarFp.deletePrivilege(deletePrivilegeCommand, options).then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary 查詢維修單
     * @param {FetchAllPrivilegeRequest} [fetchAllPrivilegeRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    fetchPrivileges(
      fetchAllPrivilegeRequest?: FetchAllPrivilegeRequest,
      options?: any
    ): Promise<PrivilegeViewListApiResponse> {
      return localVarFp.fetchPrivileges(fetchAllPrivilegeRequest, options).then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary 查詢角色  (*dynamic sort support)
     * @param {QueryPrivilegeRequest} [queryPrivilegeRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getPrivilege(queryPrivilegeRequest?: QueryPrivilegeRequest, options?: any): Promise<PrivilegeViewPageApiResponse> {
      return localVarFp.getPrivilege(queryPrivilegeRequest, options).then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary 以 Id 查詢列表
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getPrivilege_1(id: string, options?: any): Promise<PrivilegeViewApiResponse> {
      return localVarFp.getPrivilege_1(id, options).then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary 修改
     * @param {PatchPrivilegeCommand} [patchPrivilegeCommand]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    patchPrivilege(patchPrivilegeCommand?: PatchPrivilegeCommand, options?: any): Promise<PrivilegeViewApiResponse> {
      return localVarFp.patchPrivilege(patchPrivilegeCommand, options).then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary 修改角色
     * @param {UpdatePrivilegeCommand} [updatePrivilegeCommand]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    putPrivilege(updatePrivilegeCommand?: UpdatePrivilegeCommand, options?: any): Promise<PrivilegeViewApiResponse> {
      return localVarFp.putPrivilege(updatePrivilegeCommand, options).then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary 查詢列表  (*dynamic sort support)
     * @param {QueryPrivilegeRequest} [queryPrivilegeRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    queryPrivileges(
      queryPrivilegeRequest?: QueryPrivilegeRequest,
      options?: any
    ): Promise<PrivilegeViewPageApiResponse> {
      return localVarFp.queryPrivileges(queryPrivilegeRequest, options).then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary 刪除主檔
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    removePrivilege(id: string, options?: any): Promise<Int32ApiResponse> {
      return localVarFp.removePrivilege(id, options).then((request) => request(axios, basePath));
    },
  };
};

/**
 * PrivilegeApi - interface
 * @export
 * @interface PrivilegeApi
 */
export interface PrivilegeApiInterface {
  /**
   *
   * @summary 建立角色
   * @param {CreatePrivilegeCommand} [createPrivilegeCommand]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof PrivilegeApiInterface
   */
  createPrivilege(
    createPrivilegeCommand?: CreatePrivilegeCommand,
    options?: AxiosRequestConfig
  ): Promise<PrivilegeViewApiResponse>;

  /**
   *
   * @summary 刪除維修單主檔
   * @param {DeletePrivilegeCommand} [deletePrivilegeCommand]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof PrivilegeApiInterface
   */
  deletePrivilege(
    deletePrivilegeCommand?: DeletePrivilegeCommand,
    options?: AxiosRequestConfig
  ): Promise<PrivilegeViewApiResponse>;

  /**
   *
   * @summary 查詢維修單
   * @param {FetchAllPrivilegeRequest} [fetchAllPrivilegeRequest]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof PrivilegeApiInterface
   */
  fetchPrivileges(
    fetchAllPrivilegeRequest?: FetchAllPrivilegeRequest,
    options?: AxiosRequestConfig
  ): Promise<PrivilegeViewListApiResponse>;

  /**
   *
   * @summary 查詢角色  (*dynamic sort support)
   * @param {QueryPrivilegeRequest} [queryPrivilegeRequest]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof PrivilegeApiInterface
   */
  getPrivilege(
    queryPrivilegeRequest?: QueryPrivilegeRequest,
    options?: AxiosRequestConfig
  ): Promise<PrivilegeViewPageApiResponse>;

  /**
   *
   * @summary 以 Id 查詢列表
   * @param {string} id
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof PrivilegeApiInterface
   */
  getPrivilege_1(id: string, options?: AxiosRequestConfig): Promise<PrivilegeViewApiResponse>;

  /**
   *
   * @summary 修改
   * @param {PatchPrivilegeCommand} [patchPrivilegeCommand]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof PrivilegeApiInterface
   */
  patchPrivilege(
    patchPrivilegeCommand?: PatchPrivilegeCommand,
    options?: AxiosRequestConfig
  ): Promise<PrivilegeViewApiResponse>;

  /**
   *
   * @summary 修改角色
   * @param {UpdatePrivilegeCommand} [updatePrivilegeCommand]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof PrivilegeApiInterface
   */
  putPrivilege(
    updatePrivilegeCommand?: UpdatePrivilegeCommand,
    options?: AxiosRequestConfig
  ): Promise<PrivilegeViewApiResponse>;

  /**
   *
   * @summary 查詢列表  (*dynamic sort support)
   * @param {QueryPrivilegeRequest} [queryPrivilegeRequest]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof PrivilegeApiInterface
   */
  queryPrivileges(
    queryPrivilegeRequest?: QueryPrivilegeRequest,
    options?: AxiosRequestConfig
  ): Promise<PrivilegeViewPageApiResponse>;

  /**
   *
   * @summary 刪除主檔
   * @param {string} id
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof PrivilegeApiInterface
   */
  removePrivilege(id: string, options?: AxiosRequestConfig): Promise<Int32ApiResponse>;
}

/**
 * PrivilegeApi - object-oriented interface
 * @export
 * @class PrivilegeApi
 * @extends {BaseAPI}
 */
export class PrivilegeApi extends BaseAPI implements PrivilegeApiInterface {
  /**
   *
   * @summary 建立角色
   * @param {CreatePrivilegeCommand} [createPrivilegeCommand]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof PrivilegeApi
   */
  public createPrivilege(createPrivilegeCommand?: CreatePrivilegeCommand, options?: AxiosRequestConfig) {
    return PrivilegeApiFp(this.configuration)
      .createPrivilege(createPrivilegeCommand, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary 刪除維修單主檔
   * @param {DeletePrivilegeCommand} [deletePrivilegeCommand]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof PrivilegeApi
   */
  public deletePrivilege(deletePrivilegeCommand?: DeletePrivilegeCommand, options?: AxiosRequestConfig) {
    return PrivilegeApiFp(this.configuration)
      .deletePrivilege(deletePrivilegeCommand, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary 查詢維修單
   * @param {FetchAllPrivilegeRequest} [fetchAllPrivilegeRequest]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof PrivilegeApi
   */
  public fetchPrivileges(fetchAllPrivilegeRequest?: FetchAllPrivilegeRequest, options?: AxiosRequestConfig) {
    return PrivilegeApiFp(this.configuration)
      .fetchPrivileges(fetchAllPrivilegeRequest, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary 查詢角色  (*dynamic sort support)
   * @param {QueryPrivilegeRequest} [queryPrivilegeRequest]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof PrivilegeApi
   */
  public getPrivilege(queryPrivilegeRequest?: QueryPrivilegeRequest, options?: AxiosRequestConfig) {
    return PrivilegeApiFp(this.configuration)
      .getPrivilege(queryPrivilegeRequest, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary 以 Id 查詢列表
   * @param {string} id
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof PrivilegeApi
   */
  public getPrivilege_1(id: string, options?: AxiosRequestConfig) {
    return PrivilegeApiFp(this.configuration)
      .getPrivilege_1(id, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary 修改
   * @param {PatchPrivilegeCommand} [patchPrivilegeCommand]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof PrivilegeApi
   */
  public patchPrivilege(patchPrivilegeCommand?: PatchPrivilegeCommand, options?: AxiosRequestConfig) {
    return PrivilegeApiFp(this.configuration)
      .patchPrivilege(patchPrivilegeCommand, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary 修改角色
   * @param {UpdatePrivilegeCommand} [updatePrivilegeCommand]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof PrivilegeApi
   */
  public putPrivilege(updatePrivilegeCommand?: UpdatePrivilegeCommand, options?: AxiosRequestConfig) {
    return PrivilegeApiFp(this.configuration)
      .putPrivilege(updatePrivilegeCommand, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary 查詢列表  (*dynamic sort support)
   * @param {QueryPrivilegeRequest} [queryPrivilegeRequest]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof PrivilegeApi
   */
  public queryPrivileges(queryPrivilegeRequest?: QueryPrivilegeRequest, options?: AxiosRequestConfig) {
    return PrivilegeApiFp(this.configuration)
      .queryPrivileges(queryPrivilegeRequest, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary 刪除主檔
   * @param {string} id
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof PrivilegeApi
   */
  public removePrivilege(id: string, options?: AxiosRequestConfig) {
    return PrivilegeApiFp(this.configuration)
      .removePrivilege(id, options)
      .then((request) => request(this.axios, this.basePath));
  }
}

/**
 * QrCodeApi - axios parameter creator
 * @export
 */
export const QrCodeApiAxiosParamCreator = function (configuration?: Configuration) {
  return {
    /**
     *
     * @summary 建立QrCode主檔
     * @param {CreateQrCodeCommand} [createQrCodeCommand]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createQrCode: async (
      createQrCodeCommand?: CreateQrCodeCommand,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/qrCode`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: "POST", ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication Example-id-1 required
      await setApiKeyToObject(localVarHeaderParameter, "Example-id-1", configuration);

      // authentication JWT_Authorization required
      await setApiKeyToObject(localVarHeaderParameter, "authorization", configuration);

      // authentication example-id-2 required
      await setApiKeyToObject(localVarHeaderParameter, "example-id-2", configuration);

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      localVarRequestOptions.data = serializeDataIfNeeded(createQrCodeCommand, localVarRequestOptions, configuration);

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary 刪除QrCode主檔
     * @param {DeleteQrCodeCommand} [deleteQrCodeCommand]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteQrCode: async (
      deleteQrCodeCommand?: DeleteQrCodeCommand,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/qrCode`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: "DELETE", ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication Example-id-1 required
      await setApiKeyToObject(localVarHeaderParameter, "Example-id-1", configuration);

      // authentication JWT_Authorization required
      await setApiKeyToObject(localVarHeaderParameter, "authorization", configuration);

      // authentication example-id-2 required
      await setApiKeyToObject(localVarHeaderParameter, "example-id-2", configuration);

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      localVarRequestOptions.data = serializeDataIfNeeded(deleteQrCodeCommand, localVarRequestOptions, configuration);

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary 查詢QR
     * @param {FetchAllQrCodeRequest} [fetchAllQrCodeRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    fetchQrCodes: async (
      fetchAllQrCodeRequest?: FetchAllQrCodeRequest,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/qrCode/fetch`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: "POST", ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication Example-id-1 required
      await setApiKeyToObject(localVarHeaderParameter, "Example-id-1", configuration);

      // authentication JWT_Authorization required
      await setApiKeyToObject(localVarHeaderParameter, "authorization", configuration);

      // authentication example-id-2 required
      await setApiKeyToObject(localVarHeaderParameter, "example-id-2", configuration);

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      localVarRequestOptions.data = serializeDataIfNeeded(fetchAllQrCodeRequest, localVarRequestOptions, configuration);

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary 查詢QrCode主檔
     * @param {number} [id] QrCodeId
     * @param {number} [referenceType] 報到類別對應 systemconfig.Type&#x3D;RefferenceType 0:兒童個人報到專用 1:小組報到 2:主日報到 3:領袖之夜報到 4:課程報到 5:事工團報到 6:問卷填寫
     * @param {number} [referenceId] 對應報到類別主擋Id
     * @param {number} [userId] 報到使用者Id
     * @param {string} [generateCode] Id+RefferenceType+UserId 產生唯一值
     * @param {number} [registerStatus] 付款方式 對應SystemConfig內Type&#x3D;RegisterStatus 0:尚未報到 1:已報到
     * @param {string} [registerTime] 報到時間
     * @param {Array<SortProperty>} [sortProperties] 查詢欄位排序
     * @param {number} [page] 目前頁數
     * @param {number} [size] 每頁筆數
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    findQrCode: async (
      id?: number,
      referenceType?: number,
      referenceId?: number,
      userId?: number,
      generateCode?: string,
      registerStatus?: number,
      registerTime?: string,
      sortProperties?: Array<SortProperty>,
      page?: number,
      size?: number,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/qrCode`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: "GET", ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication Example-id-1 required
      await setApiKeyToObject(localVarHeaderParameter, "Example-id-1", configuration);

      // authentication JWT_Authorization required
      await setApiKeyToObject(localVarHeaderParameter, "authorization", configuration);

      // authentication example-id-2 required
      await setApiKeyToObject(localVarHeaderParameter, "example-id-2", configuration);

      if (id !== undefined) {
        localVarQueryParameter["id"] = id;
      }

      if (referenceType !== undefined) {
        localVarQueryParameter["referenceType"] = referenceType;
      }

      if (referenceId !== undefined) {
        localVarQueryParameter["referenceId"] = referenceId;
      }

      if (userId !== undefined) {
        localVarQueryParameter["userId"] = userId;
      }

      if (generateCode !== undefined) {
        localVarQueryParameter["generateCode"] = generateCode;
      }

      if (registerStatus !== undefined) {
        localVarQueryParameter["registerStatus"] = registerStatus;
      }

      if (registerTime !== undefined) {
        localVarQueryParameter["registerTime"] =
          (registerTime as any) instanceof Date ? (registerTime as any).toISOString() : registerTime;
      }

      if (sortProperties) {
        localVarQueryParameter["sortProperties"] = sortProperties;
      }

      if (page !== undefined) {
        localVarQueryParameter["page"] = page;
      }

      if (size !== undefined) {
        localVarQueryParameter["size"] = size;
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary 以 Id 查詢列表
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getQrCode: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists("getQrCode", "id", id);
      const localVarPath = `/api/qrCode/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(id)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: "GET", ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication Example-id-1 required
      await setApiKeyToObject(localVarHeaderParameter, "Example-id-1", configuration);

      // authentication JWT_Authorization required
      await setApiKeyToObject(localVarHeaderParameter, "authorization", configuration);

      // authentication example-id-2 required
      await setApiKeyToObject(localVarHeaderParameter, "example-id-2", configuration);

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary 修改QrCode主檔
     * @param {UpdateQrCodeCommand} [updateQrCodeCommand]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    putQrCode: async (
      updateQrCodeCommand?: UpdateQrCodeCommand,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/qrCode`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: "PUT", ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication Example-id-1 required
      await setApiKeyToObject(localVarHeaderParameter, "Example-id-1", configuration);

      // authentication JWT_Authorization required
      await setApiKeyToObject(localVarHeaderParameter, "authorization", configuration);

      // authentication example-id-2 required
      await setApiKeyToObject(localVarHeaderParameter, "example-id-2", configuration);

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      localVarRequestOptions.data = serializeDataIfNeeded(updateQrCodeCommand, localVarRequestOptions, configuration);

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary 查詢列表  (*dynamic sort support)
     * @param {QueryQrCodeRequest} [queryQrCodeRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    queryQrCodes: async (
      queryQrCodeRequest?: QueryQrCodeRequest,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/qrCode/query`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: "POST", ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication Example-id-1 required
      await setApiKeyToObject(localVarHeaderParameter, "Example-id-1", configuration);

      // authentication JWT_Authorization required
      await setApiKeyToObject(localVarHeaderParameter, "authorization", configuration);

      // authentication example-id-2 required
      await setApiKeyToObject(localVarHeaderParameter, "example-id-2", configuration);

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      localVarRequestOptions.data = serializeDataIfNeeded(queryQrCodeRequest, localVarRequestOptions, configuration);

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary 刪除主檔
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    removeQrCode: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists("removeQrCode", "id", id);
      const localVarPath = `/api/qrCode/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(id)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: "DELETE", ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication Example-id-1 required
      await setApiKeyToObject(localVarHeaderParameter, "Example-id-1", configuration);

      // authentication JWT_Authorization required
      await setApiKeyToObject(localVarHeaderParameter, "authorization", configuration);

      // authentication example-id-2 required
      await setApiKeyToObject(localVarHeaderParameter, "example-id-2", configuration);

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {number} [referenceId]
     * @param {number} [referencetype]
     * @param {number} [userid]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    showQrCode: async (
      referenceId?: number,
      referencetype?: number,
      userid?: number,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/qrCode/show`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: "GET", ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication Example-id-1 required
      await setApiKeyToObject(localVarHeaderParameter, "Example-id-1", configuration);

      // authentication JWT_Authorization required
      await setApiKeyToObject(localVarHeaderParameter, "authorization", configuration);

      // authentication example-id-2 required
      await setApiKeyToObject(localVarHeaderParameter, "example-id-2", configuration);

      if (referenceId !== undefined) {
        localVarQueryParameter["referenceId"] = referenceId;
      }

      if (referencetype !== undefined) {
        localVarQueryParameter["referencetype"] = referencetype;
      }

      if (userid !== undefined) {
        localVarQueryParameter["userid"] = userid;
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {string} [generateCode]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    signIdQrCode: async (generateCode?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
      const localVarPath = `/api/qrCode/sign`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: "GET", ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication Example-id-1 required
      await setApiKeyToObject(localVarHeaderParameter, "Example-id-1", configuration);

      // authentication JWT_Authorization required
      await setApiKeyToObject(localVarHeaderParameter, "authorization", configuration);

      // authentication example-id-2 required
      await setApiKeyToObject(localVarHeaderParameter, "example-id-2", configuration);

      if (generateCode !== undefined) {
        localVarQueryParameter["generateCode"] = generateCode;
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * QrCodeApi - functional programming interface
 * @export
 */
export const QrCodeApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = QrCodeApiAxiosParamCreator(configuration);
  return {
    /**
     *
     * @summary 建立QrCode主檔
     * @param {CreateQrCodeCommand} [createQrCodeCommand]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async createQrCode(
      createQrCodeCommand?: CreateQrCodeCommand,
      options?: AxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<QrCodeViewApiResponse>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.createQrCode(createQrCodeCommand, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     *
     * @summary 刪除QrCode主檔
     * @param {DeleteQrCodeCommand} [deleteQrCodeCommand]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async deleteQrCode(
      deleteQrCodeCommand?: DeleteQrCodeCommand,
      options?: AxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<QrCodeViewApiResponse>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.deleteQrCode(deleteQrCodeCommand, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     *
     * @summary 查詢QR
     * @param {FetchAllQrCodeRequest} [fetchAllQrCodeRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async fetchQrCodes(
      fetchAllQrCodeRequest?: FetchAllQrCodeRequest,
      options?: AxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<QrCodeViewListApiResponse>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.fetchQrCodes(fetchAllQrCodeRequest, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     *
     * @summary 查詢QrCode主檔
     * @param {number} [id] QrCodeId
     * @param {number} [referenceType] 報到類別對應 systemconfig.Type&#x3D;RefferenceType 0:兒童個人報到專用 1:小組報到 2:主日報到 3:領袖之夜報到 4:課程報到 5:事工團報到 6:問卷填寫
     * @param {number} [referenceId] 對應報到類別主擋Id
     * @param {number} [userId] 報到使用者Id
     * @param {string} [generateCode] Id+RefferenceType+UserId 產生唯一值
     * @param {number} [registerStatus] 付款方式 對應SystemConfig內Type&#x3D;RegisterStatus 0:尚未報到 1:已報到
     * @param {string} [registerTime] 報到時間
     * @param {Array<SortProperty>} [sortProperties] 查詢欄位排序
     * @param {number} [page] 目前頁數
     * @param {number} [size] 每頁筆數
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async findQrCode(
      id?: number,
      referenceType?: number,
      referenceId?: number,
      userId?: number,
      generateCode?: string,
      registerStatus?: number,
      registerTime?: string,
      sortProperties?: Array<SortProperty>,
      page?: number,
      size?: number,
      options?: AxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<QrCodeViewPageApiResponse>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.findQrCode(
        id,
        referenceType,
        referenceId,
        userId,
        generateCode,
        registerStatus,
        registerTime,
        sortProperties,
        page,
        size,
        options
      );
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     *
     * @summary 以 Id 查詢列表
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getQrCode(
      id: number,
      options?: AxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<QrCodeViewApiResponse>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getQrCode(id, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     *
     * @summary 修改QrCode主檔
     * @param {UpdateQrCodeCommand} [updateQrCodeCommand]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async putQrCode(
      updateQrCodeCommand?: UpdateQrCodeCommand,
      options?: AxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<QrCodeViewApiResponse>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.putQrCode(updateQrCodeCommand, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     *
     * @summary 查詢列表  (*dynamic sort support)
     * @param {QueryQrCodeRequest} [queryQrCodeRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async queryQrCodes(
      queryQrCodeRequest?: QueryQrCodeRequest,
      options?: AxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<QrCodeViewPageApiResponse>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.queryQrCodes(queryQrCodeRequest, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     *
     * @summary 刪除主檔
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async removeQrCode(
      id: number,
      options?: AxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<Int32ApiResponse>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.removeQrCode(id, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     *
     * @param {number} [referenceId]
     * @param {number} [referencetype]
     * @param {number} [userid]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async showQrCode(
      referenceId?: number,
      referencetype?: number,
      userid?: number,
      options?: AxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<QrCodeViewApiResponse>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.showQrCode(referenceId, referencetype, userid, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     *
     * @param {string} [generateCode]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async signIdQrCode(
      generateCode?: string,
      options?: AxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<QrCodeViewApiResponse>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.signIdQrCode(generateCode, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
  };
};

/**
 * QrCodeApi - factory interface
 * @export
 */
export const QrCodeApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
  const localVarFp = QrCodeApiFp(configuration);
  return {
    /**
     *
     * @summary 建立QrCode主檔
     * @param {CreateQrCodeCommand} [createQrCodeCommand]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createQrCode(createQrCodeCommand?: CreateQrCodeCommand, options?: any): Promise<QrCodeViewApiResponse> {
      return localVarFp.createQrCode(createQrCodeCommand, options).then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary 刪除QrCode主檔
     * @param {DeleteQrCodeCommand} [deleteQrCodeCommand]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteQrCode(deleteQrCodeCommand?: DeleteQrCodeCommand, options?: any): Promise<QrCodeViewApiResponse> {
      return localVarFp.deleteQrCode(deleteQrCodeCommand, options).then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary 查詢QR
     * @param {FetchAllQrCodeRequest} [fetchAllQrCodeRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    fetchQrCodes(fetchAllQrCodeRequest?: FetchAllQrCodeRequest, options?: any): Promise<QrCodeViewListApiResponse> {
      return localVarFp.fetchQrCodes(fetchAllQrCodeRequest, options).then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary 查詢QrCode主檔
     * @param {number} [id] QrCodeId
     * @param {number} [referenceType] 報到類別對應 systemconfig.Type&#x3D;RefferenceType 0:兒童個人報到專用 1:小組報到 2:主日報到 3:領袖之夜報到 4:課程報到 5:事工團報到 6:問卷填寫
     * @param {number} [referenceId] 對應報到類別主擋Id
     * @param {number} [userId] 報到使用者Id
     * @param {string} [generateCode] Id+RefferenceType+UserId 產生唯一值
     * @param {number} [registerStatus] 付款方式 對應SystemConfig內Type&#x3D;RegisterStatus 0:尚未報到 1:已報到
     * @param {string} [registerTime] 報到時間
     * @param {Array<SortProperty>} [sortProperties] 查詢欄位排序
     * @param {number} [page] 目前頁數
     * @param {number} [size] 每頁筆數
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    findQrCode(
      id?: number,
      referenceType?: number,
      referenceId?: number,
      userId?: number,
      generateCode?: string,
      registerStatus?: number,
      registerTime?: string,
      sortProperties?: Array<SortProperty>,
      page?: number,
      size?: number,
      options?: any
    ): Promise<QrCodeViewPageApiResponse> {
      return localVarFp
        .findQrCode(
          id,
          referenceType,
          referenceId,
          userId,
          generateCode,
          registerStatus,
          registerTime,
          sortProperties,
          page,
          size,
          options
        )
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary 以 Id 查詢列表
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getQrCode(id: number, options?: any): Promise<QrCodeViewApiResponse> {
      return localVarFp.getQrCode(id, options).then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary 修改QrCode主檔
     * @param {UpdateQrCodeCommand} [updateQrCodeCommand]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    putQrCode(updateQrCodeCommand?: UpdateQrCodeCommand, options?: any): Promise<QrCodeViewApiResponse> {
      return localVarFp.putQrCode(updateQrCodeCommand, options).then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary 查詢列表  (*dynamic sort support)
     * @param {QueryQrCodeRequest} [queryQrCodeRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    queryQrCodes(queryQrCodeRequest?: QueryQrCodeRequest, options?: any): Promise<QrCodeViewPageApiResponse> {
      return localVarFp.queryQrCodes(queryQrCodeRequest, options).then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary 刪除主檔
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    removeQrCode(id: number, options?: any): Promise<Int32ApiResponse> {
      return localVarFp.removeQrCode(id, options).then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {number} [referenceId]
     * @param {number} [referencetype]
     * @param {number} [userid]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    showQrCode(
      referenceId?: number,
      referencetype?: number,
      userid?: number,
      options?: any
    ): Promise<QrCodeViewApiResponse> {
      return localVarFp
        .showQrCode(referenceId, referencetype, userid, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {string} [generateCode]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    signIdQrCode(generateCode?: string, options?: any): Promise<QrCodeViewApiResponse> {
      return localVarFp.signIdQrCode(generateCode, options).then((request) => request(axios, basePath));
    },
  };
};

/**
 * QrCodeApi - interface
 * @export
 * @interface QrCodeApi
 */
export interface QrCodeApiInterface {
  /**
   *
   * @summary 建立QrCode主檔
   * @param {CreateQrCodeCommand} [createQrCodeCommand]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof QrCodeApiInterface
   */
  createQrCode(createQrCodeCommand?: CreateQrCodeCommand, options?: AxiosRequestConfig): Promise<QrCodeViewApiResponse>;

  /**
   *
   * @summary 刪除QrCode主檔
   * @param {DeleteQrCodeCommand} [deleteQrCodeCommand]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof QrCodeApiInterface
   */
  deleteQrCode(deleteQrCodeCommand?: DeleteQrCodeCommand, options?: AxiosRequestConfig): Promise<QrCodeViewApiResponse>;

  /**
   *
   * @summary 查詢QR
   * @param {FetchAllQrCodeRequest} [fetchAllQrCodeRequest]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof QrCodeApiInterface
   */
  fetchQrCodes(
    fetchAllQrCodeRequest?: FetchAllQrCodeRequest,
    options?: AxiosRequestConfig
  ): Promise<QrCodeViewListApiResponse>;

  /**
   *
   * @summary 查詢QrCode主檔
   * @param {number} [id] QrCodeId
   * @param {number} [referenceType] 報到類別對應 systemconfig.Type&#x3D;RefferenceType 0:兒童個人報到專用 1:小組報到 2:主日報到 3:領袖之夜報到 4:課程報到 5:事工團報到 6:問卷填寫
   * @param {number} [referenceId] 對應報到類別主擋Id
   * @param {number} [userId] 報到使用者Id
   * @param {string} [generateCode] Id+RefferenceType+UserId 產生唯一值
   * @param {number} [registerStatus] 付款方式 對應SystemConfig內Type&#x3D;RegisterStatus 0:尚未報到 1:已報到
   * @param {string} [registerTime] 報到時間
   * @param {Array<SortProperty>} [sortProperties] 查詢欄位排序
   * @param {number} [page] 目前頁數
   * @param {number} [size] 每頁筆數
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof QrCodeApiInterface
   */
  findQrCode(
    id?: number,
    referenceType?: number,
    referenceId?: number,
    userId?: number,
    generateCode?: string,
    registerStatus?: number,
    registerTime?: string,
    sortProperties?: Array<SortProperty>,
    page?: number,
    size?: number,
    options?: AxiosRequestConfig
  ): Promise<QrCodeViewPageApiResponse>;

  /**
   *
   * @summary 以 Id 查詢列表
   * @param {number} id
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof QrCodeApiInterface
   */
  getQrCode(id: number, options?: AxiosRequestConfig): Promise<QrCodeViewApiResponse>;

  /**
   *
   * @summary 修改QrCode主檔
   * @param {UpdateQrCodeCommand} [updateQrCodeCommand]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof QrCodeApiInterface
   */
  putQrCode(updateQrCodeCommand?: UpdateQrCodeCommand, options?: AxiosRequestConfig): Promise<QrCodeViewApiResponse>;

  /**
   *
   * @summary 查詢列表  (*dynamic sort support)
   * @param {QueryQrCodeRequest} [queryQrCodeRequest]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof QrCodeApiInterface
   */
  queryQrCodes(
    queryQrCodeRequest?: QueryQrCodeRequest,
    options?: AxiosRequestConfig
  ): Promise<QrCodeViewPageApiResponse>;

  /**
   *
   * @summary 刪除主檔
   * @param {number} id
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof QrCodeApiInterface
   */
  removeQrCode(id: number, options?: AxiosRequestConfig): Promise<Int32ApiResponse>;

  /**
   *
   * @param {number} [referenceId]
   * @param {number} [referencetype]
   * @param {number} [userid]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof QrCodeApiInterface
   */
  showQrCode(
    referenceId?: number,
    referencetype?: number,
    userid?: number,
    options?: AxiosRequestConfig
  ): Promise<QrCodeViewApiResponse>;

  /**
   *
   * @param {string} [generateCode]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof QrCodeApiInterface
   */
  signIdQrCode(generateCode?: string, options?: AxiosRequestConfig): Promise<QrCodeViewApiResponse>;
}

/**
 * QrCodeApi - object-oriented interface
 * @export
 * @class QrCodeApi
 * @extends {BaseAPI}
 */
export class QrCodeApi extends BaseAPI implements QrCodeApiInterface {
  /**
   *
   * @summary 建立QrCode主檔
   * @param {CreateQrCodeCommand} [createQrCodeCommand]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof QrCodeApi
   */
  public createQrCode(createQrCodeCommand?: CreateQrCodeCommand, options?: AxiosRequestConfig) {
    return QrCodeApiFp(this.configuration)
      .createQrCode(createQrCodeCommand, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary 刪除QrCode主檔
   * @param {DeleteQrCodeCommand} [deleteQrCodeCommand]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof QrCodeApi
   */
  public deleteQrCode(deleteQrCodeCommand?: DeleteQrCodeCommand, options?: AxiosRequestConfig) {
    return QrCodeApiFp(this.configuration)
      .deleteQrCode(deleteQrCodeCommand, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary 查詢QR
   * @param {FetchAllQrCodeRequest} [fetchAllQrCodeRequest]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof QrCodeApi
   */
  public fetchQrCodes(fetchAllQrCodeRequest?: FetchAllQrCodeRequest, options?: AxiosRequestConfig) {
    return QrCodeApiFp(this.configuration)
      .fetchQrCodes(fetchAllQrCodeRequest, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary 查詢QrCode主檔
   * @param {number} [id] QrCodeId
   * @param {number} [referenceType] 報到類別對應 systemconfig.Type&#x3D;RefferenceType 0:兒童個人報到專用 1:小組報到 2:主日報到 3:領袖之夜報到 4:課程報到 5:事工團報到 6:問卷填寫
   * @param {number} [referenceId] 對應報到類別主擋Id
   * @param {number} [userId] 報到使用者Id
   * @param {string} [generateCode] Id+RefferenceType+UserId 產生唯一值
   * @param {number} [registerStatus] 付款方式 對應SystemConfig內Type&#x3D;RegisterStatus 0:尚未報到 1:已報到
   * @param {string} [registerTime] 報到時間
   * @param {Array<SortProperty>} [sortProperties] 查詢欄位排序
   * @param {number} [page] 目前頁數
   * @param {number} [size] 每頁筆數
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof QrCodeApi
   */
  public findQrCode(
    id?: number,
    referenceType?: number,
    referenceId?: number,
    userId?: number,
    generateCode?: string,
    registerStatus?: number,
    registerTime?: string,
    sortProperties?: Array<SortProperty>,
    page?: number,
    size?: number,
    options?: AxiosRequestConfig
  ) {
    return QrCodeApiFp(this.configuration)
      .findQrCode(
        id,
        referenceType,
        referenceId,
        userId,
        generateCode,
        registerStatus,
        registerTime,
        sortProperties,
        page,
        size,
        options
      )
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary 以 Id 查詢列表
   * @param {number} id
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof QrCodeApi
   */
  public getQrCode(id: number, options?: AxiosRequestConfig) {
    return QrCodeApiFp(this.configuration)
      .getQrCode(id, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary 修改QrCode主檔
   * @param {UpdateQrCodeCommand} [updateQrCodeCommand]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof QrCodeApi
   */
  public putQrCode(updateQrCodeCommand?: UpdateQrCodeCommand, options?: AxiosRequestConfig) {
    return QrCodeApiFp(this.configuration)
      .putQrCode(updateQrCodeCommand, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary 查詢列表  (*dynamic sort support)
   * @param {QueryQrCodeRequest} [queryQrCodeRequest]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof QrCodeApi
   */
  public queryQrCodes(queryQrCodeRequest?: QueryQrCodeRequest, options?: AxiosRequestConfig) {
    return QrCodeApiFp(this.configuration)
      .queryQrCodes(queryQrCodeRequest, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary 刪除主檔
   * @param {number} id
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof QrCodeApi
   */
  public removeQrCode(id: number, options?: AxiosRequestConfig) {
    return QrCodeApiFp(this.configuration)
      .removeQrCode(id, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {number} [referenceId]
   * @param {number} [referencetype]
   * @param {number} [userid]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof QrCodeApi
   */
  public showQrCode(referenceId?: number, referencetype?: number, userid?: number, options?: AxiosRequestConfig) {
    return QrCodeApiFp(this.configuration)
      .showQrCode(referenceId, referencetype, userid, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {string} [generateCode]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof QrCodeApi
   */
  public signIdQrCode(generateCode?: string, options?: AxiosRequestConfig) {
    return QrCodeApiFp(this.configuration)
      .signIdQrCode(generateCode, options)
      .then((request) => request(this.axios, this.basePath));
  }
}

/**
 * QuestionnaireApi - axios parameter creator
 * @export
 */
export const QuestionnaireApiAxiosParamCreator = function (configuration?: Configuration) {
  return {
    /**
     *
     * @summary 建立問卷
     * @param {CreateQuestionnaireCommand} [createQuestionnaireCommand]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createQuestionnaire: async (
      createQuestionnaireCommand?: CreateQuestionnaireCommand,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/questionnaire`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: "POST", ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication Example-id-1 required
      await setApiKeyToObject(localVarHeaderParameter, "Example-id-1", configuration);

      // authentication JWT_Authorization required
      await setApiKeyToObject(localVarHeaderParameter, "authorization", configuration);

      // authentication example-id-2 required
      await setApiKeyToObject(localVarHeaderParameter, "example-id-2", configuration);

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      localVarRequestOptions.data = serializeDataIfNeeded(
        createQuestionnaireCommand,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary 刪除問卷
     * @param {DeleteQuestionnaireCommand} [deleteQuestionnaireCommand]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteQuestionnaire: async (
      deleteQuestionnaireCommand?: DeleteQuestionnaireCommand,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/questionnaire`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: "DELETE", ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication Example-id-1 required
      await setApiKeyToObject(localVarHeaderParameter, "Example-id-1", configuration);

      // authentication JWT_Authorization required
      await setApiKeyToObject(localVarHeaderParameter, "authorization", configuration);

      // authentication example-id-2 required
      await setApiKeyToObject(localVarHeaderParameter, "example-id-2", configuration);

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      localVarRequestOptions.data = serializeDataIfNeeded(
        deleteQuestionnaireCommand,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary 查詢問卷
     * @param {FetchAllQuestionnaireRequest} [fetchAllQuestionnaireRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    fetchQuestionnaires: async (
      fetchAllQuestionnaireRequest?: FetchAllQuestionnaireRequest,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/questionnaire/fetch`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: "POST", ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication Example-id-1 required
      await setApiKeyToObject(localVarHeaderParameter, "Example-id-1", configuration);

      // authentication JWT_Authorization required
      await setApiKeyToObject(localVarHeaderParameter, "authorization", configuration);

      // authentication example-id-2 required
      await setApiKeyToObject(localVarHeaderParameter, "example-id-2", configuration);

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      localVarRequestOptions.data = serializeDataIfNeeded(
        fetchAllQuestionnaireRequest,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary 查詢問卷
     * @param {number} [id] 問卷Id
     * @param {string} [questionnaireJoinLocation] 問卷堂點類別        type&#x3D;QuestionnaireJoinLocation       顯示 name     value存此欄位0：堂點
     * @param {string} [questionnaireType] 問卷類型type&#x3D;QuestionnaireType顯示 namevalue存此欄位0：課程問卷 1:服事徵召 2:一般問卷
     * @param {string} [name] 問卷名稱
     * @param {string} [description] 問卷說明
     * @param {number} [organizationId] 指定堂點
     * @param {number} [pastoralId] 指定牧區
     * @param {number} [courseManagementTypeId] 指定課程分類
     * @param {string} [courseManagementName] 指定課程名稱
     * @param {string} [courseYear] 指定年度
     * @param {string} [courseSeason] 指定季
     * @param {string} [courseClassNum] 指定梯次
     * @param {string} [courseManagementNo] 指定課程代碼
     * @param {string} [dateRangeS] 作業繳交日期起 courseHomeworkDate
     * @param {string} [dateRangeE] 作業繳交日期迄courseHomeworkDate
     * @param {Array<SortProperty>} [sortProperties] 查詢欄位排序
     * @param {number} [page] 目前頁數
     * @param {number} [size] 每頁筆數
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    findQuestionnaire: async (
      id?: number,
      questionnaireJoinLocation?: string,
      questionnaireType?: string,
      name?: string,
      description?: string,
      organizationId?: number,
      pastoralId?: number,
      courseManagementTypeId?: number,
      courseManagementName?: string,
      courseYear?: string,
      courseSeason?: string,
      courseClassNum?: string,
      courseManagementNo?: string,
      dateRangeS?: string,
      dateRangeE?: string,
      sortProperties?: Array<SortProperty>,
      page?: number,
      size?: number,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/questionnaire`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: "GET", ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication Example-id-1 required
      await setApiKeyToObject(localVarHeaderParameter, "Example-id-1", configuration);

      // authentication JWT_Authorization required
      await setApiKeyToObject(localVarHeaderParameter, "authorization", configuration);

      // authentication example-id-2 required
      await setApiKeyToObject(localVarHeaderParameter, "example-id-2", configuration);

      if (id !== undefined) {
        localVarQueryParameter["id"] = id;
      }

      if (questionnaireJoinLocation !== undefined) {
        localVarQueryParameter["questionnaireJoinLocation"] = questionnaireJoinLocation;
      }

      if (questionnaireType !== undefined) {
        localVarQueryParameter["questionnaireType"] = questionnaireType;
      }

      if (name !== undefined) {
        localVarQueryParameter["name"] = name;
      }

      if (description !== undefined) {
        localVarQueryParameter["description"] = description;
      }

      if (organizationId !== undefined) {
        localVarQueryParameter["organizationId"] = organizationId;
      }

      if (pastoralId !== undefined) {
        localVarQueryParameter["pastoralId"] = pastoralId;
      }

      if (courseManagementTypeId !== undefined) {
        localVarQueryParameter["courseManagementTypeId"] = courseManagementTypeId;
      }

      if (courseManagementName !== undefined) {
        localVarQueryParameter["courseManagementName"] = courseManagementName;
      }

      if (courseYear !== undefined) {
        localVarQueryParameter["courseYear"] = courseYear;
      }

      if (courseSeason !== undefined) {
        localVarQueryParameter["courseSeason"] = courseSeason;
      }

      if (courseClassNum !== undefined) {
        localVarQueryParameter["courseClassNum"] = courseClassNum;
      }

      if (courseManagementNo !== undefined) {
        localVarQueryParameter["courseManagementNo"] = courseManagementNo;
      }

      if (dateRangeS !== undefined) {
        localVarQueryParameter["dateRangeS"] =
          (dateRangeS as any) instanceof Date ? (dateRangeS as any).toISOString() : dateRangeS;
      }

      if (dateRangeE !== undefined) {
        localVarQueryParameter["dateRangeE"] =
          (dateRangeE as any) instanceof Date ? (dateRangeE as any).toISOString() : dateRangeE;
      }

      if (sortProperties) {
        localVarQueryParameter["sortProperties"] = sortProperties;
      }

      if (page !== undefined) {
        localVarQueryParameter["page"] = page;
      }

      if (size !== undefined) {
        localVarQueryParameter["size"] = size;
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary 以 Id 查詢問卷
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getQuestionnaire: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists("getQuestionnaire", "id", id);
      const localVarPath = `/api/questionnaire/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(id)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: "GET", ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication Example-id-1 required
      await setApiKeyToObject(localVarHeaderParameter, "Example-id-1", configuration);

      // authentication JWT_Authorization required
      await setApiKeyToObject(localVarHeaderParameter, "authorization", configuration);

      // authentication example-id-2 required
      await setApiKeyToObject(localVarHeaderParameter, "example-id-2", configuration);

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary 修改問卷
     * @param {UpdateQuestionnaireCommand} [updateQuestionnaireCommand]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    putQuestionnaire: async (
      updateQuestionnaireCommand?: UpdateQuestionnaireCommand,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/questionnaire`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: "PUT", ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication Example-id-1 required
      await setApiKeyToObject(localVarHeaderParameter, "Example-id-1", configuration);

      // authentication JWT_Authorization required
      await setApiKeyToObject(localVarHeaderParameter, "authorization", configuration);

      // authentication example-id-2 required
      await setApiKeyToObject(localVarHeaderParameter, "example-id-2", configuration);

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      localVarRequestOptions.data = serializeDataIfNeeded(
        updateQuestionnaireCommand,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary 查詢問卷列表  (*dynamic sort support)
     * @param {QueryQuestionnaireRequest} [queryQuestionnaireRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    queryQuestionnaires: async (
      queryQuestionnaireRequest?: QueryQuestionnaireRequest,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/questionnaire/query`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: "POST", ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication Example-id-1 required
      await setApiKeyToObject(localVarHeaderParameter, "Example-id-1", configuration);

      // authentication JWT_Authorization required
      await setApiKeyToObject(localVarHeaderParameter, "authorization", configuration);

      // authentication example-id-2 required
      await setApiKeyToObject(localVarHeaderParameter, "example-id-2", configuration);

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      localVarRequestOptions.data = serializeDataIfNeeded(
        queryQuestionnaireRequest,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary 刪除主檔
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    removeQuestionnaire: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists("removeQuestionnaire", "id", id);
      const localVarPath = `/api/questionnaire/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(id)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: "DELETE", ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication Example-id-1 required
      await setApiKeyToObject(localVarHeaderParameter, "Example-id-1", configuration);

      // authentication JWT_Authorization required
      await setApiKeyToObject(localVarHeaderParameter, "authorization", configuration);

      // authentication example-id-2 required
      await setApiKeyToObject(localVarHeaderParameter, "example-id-2", configuration);

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * QuestionnaireApi - functional programming interface
 * @export
 */
export const QuestionnaireApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = QuestionnaireApiAxiosParamCreator(configuration);
  return {
    /**
     *
     * @summary 建立問卷
     * @param {CreateQuestionnaireCommand} [createQuestionnaireCommand]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async createQuestionnaire(
      createQuestionnaireCommand?: CreateQuestionnaireCommand,
      options?: AxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<QuestionnaireViewApiResponse>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.createQuestionnaire(
        createQuestionnaireCommand,
        options
      );
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     *
     * @summary 刪除問卷
     * @param {DeleteQuestionnaireCommand} [deleteQuestionnaireCommand]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async deleteQuestionnaire(
      deleteQuestionnaireCommand?: DeleteQuestionnaireCommand,
      options?: AxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<QuestionnaireViewApiResponse>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.deleteQuestionnaire(
        deleteQuestionnaireCommand,
        options
      );
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     *
     * @summary 查詢問卷
     * @param {FetchAllQuestionnaireRequest} [fetchAllQuestionnaireRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async fetchQuestionnaires(
      fetchAllQuestionnaireRequest?: FetchAllQuestionnaireRequest,
      options?: AxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<QuestionnaireViewListApiResponse>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.fetchQuestionnaires(
        fetchAllQuestionnaireRequest,
        options
      );
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     *
     * @summary 查詢問卷
     * @param {number} [id] 問卷Id
     * @param {string} [questionnaireJoinLocation] 問卷堂點類別        type&#x3D;QuestionnaireJoinLocation       顯示 name     value存此欄位0：堂點
     * @param {string} [questionnaireType] 問卷類型type&#x3D;QuestionnaireType顯示 namevalue存此欄位0：課程問卷 1:服事徵召 2:一般問卷
     * @param {string} [name] 問卷名稱
     * @param {string} [description] 問卷說明
     * @param {number} [organizationId] 指定堂點
     * @param {number} [pastoralId] 指定牧區
     * @param {number} [courseManagementTypeId] 指定課程分類
     * @param {string} [courseManagementName] 指定課程名稱
     * @param {string} [courseYear] 指定年度
     * @param {string} [courseSeason] 指定季
     * @param {string} [courseClassNum] 指定梯次
     * @param {string} [courseManagementNo] 指定課程代碼
     * @param {string} [dateRangeS] 作業繳交日期起 courseHomeworkDate
     * @param {string} [dateRangeE] 作業繳交日期迄courseHomeworkDate
     * @param {Array<SortProperty>} [sortProperties] 查詢欄位排序
     * @param {number} [page] 目前頁數
     * @param {number} [size] 每頁筆數
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async findQuestionnaire(
      id?: number,
      questionnaireJoinLocation?: string,
      questionnaireType?: string,
      name?: string,
      description?: string,
      organizationId?: number,
      pastoralId?: number,
      courseManagementTypeId?: number,
      courseManagementName?: string,
      courseYear?: string,
      courseSeason?: string,
      courseClassNum?: string,
      courseManagementNo?: string,
      dateRangeS?: string,
      dateRangeE?: string,
      sortProperties?: Array<SortProperty>,
      page?: number,
      size?: number,
      options?: AxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<QuestionnaireViewPageApiResponse>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.findQuestionnaire(
        id,
        questionnaireJoinLocation,
        questionnaireType,
        name,
        description,
        organizationId,
        pastoralId,
        courseManagementTypeId,
        courseManagementName,
        courseYear,
        courseSeason,
        courseClassNum,
        courseManagementNo,
        dateRangeS,
        dateRangeE,
        sortProperties,
        page,
        size,
        options
      );
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     *
     * @summary 以 Id 查詢問卷
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getQuestionnaire(
      id: number,
      options?: AxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<QuestionnaireViewApiResponse>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getQuestionnaire(id, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     *
     * @summary 修改問卷
     * @param {UpdateQuestionnaireCommand} [updateQuestionnaireCommand]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async putQuestionnaire(
      updateQuestionnaireCommand?: UpdateQuestionnaireCommand,
      options?: AxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<QuestionnaireViewApiResponse>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.putQuestionnaire(updateQuestionnaireCommand, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     *
     * @summary 查詢問卷列表  (*dynamic sort support)
     * @param {QueryQuestionnaireRequest} [queryQuestionnaireRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async queryQuestionnaires(
      queryQuestionnaireRequest?: QueryQuestionnaireRequest,
      options?: AxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<QuestionnaireViewPageApiResponse>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.queryQuestionnaires(queryQuestionnaireRequest, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     *
     * @summary 刪除主檔
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async removeQuestionnaire(
      id: number,
      options?: AxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<Int32ApiResponse>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.removeQuestionnaire(id, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
  };
};

/**
 * QuestionnaireApi - factory interface
 * @export
 */
export const QuestionnaireApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance
) {
  const localVarFp = QuestionnaireApiFp(configuration);
  return {
    /**
     *
     * @summary 建立問卷
     * @param {CreateQuestionnaireCommand} [createQuestionnaireCommand]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createQuestionnaire(
      createQuestionnaireCommand?: CreateQuestionnaireCommand,
      options?: any
    ): Promise<QuestionnaireViewApiResponse> {
      return localVarFp
        .createQuestionnaire(createQuestionnaireCommand, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary 刪除問卷
     * @param {DeleteQuestionnaireCommand} [deleteQuestionnaireCommand]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteQuestionnaire(
      deleteQuestionnaireCommand?: DeleteQuestionnaireCommand,
      options?: any
    ): Promise<QuestionnaireViewApiResponse> {
      return localVarFp
        .deleteQuestionnaire(deleteQuestionnaireCommand, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary 查詢問卷
     * @param {FetchAllQuestionnaireRequest} [fetchAllQuestionnaireRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    fetchQuestionnaires(
      fetchAllQuestionnaireRequest?: FetchAllQuestionnaireRequest,
      options?: any
    ): Promise<QuestionnaireViewListApiResponse> {
      return localVarFp
        .fetchQuestionnaires(fetchAllQuestionnaireRequest, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary 查詢問卷
     * @param {number} [id] 問卷Id
     * @param {string} [questionnaireJoinLocation] 問卷堂點類別        type&#x3D;QuestionnaireJoinLocation       顯示 name     value存此欄位0：堂點
     * @param {string} [questionnaireType] 問卷類型type&#x3D;QuestionnaireType顯示 namevalue存此欄位0：課程問卷 1:服事徵召 2:一般問卷
     * @param {string} [name] 問卷名稱
     * @param {string} [description] 問卷說明
     * @param {number} [organizationId] 指定堂點
     * @param {number} [pastoralId] 指定牧區
     * @param {number} [courseManagementTypeId] 指定課程分類
     * @param {string} [courseManagementName] 指定課程名稱
     * @param {string} [courseYear] 指定年度
     * @param {string} [courseSeason] 指定季
     * @param {string} [courseClassNum] 指定梯次
     * @param {string} [courseManagementNo] 指定課程代碼
     * @param {string} [dateRangeS] 作業繳交日期起 courseHomeworkDate
     * @param {string} [dateRangeE] 作業繳交日期迄courseHomeworkDate
     * @param {Array<SortProperty>} [sortProperties] 查詢欄位排序
     * @param {number} [page] 目前頁數
     * @param {number} [size] 每頁筆數
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    findQuestionnaire(
      id?: number,
      questionnaireJoinLocation?: string,
      questionnaireType?: string,
      name?: string,
      description?: string,
      organizationId?: number,
      pastoralId?: number,
      courseManagementTypeId?: number,
      courseManagementName?: string,
      courseYear?: string,
      courseSeason?: string,
      courseClassNum?: string,
      courseManagementNo?: string,
      dateRangeS?: string,
      dateRangeE?: string,
      sortProperties?: Array<SortProperty>,
      page?: number,
      size?: number,
      options?: any
    ): Promise<QuestionnaireViewPageApiResponse> {
      return localVarFp
        .findQuestionnaire(
          id,
          questionnaireJoinLocation,
          questionnaireType,
          name,
          description,
          organizationId,
          pastoralId,
          courseManagementTypeId,
          courseManagementName,
          courseYear,
          courseSeason,
          courseClassNum,
          courseManagementNo,
          dateRangeS,
          dateRangeE,
          sortProperties,
          page,
          size,
          options
        )
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary 以 Id 查詢問卷
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getQuestionnaire(id: number, options?: any): Promise<QuestionnaireViewApiResponse> {
      return localVarFp.getQuestionnaire(id, options).then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary 修改問卷
     * @param {UpdateQuestionnaireCommand} [updateQuestionnaireCommand]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    putQuestionnaire(
      updateQuestionnaireCommand?: UpdateQuestionnaireCommand,
      options?: any
    ): Promise<QuestionnaireViewApiResponse> {
      return localVarFp
        .putQuestionnaire(updateQuestionnaireCommand, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary 查詢問卷列表  (*dynamic sort support)
     * @param {QueryQuestionnaireRequest} [queryQuestionnaireRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    queryQuestionnaires(
      queryQuestionnaireRequest?: QueryQuestionnaireRequest,
      options?: any
    ): Promise<QuestionnaireViewPageApiResponse> {
      return localVarFp
        .queryQuestionnaires(queryQuestionnaireRequest, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary 刪除主檔
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    removeQuestionnaire(id: number, options?: any): Promise<Int32ApiResponse> {
      return localVarFp.removeQuestionnaire(id, options).then((request) => request(axios, basePath));
    },
  };
};

/**
 * QuestionnaireApi - interface
 * @export
 * @interface QuestionnaireApi
 */
export interface QuestionnaireApiInterface {
  /**
   *
   * @summary 建立問卷
   * @param {CreateQuestionnaireCommand} [createQuestionnaireCommand]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof QuestionnaireApiInterface
   */
  createQuestionnaire(
    createQuestionnaireCommand?: CreateQuestionnaireCommand,
    options?: AxiosRequestConfig
  ): Promise<QuestionnaireViewApiResponse>;

  /**
   *
   * @summary 刪除問卷
   * @param {DeleteQuestionnaireCommand} [deleteQuestionnaireCommand]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof QuestionnaireApiInterface
   */
  deleteQuestionnaire(
    deleteQuestionnaireCommand?: DeleteQuestionnaireCommand,
    options?: AxiosRequestConfig
  ): Promise<QuestionnaireViewApiResponse>;

  /**
   *
   * @summary 查詢問卷
   * @param {FetchAllQuestionnaireRequest} [fetchAllQuestionnaireRequest]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof QuestionnaireApiInterface
   */
  fetchQuestionnaires(
    fetchAllQuestionnaireRequest?: FetchAllQuestionnaireRequest,
    options?: AxiosRequestConfig
  ): Promise<QuestionnaireViewListApiResponse>;

  /**
   *
   * @summary 查詢問卷
   * @param {number} [id] 問卷Id
   * @param {string} [questionnaireJoinLocation] 問卷堂點類別        type&#x3D;QuestionnaireJoinLocation       顯示 name     value存此欄位0：堂點
   * @param {string} [questionnaireType] 問卷類型type&#x3D;QuestionnaireType顯示 namevalue存此欄位0：課程問卷 1:服事徵召 2:一般問卷
   * @param {string} [name] 問卷名稱
   * @param {string} [description] 問卷說明
   * @param {number} [organizationId] 指定堂點
   * @param {number} [pastoralId] 指定牧區
   * @param {number} [courseManagementTypeId] 指定課程分類
   * @param {string} [courseManagementName] 指定課程名稱
   * @param {string} [courseYear] 指定年度
   * @param {string} [courseSeason] 指定季
   * @param {string} [courseClassNum] 指定梯次
   * @param {string} [courseManagementNo] 指定課程代碼
   * @param {string} [dateRangeS] 作業繳交日期起 courseHomeworkDate
   * @param {string} [dateRangeE] 作業繳交日期迄courseHomeworkDate
   * @param {Array<SortProperty>} [sortProperties] 查詢欄位排序
   * @param {number} [page] 目前頁數
   * @param {number} [size] 每頁筆數
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof QuestionnaireApiInterface
   */
  findQuestionnaire(
    id?: number,
    questionnaireJoinLocation?: string,
    questionnaireType?: string,
    name?: string,
    description?: string,
    organizationId?: number,
    pastoralId?: number,
    courseManagementTypeId?: number,
    courseManagementName?: string,
    courseYear?: string,
    courseSeason?: string,
    courseClassNum?: string,
    courseManagementNo?: string,
    dateRangeS?: string,
    dateRangeE?: string,
    sortProperties?: Array<SortProperty>,
    page?: number,
    size?: number,
    options?: AxiosRequestConfig
  ): Promise<QuestionnaireViewPageApiResponse>;

  /**
   *
   * @summary 以 Id 查詢問卷
   * @param {number} id
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof QuestionnaireApiInterface
   */
  getQuestionnaire(id: number, options?: AxiosRequestConfig): Promise<QuestionnaireViewApiResponse>;

  /**
   *
   * @summary 修改問卷
   * @param {UpdateQuestionnaireCommand} [updateQuestionnaireCommand]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof QuestionnaireApiInterface
   */
  putQuestionnaire(
    updateQuestionnaireCommand?: UpdateQuestionnaireCommand,
    options?: AxiosRequestConfig
  ): Promise<QuestionnaireViewApiResponse>;

  /**
   *
   * @summary 查詢問卷列表  (*dynamic sort support)
   * @param {QueryQuestionnaireRequest} [queryQuestionnaireRequest]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof QuestionnaireApiInterface
   */
  queryQuestionnaires(
    queryQuestionnaireRequest?: QueryQuestionnaireRequest,
    options?: AxiosRequestConfig
  ): Promise<QuestionnaireViewPageApiResponse>;

  /**
   *
   * @summary 刪除主檔
   * @param {number} id
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof QuestionnaireApiInterface
   */
  removeQuestionnaire(id: number, options?: AxiosRequestConfig): Promise<Int32ApiResponse>;
}

/**
 * QuestionnaireApi - object-oriented interface
 * @export
 * @class QuestionnaireApi
 * @extends {BaseAPI}
 */
export class QuestionnaireApi extends BaseAPI implements QuestionnaireApiInterface {
  /**
   *
   * @summary 建立問卷
   * @param {CreateQuestionnaireCommand} [createQuestionnaireCommand]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof QuestionnaireApi
   */
  public createQuestionnaire(createQuestionnaireCommand?: CreateQuestionnaireCommand, options?: AxiosRequestConfig) {
    return QuestionnaireApiFp(this.configuration)
      .createQuestionnaire(createQuestionnaireCommand, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary 刪除問卷
   * @param {DeleteQuestionnaireCommand} [deleteQuestionnaireCommand]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof QuestionnaireApi
   */
  public deleteQuestionnaire(deleteQuestionnaireCommand?: DeleteQuestionnaireCommand, options?: AxiosRequestConfig) {
    return QuestionnaireApiFp(this.configuration)
      .deleteQuestionnaire(deleteQuestionnaireCommand, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary 查詢問卷
   * @param {FetchAllQuestionnaireRequest} [fetchAllQuestionnaireRequest]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof QuestionnaireApi
   */
  public fetchQuestionnaires(
    fetchAllQuestionnaireRequest?: FetchAllQuestionnaireRequest,
    options?: AxiosRequestConfig
  ) {
    return QuestionnaireApiFp(this.configuration)
      .fetchQuestionnaires(fetchAllQuestionnaireRequest, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary 查詢問卷
   * @param {number} [id] 問卷Id
   * @param {string} [questionnaireJoinLocation] 問卷堂點類別        type&#x3D;QuestionnaireJoinLocation       顯示 name     value存此欄位0：堂點
   * @param {string} [questionnaireType] 問卷類型type&#x3D;QuestionnaireType顯示 namevalue存此欄位0：課程問卷 1:服事徵召 2:一般問卷
   * @param {string} [name] 問卷名稱
   * @param {string} [description] 問卷說明
   * @param {number} [organizationId] 指定堂點
   * @param {number} [pastoralId] 指定牧區
   * @param {number} [courseManagementTypeId] 指定課程分類
   * @param {string} [courseManagementName] 指定課程名稱
   * @param {string} [courseYear] 指定年度
   * @param {string} [courseSeason] 指定季
   * @param {string} [courseClassNum] 指定梯次
   * @param {string} [courseManagementNo] 指定課程代碼
   * @param {string} [dateRangeS] 作業繳交日期起 courseHomeworkDate
   * @param {string} [dateRangeE] 作業繳交日期迄courseHomeworkDate
   * @param {Array<SortProperty>} [sortProperties] 查詢欄位排序
   * @param {number} [page] 目前頁數
   * @param {number} [size] 每頁筆數
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof QuestionnaireApi
   */
  public findQuestionnaire(
    id?: number,
    questionnaireJoinLocation?: string,
    questionnaireType?: string,
    name?: string,
    description?: string,
    organizationId?: number,
    pastoralId?: number,
    courseManagementTypeId?: number,
    courseManagementName?: string,
    courseYear?: string,
    courseSeason?: string,
    courseClassNum?: string,
    courseManagementNo?: string,
    dateRangeS?: string,
    dateRangeE?: string,
    sortProperties?: Array<SortProperty>,
    page?: number,
    size?: number,
    options?: AxiosRequestConfig
  ) {
    return QuestionnaireApiFp(this.configuration)
      .findQuestionnaire(
        id,
        questionnaireJoinLocation,
        questionnaireType,
        name,
        description,
        organizationId,
        pastoralId,
        courseManagementTypeId,
        courseManagementName,
        courseYear,
        courseSeason,
        courseClassNum,
        courseManagementNo,
        dateRangeS,
        dateRangeE,
        sortProperties,
        page,
        size,
        options
      )
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary 以 Id 查詢問卷
   * @param {number} id
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof QuestionnaireApi
   */
  public getQuestionnaire(id: number, options?: AxiosRequestConfig) {
    return QuestionnaireApiFp(this.configuration)
      .getQuestionnaire(id, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary 修改問卷
   * @param {UpdateQuestionnaireCommand} [updateQuestionnaireCommand]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof QuestionnaireApi
   */
  public putQuestionnaire(updateQuestionnaireCommand?: UpdateQuestionnaireCommand, options?: AxiosRequestConfig) {
    return QuestionnaireApiFp(this.configuration)
      .putQuestionnaire(updateQuestionnaireCommand, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary 查詢問卷列表  (*dynamic sort support)
   * @param {QueryQuestionnaireRequest} [queryQuestionnaireRequest]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof QuestionnaireApi
   */
  public queryQuestionnaires(queryQuestionnaireRequest?: QueryQuestionnaireRequest, options?: AxiosRequestConfig) {
    return QuestionnaireApiFp(this.configuration)
      .queryQuestionnaires(queryQuestionnaireRequest, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary 刪除主檔
   * @param {number} id
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof QuestionnaireApi
   */
  public removeQuestionnaire(id: number, options?: AxiosRequestConfig) {
    return QuestionnaireApiFp(this.configuration)
      .removeQuestionnaire(id, options)
      .then((request) => request(this.axios, this.basePath));
  }
}

/**
 * QuestionnaireDetailApi - axios parameter creator
 * @export
 */
export const QuestionnaireDetailApiAxiosParamCreator = function (configuration?: Configuration) {
  return {
    /**
     *
     * @summary 建立問卷明細
     * @param {CreateQuestionnaireDetailCommand} [createQuestionnaireDetailCommand]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createQuestionnaireDetail: async (
      createQuestionnaireDetailCommand?: CreateQuestionnaireDetailCommand,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/questionnaireDetail`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: "POST", ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication Example-id-1 required
      await setApiKeyToObject(localVarHeaderParameter, "Example-id-1", configuration);

      // authentication JWT_Authorization required
      await setApiKeyToObject(localVarHeaderParameter, "authorization", configuration);

      // authentication example-id-2 required
      await setApiKeyToObject(localVarHeaderParameter, "example-id-2", configuration);

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      localVarRequestOptions.data = serializeDataIfNeeded(
        createQuestionnaireDetailCommand,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary 刪除問卷明細
     * @param {DeleteQuestionnaireDetailCommand} [deleteQuestionnaireDetailCommand]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteQuestionnaireDetail: async (
      deleteQuestionnaireDetailCommand?: DeleteQuestionnaireDetailCommand,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/questionnaireDetail`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: "DELETE", ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication Example-id-1 required
      await setApiKeyToObject(localVarHeaderParameter, "Example-id-1", configuration);

      // authentication JWT_Authorization required
      await setApiKeyToObject(localVarHeaderParameter, "authorization", configuration);

      // authentication example-id-2 required
      await setApiKeyToObject(localVarHeaderParameter, "example-id-2", configuration);

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      localVarRequestOptions.data = serializeDataIfNeeded(
        deleteQuestionnaireDetailCommand,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary 查詢問卷明細
     * @param {FetchAllQuestionnaireDetailRequest} [fetchAllQuestionnaireDetailRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    fetchQuestionnaireDetails: async (
      fetchAllQuestionnaireDetailRequest?: FetchAllQuestionnaireDetailRequest,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/questionnaireDetail/fetch`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: "POST", ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication Example-id-1 required
      await setApiKeyToObject(localVarHeaderParameter, "Example-id-1", configuration);

      // authentication JWT_Authorization required
      await setApiKeyToObject(localVarHeaderParameter, "authorization", configuration);

      // authentication example-id-2 required
      await setApiKeyToObject(localVarHeaderParameter, "example-id-2", configuration);

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      localVarRequestOptions.data = serializeDataIfNeeded(
        fetchAllQuestionnaireDetailRequest,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary 查詢問卷明細
     * @param {number} [id] 問卷明細Id
     * @param {number} [questionnaireId] 問卷Id
     * @param {number} [upperQuestionnaireDetailId] 上層問卷DetailId
     * @param {string} [questionnaireDetailType] 問卷內容類型type&#x3D;QuestionnaireDetailType顯示 namevalue存此欄位0：區段標題1：題目2：選項
     * @param {string} [componentType] QuestionnaireType&#x3D;1才可選問卷內容類型type&#x3D;ComponentType顯示 namevalue存此欄位0：選擇(單選)1：選擇(多選)2：是非3：簡答
     * @param {number} [sequence] 顯示排序
     * @param {string} [name] 元件描述假設QuestionnaireType&#x3D;0此顯示區段標題假設QuestionnaireType&#x3D;1此顯示該UpperQuestionnaireId.區段之Sequence題目名稱假設QuestionnaireType&#x3D;2此顯示該UpperQuestionnaireId.區段之ComponentType選項之內容說明
     * @param {string} [description] 描述
     * @param {Array<SortProperty>} [sortProperties] 查詢欄位排序
     * @param {number} [page] 目前頁數
     * @param {number} [size] 每頁筆數
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    findQuestionnaireDetail: async (
      id?: number,
      questionnaireId?: number,
      upperQuestionnaireDetailId?: number,
      questionnaireDetailType?: string,
      componentType?: string,
      sequence?: number,
      name?: string,
      description?: string,
      sortProperties?: Array<SortProperty>,
      page?: number,
      size?: number,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/questionnaireDetail`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: "GET", ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication Example-id-1 required
      await setApiKeyToObject(localVarHeaderParameter, "Example-id-1", configuration);

      // authentication JWT_Authorization required
      await setApiKeyToObject(localVarHeaderParameter, "authorization", configuration);

      // authentication example-id-2 required
      await setApiKeyToObject(localVarHeaderParameter, "example-id-2", configuration);

      if (id !== undefined) {
        localVarQueryParameter["id"] = id;
      }

      if (questionnaireId !== undefined) {
        localVarQueryParameter["questionnaireId"] = questionnaireId;
      }

      if (upperQuestionnaireDetailId !== undefined) {
        localVarQueryParameter["upperQuestionnaireDetailId"] = upperQuestionnaireDetailId;
      }

      if (questionnaireDetailType !== undefined) {
        localVarQueryParameter["questionnaireDetailType"] = questionnaireDetailType;
      }

      if (componentType !== undefined) {
        localVarQueryParameter["componentType"] = componentType;
      }

      if (sequence !== undefined) {
        localVarQueryParameter["sequence"] = sequence;
      }

      if (name !== undefined) {
        localVarQueryParameter["name"] = name;
      }

      if (description !== undefined) {
        localVarQueryParameter["description"] = description;
      }

      if (sortProperties) {
        localVarQueryParameter["sortProperties"] = sortProperties;
      }

      if (page !== undefined) {
        localVarQueryParameter["page"] = page;
      }

      if (size !== undefined) {
        localVarQueryParameter["size"] = size;
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary 以 Id 查詢問卷明細
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getQuestionnaireDetail: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists("getQuestionnaireDetail", "id", id);
      const localVarPath = `/api/questionnaireDetail/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(id)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: "GET", ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication Example-id-1 required
      await setApiKeyToObject(localVarHeaderParameter, "Example-id-1", configuration);

      // authentication JWT_Authorization required
      await setApiKeyToObject(localVarHeaderParameter, "authorization", configuration);

      // authentication example-id-2 required
      await setApiKeyToObject(localVarHeaderParameter, "example-id-2", configuration);

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary 修改問卷明細
     * @param {UpdateQuestionnaireDetailCommand} [updateQuestionnaireDetailCommand]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    putQuestionnaireDetail: async (
      updateQuestionnaireDetailCommand?: UpdateQuestionnaireDetailCommand,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/questionnaireDetail`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: "PUT", ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication Example-id-1 required
      await setApiKeyToObject(localVarHeaderParameter, "Example-id-1", configuration);

      // authentication JWT_Authorization required
      await setApiKeyToObject(localVarHeaderParameter, "authorization", configuration);

      // authentication example-id-2 required
      await setApiKeyToObject(localVarHeaderParameter, "example-id-2", configuration);

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      localVarRequestOptions.data = serializeDataIfNeeded(
        updateQuestionnaireDetailCommand,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary 查詢問卷明細列表  (*dynamic sort support)
     * @param {QueryQuestionnaireDetailRequest} [queryQuestionnaireDetailRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    queryQuestionnaireDetails: async (
      queryQuestionnaireDetailRequest?: QueryQuestionnaireDetailRequest,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/questionnaireDetail/query`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: "POST", ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication Example-id-1 required
      await setApiKeyToObject(localVarHeaderParameter, "Example-id-1", configuration);

      // authentication JWT_Authorization required
      await setApiKeyToObject(localVarHeaderParameter, "authorization", configuration);

      // authentication example-id-2 required
      await setApiKeyToObject(localVarHeaderParameter, "example-id-2", configuration);

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      localVarRequestOptions.data = serializeDataIfNeeded(
        queryQuestionnaireDetailRequest,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary 刪除主檔
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    removeQuestionnaireDetail: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists("removeQuestionnaireDetail", "id", id);
      const localVarPath = `/api/questionnaireDetail/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(id)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: "DELETE", ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication Example-id-1 required
      await setApiKeyToObject(localVarHeaderParameter, "Example-id-1", configuration);

      // authentication JWT_Authorization required
      await setApiKeyToObject(localVarHeaderParameter, "authorization", configuration);

      // authentication example-id-2 required
      await setApiKeyToObject(localVarHeaderParameter, "example-id-2", configuration);

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * QuestionnaireDetailApi - functional programming interface
 * @export
 */
export const QuestionnaireDetailApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = QuestionnaireDetailApiAxiosParamCreator(configuration);
  return {
    /**
     *
     * @summary 建立問卷明細
     * @param {CreateQuestionnaireDetailCommand} [createQuestionnaireDetailCommand]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async createQuestionnaireDetail(
      createQuestionnaireDetailCommand?: CreateQuestionnaireDetailCommand,
      options?: AxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<QuestionnaireDetailViewApiResponse>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.createQuestionnaireDetail(
        createQuestionnaireDetailCommand,
        options
      );
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     *
     * @summary 刪除問卷明細
     * @param {DeleteQuestionnaireDetailCommand} [deleteQuestionnaireDetailCommand]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async deleteQuestionnaireDetail(
      deleteQuestionnaireDetailCommand?: DeleteQuestionnaireDetailCommand,
      options?: AxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<QuestionnaireDetailViewApiResponse>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.deleteQuestionnaireDetail(
        deleteQuestionnaireDetailCommand,
        options
      );
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     *
     * @summary 查詢問卷明細
     * @param {FetchAllQuestionnaireDetailRequest} [fetchAllQuestionnaireDetailRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async fetchQuestionnaireDetails(
      fetchAllQuestionnaireDetailRequest?: FetchAllQuestionnaireDetailRequest,
      options?: AxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<QuestionnaireDetailViewListApiResponse>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.fetchQuestionnaireDetails(
        fetchAllQuestionnaireDetailRequest,
        options
      );
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     *
     * @summary 查詢問卷明細
     * @param {number} [id] 問卷明細Id
     * @param {number} [questionnaireId] 問卷Id
     * @param {number} [upperQuestionnaireDetailId] 上層問卷DetailId
     * @param {string} [questionnaireDetailType] 問卷內容類型type&#x3D;QuestionnaireDetailType顯示 namevalue存此欄位0：區段標題1：題目2：選項
     * @param {string} [componentType] QuestionnaireType&#x3D;1才可選問卷內容類型type&#x3D;ComponentType顯示 namevalue存此欄位0：選擇(單選)1：選擇(多選)2：是非3：簡答
     * @param {number} [sequence] 顯示排序
     * @param {string} [name] 元件描述假設QuestionnaireType&#x3D;0此顯示區段標題假設QuestionnaireType&#x3D;1此顯示該UpperQuestionnaireId.區段之Sequence題目名稱假設QuestionnaireType&#x3D;2此顯示該UpperQuestionnaireId.區段之ComponentType選項之內容說明
     * @param {string} [description] 描述
     * @param {Array<SortProperty>} [sortProperties] 查詢欄位排序
     * @param {number} [page] 目前頁數
     * @param {number} [size] 每頁筆數
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async findQuestionnaireDetail(
      id?: number,
      questionnaireId?: number,
      upperQuestionnaireDetailId?: number,
      questionnaireDetailType?: string,
      componentType?: string,
      sequence?: number,
      name?: string,
      description?: string,
      sortProperties?: Array<SortProperty>,
      page?: number,
      size?: number,
      options?: AxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<QuestionnaireDetailViewPageApiResponse>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.findQuestionnaireDetail(
        id,
        questionnaireId,
        upperQuestionnaireDetailId,
        questionnaireDetailType,
        componentType,
        sequence,
        name,
        description,
        sortProperties,
        page,
        size,
        options
      );
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     *
     * @summary 以 Id 查詢問卷明細
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getQuestionnaireDetail(
      id: number,
      options?: AxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<QuestionnaireDetailViewApiResponse>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getQuestionnaireDetail(id, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     *
     * @summary 修改問卷明細
     * @param {UpdateQuestionnaireDetailCommand} [updateQuestionnaireDetailCommand]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async putQuestionnaireDetail(
      updateQuestionnaireDetailCommand?: UpdateQuestionnaireDetailCommand,
      options?: AxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<QuestionnaireDetailViewApiResponse>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.putQuestionnaireDetail(
        updateQuestionnaireDetailCommand,
        options
      );
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     *
     * @summary 查詢問卷明細列表  (*dynamic sort support)
     * @param {QueryQuestionnaireDetailRequest} [queryQuestionnaireDetailRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async queryQuestionnaireDetails(
      queryQuestionnaireDetailRequest?: QueryQuestionnaireDetailRequest,
      options?: AxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<QuestionnaireDetailViewPageApiResponse>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.queryQuestionnaireDetails(
        queryQuestionnaireDetailRequest,
        options
      );
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     *
     * @summary 刪除主檔
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async removeQuestionnaireDetail(
      id: number,
      options?: AxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<Int32ApiResponse>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.removeQuestionnaireDetail(id, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
  };
};

/**
 * QuestionnaireDetailApi - factory interface
 * @export
 */
export const QuestionnaireDetailApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance
) {
  const localVarFp = QuestionnaireDetailApiFp(configuration);
  return {
    /**
     *
     * @summary 建立問卷明細
     * @param {CreateQuestionnaireDetailCommand} [createQuestionnaireDetailCommand]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createQuestionnaireDetail(
      createQuestionnaireDetailCommand?: CreateQuestionnaireDetailCommand,
      options?: any
    ): Promise<QuestionnaireDetailViewApiResponse> {
      return localVarFp
        .createQuestionnaireDetail(createQuestionnaireDetailCommand, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary 刪除問卷明細
     * @param {DeleteQuestionnaireDetailCommand} [deleteQuestionnaireDetailCommand]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteQuestionnaireDetail(
      deleteQuestionnaireDetailCommand?: DeleteQuestionnaireDetailCommand,
      options?: any
    ): Promise<QuestionnaireDetailViewApiResponse> {
      return localVarFp
        .deleteQuestionnaireDetail(deleteQuestionnaireDetailCommand, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary 查詢問卷明細
     * @param {FetchAllQuestionnaireDetailRequest} [fetchAllQuestionnaireDetailRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    fetchQuestionnaireDetails(
      fetchAllQuestionnaireDetailRequest?: FetchAllQuestionnaireDetailRequest,
      options?: any
    ): Promise<QuestionnaireDetailViewListApiResponse> {
      return localVarFp
        .fetchQuestionnaireDetails(fetchAllQuestionnaireDetailRequest, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary 查詢問卷明細
     * @param {number} [id] 問卷明細Id
     * @param {number} [questionnaireId] 問卷Id
     * @param {number} [upperQuestionnaireDetailId] 上層問卷DetailId
     * @param {string} [questionnaireDetailType] 問卷內容類型type&#x3D;QuestionnaireDetailType顯示 namevalue存此欄位0：區段標題1：題目2：選項
     * @param {string} [componentType] QuestionnaireType&#x3D;1才可選問卷內容類型type&#x3D;ComponentType顯示 namevalue存此欄位0：選擇(單選)1：選擇(多選)2：是非3：簡答
     * @param {number} [sequence] 顯示排序
     * @param {string} [name] 元件描述假設QuestionnaireType&#x3D;0此顯示區段標題假設QuestionnaireType&#x3D;1此顯示該UpperQuestionnaireId.區段之Sequence題目名稱假設QuestionnaireType&#x3D;2此顯示該UpperQuestionnaireId.區段之ComponentType選項之內容說明
     * @param {string} [description] 描述
     * @param {Array<SortProperty>} [sortProperties] 查詢欄位排序
     * @param {number} [page] 目前頁數
     * @param {number} [size] 每頁筆數
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    findQuestionnaireDetail(
      id?: number,
      questionnaireId?: number,
      upperQuestionnaireDetailId?: number,
      questionnaireDetailType?: string,
      componentType?: string,
      sequence?: number,
      name?: string,
      description?: string,
      sortProperties?: Array<SortProperty>,
      page?: number,
      size?: number,
      options?: any
    ): Promise<QuestionnaireDetailViewPageApiResponse> {
      return localVarFp
        .findQuestionnaireDetail(
          id,
          questionnaireId,
          upperQuestionnaireDetailId,
          questionnaireDetailType,
          componentType,
          sequence,
          name,
          description,
          sortProperties,
          page,
          size,
          options
        )
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary 以 Id 查詢問卷明細
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getQuestionnaireDetail(id: number, options?: any): Promise<QuestionnaireDetailViewApiResponse> {
      return localVarFp.getQuestionnaireDetail(id, options).then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary 修改問卷明細
     * @param {UpdateQuestionnaireDetailCommand} [updateQuestionnaireDetailCommand]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    putQuestionnaireDetail(
      updateQuestionnaireDetailCommand?: UpdateQuestionnaireDetailCommand,
      options?: any
    ): Promise<QuestionnaireDetailViewApiResponse> {
      return localVarFp
        .putQuestionnaireDetail(updateQuestionnaireDetailCommand, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary 查詢問卷明細列表  (*dynamic sort support)
     * @param {QueryQuestionnaireDetailRequest} [queryQuestionnaireDetailRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    queryQuestionnaireDetails(
      queryQuestionnaireDetailRequest?: QueryQuestionnaireDetailRequest,
      options?: any
    ): Promise<QuestionnaireDetailViewPageApiResponse> {
      return localVarFp
        .queryQuestionnaireDetails(queryQuestionnaireDetailRequest, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary 刪除主檔
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    removeQuestionnaireDetail(id: number, options?: any): Promise<Int32ApiResponse> {
      return localVarFp.removeQuestionnaireDetail(id, options).then((request) => request(axios, basePath));
    },
  };
};

/**
 * QuestionnaireDetailApi - interface
 * @export
 * @interface QuestionnaireDetailApi
 */
export interface QuestionnaireDetailApiInterface {
  /**
   *
   * @summary 建立問卷明細
   * @param {CreateQuestionnaireDetailCommand} [createQuestionnaireDetailCommand]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof QuestionnaireDetailApiInterface
   */
  createQuestionnaireDetail(
    createQuestionnaireDetailCommand?: CreateQuestionnaireDetailCommand,
    options?: AxiosRequestConfig
  ): Promise<QuestionnaireDetailViewApiResponse>;

  /**
   *
   * @summary 刪除問卷明細
   * @param {DeleteQuestionnaireDetailCommand} [deleteQuestionnaireDetailCommand]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof QuestionnaireDetailApiInterface
   */
  deleteQuestionnaireDetail(
    deleteQuestionnaireDetailCommand?: DeleteQuestionnaireDetailCommand,
    options?: AxiosRequestConfig
  ): Promise<QuestionnaireDetailViewApiResponse>;

  /**
   *
   * @summary 查詢問卷明細
   * @param {FetchAllQuestionnaireDetailRequest} [fetchAllQuestionnaireDetailRequest]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof QuestionnaireDetailApiInterface
   */
  fetchQuestionnaireDetails(
    fetchAllQuestionnaireDetailRequest?: FetchAllQuestionnaireDetailRequest,
    options?: AxiosRequestConfig
  ): Promise<QuestionnaireDetailViewListApiResponse>;

  /**
   *
   * @summary 查詢問卷明細
   * @param {number} [id] 問卷明細Id
   * @param {number} [questionnaireId] 問卷Id
   * @param {number} [upperQuestionnaireDetailId] 上層問卷DetailId
   * @param {string} [questionnaireDetailType] 問卷內容類型type&#x3D;QuestionnaireDetailType顯示 namevalue存此欄位0：區段標題1：題目2：選項
   * @param {string} [componentType] QuestionnaireType&#x3D;1才可選問卷內容類型type&#x3D;ComponentType顯示 namevalue存此欄位0：選擇(單選)1：選擇(多選)2：是非3：簡答
   * @param {number} [sequence] 顯示排序
   * @param {string} [name] 元件描述假設QuestionnaireType&#x3D;0此顯示區段標題假設QuestionnaireType&#x3D;1此顯示該UpperQuestionnaireId.區段之Sequence題目名稱假設QuestionnaireType&#x3D;2此顯示該UpperQuestionnaireId.區段之ComponentType選項之內容說明
   * @param {string} [description] 描述
   * @param {Array<SortProperty>} [sortProperties] 查詢欄位排序
   * @param {number} [page] 目前頁數
   * @param {number} [size] 每頁筆數
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof QuestionnaireDetailApiInterface
   */
  findQuestionnaireDetail(
    id?: number,
    questionnaireId?: number,
    upperQuestionnaireDetailId?: number,
    questionnaireDetailType?: string,
    componentType?: string,
    sequence?: number,
    name?: string,
    description?: string,
    sortProperties?: Array<SortProperty>,
    page?: number,
    size?: number,
    options?: AxiosRequestConfig
  ): Promise<QuestionnaireDetailViewPageApiResponse>;

  /**
   *
   * @summary 以 Id 查詢問卷明細
   * @param {number} id
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof QuestionnaireDetailApiInterface
   */
  getQuestionnaireDetail(id: number, options?: AxiosRequestConfig): Promise<QuestionnaireDetailViewApiResponse>;

  /**
   *
   * @summary 修改問卷明細
   * @param {UpdateQuestionnaireDetailCommand} [updateQuestionnaireDetailCommand]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof QuestionnaireDetailApiInterface
   */
  putQuestionnaireDetail(
    updateQuestionnaireDetailCommand?: UpdateQuestionnaireDetailCommand,
    options?: AxiosRequestConfig
  ): Promise<QuestionnaireDetailViewApiResponse>;

  /**
   *
   * @summary 查詢問卷明細列表  (*dynamic sort support)
   * @param {QueryQuestionnaireDetailRequest} [queryQuestionnaireDetailRequest]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof QuestionnaireDetailApiInterface
   */
  queryQuestionnaireDetails(
    queryQuestionnaireDetailRequest?: QueryQuestionnaireDetailRequest,
    options?: AxiosRequestConfig
  ): Promise<QuestionnaireDetailViewPageApiResponse>;

  /**
   *
   * @summary 刪除主檔
   * @param {number} id
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof QuestionnaireDetailApiInterface
   */
  removeQuestionnaireDetail(id: number, options?: AxiosRequestConfig): Promise<Int32ApiResponse>;
}

/**
 * QuestionnaireDetailApi - object-oriented interface
 * @export
 * @class QuestionnaireDetailApi
 * @extends {BaseAPI}
 */
export class QuestionnaireDetailApi extends BaseAPI implements QuestionnaireDetailApiInterface {
  /**
   *
   * @summary 建立問卷明細
   * @param {CreateQuestionnaireDetailCommand} [createQuestionnaireDetailCommand]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof QuestionnaireDetailApi
   */
  public createQuestionnaireDetail(
    createQuestionnaireDetailCommand?: CreateQuestionnaireDetailCommand,
    options?: AxiosRequestConfig
  ) {
    return QuestionnaireDetailApiFp(this.configuration)
      .createQuestionnaireDetail(createQuestionnaireDetailCommand, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary 刪除問卷明細
   * @param {DeleteQuestionnaireDetailCommand} [deleteQuestionnaireDetailCommand]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof QuestionnaireDetailApi
   */
  public deleteQuestionnaireDetail(
    deleteQuestionnaireDetailCommand?: DeleteQuestionnaireDetailCommand,
    options?: AxiosRequestConfig
  ) {
    return QuestionnaireDetailApiFp(this.configuration)
      .deleteQuestionnaireDetail(deleteQuestionnaireDetailCommand, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary 查詢問卷明細
   * @param {FetchAllQuestionnaireDetailRequest} [fetchAllQuestionnaireDetailRequest]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof QuestionnaireDetailApi
   */
  public fetchQuestionnaireDetails(
    fetchAllQuestionnaireDetailRequest?: FetchAllQuestionnaireDetailRequest,
    options?: AxiosRequestConfig
  ) {
    return QuestionnaireDetailApiFp(this.configuration)
      .fetchQuestionnaireDetails(fetchAllQuestionnaireDetailRequest, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary 查詢問卷明細
   * @param {number} [id] 問卷明細Id
   * @param {number} [questionnaireId] 問卷Id
   * @param {number} [upperQuestionnaireDetailId] 上層問卷DetailId
   * @param {string} [questionnaireDetailType] 問卷內容類型type&#x3D;QuestionnaireDetailType顯示 namevalue存此欄位0：區段標題1：題目2：選項
   * @param {string} [componentType] QuestionnaireType&#x3D;1才可選問卷內容類型type&#x3D;ComponentType顯示 namevalue存此欄位0：選擇(單選)1：選擇(多選)2：是非3：簡答
   * @param {number} [sequence] 顯示排序
   * @param {string} [name] 元件描述假設QuestionnaireType&#x3D;0此顯示區段標題假設QuestionnaireType&#x3D;1此顯示該UpperQuestionnaireId.區段之Sequence題目名稱假設QuestionnaireType&#x3D;2此顯示該UpperQuestionnaireId.區段之ComponentType選項之內容說明
   * @param {string} [description] 描述
   * @param {Array<SortProperty>} [sortProperties] 查詢欄位排序
   * @param {number} [page] 目前頁數
   * @param {number} [size] 每頁筆數
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof QuestionnaireDetailApi
   */
  public findQuestionnaireDetail(
    id?: number,
    questionnaireId?: number,
    upperQuestionnaireDetailId?: number,
    questionnaireDetailType?: string,
    componentType?: string,
    sequence?: number,
    name?: string,
    description?: string,
    sortProperties?: Array<SortProperty>,
    page?: number,
    size?: number,
    options?: AxiosRequestConfig
  ) {
    return QuestionnaireDetailApiFp(this.configuration)
      .findQuestionnaireDetail(
        id,
        questionnaireId,
        upperQuestionnaireDetailId,
        questionnaireDetailType,
        componentType,
        sequence,
        name,
        description,
        sortProperties,
        page,
        size,
        options
      )
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary 以 Id 查詢問卷明細
   * @param {number} id
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof QuestionnaireDetailApi
   */
  public getQuestionnaireDetail(id: number, options?: AxiosRequestConfig) {
    return QuestionnaireDetailApiFp(this.configuration)
      .getQuestionnaireDetail(id, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary 修改問卷明細
   * @param {UpdateQuestionnaireDetailCommand} [updateQuestionnaireDetailCommand]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof QuestionnaireDetailApi
   */
  public putQuestionnaireDetail(
    updateQuestionnaireDetailCommand?: UpdateQuestionnaireDetailCommand,
    options?: AxiosRequestConfig
  ) {
    return QuestionnaireDetailApiFp(this.configuration)
      .putQuestionnaireDetail(updateQuestionnaireDetailCommand, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary 查詢問卷明細列表  (*dynamic sort support)
   * @param {QueryQuestionnaireDetailRequest} [queryQuestionnaireDetailRequest]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof QuestionnaireDetailApi
   */
  public queryQuestionnaireDetails(
    queryQuestionnaireDetailRequest?: QueryQuestionnaireDetailRequest,
    options?: AxiosRequestConfig
  ) {
    return QuestionnaireDetailApiFp(this.configuration)
      .queryQuestionnaireDetails(queryQuestionnaireDetailRequest, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary 刪除主檔
   * @param {number} id
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof QuestionnaireDetailApi
   */
  public removeQuestionnaireDetail(id: number, options?: AxiosRequestConfig) {
    return QuestionnaireDetailApiFp(this.configuration)
      .removeQuestionnaireDetail(id, options)
      .then((request) => request(this.axios, this.basePath));
  }
}

/**
 * RoleApi - axios parameter creator
 * @export
 */
export const RoleApiAxiosParamCreator = function (configuration?: Configuration) {
  return {
    /**
     *
     * @summary 建立角色
     * @param {CreateRoleCommand} [createRoleCommand]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createRole: async (
      createRoleCommand?: CreateRoleCommand,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/role`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: "POST", ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication Example-id-1 required
      await setApiKeyToObject(localVarHeaderParameter, "Example-id-1", configuration);

      // authentication JWT_Authorization required
      await setApiKeyToObject(localVarHeaderParameter, "authorization", configuration);

      // authentication example-id-2 required
      await setApiKeyToObject(localVarHeaderParameter, "example-id-2", configuration);

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      localVarRequestOptions.data = serializeDataIfNeeded(createRoleCommand, localVarRequestOptions, configuration);

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary 刪除維修單主檔
     * @param {DeleteRoleCommand} [deleteRoleCommand]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteRole: async (
      deleteRoleCommand?: DeleteRoleCommand,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/role`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: "DELETE", ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication Example-id-1 required
      await setApiKeyToObject(localVarHeaderParameter, "Example-id-1", configuration);

      // authentication JWT_Authorization required
      await setApiKeyToObject(localVarHeaderParameter, "authorization", configuration);

      // authentication example-id-2 required
      await setApiKeyToObject(localVarHeaderParameter, "example-id-2", configuration);

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      localVarRequestOptions.data = serializeDataIfNeeded(deleteRoleCommand, localVarRequestOptions, configuration);

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary 查詢維修單
     * @param {FetchAllRoleRequest} [fetchAllRoleRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    fetchRoles: async (
      fetchAllRoleRequest?: FetchAllRoleRequest,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/role/fetch`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: "POST", ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication Example-id-1 required
      await setApiKeyToObject(localVarHeaderParameter, "Example-id-1", configuration);

      // authentication JWT_Authorization required
      await setApiKeyToObject(localVarHeaderParameter, "authorization", configuration);

      // authentication example-id-2 required
      await setApiKeyToObject(localVarHeaderParameter, "example-id-2", configuration);

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      localVarRequestOptions.data = serializeDataIfNeeded(fetchAllRoleRequest, localVarRequestOptions, configuration);

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary 查詢角色  (*dynamic sort support)
     * @param {QueryRoleRequest} [queryRoleRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getRole: async (queryRoleRequest?: QueryRoleRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
      const localVarPath = `/api/role`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: "GET", ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication Example-id-1 required
      await setApiKeyToObject(localVarHeaderParameter, "Example-id-1", configuration);

      // authentication JWT_Authorization required
      await setApiKeyToObject(localVarHeaderParameter, "authorization", configuration);

      // authentication example-id-2 required
      await setApiKeyToObject(localVarHeaderParameter, "example-id-2", configuration);

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      localVarRequestOptions.data = serializeDataIfNeeded(queryRoleRequest, localVarRequestOptions, configuration);

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary 以 Id 查詢列表
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getRole_1: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists("getRole_1", "id", id);
      const localVarPath = `/api/role/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(id)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: "GET", ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication Example-id-1 required
      await setApiKeyToObject(localVarHeaderParameter, "Example-id-1", configuration);

      // authentication JWT_Authorization required
      await setApiKeyToObject(localVarHeaderParameter, "authorization", configuration);

      // authentication example-id-2 required
      await setApiKeyToObject(localVarHeaderParameter, "example-id-2", configuration);

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary 修改
     * @param {PatchRoleCommand} [patchRoleCommand]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    patchRole: async (patchRoleCommand?: PatchRoleCommand, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
      const localVarPath = `/api/role`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: "PATCH", ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication Example-id-1 required
      await setApiKeyToObject(localVarHeaderParameter, "Example-id-1", configuration);

      // authentication JWT_Authorization required
      await setApiKeyToObject(localVarHeaderParameter, "authorization", configuration);

      // authentication example-id-2 required
      await setApiKeyToObject(localVarHeaderParameter, "example-id-2", configuration);

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      localVarRequestOptions.data = serializeDataIfNeeded(patchRoleCommand, localVarRequestOptions, configuration);

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary 修改角色
     * @param {UpdateRoleCommand} [updateRoleCommand]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    putRole: async (updateRoleCommand?: UpdateRoleCommand, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
      const localVarPath = `/api/role`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: "PUT", ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication Example-id-1 required
      await setApiKeyToObject(localVarHeaderParameter, "Example-id-1", configuration);

      // authentication JWT_Authorization required
      await setApiKeyToObject(localVarHeaderParameter, "authorization", configuration);

      // authentication example-id-2 required
      await setApiKeyToObject(localVarHeaderParameter, "example-id-2", configuration);

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      localVarRequestOptions.data = serializeDataIfNeeded(updateRoleCommand, localVarRequestOptions, configuration);

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary 查詢列表  (*dynamic sort support)
     * @param {QueryRoleRequest} [queryRoleRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    queryRoles: async (queryRoleRequest?: QueryRoleRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
      const localVarPath = `/api/role/query`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: "POST", ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication Example-id-1 required
      await setApiKeyToObject(localVarHeaderParameter, "Example-id-1", configuration);

      // authentication JWT_Authorization required
      await setApiKeyToObject(localVarHeaderParameter, "authorization", configuration);

      // authentication example-id-2 required
      await setApiKeyToObject(localVarHeaderParameter, "example-id-2", configuration);

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      localVarRequestOptions.data = serializeDataIfNeeded(queryRoleRequest, localVarRequestOptions, configuration);

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary 刪除主檔
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    removeRole: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists("removeRole", "id", id);
      const localVarPath = `/api/role/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(id)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: "DELETE", ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication Example-id-1 required
      await setApiKeyToObject(localVarHeaderParameter, "Example-id-1", configuration);

      // authentication JWT_Authorization required
      await setApiKeyToObject(localVarHeaderParameter, "authorization", configuration);

      // authentication example-id-2 required
      await setApiKeyToObject(localVarHeaderParameter, "example-id-2", configuration);

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * RoleApi - functional programming interface
 * @export
 */
export const RoleApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = RoleApiAxiosParamCreator(configuration);
  return {
    /**
     *
     * @summary 建立角色
     * @param {CreateRoleCommand} [createRoleCommand]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async createRole(
      createRoleCommand?: CreateRoleCommand,
      options?: AxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<RoleViewApiResponse>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.createRole(createRoleCommand, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     *
     * @summary 刪除維修單主檔
     * @param {DeleteRoleCommand} [deleteRoleCommand]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async deleteRole(
      deleteRoleCommand?: DeleteRoleCommand,
      options?: AxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<RoleViewApiResponse>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.deleteRole(deleteRoleCommand, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     *
     * @summary 查詢維修單
     * @param {FetchAllRoleRequest} [fetchAllRoleRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async fetchRoles(
      fetchAllRoleRequest?: FetchAllRoleRequest,
      options?: AxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<RoleViewListApiResponse>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.fetchRoles(fetchAllRoleRequest, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     *
     * @summary 查詢角色  (*dynamic sort support)
     * @param {QueryRoleRequest} [queryRoleRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getRole(
      queryRoleRequest?: QueryRoleRequest,
      options?: AxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<RoleViewPageApiResponse>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getRole(queryRoleRequest, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     *
     * @summary 以 Id 查詢列表
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getRole_1(
      id: string,
      options?: AxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<RoleViewApiResponse>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getRole_1(id, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     *
     * @summary 修改
     * @param {PatchRoleCommand} [patchRoleCommand]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async patchRole(
      patchRoleCommand?: PatchRoleCommand,
      options?: AxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<RoleViewApiResponse>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.patchRole(patchRoleCommand, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     *
     * @summary 修改角色
     * @param {UpdateRoleCommand} [updateRoleCommand]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async putRole(
      updateRoleCommand?: UpdateRoleCommand,
      options?: AxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<RoleViewApiResponse>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.putRole(updateRoleCommand, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     *
     * @summary 查詢列表  (*dynamic sort support)
     * @param {QueryRoleRequest} [queryRoleRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async queryRoles(
      queryRoleRequest?: QueryRoleRequest,
      options?: AxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<RoleViewPageApiResponse>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.queryRoles(queryRoleRequest, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     *
     * @summary 刪除主檔
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async removeRole(
      id: string,
      options?: AxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<Int32ApiResponse>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.removeRole(id, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
  };
};

/**
 * RoleApi - factory interface
 * @export
 */
export const RoleApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
  const localVarFp = RoleApiFp(configuration);
  return {
    /**
     *
     * @summary 建立角色
     * @param {CreateRoleCommand} [createRoleCommand]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createRole(createRoleCommand?: CreateRoleCommand, options?: any): Promise<RoleViewApiResponse> {
      return localVarFp.createRole(createRoleCommand, options).then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary 刪除維修單主檔
     * @param {DeleteRoleCommand} [deleteRoleCommand]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteRole(deleteRoleCommand?: DeleteRoleCommand, options?: any): Promise<RoleViewApiResponse> {
      return localVarFp.deleteRole(deleteRoleCommand, options).then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary 查詢維修單
     * @param {FetchAllRoleRequest} [fetchAllRoleRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    fetchRoles(fetchAllRoleRequest?: FetchAllRoleRequest, options?: any): Promise<RoleViewListApiResponse> {
      return localVarFp.fetchRoles(fetchAllRoleRequest, options).then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary 查詢角色  (*dynamic sort support)
     * @param {QueryRoleRequest} [queryRoleRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getRole(queryRoleRequest?: QueryRoleRequest, options?: any): Promise<RoleViewPageApiResponse> {
      return localVarFp.getRole(queryRoleRequest, options).then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary 以 Id 查詢列表
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getRole_1(id: string, options?: any): Promise<RoleViewApiResponse> {
      return localVarFp.getRole_1(id, options).then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary 修改
     * @param {PatchRoleCommand} [patchRoleCommand]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    patchRole(patchRoleCommand?: PatchRoleCommand, options?: any): Promise<RoleViewApiResponse> {
      return localVarFp.patchRole(patchRoleCommand, options).then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary 修改角色
     * @param {UpdateRoleCommand} [updateRoleCommand]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    putRole(updateRoleCommand?: UpdateRoleCommand, options?: any): Promise<RoleViewApiResponse> {
      return localVarFp.putRole(updateRoleCommand, options).then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary 查詢列表  (*dynamic sort support)
     * @param {QueryRoleRequest} [queryRoleRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    queryRoles(queryRoleRequest?: QueryRoleRequest, options?: any): Promise<RoleViewPageApiResponse> {
      return localVarFp.queryRoles(queryRoleRequest, options).then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary 刪除主檔
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    removeRole(id: string, options?: any): Promise<Int32ApiResponse> {
      return localVarFp.removeRole(id, options).then((request) => request(axios, basePath));
    },
  };
};

/**
 * RoleApi - interface
 * @export
 * @interface RoleApi
 */
export interface RoleApiInterface {
  /**
   *
   * @summary 建立角色
   * @param {CreateRoleCommand} [createRoleCommand]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof RoleApiInterface
   */
  createRole(createRoleCommand?: CreateRoleCommand, options?: AxiosRequestConfig): Promise<RoleViewApiResponse>;

  /**
   *
   * @summary 刪除維修單主檔
   * @param {DeleteRoleCommand} [deleteRoleCommand]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof RoleApiInterface
   */
  deleteRole(deleteRoleCommand?: DeleteRoleCommand, options?: AxiosRequestConfig): Promise<RoleViewApiResponse>;

  /**
   *
   * @summary 查詢維修單
   * @param {FetchAllRoleRequest} [fetchAllRoleRequest]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof RoleApiInterface
   */
  fetchRoles(fetchAllRoleRequest?: FetchAllRoleRequest, options?: AxiosRequestConfig): Promise<RoleViewListApiResponse>;

  /**
   *
   * @summary 查詢角色  (*dynamic sort support)
   * @param {QueryRoleRequest} [queryRoleRequest]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof RoleApiInterface
   */
  getRole(queryRoleRequest?: QueryRoleRequest, options?: AxiosRequestConfig): Promise<RoleViewPageApiResponse>;

  /**
   *
   * @summary 以 Id 查詢列表
   * @param {string} id
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof RoleApiInterface
   */
  getRole_1(id: string, options?: AxiosRequestConfig): Promise<RoleViewApiResponse>;

  /**
   *
   * @summary 修改
   * @param {PatchRoleCommand} [patchRoleCommand]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof RoleApiInterface
   */
  patchRole(patchRoleCommand?: PatchRoleCommand, options?: AxiosRequestConfig): Promise<RoleViewApiResponse>;

  /**
   *
   * @summary 修改角色
   * @param {UpdateRoleCommand} [updateRoleCommand]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof RoleApiInterface
   */
  putRole(updateRoleCommand?: UpdateRoleCommand, options?: AxiosRequestConfig): Promise<RoleViewApiResponse>;

  /**
   *
   * @summary 查詢列表  (*dynamic sort support)
   * @param {QueryRoleRequest} [queryRoleRequest]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof RoleApiInterface
   */
  queryRoles(queryRoleRequest?: QueryRoleRequest, options?: AxiosRequestConfig): Promise<RoleViewPageApiResponse>;

  /**
   *
   * @summary 刪除主檔
   * @param {string} id
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof RoleApiInterface
   */
  removeRole(id: string, options?: AxiosRequestConfig): Promise<Int32ApiResponse>;
}

/**
 * RoleApi - object-oriented interface
 * @export
 * @class RoleApi
 * @extends {BaseAPI}
 */
export class RoleApi extends BaseAPI implements RoleApiInterface {
  /**
   *
   * @summary 建立角色
   * @param {CreateRoleCommand} [createRoleCommand]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof RoleApi
   */
  public createRole(createRoleCommand?: CreateRoleCommand, options?: AxiosRequestConfig) {
    return RoleApiFp(this.configuration)
      .createRole(createRoleCommand, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary 刪除維修單主檔
   * @param {DeleteRoleCommand} [deleteRoleCommand]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof RoleApi
   */
  public deleteRole(deleteRoleCommand?: DeleteRoleCommand, options?: AxiosRequestConfig) {
    return RoleApiFp(this.configuration)
      .deleteRole(deleteRoleCommand, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary 查詢維修單
   * @param {FetchAllRoleRequest} [fetchAllRoleRequest]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof RoleApi
   */
  public fetchRoles(fetchAllRoleRequest?: FetchAllRoleRequest, options?: AxiosRequestConfig) {
    return RoleApiFp(this.configuration)
      .fetchRoles(fetchAllRoleRequest, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary 查詢角色  (*dynamic sort support)
   * @param {QueryRoleRequest} [queryRoleRequest]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof RoleApi
   */
  public getRole(queryRoleRequest?: QueryRoleRequest, options?: AxiosRequestConfig) {
    return RoleApiFp(this.configuration)
      .getRole(queryRoleRequest, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary 以 Id 查詢列表
   * @param {string} id
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof RoleApi
   */
  public getRole_1(id: string, options?: AxiosRequestConfig) {
    return RoleApiFp(this.configuration)
      .getRole_1(id, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary 修改
   * @param {PatchRoleCommand} [patchRoleCommand]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof RoleApi
   */
  public patchRole(patchRoleCommand?: PatchRoleCommand, options?: AxiosRequestConfig) {
    return RoleApiFp(this.configuration)
      .patchRole(patchRoleCommand, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary 修改角色
   * @param {UpdateRoleCommand} [updateRoleCommand]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof RoleApi
   */
  public putRole(updateRoleCommand?: UpdateRoleCommand, options?: AxiosRequestConfig) {
    return RoleApiFp(this.configuration)
      .putRole(updateRoleCommand, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary 查詢列表  (*dynamic sort support)
   * @param {QueryRoleRequest} [queryRoleRequest]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof RoleApi
   */
  public queryRoles(queryRoleRequest?: QueryRoleRequest, options?: AxiosRequestConfig) {
    return RoleApiFp(this.configuration)
      .queryRoles(queryRoleRequest, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary 刪除主檔
   * @param {string} id
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof RoleApi
   */
  public removeRole(id: string, options?: AxiosRequestConfig) {
    return RoleApiFp(this.configuration)
      .removeRole(id, options)
      .then((request) => request(this.axios, this.basePath));
  }
}

/**
 * RolePrivilegeMappingApi - axios parameter creator
 * @export
 */
export const RolePrivilegeMappingApiAxiosParamCreator = function (configuration?: Configuration) {
  return {
    /**
     *
     * @summary 建立角色權限
     * @param {CreateRolePrivilegeMappingCommand} [createRolePrivilegeMappingCommand]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createRolePrivilegeMapping: async (
      createRolePrivilegeMappingCommand?: CreateRolePrivilegeMappingCommand,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/rolePrivilegeMapping`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: "POST", ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication Example-id-1 required
      await setApiKeyToObject(localVarHeaderParameter, "Example-id-1", configuration);

      // authentication JWT_Authorization required
      await setApiKeyToObject(localVarHeaderParameter, "authorization", configuration);

      // authentication example-id-2 required
      await setApiKeyToObject(localVarHeaderParameter, "example-id-2", configuration);

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      localVarRequestOptions.data = serializeDataIfNeeded(
        createRolePrivilegeMappingCommand,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary 刪除維修單主檔
     * @param {DeleteRolePrivilegeMappingCommand} [deleteRolePrivilegeMappingCommand]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteRolePrivilegeMapping: async (
      deleteRolePrivilegeMappingCommand?: DeleteRolePrivilegeMappingCommand,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/rolePrivilegeMapping`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: "DELETE", ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication Example-id-1 required
      await setApiKeyToObject(localVarHeaderParameter, "Example-id-1", configuration);

      // authentication JWT_Authorization required
      await setApiKeyToObject(localVarHeaderParameter, "authorization", configuration);

      // authentication example-id-2 required
      await setApiKeyToObject(localVarHeaderParameter, "example-id-2", configuration);

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      localVarRequestOptions.data = serializeDataIfNeeded(
        deleteRolePrivilegeMappingCommand,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary 查詢維修單
     * @param {FetchAllRolePrivilegeMappingRequest} [fetchAllRolePrivilegeMappingRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    fetchRolePrivilegeMappings: async (
      fetchAllRolePrivilegeMappingRequest?: FetchAllRolePrivilegeMappingRequest,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/rolePrivilegeMapping/fetch`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: "POST", ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication Example-id-1 required
      await setApiKeyToObject(localVarHeaderParameter, "Example-id-1", configuration);

      // authentication JWT_Authorization required
      await setApiKeyToObject(localVarHeaderParameter, "authorization", configuration);

      // authentication example-id-2 required
      await setApiKeyToObject(localVarHeaderParameter, "example-id-2", configuration);

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      localVarRequestOptions.data = serializeDataIfNeeded(
        fetchAllRolePrivilegeMappingRequest,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary 查詢角色權限  (*dynamic sort support)
     * @param {QueryRolePrivilegeMappingRequest} [queryRolePrivilegeMappingRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getRolePrivilegeMapping: async (
      queryRolePrivilegeMappingRequest?: QueryRolePrivilegeMappingRequest,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/rolePrivilegeMapping`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: "GET", ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication Example-id-1 required
      await setApiKeyToObject(localVarHeaderParameter, "Example-id-1", configuration);

      // authentication JWT_Authorization required
      await setApiKeyToObject(localVarHeaderParameter, "authorization", configuration);

      // authentication example-id-2 required
      await setApiKeyToObject(localVarHeaderParameter, "example-id-2", configuration);

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      localVarRequestOptions.data = serializeDataIfNeeded(
        queryRolePrivilegeMappingRequest,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary 以 Id 查詢列表
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getRolePrivilegeMapping_1: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists("getRolePrivilegeMapping_1", "id", id);
      const localVarPath = `/api/rolePrivilegeMapping/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(id)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: "GET", ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication Example-id-1 required
      await setApiKeyToObject(localVarHeaderParameter, "Example-id-1", configuration);

      // authentication JWT_Authorization required
      await setApiKeyToObject(localVarHeaderParameter, "authorization", configuration);

      // authentication example-id-2 required
      await setApiKeyToObject(localVarHeaderParameter, "example-id-2", configuration);

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary 修改
     * @param {PatchRolePrivilegeMappingCommand} [patchRolePrivilegeMappingCommand]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    patchRolePrivilegeMapping: async (
      patchRolePrivilegeMappingCommand?: PatchRolePrivilegeMappingCommand,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/rolePrivilegeMapping`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: "PATCH", ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication Example-id-1 required
      await setApiKeyToObject(localVarHeaderParameter, "Example-id-1", configuration);

      // authentication JWT_Authorization required
      await setApiKeyToObject(localVarHeaderParameter, "authorization", configuration);

      // authentication example-id-2 required
      await setApiKeyToObject(localVarHeaderParameter, "example-id-2", configuration);

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      localVarRequestOptions.data = serializeDataIfNeeded(
        patchRolePrivilegeMappingCommand,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary 修改角色權限
     * @param {UpdateRolePrivilegeMappingCommand} [updateRolePrivilegeMappingCommand]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    putRolePrivilegeMapping: async (
      updateRolePrivilegeMappingCommand?: UpdateRolePrivilegeMappingCommand,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/rolePrivilegeMapping`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: "PUT", ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication Example-id-1 required
      await setApiKeyToObject(localVarHeaderParameter, "Example-id-1", configuration);

      // authentication JWT_Authorization required
      await setApiKeyToObject(localVarHeaderParameter, "authorization", configuration);

      // authentication example-id-2 required
      await setApiKeyToObject(localVarHeaderParameter, "example-id-2", configuration);

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      localVarRequestOptions.data = serializeDataIfNeeded(
        updateRolePrivilegeMappingCommand,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary 查詢列表  (*dynamic sort support)
     * @param {QueryRolePrivilegeMappingRequest} [queryRolePrivilegeMappingRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    queryRolePrivilegeMappings: async (
      queryRolePrivilegeMappingRequest?: QueryRolePrivilegeMappingRequest,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/rolePrivilegeMapping/query`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: "POST", ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication Example-id-1 required
      await setApiKeyToObject(localVarHeaderParameter, "Example-id-1", configuration);

      // authentication JWT_Authorization required
      await setApiKeyToObject(localVarHeaderParameter, "authorization", configuration);

      // authentication example-id-2 required
      await setApiKeyToObject(localVarHeaderParameter, "example-id-2", configuration);

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      localVarRequestOptions.data = serializeDataIfNeeded(
        queryRolePrivilegeMappingRequest,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary 刪除主檔
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    removeRolePrivilegeMapping: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists("removeRolePrivilegeMapping", "id", id);
      const localVarPath = `/api/rolePrivilegeMapping/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(id)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: "DELETE", ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication Example-id-1 required
      await setApiKeyToObject(localVarHeaderParameter, "Example-id-1", configuration);

      // authentication JWT_Authorization required
      await setApiKeyToObject(localVarHeaderParameter, "authorization", configuration);

      // authentication example-id-2 required
      await setApiKeyToObject(localVarHeaderParameter, "example-id-2", configuration);

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * RolePrivilegeMappingApi - functional programming interface
 * @export
 */
export const RolePrivilegeMappingApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = RolePrivilegeMappingApiAxiosParamCreator(configuration);
  return {
    /**
     *
     * @summary 建立角色權限
     * @param {CreateRolePrivilegeMappingCommand} [createRolePrivilegeMappingCommand]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async createRolePrivilegeMapping(
      createRolePrivilegeMappingCommand?: CreateRolePrivilegeMappingCommand,
      options?: AxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<RolePrivilegeMappingViewApiResponse>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.createRolePrivilegeMapping(
        createRolePrivilegeMappingCommand,
        options
      );
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     *
     * @summary 刪除維修單主檔
     * @param {DeleteRolePrivilegeMappingCommand} [deleteRolePrivilegeMappingCommand]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async deleteRolePrivilegeMapping(
      deleteRolePrivilegeMappingCommand?: DeleteRolePrivilegeMappingCommand,
      options?: AxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<RolePrivilegeMappingViewApiResponse>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.deleteRolePrivilegeMapping(
        deleteRolePrivilegeMappingCommand,
        options
      );
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     *
     * @summary 查詢維修單
     * @param {FetchAllRolePrivilegeMappingRequest} [fetchAllRolePrivilegeMappingRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async fetchRolePrivilegeMappings(
      fetchAllRolePrivilegeMappingRequest?: FetchAllRolePrivilegeMappingRequest,
      options?: AxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<RolePrivilegeMappingViewListApiResponse>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.fetchRolePrivilegeMappings(
        fetchAllRolePrivilegeMappingRequest,
        options
      );
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     *
     * @summary 查詢角色權限  (*dynamic sort support)
     * @param {QueryRolePrivilegeMappingRequest} [queryRolePrivilegeMappingRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getRolePrivilegeMapping(
      queryRolePrivilegeMappingRequest?: QueryRolePrivilegeMappingRequest,
      options?: AxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<RolePrivilegeMappingViewPageApiResponse>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getRolePrivilegeMapping(
        queryRolePrivilegeMappingRequest,
        options
      );
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     *
     * @summary 以 Id 查詢列表
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getRolePrivilegeMapping_1(
      id: string,
      options?: AxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<RolePrivilegeMappingViewApiResponse>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getRolePrivilegeMapping_1(id, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     *
     * @summary 修改
     * @param {PatchRolePrivilegeMappingCommand} [patchRolePrivilegeMappingCommand]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async patchRolePrivilegeMapping(
      patchRolePrivilegeMappingCommand?: PatchRolePrivilegeMappingCommand,
      options?: AxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<RolePrivilegeMappingViewApiResponse>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.patchRolePrivilegeMapping(
        patchRolePrivilegeMappingCommand,
        options
      );
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     *
     * @summary 修改角色權限
     * @param {UpdateRolePrivilegeMappingCommand} [updateRolePrivilegeMappingCommand]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async putRolePrivilegeMapping(
      updateRolePrivilegeMappingCommand?: UpdateRolePrivilegeMappingCommand,
      options?: AxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<RolePrivilegeMappingViewApiResponse>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.putRolePrivilegeMapping(
        updateRolePrivilegeMappingCommand,
        options
      );
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     *
     * @summary 查詢列表  (*dynamic sort support)
     * @param {QueryRolePrivilegeMappingRequest} [queryRolePrivilegeMappingRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async queryRolePrivilegeMappings(
      queryRolePrivilegeMappingRequest?: QueryRolePrivilegeMappingRequest,
      options?: AxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<RolePrivilegeMappingViewPageApiResponse>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.queryRolePrivilegeMappings(
        queryRolePrivilegeMappingRequest,
        options
      );
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     *
     * @summary 刪除主檔
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async removeRolePrivilegeMapping(
      id: string,
      options?: AxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<Int32ApiResponse>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.removeRolePrivilegeMapping(id, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
  };
};

/**
 * RolePrivilegeMappingApi - factory interface
 * @export
 */
export const RolePrivilegeMappingApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance
) {
  const localVarFp = RolePrivilegeMappingApiFp(configuration);
  return {
    /**
     *
     * @summary 建立角色權限
     * @param {CreateRolePrivilegeMappingCommand} [createRolePrivilegeMappingCommand]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createRolePrivilegeMapping(
      createRolePrivilegeMappingCommand?: CreateRolePrivilegeMappingCommand,
      options?: any
    ): Promise<RolePrivilegeMappingViewApiResponse> {
      return localVarFp
        .createRolePrivilegeMapping(createRolePrivilegeMappingCommand, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary 刪除維修單主檔
     * @param {DeleteRolePrivilegeMappingCommand} [deleteRolePrivilegeMappingCommand]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteRolePrivilegeMapping(
      deleteRolePrivilegeMappingCommand?: DeleteRolePrivilegeMappingCommand,
      options?: any
    ): Promise<RolePrivilegeMappingViewApiResponse> {
      return localVarFp
        .deleteRolePrivilegeMapping(deleteRolePrivilegeMappingCommand, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary 查詢維修單
     * @param {FetchAllRolePrivilegeMappingRequest} [fetchAllRolePrivilegeMappingRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    fetchRolePrivilegeMappings(
      fetchAllRolePrivilegeMappingRequest?: FetchAllRolePrivilegeMappingRequest,
      options?: any
    ): Promise<RolePrivilegeMappingViewListApiResponse> {
      return localVarFp
        .fetchRolePrivilegeMappings(fetchAllRolePrivilegeMappingRequest, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary 查詢角色權限  (*dynamic sort support)
     * @param {QueryRolePrivilegeMappingRequest} [queryRolePrivilegeMappingRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getRolePrivilegeMapping(
      queryRolePrivilegeMappingRequest?: QueryRolePrivilegeMappingRequest,
      options?: any
    ): Promise<RolePrivilegeMappingViewPageApiResponse> {
      return localVarFp
        .getRolePrivilegeMapping(queryRolePrivilegeMappingRequest, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary 以 Id 查詢列表
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getRolePrivilegeMapping_1(id: string, options?: any): Promise<RolePrivilegeMappingViewApiResponse> {
      return localVarFp.getRolePrivilegeMapping_1(id, options).then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary 修改
     * @param {PatchRolePrivilegeMappingCommand} [patchRolePrivilegeMappingCommand]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    patchRolePrivilegeMapping(
      patchRolePrivilegeMappingCommand?: PatchRolePrivilegeMappingCommand,
      options?: any
    ): Promise<RolePrivilegeMappingViewApiResponse> {
      return localVarFp
        .patchRolePrivilegeMapping(patchRolePrivilegeMappingCommand, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary 修改角色權限
     * @param {UpdateRolePrivilegeMappingCommand} [updateRolePrivilegeMappingCommand]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    putRolePrivilegeMapping(
      updateRolePrivilegeMappingCommand?: UpdateRolePrivilegeMappingCommand,
      options?: any
    ): Promise<RolePrivilegeMappingViewApiResponse> {
      return localVarFp
        .putRolePrivilegeMapping(updateRolePrivilegeMappingCommand, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary 查詢列表  (*dynamic sort support)
     * @param {QueryRolePrivilegeMappingRequest} [queryRolePrivilegeMappingRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    queryRolePrivilegeMappings(
      queryRolePrivilegeMappingRequest?: QueryRolePrivilegeMappingRequest,
      options?: any
    ): Promise<RolePrivilegeMappingViewPageApiResponse> {
      return localVarFp
        .queryRolePrivilegeMappings(queryRolePrivilegeMappingRequest, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary 刪除主檔
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    removeRolePrivilegeMapping(id: string, options?: any): Promise<Int32ApiResponse> {
      return localVarFp.removeRolePrivilegeMapping(id, options).then((request) => request(axios, basePath));
    },
  };
};

/**
 * RolePrivilegeMappingApi - interface
 * @export
 * @interface RolePrivilegeMappingApi
 */
export interface RolePrivilegeMappingApiInterface {
  /**
   *
   * @summary 建立角色權限
   * @param {CreateRolePrivilegeMappingCommand} [createRolePrivilegeMappingCommand]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof RolePrivilegeMappingApiInterface
   */
  createRolePrivilegeMapping(
    createRolePrivilegeMappingCommand?: CreateRolePrivilegeMappingCommand,
    options?: AxiosRequestConfig
  ): Promise<RolePrivilegeMappingViewApiResponse>;

  /**
   *
   * @summary 刪除維修單主檔
   * @param {DeleteRolePrivilegeMappingCommand} [deleteRolePrivilegeMappingCommand]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof RolePrivilegeMappingApiInterface
   */
  deleteRolePrivilegeMapping(
    deleteRolePrivilegeMappingCommand?: DeleteRolePrivilegeMappingCommand,
    options?: AxiosRequestConfig
  ): Promise<RolePrivilegeMappingViewApiResponse>;

  /**
   *
   * @summary 查詢維修單
   * @param {FetchAllRolePrivilegeMappingRequest} [fetchAllRolePrivilegeMappingRequest]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof RolePrivilegeMappingApiInterface
   */
  fetchRolePrivilegeMappings(
    fetchAllRolePrivilegeMappingRequest?: FetchAllRolePrivilegeMappingRequest,
    options?: AxiosRequestConfig
  ): Promise<RolePrivilegeMappingViewListApiResponse>;

  /**
   *
   * @summary 查詢角色權限  (*dynamic sort support)
   * @param {QueryRolePrivilegeMappingRequest} [queryRolePrivilegeMappingRequest]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof RolePrivilegeMappingApiInterface
   */
  getRolePrivilegeMapping(
    queryRolePrivilegeMappingRequest?: QueryRolePrivilegeMappingRequest,
    options?: AxiosRequestConfig
  ): Promise<RolePrivilegeMappingViewPageApiResponse>;

  /**
   *
   * @summary 以 Id 查詢列表
   * @param {string} id
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof RolePrivilegeMappingApiInterface
   */
  getRolePrivilegeMapping_1(id: string, options?: AxiosRequestConfig): Promise<RolePrivilegeMappingViewApiResponse>;

  /**
   *
   * @summary 修改
   * @param {PatchRolePrivilegeMappingCommand} [patchRolePrivilegeMappingCommand]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof RolePrivilegeMappingApiInterface
   */
  patchRolePrivilegeMapping(
    patchRolePrivilegeMappingCommand?: PatchRolePrivilegeMappingCommand,
    options?: AxiosRequestConfig
  ): Promise<RolePrivilegeMappingViewApiResponse>;

  /**
   *
   * @summary 修改角色權限
   * @param {UpdateRolePrivilegeMappingCommand} [updateRolePrivilegeMappingCommand]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof RolePrivilegeMappingApiInterface
   */
  putRolePrivilegeMapping(
    updateRolePrivilegeMappingCommand?: UpdateRolePrivilegeMappingCommand,
    options?: AxiosRequestConfig
  ): Promise<RolePrivilegeMappingViewApiResponse>;

  /**
   *
   * @summary 查詢列表  (*dynamic sort support)
   * @param {QueryRolePrivilegeMappingRequest} [queryRolePrivilegeMappingRequest]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof RolePrivilegeMappingApiInterface
   */
  queryRolePrivilegeMappings(
    queryRolePrivilegeMappingRequest?: QueryRolePrivilegeMappingRequest,
    options?: AxiosRequestConfig
  ): Promise<RolePrivilegeMappingViewPageApiResponse>;

  /**
   *
   * @summary 刪除主檔
   * @param {string} id
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof RolePrivilegeMappingApiInterface
   */
  removeRolePrivilegeMapping(id: string, options?: AxiosRequestConfig): Promise<Int32ApiResponse>;
}

/**
 * RolePrivilegeMappingApi - object-oriented interface
 * @export
 * @class RolePrivilegeMappingApi
 * @extends {BaseAPI}
 */
export class RolePrivilegeMappingApi extends BaseAPI implements RolePrivilegeMappingApiInterface {
  /**
   *
   * @summary 建立角色權限
   * @param {CreateRolePrivilegeMappingCommand} [createRolePrivilegeMappingCommand]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof RolePrivilegeMappingApi
   */
  public createRolePrivilegeMapping(
    createRolePrivilegeMappingCommand?: CreateRolePrivilegeMappingCommand,
    options?: AxiosRequestConfig
  ) {
    return RolePrivilegeMappingApiFp(this.configuration)
      .createRolePrivilegeMapping(createRolePrivilegeMappingCommand, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary 刪除維修單主檔
   * @param {DeleteRolePrivilegeMappingCommand} [deleteRolePrivilegeMappingCommand]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof RolePrivilegeMappingApi
   */
  public deleteRolePrivilegeMapping(
    deleteRolePrivilegeMappingCommand?: DeleteRolePrivilegeMappingCommand,
    options?: AxiosRequestConfig
  ) {
    return RolePrivilegeMappingApiFp(this.configuration)
      .deleteRolePrivilegeMapping(deleteRolePrivilegeMappingCommand, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary 查詢維修單
   * @param {FetchAllRolePrivilegeMappingRequest} [fetchAllRolePrivilegeMappingRequest]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof RolePrivilegeMappingApi
   */
  public fetchRolePrivilegeMappings(
    fetchAllRolePrivilegeMappingRequest?: FetchAllRolePrivilegeMappingRequest,
    options?: AxiosRequestConfig
  ) {
    return RolePrivilegeMappingApiFp(this.configuration)
      .fetchRolePrivilegeMappings(fetchAllRolePrivilegeMappingRequest, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary 查詢角色權限  (*dynamic sort support)
   * @param {QueryRolePrivilegeMappingRequest} [queryRolePrivilegeMappingRequest]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof RolePrivilegeMappingApi
   */
  public getRolePrivilegeMapping(
    queryRolePrivilegeMappingRequest?: QueryRolePrivilegeMappingRequest,
    options?: AxiosRequestConfig
  ) {
    return RolePrivilegeMappingApiFp(this.configuration)
      .getRolePrivilegeMapping(queryRolePrivilegeMappingRequest, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary 以 Id 查詢列表
   * @param {string} id
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof RolePrivilegeMappingApi
   */
  public getRolePrivilegeMapping_1(id: string, options?: AxiosRequestConfig) {
    return RolePrivilegeMappingApiFp(this.configuration)
      .getRolePrivilegeMapping_1(id, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary 修改
   * @param {PatchRolePrivilegeMappingCommand} [patchRolePrivilegeMappingCommand]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof RolePrivilegeMappingApi
   */
  public patchRolePrivilegeMapping(
    patchRolePrivilegeMappingCommand?: PatchRolePrivilegeMappingCommand,
    options?: AxiosRequestConfig
  ) {
    return RolePrivilegeMappingApiFp(this.configuration)
      .patchRolePrivilegeMapping(patchRolePrivilegeMappingCommand, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary 修改角色權限
   * @param {UpdateRolePrivilegeMappingCommand} [updateRolePrivilegeMappingCommand]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof RolePrivilegeMappingApi
   */
  public putRolePrivilegeMapping(
    updateRolePrivilegeMappingCommand?: UpdateRolePrivilegeMappingCommand,
    options?: AxiosRequestConfig
  ) {
    return RolePrivilegeMappingApiFp(this.configuration)
      .putRolePrivilegeMapping(updateRolePrivilegeMappingCommand, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary 查詢列表  (*dynamic sort support)
   * @param {QueryRolePrivilegeMappingRequest} [queryRolePrivilegeMappingRequest]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof RolePrivilegeMappingApi
   */
  public queryRolePrivilegeMappings(
    queryRolePrivilegeMappingRequest?: QueryRolePrivilegeMappingRequest,
    options?: AxiosRequestConfig
  ) {
    return RolePrivilegeMappingApiFp(this.configuration)
      .queryRolePrivilegeMappings(queryRolePrivilegeMappingRequest, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary 刪除主檔
   * @param {string} id
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof RolePrivilegeMappingApi
   */
  public removeRolePrivilegeMapping(id: string, options?: AxiosRequestConfig) {
    return RolePrivilegeMappingApiFp(this.configuration)
      .removeRolePrivilegeMapping(id, options)
      .then((request) => request(this.axios, this.basePath));
  }
}

/**
 * RoleUserMappingApi - axios parameter creator
 * @export
 */
export const RoleUserMappingApiAxiosParamCreator = function (configuration?: Configuration) {
  return {
    /**
     *
     * @summary 建立使用者角色權限
     * @param {CreateRoleUserMappingCommand} [createRoleUserMappingCommand]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createRoleUserMapping: async (
      createRoleUserMappingCommand?: CreateRoleUserMappingCommand,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/roleUserMapping`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: "POST", ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication Example-id-1 required
      await setApiKeyToObject(localVarHeaderParameter, "Example-id-1", configuration);

      // authentication JWT_Authorization required
      await setApiKeyToObject(localVarHeaderParameter, "authorization", configuration);

      // authentication example-id-2 required
      await setApiKeyToObject(localVarHeaderParameter, "example-id-2", configuration);

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      localVarRequestOptions.data = serializeDataIfNeeded(
        createRoleUserMappingCommand,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary 刪除維修單主檔
     * @param {DeleteRoleUserMappingCommand} [deleteRoleUserMappingCommand]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteRoleUserMapping: async (
      deleteRoleUserMappingCommand?: DeleteRoleUserMappingCommand,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/roleUserMapping`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: "DELETE", ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication Example-id-1 required
      await setApiKeyToObject(localVarHeaderParameter, "Example-id-1", configuration);

      // authentication JWT_Authorization required
      await setApiKeyToObject(localVarHeaderParameter, "authorization", configuration);

      // authentication example-id-2 required
      await setApiKeyToObject(localVarHeaderParameter, "example-id-2", configuration);

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      localVarRequestOptions.data = serializeDataIfNeeded(
        deleteRoleUserMappingCommand,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary 查詢維修單
     * @param {FetchAllRoleUserMappingRequest} [fetchAllRoleUserMappingRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    fetchRoleUserMappings: async (
      fetchAllRoleUserMappingRequest?: FetchAllRoleUserMappingRequest,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/roleUserMapping/fetch`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: "POST", ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication Example-id-1 required
      await setApiKeyToObject(localVarHeaderParameter, "Example-id-1", configuration);

      // authentication JWT_Authorization required
      await setApiKeyToObject(localVarHeaderParameter, "authorization", configuration);

      // authentication example-id-2 required
      await setApiKeyToObject(localVarHeaderParameter, "example-id-2", configuration);

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      localVarRequestOptions.data = serializeDataIfNeeded(
        fetchAllRoleUserMappingRequest,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary 查詢使用者角色權限  (*dynamic sort support)
     * @param {QueryRoleUserMappingRequest} [queryRoleUserMappingRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getRoleUserMapping: async (
      queryRoleUserMappingRequest?: QueryRoleUserMappingRequest,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/roleUserMapping`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: "GET", ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication Example-id-1 required
      await setApiKeyToObject(localVarHeaderParameter, "Example-id-1", configuration);

      // authentication JWT_Authorization required
      await setApiKeyToObject(localVarHeaderParameter, "authorization", configuration);

      // authentication example-id-2 required
      await setApiKeyToObject(localVarHeaderParameter, "example-id-2", configuration);

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      localVarRequestOptions.data = serializeDataIfNeeded(
        queryRoleUserMappingRequest,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary 以 Id 查詢列表
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getRoleUserMapping_1: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists("getRoleUserMapping_1", "id", id);
      const localVarPath = `/api/roleUserMapping/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(id)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: "GET", ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication Example-id-1 required
      await setApiKeyToObject(localVarHeaderParameter, "Example-id-1", configuration);

      // authentication JWT_Authorization required
      await setApiKeyToObject(localVarHeaderParameter, "authorization", configuration);

      // authentication example-id-2 required
      await setApiKeyToObject(localVarHeaderParameter, "example-id-2", configuration);

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary 修改
     * @param {PatchRoleUserMappingCommand} [patchRoleUserMappingCommand]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    patchRoleUserMapping: async (
      patchRoleUserMappingCommand?: PatchRoleUserMappingCommand,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/roleUserMapping`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: "PATCH", ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication Example-id-1 required
      await setApiKeyToObject(localVarHeaderParameter, "Example-id-1", configuration);

      // authentication JWT_Authorization required
      await setApiKeyToObject(localVarHeaderParameter, "authorization", configuration);

      // authentication example-id-2 required
      await setApiKeyToObject(localVarHeaderParameter, "example-id-2", configuration);

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      localVarRequestOptions.data = serializeDataIfNeeded(
        patchRoleUserMappingCommand,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary 修改使用者角色權限
     * @param {UpdateRoleUserMappingCommand} [updateRoleUserMappingCommand]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    putRoleUserMapping: async (
      updateRoleUserMappingCommand?: UpdateRoleUserMappingCommand,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/roleUserMapping`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: "PUT", ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication Example-id-1 required
      await setApiKeyToObject(localVarHeaderParameter, "Example-id-1", configuration);

      // authentication JWT_Authorization required
      await setApiKeyToObject(localVarHeaderParameter, "authorization", configuration);

      // authentication example-id-2 required
      await setApiKeyToObject(localVarHeaderParameter, "example-id-2", configuration);

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      localVarRequestOptions.data = serializeDataIfNeeded(
        updateRoleUserMappingCommand,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary 查詢列表  (*dynamic sort support)
     * @param {QueryRoleUserMappingRequest} [queryRoleUserMappingRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    queryRoleUserMappings: async (
      queryRoleUserMappingRequest?: QueryRoleUserMappingRequest,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/roleUserMapping/query`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: "POST", ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication Example-id-1 required
      await setApiKeyToObject(localVarHeaderParameter, "Example-id-1", configuration);

      // authentication JWT_Authorization required
      await setApiKeyToObject(localVarHeaderParameter, "authorization", configuration);

      // authentication example-id-2 required
      await setApiKeyToObject(localVarHeaderParameter, "example-id-2", configuration);

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      localVarRequestOptions.data = serializeDataIfNeeded(
        queryRoleUserMappingRequest,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary 刪除主檔
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    removeRoleUserMapping: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists("removeRoleUserMapping", "id", id);
      const localVarPath = `/api/roleUserMapping/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(id)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: "DELETE", ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication Example-id-1 required
      await setApiKeyToObject(localVarHeaderParameter, "Example-id-1", configuration);

      // authentication JWT_Authorization required
      await setApiKeyToObject(localVarHeaderParameter, "authorization", configuration);

      // authentication example-id-2 required
      await setApiKeyToObject(localVarHeaderParameter, "example-id-2", configuration);

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * RoleUserMappingApi - functional programming interface
 * @export
 */
export const RoleUserMappingApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = RoleUserMappingApiAxiosParamCreator(configuration);
  return {
    /**
     *
     * @summary 建立使用者角色權限
     * @param {CreateRoleUserMappingCommand} [createRoleUserMappingCommand]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async createRoleUserMapping(
      createRoleUserMappingCommand?: CreateRoleUserMappingCommand,
      options?: AxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<RoleUserMappingViewApiResponse>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.createRoleUserMapping(
        createRoleUserMappingCommand,
        options
      );
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     *
     * @summary 刪除維修單主檔
     * @param {DeleteRoleUserMappingCommand} [deleteRoleUserMappingCommand]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async deleteRoleUserMapping(
      deleteRoleUserMappingCommand?: DeleteRoleUserMappingCommand,
      options?: AxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<RoleUserMappingViewApiResponse>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.deleteRoleUserMapping(
        deleteRoleUserMappingCommand,
        options
      );
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     *
     * @summary 查詢維修單
     * @param {FetchAllRoleUserMappingRequest} [fetchAllRoleUserMappingRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async fetchRoleUserMappings(
      fetchAllRoleUserMappingRequest?: FetchAllRoleUserMappingRequest,
      options?: AxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<RoleUserMappingViewListApiResponse>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.fetchRoleUserMappings(
        fetchAllRoleUserMappingRequest,
        options
      );
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     *
     * @summary 查詢使用者角色權限  (*dynamic sort support)
     * @param {QueryRoleUserMappingRequest} [queryRoleUserMappingRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getRoleUserMapping(
      queryRoleUserMappingRequest?: QueryRoleUserMappingRequest,
      options?: AxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<RoleUserMappingViewPageApiResponse>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getRoleUserMapping(
        queryRoleUserMappingRequest,
        options
      );
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     *
     * @summary 以 Id 查詢列表
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getRoleUserMapping_1(
      id: string,
      options?: AxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<RoleUserMappingViewApiResponse>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getRoleUserMapping_1(id, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     *
     * @summary 修改
     * @param {PatchRoleUserMappingCommand} [patchRoleUserMappingCommand]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async patchRoleUserMapping(
      patchRoleUserMappingCommand?: PatchRoleUserMappingCommand,
      options?: AxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<RoleUserMappingViewApiResponse>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.patchRoleUserMapping(
        patchRoleUserMappingCommand,
        options
      );
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     *
     * @summary 修改使用者角色權限
     * @param {UpdateRoleUserMappingCommand} [updateRoleUserMappingCommand]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async putRoleUserMapping(
      updateRoleUserMappingCommand?: UpdateRoleUserMappingCommand,
      options?: AxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<RoleUserMappingViewApiResponse>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.putRoleUserMapping(
        updateRoleUserMappingCommand,
        options
      );
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     *
     * @summary 查詢列表  (*dynamic sort support)
     * @param {QueryRoleUserMappingRequest} [queryRoleUserMappingRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async queryRoleUserMappings(
      queryRoleUserMappingRequest?: QueryRoleUserMappingRequest,
      options?: AxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<RoleUserMappingViewPageApiResponse>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.queryRoleUserMappings(
        queryRoleUserMappingRequest,
        options
      );
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     *
     * @summary 刪除主檔
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async removeRoleUserMapping(
      id: string,
      options?: AxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<Int32ApiResponse>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.removeRoleUserMapping(id, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
  };
};

/**
 * RoleUserMappingApi - factory interface
 * @export
 */
export const RoleUserMappingApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance
) {
  const localVarFp = RoleUserMappingApiFp(configuration);
  return {
    /**
     *
     * @summary 建立使用者角色權限
     * @param {CreateRoleUserMappingCommand} [createRoleUserMappingCommand]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createRoleUserMapping(
      createRoleUserMappingCommand?: CreateRoleUserMappingCommand,
      options?: any
    ): Promise<RoleUserMappingViewApiResponse> {
      return localVarFp
        .createRoleUserMapping(createRoleUserMappingCommand, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary 刪除維修單主檔
     * @param {DeleteRoleUserMappingCommand} [deleteRoleUserMappingCommand]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteRoleUserMapping(
      deleteRoleUserMappingCommand?: DeleteRoleUserMappingCommand,
      options?: any
    ): Promise<RoleUserMappingViewApiResponse> {
      return localVarFp
        .deleteRoleUserMapping(deleteRoleUserMappingCommand, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary 查詢維修單
     * @param {FetchAllRoleUserMappingRequest} [fetchAllRoleUserMappingRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    fetchRoleUserMappings(
      fetchAllRoleUserMappingRequest?: FetchAllRoleUserMappingRequest,
      options?: any
    ): Promise<RoleUserMappingViewListApiResponse> {
      return localVarFp
        .fetchRoleUserMappings(fetchAllRoleUserMappingRequest, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary 查詢使用者角色權限  (*dynamic sort support)
     * @param {QueryRoleUserMappingRequest} [queryRoleUserMappingRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getRoleUserMapping(
      queryRoleUserMappingRequest?: QueryRoleUserMappingRequest,
      options?: any
    ): Promise<RoleUserMappingViewPageApiResponse> {
      return localVarFp
        .getRoleUserMapping(queryRoleUserMappingRequest, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary 以 Id 查詢列表
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getRoleUserMapping_1(id: string, options?: any): Promise<RoleUserMappingViewApiResponse> {
      return localVarFp.getRoleUserMapping_1(id, options).then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary 修改
     * @param {PatchRoleUserMappingCommand} [patchRoleUserMappingCommand]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    patchRoleUserMapping(
      patchRoleUserMappingCommand?: PatchRoleUserMappingCommand,
      options?: any
    ): Promise<RoleUserMappingViewApiResponse> {
      return localVarFp
        .patchRoleUserMapping(patchRoleUserMappingCommand, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary 修改使用者角色權限
     * @param {UpdateRoleUserMappingCommand} [updateRoleUserMappingCommand]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    putRoleUserMapping(
      updateRoleUserMappingCommand?: UpdateRoleUserMappingCommand,
      options?: any
    ): Promise<RoleUserMappingViewApiResponse> {
      return localVarFp
        .putRoleUserMapping(updateRoleUserMappingCommand, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary 查詢列表  (*dynamic sort support)
     * @param {QueryRoleUserMappingRequest} [queryRoleUserMappingRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    queryRoleUserMappings(
      queryRoleUserMappingRequest?: QueryRoleUserMappingRequest,
      options?: any
    ): Promise<RoleUserMappingViewPageApiResponse> {
      return localVarFp
        .queryRoleUserMappings(queryRoleUserMappingRequest, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary 刪除主檔
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    removeRoleUserMapping(id: string, options?: any): Promise<Int32ApiResponse> {
      return localVarFp.removeRoleUserMapping(id, options).then((request) => request(axios, basePath));
    },
  };
};

/**
 * RoleUserMappingApi - interface
 * @export
 * @interface RoleUserMappingApi
 */
export interface RoleUserMappingApiInterface {
  /**
   *
   * @summary 建立使用者角色權限
   * @param {CreateRoleUserMappingCommand} [createRoleUserMappingCommand]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof RoleUserMappingApiInterface
   */
  createRoleUserMapping(
    createRoleUserMappingCommand?: CreateRoleUserMappingCommand,
    options?: AxiosRequestConfig
  ): Promise<RoleUserMappingViewApiResponse>;

  /**
   *
   * @summary 刪除維修單主檔
   * @param {DeleteRoleUserMappingCommand} [deleteRoleUserMappingCommand]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof RoleUserMappingApiInterface
   */
  deleteRoleUserMapping(
    deleteRoleUserMappingCommand?: DeleteRoleUserMappingCommand,
    options?: AxiosRequestConfig
  ): Promise<RoleUserMappingViewApiResponse>;

  /**
   *
   * @summary 查詢維修單
   * @param {FetchAllRoleUserMappingRequest} [fetchAllRoleUserMappingRequest]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof RoleUserMappingApiInterface
   */
  fetchRoleUserMappings(
    fetchAllRoleUserMappingRequest?: FetchAllRoleUserMappingRequest,
    options?: AxiosRequestConfig
  ): Promise<RoleUserMappingViewListApiResponse>;

  /**
   *
   * @summary 查詢使用者角色權限  (*dynamic sort support)
   * @param {QueryRoleUserMappingRequest} [queryRoleUserMappingRequest]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof RoleUserMappingApiInterface
   */
  getRoleUserMapping(
    queryRoleUserMappingRequest?: QueryRoleUserMappingRequest,
    options?: AxiosRequestConfig
  ): Promise<RoleUserMappingViewPageApiResponse>;

  /**
   *
   * @summary 以 Id 查詢列表
   * @param {string} id
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof RoleUserMappingApiInterface
   */
  getRoleUserMapping_1(id: string, options?: AxiosRequestConfig): Promise<RoleUserMappingViewApiResponse>;

  /**
   *
   * @summary 修改
   * @param {PatchRoleUserMappingCommand} [patchRoleUserMappingCommand]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof RoleUserMappingApiInterface
   */
  patchRoleUserMapping(
    patchRoleUserMappingCommand?: PatchRoleUserMappingCommand,
    options?: AxiosRequestConfig
  ): Promise<RoleUserMappingViewApiResponse>;

  /**
   *
   * @summary 修改使用者角色權限
   * @param {UpdateRoleUserMappingCommand} [updateRoleUserMappingCommand]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof RoleUserMappingApiInterface
   */
  putRoleUserMapping(
    updateRoleUserMappingCommand?: UpdateRoleUserMappingCommand,
    options?: AxiosRequestConfig
  ): Promise<RoleUserMappingViewApiResponse>;

  /**
   *
   * @summary 查詢列表  (*dynamic sort support)
   * @param {QueryRoleUserMappingRequest} [queryRoleUserMappingRequest]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof RoleUserMappingApiInterface
   */
  queryRoleUserMappings(
    queryRoleUserMappingRequest?: QueryRoleUserMappingRequest,
    options?: AxiosRequestConfig
  ): Promise<RoleUserMappingViewPageApiResponse>;

  /**
   *
   * @summary 刪除主檔
   * @param {string} id
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof RoleUserMappingApiInterface
   */
  removeRoleUserMapping(id: string, options?: AxiosRequestConfig): Promise<Int32ApiResponse>;
}

/**
 * RoleUserMappingApi - object-oriented interface
 * @export
 * @class RoleUserMappingApi
 * @extends {BaseAPI}
 */
export class RoleUserMappingApi extends BaseAPI implements RoleUserMappingApiInterface {
  /**
   *
   * @summary 建立使用者角色權限
   * @param {CreateRoleUserMappingCommand} [createRoleUserMappingCommand]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof RoleUserMappingApi
   */
  public createRoleUserMapping(
    createRoleUserMappingCommand?: CreateRoleUserMappingCommand,
    options?: AxiosRequestConfig
  ) {
    return RoleUserMappingApiFp(this.configuration)
      .createRoleUserMapping(createRoleUserMappingCommand, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary 刪除維修單主檔
   * @param {DeleteRoleUserMappingCommand} [deleteRoleUserMappingCommand]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof RoleUserMappingApi
   */
  public deleteRoleUserMapping(
    deleteRoleUserMappingCommand?: DeleteRoleUserMappingCommand,
    options?: AxiosRequestConfig
  ) {
    return RoleUserMappingApiFp(this.configuration)
      .deleteRoleUserMapping(deleteRoleUserMappingCommand, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary 查詢維修單
   * @param {FetchAllRoleUserMappingRequest} [fetchAllRoleUserMappingRequest]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof RoleUserMappingApi
   */
  public fetchRoleUserMappings(
    fetchAllRoleUserMappingRequest?: FetchAllRoleUserMappingRequest,
    options?: AxiosRequestConfig
  ) {
    return RoleUserMappingApiFp(this.configuration)
      .fetchRoleUserMappings(fetchAllRoleUserMappingRequest, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary 查詢使用者角色權限  (*dynamic sort support)
   * @param {QueryRoleUserMappingRequest} [queryRoleUserMappingRequest]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof RoleUserMappingApi
   */
  public getRoleUserMapping(queryRoleUserMappingRequest?: QueryRoleUserMappingRequest, options?: AxiosRequestConfig) {
    return RoleUserMappingApiFp(this.configuration)
      .getRoleUserMapping(queryRoleUserMappingRequest, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary 以 Id 查詢列表
   * @param {string} id
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof RoleUserMappingApi
   */
  public getRoleUserMapping_1(id: string, options?: AxiosRequestConfig) {
    return RoleUserMappingApiFp(this.configuration)
      .getRoleUserMapping_1(id, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary 修改
   * @param {PatchRoleUserMappingCommand} [patchRoleUserMappingCommand]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof RoleUserMappingApi
   */
  public patchRoleUserMapping(patchRoleUserMappingCommand?: PatchRoleUserMappingCommand, options?: AxiosRequestConfig) {
    return RoleUserMappingApiFp(this.configuration)
      .patchRoleUserMapping(patchRoleUserMappingCommand, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary 修改使用者角色權限
   * @param {UpdateRoleUserMappingCommand} [updateRoleUserMappingCommand]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof RoleUserMappingApi
   */
  public putRoleUserMapping(updateRoleUserMappingCommand?: UpdateRoleUserMappingCommand, options?: AxiosRequestConfig) {
    return RoleUserMappingApiFp(this.configuration)
      .putRoleUserMapping(updateRoleUserMappingCommand, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary 查詢列表  (*dynamic sort support)
   * @param {QueryRoleUserMappingRequest} [queryRoleUserMappingRequest]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof RoleUserMappingApi
   */
  public queryRoleUserMappings(
    queryRoleUserMappingRequest?: QueryRoleUserMappingRequest,
    options?: AxiosRequestConfig
  ) {
    return RoleUserMappingApiFp(this.configuration)
      .queryRoleUserMappings(queryRoleUserMappingRequest, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary 刪除主檔
   * @param {string} id
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof RoleUserMappingApi
   */
  public removeRoleUserMapping(id: string, options?: AxiosRequestConfig) {
    return RoleUserMappingApiFp(this.configuration)
      .removeRoleUserMapping(id, options)
      .then((request) => request(this.axios, this.basePath));
  }
}

/**
 * ShoppingCartApi - axios parameter creator
 * @export
 */
export const ShoppingCartApiAxiosParamCreator = function (configuration?: Configuration) {
  return {
    /**
     *
     * @summary 建立購物車主檔
     * @param {CreateShoppingCartCommand} [createShoppingCartCommand]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createShoppingCart: async (
      createShoppingCartCommand?: CreateShoppingCartCommand,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/shoppingCart`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: "POST", ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication Example-id-1 required
      await setApiKeyToObject(localVarHeaderParameter, "Example-id-1", configuration);

      // authentication JWT_Authorization required
      await setApiKeyToObject(localVarHeaderParameter, "authorization", configuration);

      // authentication example-id-2 required
      await setApiKeyToObject(localVarHeaderParameter, "example-id-2", configuration);

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      localVarRequestOptions.data = serializeDataIfNeeded(
        createShoppingCartCommand,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary 刪除主檔
     * @param {DeleteShoppingCartCommand} [deleteShoppingCartCommand]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteShoppingCart: async (
      deleteShoppingCartCommand?: DeleteShoppingCartCommand,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/shoppingCart`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: "DELETE", ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication Example-id-1 required
      await setApiKeyToObject(localVarHeaderParameter, "Example-id-1", configuration);

      // authentication JWT_Authorization required
      await setApiKeyToObject(localVarHeaderParameter, "authorization", configuration);

      // authentication example-id-2 required
      await setApiKeyToObject(localVarHeaderParameter, "example-id-2", configuration);

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      localVarRequestOptions.data = serializeDataIfNeeded(
        deleteShoppingCartCommand,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary 查詢購物車主檔
     * @param {FetchAllShoppingCartRequest} [fetchAllShoppingCartRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    fetchShoppingCarts: async (
      fetchAllShoppingCartRequest?: FetchAllShoppingCartRequest,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/shoppingCart/fetch`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: "POST", ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication Example-id-1 required
      await setApiKeyToObject(localVarHeaderParameter, "Example-id-1", configuration);

      // authentication JWT_Authorization required
      await setApiKeyToObject(localVarHeaderParameter, "authorization", configuration);

      // authentication example-id-2 required
      await setApiKeyToObject(localVarHeaderParameter, "example-id-2", configuration);

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      localVarRequestOptions.data = serializeDataIfNeeded(
        fetchAllShoppingCartRequest,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary 查詢購物車主檔
     * @param {number} [id] id
     * @param {number} [userId] User.Id
     * @param {number} [courseId] 課程類別Course.Id
     * @param {number} [count] 數量
     * @param {string} [shoppingCartStatus] 出席狀態 對應SystemConfig內Type&#x3D;ShoppingCartStatus 0:新增 1已轉入訂單 2:逾期課程清單(無法轉訂單) 3:數量不足
     * @param {Array<SortProperty>} [sortProperties] 查詢欄位排序
     * @param {number} [page] 目前頁數
     * @param {number} [size] 每頁筆數
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    findShoppingCart: async (
      id?: number,
      userId?: number,
      courseId?: number,
      count?: number,
      shoppingCartStatus?: string,
      sortProperties?: Array<SortProperty>,
      page?: number,
      size?: number,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/shoppingCart`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: "GET", ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication Example-id-1 required
      await setApiKeyToObject(localVarHeaderParameter, "Example-id-1", configuration);

      // authentication JWT_Authorization required
      await setApiKeyToObject(localVarHeaderParameter, "authorization", configuration);

      // authentication example-id-2 required
      await setApiKeyToObject(localVarHeaderParameter, "example-id-2", configuration);

      if (id !== undefined) {
        localVarQueryParameter["id"] = id;
      }

      if (userId !== undefined) {
        localVarQueryParameter["userId"] = userId;
      }

      if (courseId !== undefined) {
        localVarQueryParameter["courseId"] = courseId;
      }

      if (count !== undefined) {
        localVarQueryParameter["count"] = count;
      }

      if (shoppingCartStatus !== undefined) {
        localVarQueryParameter["shoppingCartStatus"] = shoppingCartStatus;
      }

      if (sortProperties) {
        localVarQueryParameter["sortProperties"] = sortProperties;
      }

      if (page !== undefined) {
        localVarQueryParameter["page"] = page;
      }

      if (size !== undefined) {
        localVarQueryParameter["size"] = size;
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary 以 Id 查詢列表
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getShoppingCart: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists("getShoppingCart", "id", id);
      const localVarPath = `/api/shoppingCart/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(id)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: "GET", ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication Example-id-1 required
      await setApiKeyToObject(localVarHeaderParameter, "Example-id-1", configuration);

      // authentication JWT_Authorization required
      await setApiKeyToObject(localVarHeaderParameter, "authorization", configuration);

      // authentication example-id-2 required
      await setApiKeyToObject(localVarHeaderParameter, "example-id-2", configuration);

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary 修改購物車主檔
     * @param {UpdateShoppingCartCommand} [updateShoppingCartCommand]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    putShoppingCart: async (
      updateShoppingCartCommand?: UpdateShoppingCartCommand,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/shoppingCart`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: "PUT", ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication Example-id-1 required
      await setApiKeyToObject(localVarHeaderParameter, "Example-id-1", configuration);

      // authentication JWT_Authorization required
      await setApiKeyToObject(localVarHeaderParameter, "authorization", configuration);

      // authentication example-id-2 required
      await setApiKeyToObject(localVarHeaderParameter, "example-id-2", configuration);

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      localVarRequestOptions.data = serializeDataIfNeeded(
        updateShoppingCartCommand,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary 查詢列表  (*dynamic sort support)
     * @param {QueryShoppingCartRequest} [queryShoppingCartRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    queryShoppingCarts: async (
      queryShoppingCartRequest?: QueryShoppingCartRequest,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/shoppingCart/query`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: "POST", ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication Example-id-1 required
      await setApiKeyToObject(localVarHeaderParameter, "Example-id-1", configuration);

      // authentication JWT_Authorization required
      await setApiKeyToObject(localVarHeaderParameter, "authorization", configuration);

      // authentication example-id-2 required
      await setApiKeyToObject(localVarHeaderParameter, "example-id-2", configuration);

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      localVarRequestOptions.data = serializeDataIfNeeded(
        queryShoppingCartRequest,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary 刪除主檔
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    removeShoppingCart: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists("removeShoppingCart", "id", id);
      const localVarPath = `/api/shoppingCart/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(id)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: "DELETE", ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication Example-id-1 required
      await setApiKeyToObject(localVarHeaderParameter, "Example-id-1", configuration);

      // authentication JWT_Authorization required
      await setApiKeyToObject(localVarHeaderParameter, "authorization", configuration);

      // authentication example-id-2 required
      await setApiKeyToObject(localVarHeaderParameter, "example-id-2", configuration);

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * ShoppingCartApi - functional programming interface
 * @export
 */
export const ShoppingCartApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = ShoppingCartApiAxiosParamCreator(configuration);
  return {
    /**
     *
     * @summary 建立購物車主檔
     * @param {CreateShoppingCartCommand} [createShoppingCartCommand]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async createShoppingCart(
      createShoppingCartCommand?: CreateShoppingCartCommand,
      options?: AxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<ShoppingCartViewApiResponse>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.createShoppingCart(createShoppingCartCommand, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     *
     * @summary 刪除主檔
     * @param {DeleteShoppingCartCommand} [deleteShoppingCartCommand]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async deleteShoppingCart(
      deleteShoppingCartCommand?: DeleteShoppingCartCommand,
      options?: AxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<ShoppingCartViewApiResponse>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.deleteShoppingCart(deleteShoppingCartCommand, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     *
     * @summary 查詢購物車主檔
     * @param {FetchAllShoppingCartRequest} [fetchAllShoppingCartRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async fetchShoppingCarts(
      fetchAllShoppingCartRequest?: FetchAllShoppingCartRequest,
      options?: AxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<ShoppingCartViewListApiResponse>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.fetchShoppingCarts(
        fetchAllShoppingCartRequest,
        options
      );
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     *
     * @summary 查詢購物車主檔
     * @param {number} [id] id
     * @param {number} [userId] User.Id
     * @param {number} [courseId] 課程類別Course.Id
     * @param {number} [count] 數量
     * @param {string} [shoppingCartStatus] 出席狀態 對應SystemConfig內Type&#x3D;ShoppingCartStatus 0:新增 1已轉入訂單 2:逾期課程清單(無法轉訂單) 3:數量不足
     * @param {Array<SortProperty>} [sortProperties] 查詢欄位排序
     * @param {number} [page] 目前頁數
     * @param {number} [size] 每頁筆數
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async findShoppingCart(
      id?: number,
      userId?: number,
      courseId?: number,
      count?: number,
      shoppingCartStatus?: string,
      sortProperties?: Array<SortProperty>,
      page?: number,
      size?: number,
      options?: AxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<ShoppingCartViewPageApiResponse>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.findShoppingCart(
        id,
        userId,
        courseId,
        count,
        shoppingCartStatus,
        sortProperties,
        page,
        size,
        options
      );
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     *
     * @summary 以 Id 查詢列表
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getShoppingCart(
      id: number,
      options?: AxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<ShoppingCartViewApiResponse>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getShoppingCart(id, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     *
     * @summary 修改購物車主檔
     * @param {UpdateShoppingCartCommand} [updateShoppingCartCommand]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async putShoppingCart(
      updateShoppingCartCommand?: UpdateShoppingCartCommand,
      options?: AxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<ShoppingCartViewApiResponse>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.putShoppingCart(updateShoppingCartCommand, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     *
     * @summary 查詢列表  (*dynamic sort support)
     * @param {QueryShoppingCartRequest} [queryShoppingCartRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async queryShoppingCarts(
      queryShoppingCartRequest?: QueryShoppingCartRequest,
      options?: AxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<ShoppingCartViewPageApiResponse>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.queryShoppingCarts(queryShoppingCartRequest, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     *
     * @summary 刪除主檔
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async removeShoppingCart(
      id: number,
      options?: AxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<Int32ApiResponse>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.removeShoppingCart(id, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
  };
};

/**
 * ShoppingCartApi - factory interface
 * @export
 */
export const ShoppingCartApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance
) {
  const localVarFp = ShoppingCartApiFp(configuration);
  return {
    /**
     *
     * @summary 建立購物車主檔
     * @param {CreateShoppingCartCommand} [createShoppingCartCommand]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createShoppingCart(
      createShoppingCartCommand?: CreateShoppingCartCommand,
      options?: any
    ): Promise<ShoppingCartViewApiResponse> {
      return localVarFp
        .createShoppingCart(createShoppingCartCommand, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary 刪除主檔
     * @param {DeleteShoppingCartCommand} [deleteShoppingCartCommand]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteShoppingCart(
      deleteShoppingCartCommand?: DeleteShoppingCartCommand,
      options?: any
    ): Promise<ShoppingCartViewApiResponse> {
      return localVarFp
        .deleteShoppingCart(deleteShoppingCartCommand, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary 查詢購物車主檔
     * @param {FetchAllShoppingCartRequest} [fetchAllShoppingCartRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    fetchShoppingCarts(
      fetchAllShoppingCartRequest?: FetchAllShoppingCartRequest,
      options?: any
    ): Promise<ShoppingCartViewListApiResponse> {
      return localVarFp
        .fetchShoppingCarts(fetchAllShoppingCartRequest, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary 查詢購物車主檔
     * @param {number} [id] id
     * @param {number} [userId] User.Id
     * @param {number} [courseId] 課程類別Course.Id
     * @param {number} [count] 數量
     * @param {string} [shoppingCartStatus] 出席狀態 對應SystemConfig內Type&#x3D;ShoppingCartStatus 0:新增 1已轉入訂單 2:逾期課程清單(無法轉訂單) 3:數量不足
     * @param {Array<SortProperty>} [sortProperties] 查詢欄位排序
     * @param {number} [page] 目前頁數
     * @param {number} [size] 每頁筆數
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    findShoppingCart(
      id?: number,
      userId?: number,
      courseId?: number,
      count?: number,
      shoppingCartStatus?: string,
      sortProperties?: Array<SortProperty>,
      page?: number,
      size?: number,
      options?: any
    ): Promise<ShoppingCartViewPageApiResponse> {
      return localVarFp
        .findShoppingCart(id, userId, courseId, count, shoppingCartStatus, sortProperties, page, size, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary 以 Id 查詢列表
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getShoppingCart(id: number, options?: any): Promise<ShoppingCartViewApiResponse> {
      return localVarFp.getShoppingCart(id, options).then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary 修改購物車主檔
     * @param {UpdateShoppingCartCommand} [updateShoppingCartCommand]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    putShoppingCart(
      updateShoppingCartCommand?: UpdateShoppingCartCommand,
      options?: any
    ): Promise<ShoppingCartViewApiResponse> {
      return localVarFp.putShoppingCart(updateShoppingCartCommand, options).then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary 查詢列表  (*dynamic sort support)
     * @param {QueryShoppingCartRequest} [queryShoppingCartRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    queryShoppingCarts(
      queryShoppingCartRequest?: QueryShoppingCartRequest,
      options?: any
    ): Promise<ShoppingCartViewPageApiResponse> {
      return localVarFp
        .queryShoppingCarts(queryShoppingCartRequest, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary 刪除主檔
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    removeShoppingCart(id: number, options?: any): Promise<Int32ApiResponse> {
      return localVarFp.removeShoppingCart(id, options).then((request) => request(axios, basePath));
    },
  };
};

/**
 * ShoppingCartApi - interface
 * @export
 * @interface ShoppingCartApi
 */
export interface ShoppingCartApiInterface {
  /**
   *
   * @summary 建立購物車主檔
   * @param {CreateShoppingCartCommand} [createShoppingCartCommand]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ShoppingCartApiInterface
   */
  createShoppingCart(
    createShoppingCartCommand?: CreateShoppingCartCommand,
    options?: AxiosRequestConfig
  ): Promise<ShoppingCartViewApiResponse>;

  /**
   *
   * @summary 刪除主檔
   * @param {DeleteShoppingCartCommand} [deleteShoppingCartCommand]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ShoppingCartApiInterface
   */
  deleteShoppingCart(
    deleteShoppingCartCommand?: DeleteShoppingCartCommand,
    options?: AxiosRequestConfig
  ): Promise<ShoppingCartViewApiResponse>;

  /**
   *
   * @summary 查詢購物車主檔
   * @param {FetchAllShoppingCartRequest} [fetchAllShoppingCartRequest]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ShoppingCartApiInterface
   */
  fetchShoppingCarts(
    fetchAllShoppingCartRequest?: FetchAllShoppingCartRequest,
    options?: AxiosRequestConfig
  ): Promise<ShoppingCartViewListApiResponse>;

  /**
   *
   * @summary 查詢購物車主檔
   * @param {number} [id] id
   * @param {number} [userId] User.Id
   * @param {number} [courseId] 課程類別Course.Id
   * @param {number} [count] 數量
   * @param {string} [shoppingCartStatus] 出席狀態 對應SystemConfig內Type&#x3D;ShoppingCartStatus 0:新增 1已轉入訂單 2:逾期課程清單(無法轉訂單) 3:數量不足
   * @param {Array<SortProperty>} [sortProperties] 查詢欄位排序
   * @param {number} [page] 目前頁數
   * @param {number} [size] 每頁筆數
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ShoppingCartApiInterface
   */
  findShoppingCart(
    id?: number,
    userId?: number,
    courseId?: number,
    count?: number,
    shoppingCartStatus?: string,
    sortProperties?: Array<SortProperty>,
    page?: number,
    size?: number,
    options?: AxiosRequestConfig
  ): Promise<ShoppingCartViewPageApiResponse>;

  /**
   *
   * @summary 以 Id 查詢列表
   * @param {number} id
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ShoppingCartApiInterface
   */
  getShoppingCart(id: number, options?: AxiosRequestConfig): Promise<ShoppingCartViewApiResponse>;

  /**
   *
   * @summary 修改購物車主檔
   * @param {UpdateShoppingCartCommand} [updateShoppingCartCommand]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ShoppingCartApiInterface
   */
  putShoppingCart(
    updateShoppingCartCommand?: UpdateShoppingCartCommand,
    options?: AxiosRequestConfig
  ): Promise<ShoppingCartViewApiResponse>;

  /**
   *
   * @summary 查詢列表  (*dynamic sort support)
   * @param {QueryShoppingCartRequest} [queryShoppingCartRequest]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ShoppingCartApiInterface
   */
  queryShoppingCarts(
    queryShoppingCartRequest?: QueryShoppingCartRequest,
    options?: AxiosRequestConfig
  ): Promise<ShoppingCartViewPageApiResponse>;

  /**
   *
   * @summary 刪除主檔
   * @param {number} id
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ShoppingCartApiInterface
   */
  removeShoppingCart(id: number, options?: AxiosRequestConfig): Promise<Int32ApiResponse>;
}

/**
 * ShoppingCartApi - object-oriented interface
 * @export
 * @class ShoppingCartApi
 * @extends {BaseAPI}
 */
export class ShoppingCartApi extends BaseAPI implements ShoppingCartApiInterface {
  /**
   *
   * @summary 建立購物車主檔
   * @param {CreateShoppingCartCommand} [createShoppingCartCommand]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ShoppingCartApi
   */
  public createShoppingCart(createShoppingCartCommand?: CreateShoppingCartCommand, options?: AxiosRequestConfig) {
    return ShoppingCartApiFp(this.configuration)
      .createShoppingCart(createShoppingCartCommand, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary 刪除主檔
   * @param {DeleteShoppingCartCommand} [deleteShoppingCartCommand]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ShoppingCartApi
   */
  public deleteShoppingCart(deleteShoppingCartCommand?: DeleteShoppingCartCommand, options?: AxiosRequestConfig) {
    return ShoppingCartApiFp(this.configuration)
      .deleteShoppingCart(deleteShoppingCartCommand, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary 查詢購物車主檔
   * @param {FetchAllShoppingCartRequest} [fetchAllShoppingCartRequest]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ShoppingCartApi
   */
  public fetchShoppingCarts(fetchAllShoppingCartRequest?: FetchAllShoppingCartRequest, options?: AxiosRequestConfig) {
    return ShoppingCartApiFp(this.configuration)
      .fetchShoppingCarts(fetchAllShoppingCartRequest, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary 查詢購物車主檔
   * @param {number} [id] id
   * @param {number} [userId] User.Id
   * @param {number} [courseId] 課程類別Course.Id
   * @param {number} [count] 數量
   * @param {string} [shoppingCartStatus] 出席狀態 對應SystemConfig內Type&#x3D;ShoppingCartStatus 0:新增 1已轉入訂單 2:逾期課程清單(無法轉訂單) 3:數量不足
   * @param {Array<SortProperty>} [sortProperties] 查詢欄位排序
   * @param {number} [page] 目前頁數
   * @param {number} [size] 每頁筆數
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ShoppingCartApi
   */
  public findShoppingCart(
    id?: number,
    userId?: number,
    courseId?: number,
    count?: number,
    shoppingCartStatus?: string,
    sortProperties?: Array<SortProperty>,
    page?: number,
    size?: number,
    options?: AxiosRequestConfig
  ) {
    return ShoppingCartApiFp(this.configuration)
      .findShoppingCart(id, userId, courseId, count, shoppingCartStatus, sortProperties, page, size, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary 以 Id 查詢列表
   * @param {number} id
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ShoppingCartApi
   */
  public getShoppingCart(id: number, options?: AxiosRequestConfig) {
    return ShoppingCartApiFp(this.configuration)
      .getShoppingCart(id, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary 修改購物車主檔
   * @param {UpdateShoppingCartCommand} [updateShoppingCartCommand]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ShoppingCartApi
   */
  public putShoppingCart(updateShoppingCartCommand?: UpdateShoppingCartCommand, options?: AxiosRequestConfig) {
    return ShoppingCartApiFp(this.configuration)
      .putShoppingCart(updateShoppingCartCommand, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary 查詢列表  (*dynamic sort support)
   * @param {QueryShoppingCartRequest} [queryShoppingCartRequest]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ShoppingCartApi
   */
  public queryShoppingCarts(queryShoppingCartRequest?: QueryShoppingCartRequest, options?: AxiosRequestConfig) {
    return ShoppingCartApiFp(this.configuration)
      .queryShoppingCarts(queryShoppingCartRequest, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary 刪除主檔
   * @param {number} id
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ShoppingCartApi
   */
  public removeShoppingCart(id: number, options?: AxiosRequestConfig) {
    return ShoppingCartApiFp(this.configuration)
      .removeShoppingCart(id, options)
      .then((request) => request(this.axios, this.basePath));
  }
}

/**
 * ShoppingOrderApi - axios parameter creator
 * @export
 */
export const ShoppingOrderApiAxiosParamCreator = function (configuration?: Configuration) {
  return {
    /**
     *
     * @summary 建立訂單主檔
     * @param {CreateShoppingOrderCommand} [createShoppingOrderCommand]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createShoppingOrder: async (
      createShoppingOrderCommand?: CreateShoppingOrderCommand,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/shoppingOrder`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: "POST", ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication Example-id-1 required
      await setApiKeyToObject(localVarHeaderParameter, "Example-id-1", configuration);

      // authentication JWT_Authorization required
      await setApiKeyToObject(localVarHeaderParameter, "authorization", configuration);

      // authentication example-id-2 required
      await setApiKeyToObject(localVarHeaderParameter, "example-id-2", configuration);

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      localVarRequestOptions.data = serializeDataIfNeeded(
        createShoppingOrderCommand,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary 刪除訂單主檔
     * @param {DeleteShoppingOrderCommand} [deleteShoppingOrderCommand]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteShoppingOrder: async (
      deleteShoppingOrderCommand?: DeleteShoppingOrderCommand,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/shoppingOrder`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: "DELETE", ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication Example-id-1 required
      await setApiKeyToObject(localVarHeaderParameter, "Example-id-1", configuration);

      // authentication JWT_Authorization required
      await setApiKeyToObject(localVarHeaderParameter, "authorization", configuration);

      // authentication example-id-2 required
      await setApiKeyToObject(localVarHeaderParameter, "example-id-2", configuration);

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      localVarRequestOptions.data = serializeDataIfNeeded(
        deleteShoppingOrderCommand,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary 查詢
     * @param {FetchAllShoppingOrderRequest} [fetchAllShoppingOrderRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    fetchShoppingOrders: async (
      fetchAllShoppingOrderRequest?: FetchAllShoppingOrderRequest,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/shoppingOrder/fetch`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: "POST", ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication Example-id-1 required
      await setApiKeyToObject(localVarHeaderParameter, "Example-id-1", configuration);

      // authentication JWT_Authorization required
      await setApiKeyToObject(localVarHeaderParameter, "authorization", configuration);

      // authentication example-id-2 required
      await setApiKeyToObject(localVarHeaderParameter, "example-id-2", configuration);

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      localVarRequestOptions.data = serializeDataIfNeeded(
        fetchAllShoppingOrderRequest,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary 查詢訂單主檔
     * @param {number} [id] 訂單主檔Id
     * @param {number} [userId] User.Id
     * @param {number} [totalAmount] 訂單總金額
     * @param {number} [paymentAmount] 付款總金額
     * @param {number} [refundAmount] 退款總金額
     * @param {string} [orderPayStatus] 出席狀態 對應SystemConfig內Type&#x3D;OrderStatus 0:尚未付款 1已付款 2:款項確認 3:異常
     * @param {string} [paymentTransactionNo] 付款交易序號
     * @param {string} [paymentTransactionDate] 付款交易時間
     * @param {string} [paymentTransactionDescription] 付款備註
     * @param {string} [paymentType] 付款方式 對應SystemConfig內Type&#x3D;PaymentType 0:臨櫃現金 1:ATM 2:刷卡 3:其他
     * @param {string} [refundTransactionNo] 退款交易序號
     * @param {string} [refundTransactionDate] 退款交易時間
     * @param {string} [refundType] 退款方式 對應SystemConfig內Type&#x3D;PaymentType 0:臨櫃現金 1:ATM 2:刷退 3:其他
     * @param {string} [refundDescription] 退款備註
     * @param {string} [orderStatus] 出席狀態 對應SystemConfig內Type&#x3D;OrderStatus 0:訂單成立(待付款)1:訂單對帳2:訂單已確認3:訂單已結案4:訂單取消申請5:訂單取消審核中6:訂單取消已確認7:訂單取消已駁回8:訂單取消退款中9:訂單取消已退款
     * @param {string} [receipt] 電子收據
     * @param {number} [actuallyAmount] 實收金額
     * @param {number} [receiveUserId] 收款人員 對應user.Id
     * @param {number} [organizationId]
     * @param {string} [userName]
     * @param {string} [phone]
     * @param {string} [eMail]
     * @param {Array<SortProperty>} [sortProperties] 查詢欄位排序
     * @param {number} [page] 目前頁數
     * @param {number} [size] 每頁筆數
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    findShoppingOrder: async (
      id?: number,
      userId?: number,
      totalAmount?: number,
      paymentAmount?: number,
      refundAmount?: number,
      orderPayStatus?: string,
      paymentTransactionNo?: string,
      paymentTransactionDate?: string,
      paymentTransactionDescription?: string,
      paymentType?: string,
      refundTransactionNo?: string,
      refundTransactionDate?: string,
      refundType?: string,
      refundDescription?: string,
      orderStatus?: string,
      receipt?: string,
      actuallyAmount?: number,
      receiveUserId?: number,
      organizationId?: number,
      userName?: string,
      phone?: string,
      eMail?: string,
      sortProperties?: Array<SortProperty>,
      page?: number,
      size?: number,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/shoppingOrder`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: "GET", ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication Example-id-1 required
      await setApiKeyToObject(localVarHeaderParameter, "Example-id-1", configuration);

      // authentication JWT_Authorization required
      await setApiKeyToObject(localVarHeaderParameter, "authorization", configuration);

      // authentication example-id-2 required
      await setApiKeyToObject(localVarHeaderParameter, "example-id-2", configuration);

      if (id !== undefined) {
        localVarQueryParameter["id"] = id;
      }

      if (userId !== undefined) {
        localVarQueryParameter["userId"] = userId;
      }

      if (totalAmount !== undefined) {
        localVarQueryParameter["totalAmount"] = totalAmount;
      }

      if (paymentAmount !== undefined) {
        localVarQueryParameter["paymentAmount"] = paymentAmount;
      }

      if (refundAmount !== undefined) {
        localVarQueryParameter["refundAmount"] = refundAmount;
      }

      if (orderPayStatus !== undefined) {
        localVarQueryParameter["orderPayStatus"] = orderPayStatus;
      }

      if (paymentTransactionNo !== undefined) {
        localVarQueryParameter["paymentTransactionNo"] = paymentTransactionNo;
      }

      if (paymentTransactionDate !== undefined) {
        localVarQueryParameter["paymentTransactionDate"] =
          (paymentTransactionDate as any) instanceof Date
            ? (paymentTransactionDate as any).toISOString()
            : paymentTransactionDate;
      }

      if (paymentTransactionDescription !== undefined) {
        localVarQueryParameter["paymentTransactionDescription"] = paymentTransactionDescription;
      }

      if (paymentType !== undefined) {
        localVarQueryParameter["paymentType"] = paymentType;
      }

      if (refundTransactionNo !== undefined) {
        localVarQueryParameter["refundTransactionNo"] = refundTransactionNo;
      }

      if (refundTransactionDate !== undefined) {
        localVarQueryParameter["refundTransactionDate"] =
          (refundTransactionDate as any) instanceof Date
            ? (refundTransactionDate as any).toISOString()
            : refundTransactionDate;
      }

      if (refundType !== undefined) {
        localVarQueryParameter["refundType"] = refundType;
      }

      if (refundDescription !== undefined) {
        localVarQueryParameter["refundDescription"] = refundDescription;
      }

      if (orderStatus !== undefined) {
        localVarQueryParameter["orderStatus"] = orderStatus;
      }

      if (receipt !== undefined) {
        localVarQueryParameter["receipt"] = receipt;
      }

      if (actuallyAmount !== undefined) {
        localVarQueryParameter["actuallyAmount"] = actuallyAmount;
      }

      if (receiveUserId !== undefined) {
        localVarQueryParameter["receiveUserId"] = receiveUserId;
      }

      if (organizationId !== undefined) {
        localVarQueryParameter["organizationId"] = organizationId;
      }

      if (userName !== undefined) {
        localVarQueryParameter["userName"] = userName;
      }

      if (phone !== undefined) {
        localVarQueryParameter["phone"] = phone;
      }

      if (eMail !== undefined) {
        localVarQueryParameter["eMail"] = eMail;
      }

      if (sortProperties) {
        localVarQueryParameter["sortProperties"] = sortProperties;
      }

      if (page !== undefined) {
        localVarQueryParameter["page"] = page;
      }

      if (size !== undefined) {
        localVarQueryParameter["size"] = size;
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary 以 Id 查詢列表
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getShoppingOrder: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists("getShoppingOrder", "id", id);
      const localVarPath = `/api/shoppingOrder/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(id)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: "GET", ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication Example-id-1 required
      await setApiKeyToObject(localVarHeaderParameter, "Example-id-1", configuration);

      // authentication JWT_Authorization required
      await setApiKeyToObject(localVarHeaderParameter, "authorization", configuration);

      // authentication example-id-2 required
      await setApiKeyToObject(localVarHeaderParameter, "example-id-2", configuration);

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary 修改訂單主檔
     * @param {UpdateShoppingOrderCommand} [updateShoppingOrderCommand]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    putShoppingOrder: async (
      updateShoppingOrderCommand?: UpdateShoppingOrderCommand,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/shoppingOrder`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: "PUT", ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication Example-id-1 required
      await setApiKeyToObject(localVarHeaderParameter, "Example-id-1", configuration);

      // authentication JWT_Authorization required
      await setApiKeyToObject(localVarHeaderParameter, "authorization", configuration);

      // authentication example-id-2 required
      await setApiKeyToObject(localVarHeaderParameter, "example-id-2", configuration);

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      localVarRequestOptions.data = serializeDataIfNeeded(
        updateShoppingOrderCommand,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary 查詢列表  (*dynamic sort support)
     * @param {QueryShoppingOrderRequest} [queryShoppingOrderRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    queryShoppingOrders: async (
      queryShoppingOrderRequest?: QueryShoppingOrderRequest,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/shoppingOrder/query`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: "POST", ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication Example-id-1 required
      await setApiKeyToObject(localVarHeaderParameter, "Example-id-1", configuration);

      // authentication JWT_Authorization required
      await setApiKeyToObject(localVarHeaderParameter, "authorization", configuration);

      // authentication example-id-2 required
      await setApiKeyToObject(localVarHeaderParameter, "example-id-2", configuration);

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      localVarRequestOptions.data = serializeDataIfNeeded(
        queryShoppingOrderRequest,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary 刪除主檔
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    removeShoppingOrder: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists("removeShoppingOrder", "id", id);
      const localVarPath = `/api/shoppingOrder/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(id)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: "DELETE", ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication Example-id-1 required
      await setApiKeyToObject(localVarHeaderParameter, "Example-id-1", configuration);

      // authentication JWT_Authorization required
      await setApiKeyToObject(localVarHeaderParameter, "authorization", configuration);

      // authentication example-id-2 required
      await setApiKeyToObject(localVarHeaderParameter, "example-id-2", configuration);

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * ShoppingOrderApi - functional programming interface
 * @export
 */
export const ShoppingOrderApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = ShoppingOrderApiAxiosParamCreator(configuration);
  return {
    /**
     *
     * @summary 建立訂單主檔
     * @param {CreateShoppingOrderCommand} [createShoppingOrderCommand]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async createShoppingOrder(
      createShoppingOrderCommand?: CreateShoppingOrderCommand,
      options?: AxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<ShoppingOrderViewApiResponse>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.createShoppingOrder(
        createShoppingOrderCommand,
        options
      );
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     *
     * @summary 刪除訂單主檔
     * @param {DeleteShoppingOrderCommand} [deleteShoppingOrderCommand]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async deleteShoppingOrder(
      deleteShoppingOrderCommand?: DeleteShoppingOrderCommand,
      options?: AxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<ShoppingOrderViewApiResponse>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.deleteShoppingOrder(
        deleteShoppingOrderCommand,
        options
      );
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     *
     * @summary 查詢
     * @param {FetchAllShoppingOrderRequest} [fetchAllShoppingOrderRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async fetchShoppingOrders(
      fetchAllShoppingOrderRequest?: FetchAllShoppingOrderRequest,
      options?: AxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<ShoppingOrderViewListApiResponse>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.fetchShoppingOrders(
        fetchAllShoppingOrderRequest,
        options
      );
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     *
     * @summary 查詢訂單主檔
     * @param {number} [id] 訂單主檔Id
     * @param {number} [userId] User.Id
     * @param {number} [totalAmount] 訂單總金額
     * @param {number} [paymentAmount] 付款總金額
     * @param {number} [refundAmount] 退款總金額
     * @param {string} [orderPayStatus] 出席狀態 對應SystemConfig內Type&#x3D;OrderStatus 0:尚未付款 1已付款 2:款項確認 3:異常
     * @param {string} [paymentTransactionNo] 付款交易序號
     * @param {string} [paymentTransactionDate] 付款交易時間
     * @param {string} [paymentTransactionDescription] 付款備註
     * @param {string} [paymentType] 付款方式 對應SystemConfig內Type&#x3D;PaymentType 0:臨櫃現金 1:ATM 2:刷卡 3:其他
     * @param {string} [refundTransactionNo] 退款交易序號
     * @param {string} [refundTransactionDate] 退款交易時間
     * @param {string} [refundType] 退款方式 對應SystemConfig內Type&#x3D;PaymentType 0:臨櫃現金 1:ATM 2:刷退 3:其他
     * @param {string} [refundDescription] 退款備註
     * @param {string} [orderStatus] 出席狀態 對應SystemConfig內Type&#x3D;OrderStatus 0:訂單成立(待付款)1:訂單對帳2:訂單已確認3:訂單已結案4:訂單取消申請5:訂單取消審核中6:訂單取消已確認7:訂單取消已駁回8:訂單取消退款中9:訂單取消已退款
     * @param {string} [receipt] 電子收據
     * @param {number} [actuallyAmount] 實收金額
     * @param {number} [receiveUserId] 收款人員 對應user.Id
     * @param {number} [organizationId]
     * @param {string} [userName]
     * @param {string} [phone]
     * @param {string} [eMail]
     * @param {Array<SortProperty>} [sortProperties] 查詢欄位排序
     * @param {number} [page] 目前頁數
     * @param {number} [size] 每頁筆數
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async findShoppingOrder(
      id?: number,
      userId?: number,
      totalAmount?: number,
      paymentAmount?: number,
      refundAmount?: number,
      orderPayStatus?: string,
      paymentTransactionNo?: string,
      paymentTransactionDate?: string,
      paymentTransactionDescription?: string,
      paymentType?: string,
      refundTransactionNo?: string,
      refundTransactionDate?: string,
      refundType?: string,
      refundDescription?: string,
      orderStatus?: string,
      receipt?: string,
      actuallyAmount?: number,
      receiveUserId?: number,
      organizationId?: number,
      userName?: string,
      phone?: string,
      eMail?: string,
      sortProperties?: Array<SortProperty>,
      page?: number,
      size?: number,
      options?: AxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<ShoppingOrderViewPageApiResponse>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.findShoppingOrder(
        id,
        userId,
        totalAmount,
        paymentAmount,
        refundAmount,
        orderPayStatus,
        paymentTransactionNo,
        paymentTransactionDate,
        paymentTransactionDescription,
        paymentType,
        refundTransactionNo,
        refundTransactionDate,
        refundType,
        refundDescription,
        orderStatus,
        receipt,
        actuallyAmount,
        receiveUserId,
        organizationId,
        userName,
        phone,
        eMail,
        sortProperties,
        page,
        size,
        options
      );
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     *
     * @summary 以 Id 查詢列表
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getShoppingOrder(
      id: number,
      options?: AxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<ShoppingOrderViewApiResponse>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getShoppingOrder(id, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     *
     * @summary 修改訂單主檔
     * @param {UpdateShoppingOrderCommand} [updateShoppingOrderCommand]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async putShoppingOrder(
      updateShoppingOrderCommand?: UpdateShoppingOrderCommand,
      options?: AxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<ShoppingOrderViewApiResponse>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.putShoppingOrder(updateShoppingOrderCommand, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     *
     * @summary 查詢列表  (*dynamic sort support)
     * @param {QueryShoppingOrderRequest} [queryShoppingOrderRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async queryShoppingOrders(
      queryShoppingOrderRequest?: QueryShoppingOrderRequest,
      options?: AxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<ShoppingOrderViewPageApiResponse>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.queryShoppingOrders(queryShoppingOrderRequest, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     *
     * @summary 刪除主檔
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async removeShoppingOrder(
      id: number,
      options?: AxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<Int32ApiResponse>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.removeShoppingOrder(id, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
  };
};

/**
 * ShoppingOrderApi - factory interface
 * @export
 */
export const ShoppingOrderApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance
) {
  const localVarFp = ShoppingOrderApiFp(configuration);
  return {
    /**
     *
     * @summary 建立訂單主檔
     * @param {CreateShoppingOrderCommand} [createShoppingOrderCommand]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createShoppingOrder(
      createShoppingOrderCommand?: CreateShoppingOrderCommand,
      options?: any
    ): Promise<ShoppingOrderViewApiResponse> {
      return localVarFp
        .createShoppingOrder(createShoppingOrderCommand, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary 刪除訂單主檔
     * @param {DeleteShoppingOrderCommand} [deleteShoppingOrderCommand]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteShoppingOrder(
      deleteShoppingOrderCommand?: DeleteShoppingOrderCommand,
      options?: any
    ): Promise<ShoppingOrderViewApiResponse> {
      return localVarFp
        .deleteShoppingOrder(deleteShoppingOrderCommand, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary 查詢
     * @param {FetchAllShoppingOrderRequest} [fetchAllShoppingOrderRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    fetchShoppingOrders(
      fetchAllShoppingOrderRequest?: FetchAllShoppingOrderRequest,
      options?: any
    ): Promise<ShoppingOrderViewListApiResponse> {
      return localVarFp
        .fetchShoppingOrders(fetchAllShoppingOrderRequest, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary 查詢訂單主檔
     * @param {number} [id] 訂單主檔Id
     * @param {number} [userId] User.Id
     * @param {number} [totalAmount] 訂單總金額
     * @param {number} [paymentAmount] 付款總金額
     * @param {number} [refundAmount] 退款總金額
     * @param {string} [orderPayStatus] 出席狀態 對應SystemConfig內Type&#x3D;OrderStatus 0:尚未付款 1已付款 2:款項確認 3:異常
     * @param {string} [paymentTransactionNo] 付款交易序號
     * @param {string} [paymentTransactionDate] 付款交易時間
     * @param {string} [paymentTransactionDescription] 付款備註
     * @param {string} [paymentType] 付款方式 對應SystemConfig內Type&#x3D;PaymentType 0:臨櫃現金 1:ATM 2:刷卡 3:其他
     * @param {string} [refundTransactionNo] 退款交易序號
     * @param {string} [refundTransactionDate] 退款交易時間
     * @param {string} [refundType] 退款方式 對應SystemConfig內Type&#x3D;PaymentType 0:臨櫃現金 1:ATM 2:刷退 3:其他
     * @param {string} [refundDescription] 退款備註
     * @param {string} [orderStatus] 出席狀態 對應SystemConfig內Type&#x3D;OrderStatus 0:訂單成立(待付款)1:訂單對帳2:訂單已確認3:訂單已結案4:訂單取消申請5:訂單取消審核中6:訂單取消已確認7:訂單取消已駁回8:訂單取消退款中9:訂單取消已退款
     * @param {string} [receipt] 電子收據
     * @param {number} [actuallyAmount] 實收金額
     * @param {number} [receiveUserId] 收款人員 對應user.Id
     * @param {number} [organizationId]
     * @param {string} [userName]
     * @param {string} [phone]
     * @param {string} [eMail]
     * @param {Array<SortProperty>} [sortProperties] 查詢欄位排序
     * @param {number} [page] 目前頁數
     * @param {number} [size] 每頁筆數
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    findShoppingOrder(
      id?: number,
      userId?: number,
      totalAmount?: number,
      paymentAmount?: number,
      refundAmount?: number,
      orderPayStatus?: string,
      paymentTransactionNo?: string,
      paymentTransactionDate?: string,
      paymentTransactionDescription?: string,
      paymentType?: string,
      refundTransactionNo?: string,
      refundTransactionDate?: string,
      refundType?: string,
      refundDescription?: string,
      orderStatus?: string,
      receipt?: string,
      actuallyAmount?: number,
      receiveUserId?: number,
      organizationId?: number,
      userName?: string,
      phone?: string,
      eMail?: string,
      sortProperties?: Array<SortProperty>,
      page?: number,
      size?: number,
      options?: any
    ): Promise<ShoppingOrderViewPageApiResponse> {
      return localVarFp
        .findShoppingOrder(
          id,
          userId,
          totalAmount,
          paymentAmount,
          refundAmount,
          orderPayStatus,
          paymentTransactionNo,
          paymentTransactionDate,
          paymentTransactionDescription,
          paymentType,
          refundTransactionNo,
          refundTransactionDate,
          refundType,
          refundDescription,
          orderStatus,
          receipt,
          actuallyAmount,
          receiveUserId,
          organizationId,
          userName,
          phone,
          eMail,
          sortProperties,
          page,
          size,
          options
        )
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary 以 Id 查詢列表
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getShoppingOrder(id: number, options?: any): Promise<ShoppingOrderViewApiResponse> {
      return localVarFp.getShoppingOrder(id, options).then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary 修改訂單主檔
     * @param {UpdateShoppingOrderCommand} [updateShoppingOrderCommand]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    putShoppingOrder(
      updateShoppingOrderCommand?: UpdateShoppingOrderCommand,
      options?: any
    ): Promise<ShoppingOrderViewApiResponse> {
      return localVarFp
        .putShoppingOrder(updateShoppingOrderCommand, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary 查詢列表  (*dynamic sort support)
     * @param {QueryShoppingOrderRequest} [queryShoppingOrderRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    queryShoppingOrders(
      queryShoppingOrderRequest?: QueryShoppingOrderRequest,
      options?: any
    ): Promise<ShoppingOrderViewPageApiResponse> {
      return localVarFp
        .queryShoppingOrders(queryShoppingOrderRequest, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary 刪除主檔
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    removeShoppingOrder(id: number, options?: any): Promise<Int32ApiResponse> {
      return localVarFp.removeShoppingOrder(id, options).then((request) => request(axios, basePath));
    },
  };
};

/**
 * ShoppingOrderApi - interface
 * @export
 * @interface ShoppingOrderApi
 */
export interface ShoppingOrderApiInterface {
  /**
   *
   * @summary 建立訂單主檔
   * @param {CreateShoppingOrderCommand} [createShoppingOrderCommand]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ShoppingOrderApiInterface
   */
  createShoppingOrder(
    createShoppingOrderCommand?: CreateShoppingOrderCommand,
    options?: AxiosRequestConfig
  ): Promise<ShoppingOrderViewApiResponse>;

  /**
   *
   * @summary 刪除訂單主檔
   * @param {DeleteShoppingOrderCommand} [deleteShoppingOrderCommand]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ShoppingOrderApiInterface
   */
  deleteShoppingOrder(
    deleteShoppingOrderCommand?: DeleteShoppingOrderCommand,
    options?: AxiosRequestConfig
  ): Promise<ShoppingOrderViewApiResponse>;

  /**
   *
   * @summary 查詢
   * @param {FetchAllShoppingOrderRequest} [fetchAllShoppingOrderRequest]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ShoppingOrderApiInterface
   */
  fetchShoppingOrders(
    fetchAllShoppingOrderRequest?: FetchAllShoppingOrderRequest,
    options?: AxiosRequestConfig
  ): Promise<ShoppingOrderViewListApiResponse>;

  /**
   *
   * @summary 查詢訂單主檔
   * @param {number} [id] 訂單主檔Id
   * @param {number} [userId] User.Id
   * @param {number} [totalAmount] 訂單總金額
   * @param {number} [paymentAmount] 付款總金額
   * @param {number} [refundAmount] 退款總金額
   * @param {string} [orderPayStatus] 出席狀態 對應SystemConfig內Type&#x3D;OrderStatus 0:尚未付款 1已付款 2:款項確認 3:異常
   * @param {string} [paymentTransactionNo] 付款交易序號
   * @param {string} [paymentTransactionDate] 付款交易時間
   * @param {string} [paymentTransactionDescription] 付款備註
   * @param {string} [paymentType] 付款方式 對應SystemConfig內Type&#x3D;PaymentType 0:臨櫃現金 1:ATM 2:刷卡 3:其他
   * @param {string} [refundTransactionNo] 退款交易序號
   * @param {string} [refundTransactionDate] 退款交易時間
   * @param {string} [refundType] 退款方式 對應SystemConfig內Type&#x3D;PaymentType 0:臨櫃現金 1:ATM 2:刷退 3:其他
   * @param {string} [refundDescription] 退款備註
   * @param {string} [orderStatus] 出席狀態 對應SystemConfig內Type&#x3D;OrderStatus 0:訂單成立(待付款)1:訂單對帳2:訂單已確認3:訂單已結案4:訂單取消申請5:訂單取消審核中6:訂單取消已確認7:訂單取消已駁回8:訂單取消退款中9:訂單取消已退款
   * @param {string} [receipt] 電子收據
   * @param {number} [actuallyAmount] 實收金額
   * @param {number} [receiveUserId] 收款人員 對應user.Id
   * @param {number} [organizationId]
   * @param {string} [userName]
   * @param {string} [phone]
   * @param {string} [eMail]
   * @param {Array<SortProperty>} [sortProperties] 查詢欄位排序
   * @param {number} [page] 目前頁數
   * @param {number} [size] 每頁筆數
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ShoppingOrderApiInterface
   */
  findShoppingOrder(
    id?: number,
    userId?: number,
    totalAmount?: number,
    paymentAmount?: number,
    refundAmount?: number,
    orderPayStatus?: string,
    paymentTransactionNo?: string,
    paymentTransactionDate?: string,
    paymentTransactionDescription?: string,
    paymentType?: string,
    refundTransactionNo?: string,
    refundTransactionDate?: string,
    refundType?: string,
    refundDescription?: string,
    orderStatus?: string,
    receipt?: string,
    actuallyAmount?: number,
    receiveUserId?: number,
    organizationId?: number,
    userName?: string,
    phone?: string,
    eMail?: string,
    sortProperties?: Array<SortProperty>,
    page?: number,
    size?: number,
    options?: AxiosRequestConfig
  ): Promise<ShoppingOrderViewPageApiResponse>;

  /**
   *
   * @summary 以 Id 查詢列表
   * @param {number} id
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ShoppingOrderApiInterface
   */
  getShoppingOrder(id: number, options?: AxiosRequestConfig): Promise<ShoppingOrderViewApiResponse>;

  /**
   *
   * @summary 修改訂單主檔
   * @param {UpdateShoppingOrderCommand} [updateShoppingOrderCommand]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ShoppingOrderApiInterface
   */
  putShoppingOrder(
    updateShoppingOrderCommand?: UpdateShoppingOrderCommand,
    options?: AxiosRequestConfig
  ): Promise<ShoppingOrderViewApiResponse>;

  /**
   *
   * @summary 查詢列表  (*dynamic sort support)
   * @param {QueryShoppingOrderRequest} [queryShoppingOrderRequest]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ShoppingOrderApiInterface
   */
  queryShoppingOrders(
    queryShoppingOrderRequest?: QueryShoppingOrderRequest,
    options?: AxiosRequestConfig
  ): Promise<ShoppingOrderViewPageApiResponse>;

  /**
   *
   * @summary 刪除主檔
   * @param {number} id
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ShoppingOrderApiInterface
   */
  removeShoppingOrder(id: number, options?: AxiosRequestConfig): Promise<Int32ApiResponse>;
}

/**
 * ShoppingOrderApi - object-oriented interface
 * @export
 * @class ShoppingOrderApi
 * @extends {BaseAPI}
 */
export class ShoppingOrderApi extends BaseAPI implements ShoppingOrderApiInterface {
  /**
   *
   * @summary 建立訂單主檔
   * @param {CreateShoppingOrderCommand} [createShoppingOrderCommand]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ShoppingOrderApi
   */
  public createShoppingOrder(createShoppingOrderCommand?: CreateShoppingOrderCommand, options?: AxiosRequestConfig) {
    return ShoppingOrderApiFp(this.configuration)
      .createShoppingOrder(createShoppingOrderCommand, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary 刪除訂單主檔
   * @param {DeleteShoppingOrderCommand} [deleteShoppingOrderCommand]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ShoppingOrderApi
   */
  public deleteShoppingOrder(deleteShoppingOrderCommand?: DeleteShoppingOrderCommand, options?: AxiosRequestConfig) {
    return ShoppingOrderApiFp(this.configuration)
      .deleteShoppingOrder(deleteShoppingOrderCommand, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary 查詢
   * @param {FetchAllShoppingOrderRequest} [fetchAllShoppingOrderRequest]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ShoppingOrderApi
   */
  public fetchShoppingOrders(
    fetchAllShoppingOrderRequest?: FetchAllShoppingOrderRequest,
    options?: AxiosRequestConfig
  ) {
    return ShoppingOrderApiFp(this.configuration)
      .fetchShoppingOrders(fetchAllShoppingOrderRequest, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary 查詢訂單主檔
   * @param {number} [id] 訂單主檔Id
   * @param {number} [userId] User.Id
   * @param {number} [totalAmount] 訂單總金額
   * @param {number} [paymentAmount] 付款總金額
   * @param {number} [refundAmount] 退款總金額
   * @param {string} [orderPayStatus] 出席狀態 對應SystemConfig內Type&#x3D;OrderStatus 0:尚未付款 1已付款 2:款項確認 3:異常
   * @param {string} [paymentTransactionNo] 付款交易序號
   * @param {string} [paymentTransactionDate] 付款交易時間
   * @param {string} [paymentTransactionDescription] 付款備註
   * @param {string} [paymentType] 付款方式 對應SystemConfig內Type&#x3D;PaymentType 0:臨櫃現金 1:ATM 2:刷卡 3:其他
   * @param {string} [refundTransactionNo] 退款交易序號
   * @param {string} [refundTransactionDate] 退款交易時間
   * @param {string} [refundType] 退款方式 對應SystemConfig內Type&#x3D;PaymentType 0:臨櫃現金 1:ATM 2:刷退 3:其他
   * @param {string} [refundDescription] 退款備註
   * @param {string} [orderStatus] 出席狀態 對應SystemConfig內Type&#x3D;OrderStatus 0:訂單成立(待付款)1:訂單對帳2:訂單已確認3:訂單已結案4:訂單取消申請5:訂單取消審核中6:訂單取消已確認7:訂單取消已駁回8:訂單取消退款中9:訂單取消已退款
   * @param {string} [receipt] 電子收據
   * @param {number} [actuallyAmount] 實收金額
   * @param {number} [receiveUserId] 收款人員 對應user.Id
   * @param {number} [organizationId]
   * @param {string} [userName]
   * @param {string} [phone]
   * @param {string} [eMail]
   * @param {Array<SortProperty>} [sortProperties] 查詢欄位排序
   * @param {number} [page] 目前頁數
   * @param {number} [size] 每頁筆數
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ShoppingOrderApi
   */
  public findShoppingOrder(
    id?: number,
    userId?: number,
    totalAmount?: number,
    paymentAmount?: number,
    refundAmount?: number,
    orderPayStatus?: string,
    paymentTransactionNo?: string,
    paymentTransactionDate?: string,
    paymentTransactionDescription?: string,
    paymentType?: string,
    refundTransactionNo?: string,
    refundTransactionDate?: string,
    refundType?: string,
    refundDescription?: string,
    orderStatus?: string,
    receipt?: string,
    actuallyAmount?: number,
    receiveUserId?: number,
    organizationId?: number,
    userName?: string,
    phone?: string,
    eMail?: string,
    sortProperties?: Array<SortProperty>,
    page?: number,
    size?: number,
    options?: AxiosRequestConfig
  ) {
    return ShoppingOrderApiFp(this.configuration)
      .findShoppingOrder(
        id,
        userId,
        totalAmount,
        paymentAmount,
        refundAmount,
        orderPayStatus,
        paymentTransactionNo,
        paymentTransactionDate,
        paymentTransactionDescription,
        paymentType,
        refundTransactionNo,
        refundTransactionDate,
        refundType,
        refundDescription,
        orderStatus,
        receipt,
        actuallyAmount,
        receiveUserId,
        organizationId,
        userName,
        phone,
        eMail,
        sortProperties,
        page,
        size,
        options
      )
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary 以 Id 查詢列表
   * @param {number} id
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ShoppingOrderApi
   */
  public getShoppingOrder(id: number, options?: AxiosRequestConfig) {
    return ShoppingOrderApiFp(this.configuration)
      .getShoppingOrder(id, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary 修改訂單主檔
   * @param {UpdateShoppingOrderCommand} [updateShoppingOrderCommand]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ShoppingOrderApi
   */
  public putShoppingOrder(updateShoppingOrderCommand?: UpdateShoppingOrderCommand, options?: AxiosRequestConfig) {
    return ShoppingOrderApiFp(this.configuration)
      .putShoppingOrder(updateShoppingOrderCommand, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary 查詢列表  (*dynamic sort support)
   * @param {QueryShoppingOrderRequest} [queryShoppingOrderRequest]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ShoppingOrderApi
   */
  public queryShoppingOrders(queryShoppingOrderRequest?: QueryShoppingOrderRequest, options?: AxiosRequestConfig) {
    return ShoppingOrderApiFp(this.configuration)
      .queryShoppingOrders(queryShoppingOrderRequest, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary 刪除主檔
   * @param {number} id
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ShoppingOrderApi
   */
  public removeShoppingOrder(id: number, options?: AxiosRequestConfig) {
    return ShoppingOrderApiFp(this.configuration)
      .removeShoppingOrder(id, options)
      .then((request) => request(this.axios, this.basePath));
  }
}

/**
 * ShoppingOrderDetailApi - axios parameter creator
 * @export
 */
export const ShoppingOrderDetailApiAxiosParamCreator = function (configuration?: Configuration) {
  return {
    /**
     *
     * @summary 建立訂單明細主檔
     * @param {CreateShoppingOrderDetailCommand} [createShoppingOrderDetailCommand]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createShoppingOrderDetail: async (
      createShoppingOrderDetailCommand?: CreateShoppingOrderDetailCommand,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/shoppingOrderDetail`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: "POST", ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication Example-id-1 required
      await setApiKeyToObject(localVarHeaderParameter, "Example-id-1", configuration);

      // authentication JWT_Authorization required
      await setApiKeyToObject(localVarHeaderParameter, "authorization", configuration);

      // authentication example-id-2 required
      await setApiKeyToObject(localVarHeaderParameter, "example-id-2", configuration);

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      localVarRequestOptions.data = serializeDataIfNeeded(
        createShoppingOrderDetailCommand,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary 刪除訂單明細主檔
     * @param {DeleteShoppingOrderDetailCommand} [deleteShoppingOrderDetailCommand]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteShoppingOrderDetail: async (
      deleteShoppingOrderDetailCommand?: DeleteShoppingOrderDetailCommand,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/shoppingOrderDetail`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: "DELETE", ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication Example-id-1 required
      await setApiKeyToObject(localVarHeaderParameter, "Example-id-1", configuration);

      // authentication JWT_Authorization required
      await setApiKeyToObject(localVarHeaderParameter, "authorization", configuration);

      // authentication example-id-2 required
      await setApiKeyToObject(localVarHeaderParameter, "example-id-2", configuration);

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      localVarRequestOptions.data = serializeDataIfNeeded(
        deleteShoppingOrderDetailCommand,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary 查詢訂單明細主檔
     * @param {FetchAllShoppingOrderDetailRequest} [fetchAllShoppingOrderDetailRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    fetchShoppingOrderDetails: async (
      fetchAllShoppingOrderDetailRequest?: FetchAllShoppingOrderDetailRequest,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/shoppingOrderDetail/fetch`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: "POST", ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication Example-id-1 required
      await setApiKeyToObject(localVarHeaderParameter, "Example-id-1", configuration);

      // authentication JWT_Authorization required
      await setApiKeyToObject(localVarHeaderParameter, "authorization", configuration);

      // authentication example-id-2 required
      await setApiKeyToObject(localVarHeaderParameter, "example-id-2", configuration);

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      localVarRequestOptions.data = serializeDataIfNeeded(
        fetchAllShoppingOrderDetailRequest,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary 查詢訂單明細主檔
     * @param {number} [id] 訂單明細主檔Id
     * @param {number} [shoppingOrderId] ShoppingOrder.Id
     * @param {number} [courseId] Course.Id 課程Id
     * @param {number} [price] 單價
     * @param {number} [count] 購買數量
     * @param {number} [amount] 總金額
     * @param {string} [orderDetailStatus] 付款方式 對應SystemConfig內Type&#x3D;OrderDetailStatus 0:尚未付款 1:已付款 2:付款完成 3:退款申請 4:退款完成
     * @param {number} [userId] UserId
     * @param {Array<SortProperty>} [sortProperties] 查詢欄位排序
     * @param {number} [page] 目前頁數
     * @param {number} [size] 每頁筆數
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    findShoppingOrderDetail: async (
      id?: number,
      shoppingOrderId?: number,
      courseId?: number,
      price?: number,
      count?: number,
      amount?: number,
      orderDetailStatus?: string,
      userId?: number,
      sortProperties?: Array<SortProperty>,
      page?: number,
      size?: number,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/shoppingOrderDetail`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: "GET", ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication Example-id-1 required
      await setApiKeyToObject(localVarHeaderParameter, "Example-id-1", configuration);

      // authentication JWT_Authorization required
      await setApiKeyToObject(localVarHeaderParameter, "authorization", configuration);

      // authentication example-id-2 required
      await setApiKeyToObject(localVarHeaderParameter, "example-id-2", configuration);

      if (id !== undefined) {
        localVarQueryParameter["id"] = id;
      }

      if (shoppingOrderId !== undefined) {
        localVarQueryParameter["shoppingOrderId"] = shoppingOrderId;
      }

      if (courseId !== undefined) {
        localVarQueryParameter["courseId"] = courseId;
      }

      if (price !== undefined) {
        localVarQueryParameter["price"] = price;
      }

      if (count !== undefined) {
        localVarQueryParameter["count"] = count;
      }

      if (amount !== undefined) {
        localVarQueryParameter["amount"] = amount;
      }

      if (orderDetailStatus !== undefined) {
        localVarQueryParameter["orderDetailStatus"] = orderDetailStatus;
      }

      if (userId !== undefined) {
        localVarQueryParameter["userId"] = userId;
      }

      if (sortProperties) {
        localVarQueryParameter["sortProperties"] = sortProperties;
      }

      if (page !== undefined) {
        localVarQueryParameter["page"] = page;
      }

      if (size !== undefined) {
        localVarQueryParameter["size"] = size;
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary 以 Id 查詢列表
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getShoppingOrderDetail: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists("getShoppingOrderDetail", "id", id);
      const localVarPath = `/api/shoppingOrderDetail/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(id)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: "GET", ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication Example-id-1 required
      await setApiKeyToObject(localVarHeaderParameter, "Example-id-1", configuration);

      // authentication JWT_Authorization required
      await setApiKeyToObject(localVarHeaderParameter, "authorization", configuration);

      // authentication example-id-2 required
      await setApiKeyToObject(localVarHeaderParameter, "example-id-2", configuration);

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary 修改訂單明細主檔
     * @param {UpdateShoppingOrderDetailCommand} [updateShoppingOrderDetailCommand]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    putShoppingOrderDetail: async (
      updateShoppingOrderDetailCommand?: UpdateShoppingOrderDetailCommand,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/shoppingOrderDetail`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: "PUT", ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication Example-id-1 required
      await setApiKeyToObject(localVarHeaderParameter, "Example-id-1", configuration);

      // authentication JWT_Authorization required
      await setApiKeyToObject(localVarHeaderParameter, "authorization", configuration);

      // authentication example-id-2 required
      await setApiKeyToObject(localVarHeaderParameter, "example-id-2", configuration);

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      localVarRequestOptions.data = serializeDataIfNeeded(
        updateShoppingOrderDetailCommand,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary 查詢列表  (*dynamic sort support)
     * @param {QueryShoppingOrderDetailRequest} [queryShoppingOrderDetailRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    queryShoppingOrderDetails: async (
      queryShoppingOrderDetailRequest?: QueryShoppingOrderDetailRequest,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/shoppingOrderDetail/query`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: "POST", ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication Example-id-1 required
      await setApiKeyToObject(localVarHeaderParameter, "Example-id-1", configuration);

      // authentication JWT_Authorization required
      await setApiKeyToObject(localVarHeaderParameter, "authorization", configuration);

      // authentication example-id-2 required
      await setApiKeyToObject(localVarHeaderParameter, "example-id-2", configuration);

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      localVarRequestOptions.data = serializeDataIfNeeded(
        queryShoppingOrderDetailRequest,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary 刪除主檔
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    removeShoppingOrderDetail: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists("removeShoppingOrderDetail", "id", id);
      const localVarPath = `/api/shoppingOrderDetail/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(id)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: "DELETE", ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication Example-id-1 required
      await setApiKeyToObject(localVarHeaderParameter, "Example-id-1", configuration);

      // authentication JWT_Authorization required
      await setApiKeyToObject(localVarHeaderParameter, "authorization", configuration);

      // authentication example-id-2 required
      await setApiKeyToObject(localVarHeaderParameter, "example-id-2", configuration);

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * ShoppingOrderDetailApi - functional programming interface
 * @export
 */
export const ShoppingOrderDetailApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = ShoppingOrderDetailApiAxiosParamCreator(configuration);
  return {
    /**
     *
     * @summary 建立訂單明細主檔
     * @param {CreateShoppingOrderDetailCommand} [createShoppingOrderDetailCommand]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async createShoppingOrderDetail(
      createShoppingOrderDetailCommand?: CreateShoppingOrderDetailCommand,
      options?: AxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<ShoppingOrderDetailViewApiResponse>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.createShoppingOrderDetail(
        createShoppingOrderDetailCommand,
        options
      );
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     *
     * @summary 刪除訂單明細主檔
     * @param {DeleteShoppingOrderDetailCommand} [deleteShoppingOrderDetailCommand]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async deleteShoppingOrderDetail(
      deleteShoppingOrderDetailCommand?: DeleteShoppingOrderDetailCommand,
      options?: AxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<ShoppingOrderDetailViewApiResponse>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.deleteShoppingOrderDetail(
        deleteShoppingOrderDetailCommand,
        options
      );
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     *
     * @summary 查詢訂單明細主檔
     * @param {FetchAllShoppingOrderDetailRequest} [fetchAllShoppingOrderDetailRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async fetchShoppingOrderDetails(
      fetchAllShoppingOrderDetailRequest?: FetchAllShoppingOrderDetailRequest,
      options?: AxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<ShoppingOrderDetailViewListApiResponse>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.fetchShoppingOrderDetails(
        fetchAllShoppingOrderDetailRequest,
        options
      );
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     *
     * @summary 查詢訂單明細主檔
     * @param {number} [id] 訂單明細主檔Id
     * @param {number} [shoppingOrderId] ShoppingOrder.Id
     * @param {number} [courseId] Course.Id 課程Id
     * @param {number} [price] 單價
     * @param {number} [count] 購買數量
     * @param {number} [amount] 總金額
     * @param {string} [orderDetailStatus] 付款方式 對應SystemConfig內Type&#x3D;OrderDetailStatus 0:尚未付款 1:已付款 2:付款完成 3:退款申請 4:退款完成
     * @param {number} [userId] UserId
     * @param {Array<SortProperty>} [sortProperties] 查詢欄位排序
     * @param {number} [page] 目前頁數
     * @param {number} [size] 每頁筆數
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async findShoppingOrderDetail(
      id?: number,
      shoppingOrderId?: number,
      courseId?: number,
      price?: number,
      count?: number,
      amount?: number,
      orderDetailStatus?: string,
      userId?: number,
      sortProperties?: Array<SortProperty>,
      page?: number,
      size?: number,
      options?: AxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<ShoppingOrderDetailViewPageApiResponse>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.findShoppingOrderDetail(
        id,
        shoppingOrderId,
        courseId,
        price,
        count,
        amount,
        orderDetailStatus,
        userId,
        sortProperties,
        page,
        size,
        options
      );
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     *
     * @summary 以 Id 查詢列表
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getShoppingOrderDetail(
      id: number,
      options?: AxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<ShoppingOrderDetailViewApiResponse>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getShoppingOrderDetail(id, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     *
     * @summary 修改訂單明細主檔
     * @param {UpdateShoppingOrderDetailCommand} [updateShoppingOrderDetailCommand]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async putShoppingOrderDetail(
      updateShoppingOrderDetailCommand?: UpdateShoppingOrderDetailCommand,
      options?: AxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<ShoppingOrderDetailViewApiResponse>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.putShoppingOrderDetail(
        updateShoppingOrderDetailCommand,
        options
      );
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     *
     * @summary 查詢列表  (*dynamic sort support)
     * @param {QueryShoppingOrderDetailRequest} [queryShoppingOrderDetailRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async queryShoppingOrderDetails(
      queryShoppingOrderDetailRequest?: QueryShoppingOrderDetailRequest,
      options?: AxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<ShoppingOrderDetailViewPageApiResponse>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.queryShoppingOrderDetails(
        queryShoppingOrderDetailRequest,
        options
      );
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     *
     * @summary 刪除主檔
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async removeShoppingOrderDetail(
      id: number,
      options?: AxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<Int32ApiResponse>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.removeShoppingOrderDetail(id, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
  };
};

/**
 * ShoppingOrderDetailApi - factory interface
 * @export
 */
export const ShoppingOrderDetailApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance
) {
  const localVarFp = ShoppingOrderDetailApiFp(configuration);
  return {
    /**
     *
     * @summary 建立訂單明細主檔
     * @param {CreateShoppingOrderDetailCommand} [createShoppingOrderDetailCommand]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createShoppingOrderDetail(
      createShoppingOrderDetailCommand?: CreateShoppingOrderDetailCommand,
      options?: any
    ): Promise<ShoppingOrderDetailViewApiResponse> {
      return localVarFp
        .createShoppingOrderDetail(createShoppingOrderDetailCommand, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary 刪除訂單明細主檔
     * @param {DeleteShoppingOrderDetailCommand} [deleteShoppingOrderDetailCommand]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteShoppingOrderDetail(
      deleteShoppingOrderDetailCommand?: DeleteShoppingOrderDetailCommand,
      options?: any
    ): Promise<ShoppingOrderDetailViewApiResponse> {
      return localVarFp
        .deleteShoppingOrderDetail(deleteShoppingOrderDetailCommand, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary 查詢訂單明細主檔
     * @param {FetchAllShoppingOrderDetailRequest} [fetchAllShoppingOrderDetailRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    fetchShoppingOrderDetails(
      fetchAllShoppingOrderDetailRequest?: FetchAllShoppingOrderDetailRequest,
      options?: any
    ): Promise<ShoppingOrderDetailViewListApiResponse> {
      return localVarFp
        .fetchShoppingOrderDetails(fetchAllShoppingOrderDetailRequest, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary 查詢訂單明細主檔
     * @param {number} [id] 訂單明細主檔Id
     * @param {number} [shoppingOrderId] ShoppingOrder.Id
     * @param {number} [courseId] Course.Id 課程Id
     * @param {number} [price] 單價
     * @param {number} [count] 購買數量
     * @param {number} [amount] 總金額
     * @param {string} [orderDetailStatus] 付款方式 對應SystemConfig內Type&#x3D;OrderDetailStatus 0:尚未付款 1:已付款 2:付款完成 3:退款申請 4:退款完成
     * @param {number} [userId] UserId
     * @param {Array<SortProperty>} [sortProperties] 查詢欄位排序
     * @param {number} [page] 目前頁數
     * @param {number} [size] 每頁筆數
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    findShoppingOrderDetail(
      id?: number,
      shoppingOrderId?: number,
      courseId?: number,
      price?: number,
      count?: number,
      amount?: number,
      orderDetailStatus?: string,
      userId?: number,
      sortProperties?: Array<SortProperty>,
      page?: number,
      size?: number,
      options?: any
    ): Promise<ShoppingOrderDetailViewPageApiResponse> {
      return localVarFp
        .findShoppingOrderDetail(
          id,
          shoppingOrderId,
          courseId,
          price,
          count,
          amount,
          orderDetailStatus,
          userId,
          sortProperties,
          page,
          size,
          options
        )
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary 以 Id 查詢列表
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getShoppingOrderDetail(id: number, options?: any): Promise<ShoppingOrderDetailViewApiResponse> {
      return localVarFp.getShoppingOrderDetail(id, options).then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary 修改訂單明細主檔
     * @param {UpdateShoppingOrderDetailCommand} [updateShoppingOrderDetailCommand]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    putShoppingOrderDetail(
      updateShoppingOrderDetailCommand?: UpdateShoppingOrderDetailCommand,
      options?: any
    ): Promise<ShoppingOrderDetailViewApiResponse> {
      return localVarFp
        .putShoppingOrderDetail(updateShoppingOrderDetailCommand, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary 查詢列表  (*dynamic sort support)
     * @param {QueryShoppingOrderDetailRequest} [queryShoppingOrderDetailRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    queryShoppingOrderDetails(
      queryShoppingOrderDetailRequest?: QueryShoppingOrderDetailRequest,
      options?: any
    ): Promise<ShoppingOrderDetailViewPageApiResponse> {
      return localVarFp
        .queryShoppingOrderDetails(queryShoppingOrderDetailRequest, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary 刪除主檔
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    removeShoppingOrderDetail(id: number, options?: any): Promise<Int32ApiResponse> {
      return localVarFp.removeShoppingOrderDetail(id, options).then((request) => request(axios, basePath));
    },
  };
};

/**
 * ShoppingOrderDetailApi - interface
 * @export
 * @interface ShoppingOrderDetailApi
 */
export interface ShoppingOrderDetailApiInterface {
  /**
   *
   * @summary 建立訂單明細主檔
   * @param {CreateShoppingOrderDetailCommand} [createShoppingOrderDetailCommand]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ShoppingOrderDetailApiInterface
   */
  createShoppingOrderDetail(
    createShoppingOrderDetailCommand?: CreateShoppingOrderDetailCommand,
    options?: AxiosRequestConfig
  ): Promise<ShoppingOrderDetailViewApiResponse>;

  /**
   *
   * @summary 刪除訂單明細主檔
   * @param {DeleteShoppingOrderDetailCommand} [deleteShoppingOrderDetailCommand]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ShoppingOrderDetailApiInterface
   */
  deleteShoppingOrderDetail(
    deleteShoppingOrderDetailCommand?: DeleteShoppingOrderDetailCommand,
    options?: AxiosRequestConfig
  ): Promise<ShoppingOrderDetailViewApiResponse>;

  /**
   *
   * @summary 查詢訂單明細主檔
   * @param {FetchAllShoppingOrderDetailRequest} [fetchAllShoppingOrderDetailRequest]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ShoppingOrderDetailApiInterface
   */
  fetchShoppingOrderDetails(
    fetchAllShoppingOrderDetailRequest?: FetchAllShoppingOrderDetailRequest,
    options?: AxiosRequestConfig
  ): Promise<ShoppingOrderDetailViewListApiResponse>;

  /**
   *
   * @summary 查詢訂單明細主檔
   * @param {number} [id] 訂單明細主檔Id
   * @param {number} [shoppingOrderId] ShoppingOrder.Id
   * @param {number} [courseId] Course.Id 課程Id
   * @param {number} [price] 單價
   * @param {number} [count] 購買數量
   * @param {number} [amount] 總金額
   * @param {string} [orderDetailStatus] 付款方式 對應SystemConfig內Type&#x3D;OrderDetailStatus 0:尚未付款 1:已付款 2:付款完成 3:退款申請 4:退款完成
   * @param {number} [userId] UserId
   * @param {Array<SortProperty>} [sortProperties] 查詢欄位排序
   * @param {number} [page] 目前頁數
   * @param {number} [size] 每頁筆數
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ShoppingOrderDetailApiInterface
   */
  findShoppingOrderDetail(
    id?: number,
    shoppingOrderId?: number,
    courseId?: number,
    price?: number,
    count?: number,
    amount?: number,
    orderDetailStatus?: string,
    userId?: number,
    sortProperties?: Array<SortProperty>,
    page?: number,
    size?: number,
    options?: AxiosRequestConfig
  ): Promise<ShoppingOrderDetailViewPageApiResponse>;

  /**
   *
   * @summary 以 Id 查詢列表
   * @param {number} id
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ShoppingOrderDetailApiInterface
   */
  getShoppingOrderDetail(id: number, options?: AxiosRequestConfig): Promise<ShoppingOrderDetailViewApiResponse>;

  /**
   *
   * @summary 修改訂單明細主檔
   * @param {UpdateShoppingOrderDetailCommand} [updateShoppingOrderDetailCommand]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ShoppingOrderDetailApiInterface
   */
  putShoppingOrderDetail(
    updateShoppingOrderDetailCommand?: UpdateShoppingOrderDetailCommand,
    options?: AxiosRequestConfig
  ): Promise<ShoppingOrderDetailViewApiResponse>;

  /**
   *
   * @summary 查詢列表  (*dynamic sort support)
   * @param {QueryShoppingOrderDetailRequest} [queryShoppingOrderDetailRequest]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ShoppingOrderDetailApiInterface
   */
  queryShoppingOrderDetails(
    queryShoppingOrderDetailRequest?: QueryShoppingOrderDetailRequest,
    options?: AxiosRequestConfig
  ): Promise<ShoppingOrderDetailViewPageApiResponse>;

  /**
   *
   * @summary 刪除主檔
   * @param {number} id
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ShoppingOrderDetailApiInterface
   */
  removeShoppingOrderDetail(id: number, options?: AxiosRequestConfig): Promise<Int32ApiResponse>;
}

/**
 * ShoppingOrderDetailApi - object-oriented interface
 * @export
 * @class ShoppingOrderDetailApi
 * @extends {BaseAPI}
 */
export class ShoppingOrderDetailApi extends BaseAPI implements ShoppingOrderDetailApiInterface {
  /**
   *
   * @summary 建立訂單明細主檔
   * @param {CreateShoppingOrderDetailCommand} [createShoppingOrderDetailCommand]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ShoppingOrderDetailApi
   */
  public createShoppingOrderDetail(
    createShoppingOrderDetailCommand?: CreateShoppingOrderDetailCommand,
    options?: AxiosRequestConfig
  ) {
    return ShoppingOrderDetailApiFp(this.configuration)
      .createShoppingOrderDetail(createShoppingOrderDetailCommand, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary 刪除訂單明細主檔
   * @param {DeleteShoppingOrderDetailCommand} [deleteShoppingOrderDetailCommand]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ShoppingOrderDetailApi
   */
  public deleteShoppingOrderDetail(
    deleteShoppingOrderDetailCommand?: DeleteShoppingOrderDetailCommand,
    options?: AxiosRequestConfig
  ) {
    return ShoppingOrderDetailApiFp(this.configuration)
      .deleteShoppingOrderDetail(deleteShoppingOrderDetailCommand, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary 查詢訂單明細主檔
   * @param {FetchAllShoppingOrderDetailRequest} [fetchAllShoppingOrderDetailRequest]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ShoppingOrderDetailApi
   */
  public fetchShoppingOrderDetails(
    fetchAllShoppingOrderDetailRequest?: FetchAllShoppingOrderDetailRequest,
    options?: AxiosRequestConfig
  ) {
    return ShoppingOrderDetailApiFp(this.configuration)
      .fetchShoppingOrderDetails(fetchAllShoppingOrderDetailRequest, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary 查詢訂單明細主檔
   * @param {number} [id] 訂單明細主檔Id
   * @param {number} [shoppingOrderId] ShoppingOrder.Id
   * @param {number} [courseId] Course.Id 課程Id
   * @param {number} [price] 單價
   * @param {number} [count] 購買數量
   * @param {number} [amount] 總金額
   * @param {string} [orderDetailStatus] 付款方式 對應SystemConfig內Type&#x3D;OrderDetailStatus 0:尚未付款 1:已付款 2:付款完成 3:退款申請 4:退款完成
   * @param {number} [userId] UserId
   * @param {Array<SortProperty>} [sortProperties] 查詢欄位排序
   * @param {number} [page] 目前頁數
   * @param {number} [size] 每頁筆數
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ShoppingOrderDetailApi
   */
  public findShoppingOrderDetail(
    id?: number,
    shoppingOrderId?: number,
    courseId?: number,
    price?: number,
    count?: number,
    amount?: number,
    orderDetailStatus?: string,
    userId?: number,
    sortProperties?: Array<SortProperty>,
    page?: number,
    size?: number,
    options?: AxiosRequestConfig
  ) {
    return ShoppingOrderDetailApiFp(this.configuration)
      .findShoppingOrderDetail(
        id,
        shoppingOrderId,
        courseId,
        price,
        count,
        amount,
        orderDetailStatus,
        userId,
        sortProperties,
        page,
        size,
        options
      )
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary 以 Id 查詢列表
   * @param {number} id
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ShoppingOrderDetailApi
   */
  public getShoppingOrderDetail(id: number, options?: AxiosRequestConfig) {
    return ShoppingOrderDetailApiFp(this.configuration)
      .getShoppingOrderDetail(id, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary 修改訂單明細主檔
   * @param {UpdateShoppingOrderDetailCommand} [updateShoppingOrderDetailCommand]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ShoppingOrderDetailApi
   */
  public putShoppingOrderDetail(
    updateShoppingOrderDetailCommand?: UpdateShoppingOrderDetailCommand,
    options?: AxiosRequestConfig
  ) {
    return ShoppingOrderDetailApiFp(this.configuration)
      .putShoppingOrderDetail(updateShoppingOrderDetailCommand, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary 查詢列表  (*dynamic sort support)
   * @param {QueryShoppingOrderDetailRequest} [queryShoppingOrderDetailRequest]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ShoppingOrderDetailApi
   */
  public queryShoppingOrderDetails(
    queryShoppingOrderDetailRequest?: QueryShoppingOrderDetailRequest,
    options?: AxiosRequestConfig
  ) {
    return ShoppingOrderDetailApiFp(this.configuration)
      .queryShoppingOrderDetails(queryShoppingOrderDetailRequest, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary 刪除主檔
   * @param {number} id
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ShoppingOrderDetailApi
   */
  public removeShoppingOrderDetail(id: number, options?: AxiosRequestConfig) {
    return ShoppingOrderDetailApiFp(this.configuration)
      .removeShoppingOrderDetail(id, options)
      .then((request) => request(this.axios, this.basePath));
  }
}

/**
 * ShoppingTrackApi - axios parameter creator
 * @export
 */
export const ShoppingTrackApiAxiosParamCreator = function (configuration?: Configuration) {
  return {
    /**
     *
     * @summary 建立追蹤清單主檔
     * @param {CreateShoppingTrackCommand} [createShoppingTrackCommand]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createShoppingTrack: async (
      createShoppingTrackCommand?: CreateShoppingTrackCommand,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/shoppingTrack`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: "POST", ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication Example-id-1 required
      await setApiKeyToObject(localVarHeaderParameter, "Example-id-1", configuration);

      // authentication JWT_Authorization required
      await setApiKeyToObject(localVarHeaderParameter, "authorization", configuration);

      // authentication example-id-2 required
      await setApiKeyToObject(localVarHeaderParameter, "example-id-2", configuration);

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      localVarRequestOptions.data = serializeDataIfNeeded(
        createShoppingTrackCommand,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary 刪除追蹤清單主檔
     * @param {DeleteShoppingTrackCommand} [deleteShoppingTrackCommand]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteShoppingTrack: async (
      deleteShoppingTrackCommand?: DeleteShoppingTrackCommand,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/shoppingTrack`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: "DELETE", ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication Example-id-1 required
      await setApiKeyToObject(localVarHeaderParameter, "Example-id-1", configuration);

      // authentication JWT_Authorization required
      await setApiKeyToObject(localVarHeaderParameter, "authorization", configuration);

      // authentication example-id-2 required
      await setApiKeyToObject(localVarHeaderParameter, "example-id-2", configuration);

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      localVarRequestOptions.data = serializeDataIfNeeded(
        deleteShoppingTrackCommand,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary 查詢追蹤清單主檔
     * @param {FetchAllShoppingTrackRequest} [fetchAllShoppingTrackRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    fetchShoppingTracks: async (
      fetchAllShoppingTrackRequest?: FetchAllShoppingTrackRequest,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/shoppingTrack/fetch`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: "POST", ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication Example-id-1 required
      await setApiKeyToObject(localVarHeaderParameter, "Example-id-1", configuration);

      // authentication JWT_Authorization required
      await setApiKeyToObject(localVarHeaderParameter, "authorization", configuration);

      // authentication example-id-2 required
      await setApiKeyToObject(localVarHeaderParameter, "example-id-2", configuration);

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      localVarRequestOptions.data = serializeDataIfNeeded(
        fetchAllShoppingTrackRequest,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary 查詢追蹤清單主檔
     * @param {number} [id] id
     * @param {number} [userId] User.Id
     * @param {number} [courseId] 課程類別Course.Id
     * @param {Array<SortProperty>} [sortProperties] 查詢欄位排序
     * @param {number} [page] 目前頁數
     * @param {number} [size] 每頁筆數
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    findShoppingTrack: async (
      id?: number,
      userId?: number,
      courseId?: number,
      sortProperties?: Array<SortProperty>,
      page?: number,
      size?: number,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/shoppingTrack`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: "GET", ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication Example-id-1 required
      await setApiKeyToObject(localVarHeaderParameter, "Example-id-1", configuration);

      // authentication JWT_Authorization required
      await setApiKeyToObject(localVarHeaderParameter, "authorization", configuration);

      // authentication example-id-2 required
      await setApiKeyToObject(localVarHeaderParameter, "example-id-2", configuration);

      if (id !== undefined) {
        localVarQueryParameter["id"] = id;
      }

      if (userId !== undefined) {
        localVarQueryParameter["userId"] = userId;
      }

      if (courseId !== undefined) {
        localVarQueryParameter["courseId"] = courseId;
      }

      if (sortProperties) {
        localVarQueryParameter["sortProperties"] = sortProperties;
      }

      if (page !== undefined) {
        localVarQueryParameter["page"] = page;
      }

      if (size !== undefined) {
        localVarQueryParameter["size"] = size;
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary 以 Id 查詢列表
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getShoppingTrack: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists("getShoppingTrack", "id", id);
      const localVarPath = `/api/shoppingTrack/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(id)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: "GET", ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication Example-id-1 required
      await setApiKeyToObject(localVarHeaderParameter, "Example-id-1", configuration);

      // authentication JWT_Authorization required
      await setApiKeyToObject(localVarHeaderParameter, "authorization", configuration);

      // authentication example-id-2 required
      await setApiKeyToObject(localVarHeaderParameter, "example-id-2", configuration);

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary 修改追蹤清單主檔
     * @param {UpdateShoppingTrackCommand} [updateShoppingTrackCommand]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    putShoppingTrack: async (
      updateShoppingTrackCommand?: UpdateShoppingTrackCommand,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/shoppingTrack`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: "PUT", ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication Example-id-1 required
      await setApiKeyToObject(localVarHeaderParameter, "Example-id-1", configuration);

      // authentication JWT_Authorization required
      await setApiKeyToObject(localVarHeaderParameter, "authorization", configuration);

      // authentication example-id-2 required
      await setApiKeyToObject(localVarHeaderParameter, "example-id-2", configuration);

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      localVarRequestOptions.data = serializeDataIfNeeded(
        updateShoppingTrackCommand,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary 查詢列表  (*dynamic sort support)
     * @param {QueryShoppingTrackRequest} [queryShoppingTrackRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    queryShoppingTracks: async (
      queryShoppingTrackRequest?: QueryShoppingTrackRequest,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/shoppingTrack/query`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: "POST", ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication Example-id-1 required
      await setApiKeyToObject(localVarHeaderParameter, "Example-id-1", configuration);

      // authentication JWT_Authorization required
      await setApiKeyToObject(localVarHeaderParameter, "authorization", configuration);

      // authentication example-id-2 required
      await setApiKeyToObject(localVarHeaderParameter, "example-id-2", configuration);

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      localVarRequestOptions.data = serializeDataIfNeeded(
        queryShoppingTrackRequest,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary 刪除主檔
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    removeShoppingTrack: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists("removeShoppingTrack", "id", id);
      const localVarPath = `/api/shoppingTrack/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(id)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: "DELETE", ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication Example-id-1 required
      await setApiKeyToObject(localVarHeaderParameter, "Example-id-1", configuration);

      // authentication JWT_Authorization required
      await setApiKeyToObject(localVarHeaderParameter, "authorization", configuration);

      // authentication example-id-2 required
      await setApiKeyToObject(localVarHeaderParameter, "example-id-2", configuration);

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * ShoppingTrackApi - functional programming interface
 * @export
 */
export const ShoppingTrackApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = ShoppingTrackApiAxiosParamCreator(configuration);
  return {
    /**
     *
     * @summary 建立追蹤清單主檔
     * @param {CreateShoppingTrackCommand} [createShoppingTrackCommand]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async createShoppingTrack(
      createShoppingTrackCommand?: CreateShoppingTrackCommand,
      options?: AxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<ShoppingTrackViewApiResponse>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.createShoppingTrack(
        createShoppingTrackCommand,
        options
      );
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     *
     * @summary 刪除追蹤清單主檔
     * @param {DeleteShoppingTrackCommand} [deleteShoppingTrackCommand]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async deleteShoppingTrack(
      deleteShoppingTrackCommand?: DeleteShoppingTrackCommand,
      options?: AxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<ShoppingTrackViewApiResponse>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.deleteShoppingTrack(
        deleteShoppingTrackCommand,
        options
      );
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     *
     * @summary 查詢追蹤清單主檔
     * @param {FetchAllShoppingTrackRequest} [fetchAllShoppingTrackRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async fetchShoppingTracks(
      fetchAllShoppingTrackRequest?: FetchAllShoppingTrackRequest,
      options?: AxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<ShoppingTrackViewListApiResponse>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.fetchShoppingTracks(
        fetchAllShoppingTrackRequest,
        options
      );
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     *
     * @summary 查詢追蹤清單主檔
     * @param {number} [id] id
     * @param {number} [userId] User.Id
     * @param {number} [courseId] 課程類別Course.Id
     * @param {Array<SortProperty>} [sortProperties] 查詢欄位排序
     * @param {number} [page] 目前頁數
     * @param {number} [size] 每頁筆數
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async findShoppingTrack(
      id?: number,
      userId?: number,
      courseId?: number,
      sortProperties?: Array<SortProperty>,
      page?: number,
      size?: number,
      options?: AxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<ShoppingTrackViewPageApiResponse>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.findShoppingTrack(
        id,
        userId,
        courseId,
        sortProperties,
        page,
        size,
        options
      );
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     *
     * @summary 以 Id 查詢列表
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getShoppingTrack(
      id: number,
      options?: AxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<ShoppingTrackViewApiResponse>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getShoppingTrack(id, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     *
     * @summary 修改追蹤清單主檔
     * @param {UpdateShoppingTrackCommand} [updateShoppingTrackCommand]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async putShoppingTrack(
      updateShoppingTrackCommand?: UpdateShoppingTrackCommand,
      options?: AxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<ShoppingTrackViewApiResponse>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.putShoppingTrack(updateShoppingTrackCommand, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     *
     * @summary 查詢列表  (*dynamic sort support)
     * @param {QueryShoppingTrackRequest} [queryShoppingTrackRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async queryShoppingTracks(
      queryShoppingTrackRequest?: QueryShoppingTrackRequest,
      options?: AxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<ShoppingTrackViewPageApiResponse>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.queryShoppingTracks(queryShoppingTrackRequest, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     *
     * @summary 刪除主檔
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async removeShoppingTrack(
      id: number,
      options?: AxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<Int32ApiResponse>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.removeShoppingTrack(id, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
  };
};

/**
 * ShoppingTrackApi - factory interface
 * @export
 */
export const ShoppingTrackApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance
) {
  const localVarFp = ShoppingTrackApiFp(configuration);
  return {
    /**
     *
     * @summary 建立追蹤清單主檔
     * @param {CreateShoppingTrackCommand} [createShoppingTrackCommand]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createShoppingTrack(
      createShoppingTrackCommand?: CreateShoppingTrackCommand,
      options?: any
    ): Promise<ShoppingTrackViewApiResponse> {
      return localVarFp
        .createShoppingTrack(createShoppingTrackCommand, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary 刪除追蹤清單主檔
     * @param {DeleteShoppingTrackCommand} [deleteShoppingTrackCommand]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteShoppingTrack(
      deleteShoppingTrackCommand?: DeleteShoppingTrackCommand,
      options?: any
    ): Promise<ShoppingTrackViewApiResponse> {
      return localVarFp
        .deleteShoppingTrack(deleteShoppingTrackCommand, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary 查詢追蹤清單主檔
     * @param {FetchAllShoppingTrackRequest} [fetchAllShoppingTrackRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    fetchShoppingTracks(
      fetchAllShoppingTrackRequest?: FetchAllShoppingTrackRequest,
      options?: any
    ): Promise<ShoppingTrackViewListApiResponse> {
      return localVarFp
        .fetchShoppingTracks(fetchAllShoppingTrackRequest, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary 查詢追蹤清單主檔
     * @param {number} [id] id
     * @param {number} [userId] User.Id
     * @param {number} [courseId] 課程類別Course.Id
     * @param {Array<SortProperty>} [sortProperties] 查詢欄位排序
     * @param {number} [page] 目前頁數
     * @param {number} [size] 每頁筆數
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    findShoppingTrack(
      id?: number,
      userId?: number,
      courseId?: number,
      sortProperties?: Array<SortProperty>,
      page?: number,
      size?: number,
      options?: any
    ): Promise<ShoppingTrackViewPageApiResponse> {
      return localVarFp
        .findShoppingTrack(id, userId, courseId, sortProperties, page, size, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary 以 Id 查詢列表
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getShoppingTrack(id: number, options?: any): Promise<ShoppingTrackViewApiResponse> {
      return localVarFp.getShoppingTrack(id, options).then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary 修改追蹤清單主檔
     * @param {UpdateShoppingTrackCommand} [updateShoppingTrackCommand]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    putShoppingTrack(
      updateShoppingTrackCommand?: UpdateShoppingTrackCommand,
      options?: any
    ): Promise<ShoppingTrackViewApiResponse> {
      return localVarFp
        .putShoppingTrack(updateShoppingTrackCommand, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary 查詢列表  (*dynamic sort support)
     * @param {QueryShoppingTrackRequest} [queryShoppingTrackRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    queryShoppingTracks(
      queryShoppingTrackRequest?: QueryShoppingTrackRequest,
      options?: any
    ): Promise<ShoppingTrackViewPageApiResponse> {
      return localVarFp
        .queryShoppingTracks(queryShoppingTrackRequest, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary 刪除主檔
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    removeShoppingTrack(id: number, options?: any): Promise<Int32ApiResponse> {
      return localVarFp.removeShoppingTrack(id, options).then((request) => request(axios, basePath));
    },
  };
};

/**
 * ShoppingTrackApi - interface
 * @export
 * @interface ShoppingTrackApi
 */
export interface ShoppingTrackApiInterface {
  /**
   *
   * @summary 建立追蹤清單主檔
   * @param {CreateShoppingTrackCommand} [createShoppingTrackCommand]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ShoppingTrackApiInterface
   */
  createShoppingTrack(
    createShoppingTrackCommand?: CreateShoppingTrackCommand,
    options?: AxiosRequestConfig
  ): Promise<ShoppingTrackViewApiResponse>;

  /**
   *
   * @summary 刪除追蹤清單主檔
   * @param {DeleteShoppingTrackCommand} [deleteShoppingTrackCommand]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ShoppingTrackApiInterface
   */
  deleteShoppingTrack(
    deleteShoppingTrackCommand?: DeleteShoppingTrackCommand,
    options?: AxiosRequestConfig
  ): Promise<ShoppingTrackViewApiResponse>;

  /**
   *
   * @summary 查詢追蹤清單主檔
   * @param {FetchAllShoppingTrackRequest} [fetchAllShoppingTrackRequest]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ShoppingTrackApiInterface
   */
  fetchShoppingTracks(
    fetchAllShoppingTrackRequest?: FetchAllShoppingTrackRequest,
    options?: AxiosRequestConfig
  ): Promise<ShoppingTrackViewListApiResponse>;

  /**
   *
   * @summary 查詢追蹤清單主檔
   * @param {number} [id] id
   * @param {number} [userId] User.Id
   * @param {number} [courseId] 課程類別Course.Id
   * @param {Array<SortProperty>} [sortProperties] 查詢欄位排序
   * @param {number} [page] 目前頁數
   * @param {number} [size] 每頁筆數
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ShoppingTrackApiInterface
   */
  findShoppingTrack(
    id?: number,
    userId?: number,
    courseId?: number,
    sortProperties?: Array<SortProperty>,
    page?: number,
    size?: number,
    options?: AxiosRequestConfig
  ): Promise<ShoppingTrackViewPageApiResponse>;

  /**
   *
   * @summary 以 Id 查詢列表
   * @param {number} id
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ShoppingTrackApiInterface
   */
  getShoppingTrack(id: number, options?: AxiosRequestConfig): Promise<ShoppingTrackViewApiResponse>;

  /**
   *
   * @summary 修改追蹤清單主檔
   * @param {UpdateShoppingTrackCommand} [updateShoppingTrackCommand]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ShoppingTrackApiInterface
   */
  putShoppingTrack(
    updateShoppingTrackCommand?: UpdateShoppingTrackCommand,
    options?: AxiosRequestConfig
  ): Promise<ShoppingTrackViewApiResponse>;

  /**
   *
   * @summary 查詢列表  (*dynamic sort support)
   * @param {QueryShoppingTrackRequest} [queryShoppingTrackRequest]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ShoppingTrackApiInterface
   */
  queryShoppingTracks(
    queryShoppingTrackRequest?: QueryShoppingTrackRequest,
    options?: AxiosRequestConfig
  ): Promise<ShoppingTrackViewPageApiResponse>;

  /**
   *
   * @summary 刪除主檔
   * @param {number} id
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ShoppingTrackApiInterface
   */
  removeShoppingTrack(id: number, options?: AxiosRequestConfig): Promise<Int32ApiResponse>;
}

/**
 * ShoppingTrackApi - object-oriented interface
 * @export
 * @class ShoppingTrackApi
 * @extends {BaseAPI}
 */
export class ShoppingTrackApi extends BaseAPI implements ShoppingTrackApiInterface {
  /**
   *
   * @summary 建立追蹤清單主檔
   * @param {CreateShoppingTrackCommand} [createShoppingTrackCommand]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ShoppingTrackApi
   */
  public createShoppingTrack(createShoppingTrackCommand?: CreateShoppingTrackCommand, options?: AxiosRequestConfig) {
    return ShoppingTrackApiFp(this.configuration)
      .createShoppingTrack(createShoppingTrackCommand, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary 刪除追蹤清單主檔
   * @param {DeleteShoppingTrackCommand} [deleteShoppingTrackCommand]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ShoppingTrackApi
   */
  public deleteShoppingTrack(deleteShoppingTrackCommand?: DeleteShoppingTrackCommand, options?: AxiosRequestConfig) {
    return ShoppingTrackApiFp(this.configuration)
      .deleteShoppingTrack(deleteShoppingTrackCommand, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary 查詢追蹤清單主檔
   * @param {FetchAllShoppingTrackRequest} [fetchAllShoppingTrackRequest]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ShoppingTrackApi
   */
  public fetchShoppingTracks(
    fetchAllShoppingTrackRequest?: FetchAllShoppingTrackRequest,
    options?: AxiosRequestConfig
  ) {
    return ShoppingTrackApiFp(this.configuration)
      .fetchShoppingTracks(fetchAllShoppingTrackRequest, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary 查詢追蹤清單主檔
   * @param {number} [id] id
   * @param {number} [userId] User.Id
   * @param {number} [courseId] 課程類別Course.Id
   * @param {Array<SortProperty>} [sortProperties] 查詢欄位排序
   * @param {number} [page] 目前頁數
   * @param {number} [size] 每頁筆數
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ShoppingTrackApi
   */
  public findShoppingTrack(
    id?: number,
    userId?: number,
    courseId?: number,
    sortProperties?: Array<SortProperty>,
    page?: number,
    size?: number,
    options?: AxiosRequestConfig
  ) {
    return ShoppingTrackApiFp(this.configuration)
      .findShoppingTrack(id, userId, courseId, sortProperties, page, size, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary 以 Id 查詢列表
   * @param {number} id
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ShoppingTrackApi
   */
  public getShoppingTrack(id: number, options?: AxiosRequestConfig) {
    return ShoppingTrackApiFp(this.configuration)
      .getShoppingTrack(id, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary 修改追蹤清單主檔
   * @param {UpdateShoppingTrackCommand} [updateShoppingTrackCommand]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ShoppingTrackApi
   */
  public putShoppingTrack(updateShoppingTrackCommand?: UpdateShoppingTrackCommand, options?: AxiosRequestConfig) {
    return ShoppingTrackApiFp(this.configuration)
      .putShoppingTrack(updateShoppingTrackCommand, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary 查詢列表  (*dynamic sort support)
   * @param {QueryShoppingTrackRequest} [queryShoppingTrackRequest]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ShoppingTrackApi
   */
  public queryShoppingTracks(queryShoppingTrackRequest?: QueryShoppingTrackRequest, options?: AxiosRequestConfig) {
    return ShoppingTrackApiFp(this.configuration)
      .queryShoppingTracks(queryShoppingTrackRequest, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary 刪除主檔
   * @param {number} id
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ShoppingTrackApi
   */
  public removeShoppingTrack(id: number, options?: AxiosRequestConfig) {
    return ShoppingTrackApiFp(this.configuration)
      .removeShoppingTrack(id, options)
      .then((request) => request(this.axios, this.basePath));
  }
}

/**
 * SystemConfigApi - axios parameter creator
 * @export
 */
export const SystemConfigApiAxiosParamCreator = function (configuration?: Configuration) {
  return {
    /**
     *
     * @summary 查詢所有的系統參數
     * @param {string} [type]
     * @param {string} [name]
     * @param {number} [limit]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    findConfig: async (
      type?: string,
      name?: string,
      limit?: number,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/systemConfig/configs`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: "GET", ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication Example-id-1 required
      await setApiKeyToObject(localVarHeaderParameter, "Example-id-1", configuration);

      // authentication JWT_Authorization required
      await setApiKeyToObject(localVarHeaderParameter, "authorization", configuration);

      // authentication example-id-2 required
      await setApiKeyToObject(localVarHeaderParameter, "example-id-2", configuration);

      if (type !== undefined) {
        localVarQueryParameter["type"] = type;
      }

      if (name !== undefined) {
        localVarQueryParameter["name"] = name;
      }

      if (limit !== undefined) {
        localVarQueryParameter["limit"] = limit;
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary 會友所屬堂點清單
     * @param {string} [type]
     * @param {string} [name]
     * @param {number} [limit]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    findConfigOfChurch: async (
      type?: string,
      name?: string,
      limit?: number,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/systemConfig/church/names`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: "GET", ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication Example-id-1 required
      await setApiKeyToObject(localVarHeaderParameter, "Example-id-1", configuration);

      // authentication JWT_Authorization required
      await setApiKeyToObject(localVarHeaderParameter, "authorization", configuration);

      // authentication example-id-2 required
      await setApiKeyToObject(localVarHeaderParameter, "example-id-2", configuration);

      if (type !== undefined) {
        localVarQueryParameter["type"] = type;
      }

      if (name !== undefined) {
        localVarQueryParameter["name"] = name;
      }

      if (limit !== undefined) {
        localVarQueryParameter["limit"] = limit;
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary 查詢系統參數
     * @param {string} [id] Key系統自動產生
     * @param {string} [type] 對應使用元件資訊
     * @param {string} [value] 對應數值
     * @param {string} [name] 顯示資訊
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getConfig: async (
      id?: string,
      type?: string,
      value?: string,
      name?: string,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/systemConfig/config`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: "GET", ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication Example-id-1 required
      await setApiKeyToObject(localVarHeaderParameter, "Example-id-1", configuration);

      // authentication JWT_Authorization required
      await setApiKeyToObject(localVarHeaderParameter, "authorization", configuration);

      // authentication example-id-2 required
      await setApiKeyToObject(localVarHeaderParameter, "example-id-2", configuration);

      if (id !== undefined) {
        localVarQueryParameter["id"] = id;
      }

      if (type !== undefined) {
        localVarQueryParameter["type"] = type;
      }

      if (value !== undefined) {
        localVarQueryParameter["value"] = value;
      }

      if (name !== undefined) {
        localVarQueryParameter["name"] = name;
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * SystemConfigApi - functional programming interface
 * @export
 */
export const SystemConfigApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = SystemConfigApiAxiosParamCreator(configuration);
  return {
    /**
     *
     * @summary 查詢所有的系統參數
     * @param {string} [type]
     * @param {string} [name]
     * @param {number} [limit]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async findConfig(
      type?: string,
      name?: string,
      limit?: number,
      options?: AxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<SystemConfigViewListApiResponse>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.findConfig(type, name, limit, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     *
     * @summary 會友所屬堂點清單
     * @param {string} [type]
     * @param {string} [name]
     * @param {number} [limit]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async findConfigOfChurch(
      type?: string,
      name?: string,
      limit?: number,
      options?: AxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<SystemConfigViewListApiResponse>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.findConfigOfChurch(type, name, limit, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     *
     * @summary 查詢系統參數
     * @param {string} [id] Key系統自動產生
     * @param {string} [type] 對應使用元件資訊
     * @param {string} [value] 對應數值
     * @param {string} [name] 顯示資訊
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getConfig(
      id?: string,
      type?: string,
      value?: string,
      name?: string,
      options?: AxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<FindConfigResponseApiResponse>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getConfig(id, type, value, name, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
  };
};

/**
 * SystemConfigApi - factory interface
 * @export
 */
export const SystemConfigApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance
) {
  const localVarFp = SystemConfigApiFp(configuration);
  return {
    /**
     *
     * @summary 查詢所有的系統參數
     * @param {string} [type]
     * @param {string} [name]
     * @param {number} [limit]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    findConfig(type?: string, name?: string, limit?: number, options?: any): Promise<SystemConfigViewListApiResponse> {
      return localVarFp.findConfig(type, name, limit, options).then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary 會友所屬堂點清單
     * @param {string} [type]
     * @param {string} [name]
     * @param {number} [limit]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    findConfigOfChurch(
      type?: string,
      name?: string,
      limit?: number,
      options?: any
    ): Promise<SystemConfigViewListApiResponse> {
      return localVarFp.findConfigOfChurch(type, name, limit, options).then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary 查詢系統參數
     * @param {string} [id] Key系統自動產生
     * @param {string} [type] 對應使用元件資訊
     * @param {string} [value] 對應數值
     * @param {string} [name] 顯示資訊
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getConfig(
      id?: string,
      type?: string,
      value?: string,
      name?: string,
      options?: any
    ): Promise<FindConfigResponseApiResponse> {
      return localVarFp.getConfig(id, type, value, name, options).then((request) => request(axios, basePath));
    },
  };
};

/**
 * SystemConfigApi - interface
 * @export
 * @interface SystemConfigApi
 */
export interface SystemConfigApiInterface {
  /**
   *
   * @summary 查詢所有的系統參數
   * @param {string} [type]
   * @param {string} [name]
   * @param {number} [limit]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof SystemConfigApiInterface
   */
  findConfig(
    type?: string,
    name?: string,
    limit?: number,
    options?: AxiosRequestConfig
  ): Promise<SystemConfigViewListApiResponse>;

  /**
   *
   * @summary 會友所屬堂點清單
   * @param {string} [type]
   * @param {string} [name]
   * @param {number} [limit]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof SystemConfigApiInterface
   */
  findConfigOfChurch(
    type?: string,
    name?: string,
    limit?: number,
    options?: AxiosRequestConfig
  ): Promise<SystemConfigViewListApiResponse>;

  /**
   *
   * @summary 查詢系統參數
   * @param {string} [id] Key系統自動產生
   * @param {string} [type] 對應使用元件資訊
   * @param {string} [value] 對應數值
   * @param {string} [name] 顯示資訊
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof SystemConfigApiInterface
   */
  getConfig(
    id?: string,
    type?: string,
    value?: string,
    name?: string,
    options?: AxiosRequestConfig
  ): Promise<FindConfigResponseApiResponse>;
}

/**
 * SystemConfigApi - object-oriented interface
 * @export
 * @class SystemConfigApi
 * @extends {BaseAPI}
 */
export class SystemConfigApi extends BaseAPI implements SystemConfigApiInterface {
  /**
   *
   * @summary 查詢所有的系統參數
   * @param {string} [type]
   * @param {string} [name]
   * @param {number} [limit]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof SystemConfigApi
   */
  public findConfig(type?: string, name?: string, limit?: number, options?: AxiosRequestConfig) {
    return SystemConfigApiFp(this.configuration)
      .findConfig(type, name, limit, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary 會友所屬堂點清單
   * @param {string} [type]
   * @param {string} [name]
   * @param {number} [limit]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof SystemConfigApi
   */
  public findConfigOfChurch(type?: string, name?: string, limit?: number, options?: AxiosRequestConfig) {
    return SystemConfigApiFp(this.configuration)
      .findConfigOfChurch(type, name, limit, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary 查詢系統參數
   * @param {string} [id] Key系統自動產生
   * @param {string} [type] 對應使用元件資訊
   * @param {string} [value] 對應數值
   * @param {string} [name] 顯示資訊
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof SystemConfigApi
   */
  public getConfig(id?: string, type?: string, value?: string, name?: string, options?: AxiosRequestConfig) {
    return SystemConfigApiFp(this.configuration)
      .getConfig(id, type, value, name, options)
      .then((request) => request(this.axios, this.basePath));
  }
}

/**
 * TeacherApi - axios parameter creator
 * @export
 */
export const TeacherApiAxiosParamCreator = function (configuration?: Configuration) {
  return {
    /**
     *
     * @summary 查詢講師主檔
     * @param {FetchAllTeacherRequest} [fetchAllTeacherRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    fetchTeachers: async (
      fetchAllTeacherRequest?: FetchAllTeacherRequest,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/teacher/fetch`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: "POST", ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication Example-id-1 required
      await setApiKeyToObject(localVarHeaderParameter, "Example-id-1", configuration);

      // authentication JWT_Authorization required
      await setApiKeyToObject(localVarHeaderParameter, "authorization", configuration);

      // authentication example-id-2 required
      await setApiKeyToObject(localVarHeaderParameter, "example-id-2", configuration);

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      localVarRequestOptions.data = serializeDataIfNeeded(
        fetchAllTeacherRequest,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary 以 Id 查詢列表
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getTeacher: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists("getTeacher", "id", id);
      const localVarPath = `/api/teacher/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(id)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: "GET", ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication Example-id-1 required
      await setApiKeyToObject(localVarHeaderParameter, "Example-id-1", configuration);

      // authentication JWT_Authorization required
      await setApiKeyToObject(localVarHeaderParameter, "authorization", configuration);

      // authentication example-id-2 required
      await setApiKeyToObject(localVarHeaderParameter, "example-id-2", configuration);

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary 查詢列表  (*dynamic sort support)
     * @param {QueryTeacherRequest} [queryTeacherRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    queryTeachers: async (
      queryTeacherRequest?: QueryTeacherRequest,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/teacher/query`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: "POST", ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication Example-id-1 required
      await setApiKeyToObject(localVarHeaderParameter, "Example-id-1", configuration);

      // authentication JWT_Authorization required
      await setApiKeyToObject(localVarHeaderParameter, "authorization", configuration);

      // authentication example-id-2 required
      await setApiKeyToObject(localVarHeaderParameter, "example-id-2", configuration);

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      localVarRequestOptions.data = serializeDataIfNeeded(queryTeacherRequest, localVarRequestOptions, configuration);

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * TeacherApi - functional programming interface
 * @export
 */
export const TeacherApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = TeacherApiAxiosParamCreator(configuration);
  return {
    /**
     *
     * @summary 查詢講師主檔
     * @param {FetchAllTeacherRequest} [fetchAllTeacherRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async fetchTeachers(
      fetchAllTeacherRequest?: FetchAllTeacherRequest,
      options?: AxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<UserViewListApiResponse>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.fetchTeachers(fetchAllTeacherRequest, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     *
     * @summary 以 Id 查詢列表
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getTeacher(
      id: number,
      options?: AxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<UserViewApiResponse>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getTeacher(id, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     *
     * @summary 查詢列表  (*dynamic sort support)
     * @param {QueryTeacherRequest} [queryTeacherRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async queryTeachers(
      queryTeacherRequest?: QueryTeacherRequest,
      options?: AxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<UserViewPageApiResponse>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.queryTeachers(queryTeacherRequest, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
  };
};

/**
 * TeacherApi - factory interface
 * @export
 */
export const TeacherApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
  const localVarFp = TeacherApiFp(configuration);
  return {
    /**
     *
     * @summary 查詢講師主檔
     * @param {FetchAllTeacherRequest} [fetchAllTeacherRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    fetchTeachers(fetchAllTeacherRequest?: FetchAllTeacherRequest, options?: any): Promise<UserViewListApiResponse> {
      return localVarFp.fetchTeachers(fetchAllTeacherRequest, options).then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary 以 Id 查詢列表
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getTeacher(id: number, options?: any): Promise<UserViewApiResponse> {
      return localVarFp.getTeacher(id, options).then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary 查詢列表  (*dynamic sort support)
     * @param {QueryTeacherRequest} [queryTeacherRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    queryTeachers(queryTeacherRequest?: QueryTeacherRequest, options?: any): Promise<UserViewPageApiResponse> {
      return localVarFp.queryTeachers(queryTeacherRequest, options).then((request) => request(axios, basePath));
    },
  };
};

/**
 * TeacherApi - interface
 * @export
 * @interface TeacherApi
 */
export interface TeacherApiInterface {
  /**
   *
   * @summary 查詢講師主檔
   * @param {FetchAllTeacherRequest} [fetchAllTeacherRequest]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof TeacherApiInterface
   */
  fetchTeachers(
    fetchAllTeacherRequest?: FetchAllTeacherRequest,
    options?: AxiosRequestConfig
  ): Promise<UserViewListApiResponse>;

  /**
   *
   * @summary 以 Id 查詢列表
   * @param {number} id
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof TeacherApiInterface
   */
  getTeacher(id: number, options?: AxiosRequestConfig): Promise<UserViewApiResponse>;

  /**
   *
   * @summary 查詢列表  (*dynamic sort support)
   * @param {QueryTeacherRequest} [queryTeacherRequest]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof TeacherApiInterface
   */
  queryTeachers(
    queryTeacherRequest?: QueryTeacherRequest,
    options?: AxiosRequestConfig
  ): Promise<UserViewPageApiResponse>;
}

/**
 * TeacherApi - object-oriented interface
 * @export
 * @class TeacherApi
 * @extends {BaseAPI}
 */
export class TeacherApi extends BaseAPI implements TeacherApiInterface {
  /**
   *
   * @summary 查詢講師主檔
   * @param {FetchAllTeacherRequest} [fetchAllTeacherRequest]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof TeacherApi
   */
  public fetchTeachers(fetchAllTeacherRequest?: FetchAllTeacherRequest, options?: AxiosRequestConfig) {
    return TeacherApiFp(this.configuration)
      .fetchTeachers(fetchAllTeacherRequest, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary 以 Id 查詢列表
   * @param {number} id
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof TeacherApi
   */
  public getTeacher(id: number, options?: AxiosRequestConfig) {
    return TeacherApiFp(this.configuration)
      .getTeacher(id, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary 查詢列表  (*dynamic sort support)
   * @param {QueryTeacherRequest} [queryTeacherRequest]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof TeacherApi
   */
  public queryTeachers(queryTeacherRequest?: QueryTeacherRequest, options?: AxiosRequestConfig) {
    return TeacherApiFp(this.configuration)
      .queryTeachers(queryTeacherRequest, options)
      .then((request) => request(this.axios, this.basePath));
  }
}

/**
 * TestApi - axios parameter creator
 * @export
 */
export const TestApiAxiosParamCreator = function (configuration?: Configuration) {
  return {
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    index: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
      const localVarPath = `/api/test`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: "GET", ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication Example-id-1 required
      await setApiKeyToObject(localVarHeaderParameter, "Example-id-1", configuration);

      // authentication JWT_Authorization required
      await setApiKeyToObject(localVarHeaderParameter, "authorization", configuration);

      // authentication example-id-2 required
      await setApiKeyToObject(localVarHeaderParameter, "example-id-2", configuration);

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * TestApi - functional programming interface
 * @export
 */
export const TestApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = TestApiAxiosParamCreator(configuration);
  return {
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async index(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<void>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.index(options);
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
  };
};

/**
 * TestApi - factory interface
 * @export
 */
export const TestApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
  const localVarFp = TestApiFp(configuration);
  return {
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    index(options?: any): Promise<void> {
      return localVarFp.index(options).then((request) => request(axios, basePath));
    },
  };
};

/**
 * TestApi - interface
 * @export
 * @interface TestApi
 */
export interface TestApiInterface {
  /**
   *
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof TestApiInterface
   */
  index(options?: AxiosRequestConfig): Promise<void>;
}

/**
 * TestApi - object-oriented interface
 * @export
 * @class TestApi
 * @extends {BaseAPI}
 */
export class TestApi extends BaseAPI implements TestApiInterface {
  /**
   *
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof TestApi
   */
  public index(options?: AxiosRequestConfig) {
    return TestApiFp(this.configuration)
      .index(options)
      .then((request) => request(this.axios, this.basePath));
  }
}

/**
 * UserApi - axios parameter creator
 * @export
 */
export const UserApiAxiosParamCreator = function (configuration?: Configuration) {
  return {
    /**
     *
     * @summary 查詢會員列表  (*dynamic sort support)
     * @param {QueryUserRequest} [queryUserRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    anonymousQueryUsers: async (
      queryUserRequest?: QueryUserRequest,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/user/query/anonymous`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: "POST", ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication Example-id-1 required
      await setApiKeyToObject(localVarHeaderParameter, "Example-id-1", configuration);

      // authentication JWT_Authorization required
      await setApiKeyToObject(localVarHeaderParameter, "authorization", configuration);

      // authentication example-id-2 required
      await setApiKeyToObject(localVarHeaderParameter, "example-id-2", configuration);

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      localVarRequestOptions.data = serializeDataIfNeeded(queryUserRequest, localVarRequestOptions, configuration);

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary 忘記帳號=>前端輸入Email=>後端驗證=>發MAIL給客戶 Get user/emailaccount
     * @param {string} [email] Email
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    emailAccount: async (email?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
      const localVarPath = `/api/user/emailaccount`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: "GET", ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication Example-id-1 required
      await setApiKeyToObject(localVarHeaderParameter, "Example-id-1", configuration);

      // authentication JWT_Authorization required
      await setApiKeyToObject(localVarHeaderParameter, "authorization", configuration);

      // authentication example-id-2 required
      await setApiKeyToObject(localVarHeaderParameter, "example-id-2", configuration);

      if (email !== undefined) {
        localVarQueryParameter["email"] = email;
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary 忘記密碼=>前端輸入Email=>後端驗證=>發MAIL給客戶 Get user/emailpassword
     * @param {string} [email] Email
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    emailPassword: async (email?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
      const localVarPath = `/api/user/emailpassword`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: "GET", ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication Example-id-1 required
      await setApiKeyToObject(localVarHeaderParameter, "Example-id-1", configuration);

      // authentication JWT_Authorization required
      await setApiKeyToObject(localVarHeaderParameter, "authorization", configuration);

      // authentication example-id-2 required
      await setApiKeyToObject(localVarHeaderParameter, "example-id-2", configuration);

      if (email !== undefined) {
        localVarQueryParameter["email"] = email;
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary 尋找帳號 輸入EMail
     * @param {string} [email] Email
     * @param {string} [mobileNo] 手機號碼
     * @param {string} [userName] aspnet_Users.UserName
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    findAccount: async (
      email?: string,
      mobileNo?: string,
      userName?: string,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/user/account`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: "GET", ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication Example-id-1 required
      await setApiKeyToObject(localVarHeaderParameter, "Example-id-1", configuration);

      // authentication JWT_Authorization required
      await setApiKeyToObject(localVarHeaderParameter, "authorization", configuration);

      // authentication example-id-2 required
      await setApiKeyToObject(localVarHeaderParameter, "example-id-2", configuration);

      if (email !== undefined) {
        localVarQueryParameter["email"] = email;
      }

      if (mobileNo !== undefined) {
        localVarQueryParameter["mobileNo"] = mobileNo;
      }

      if (userName !== undefined) {
        localVarQueryParameter["userName"] = userName;
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary 查詢會員列表
     * @param {number} [id] 使用者主檔
     * @param {string} [userId] aspnet_Membership.UserId
     * @param {number} [pastoralId] 所屬牧區id &#x3D;&gt;對應牧區身分類別
     * @param {string} [phoneType] 手機類型 對應SystemConfigtype&#x3D;PhoneType顯示 namevalue存此欄位0：家長手機1：小孩手機
     * @param {string} [firstName] 姓
     * @param {string} [lastName] 名
     * @param {string} [genderType] 性別 對應SystemConfigtype&#x3D;GenderType顯示 namevalue存此欄位0：女姓1：男性
     * @param {string} [liveCountry] 居住國家
     * @param {string} [birthday] 生日
     * @param {string} [idNumber] 身分證字號
     * @param {string} [cellPhone] 手機門號
     * @param {string} [liveCity] 城市
     * @param {string} [liveZipCode] 郵遞區號
     * @param {string} [liveZipArea] 地區
     * @param {string} [liveAddress] 詳細地址
     * @param {string} [liveAddress2] 地址2
     * @param {string} [churchType] 教會類別 對SystemConfigtype&#x3D;ChurchType顯示 namevalue存此欄位0：其他1：旌旗教會
     * @param {string} [anotherChurchName] 過去在哪個教會名稱
     * @param {string} [phone] 電話(市話)
     * @param {string} [cellPhone1] 電話(手機)
     * @param {string} [cellPhone2] 電話(手機2)
     * @param {string} [email1] Email(主要)
     * @param {string} [email2] Email(次要)
     * @param {string} [appIDType] APP 對應SystemConfigtype&#x3D;AppIDType顯示 namevalue存此欄位0：無1：LINE2：Instagram3：WeChat4：其他5：無
     * @param {string} [lineId] LINEId
     * @param {string} [instagramId] InstagramId
     * @param {string} [weChatId] WeChatId
     * @param {string} [otherSocialId] 其他APPId
     * @param {string} [isChurchGroup] 是否在旌旗小組對應SystemConfigtype&#x3D;IsYN顯示 namevalue存此欄位0：N1：Y
     * @param {string} [churchGroupNo]
     * @param {string} [isJoinChurchGroup] 是否願意加入旌旗小組對應SystemConfigtype&#x3D;IsYN顯示 namevalue存此欄位0：N1：Y
     * @param {string} [joinInPersonDate1] 志願序1 實體 星期對應SystemConfigtype&#x3D;JoinDate顯示 namevalue存此欄位1：星期一2：星期二3：星期三4：星期四5：星期五6：星期六7：星期日
     * @param {string} [joinInPersonTime1] 志願序1 實體 時間type&#x3D;JoinTime顯示 namevalue存此欄位1：上午2：下午
     * @param {string} [joinInPersonLocation1] 志願序1 實體 時間type&#x3D;JoinLocation顯示 namevalue存此欄位1：堂點
     * @param {string} [joinInPersonDate2] 志願序2 實體 星期對應SystemConfigtype&#x3D;JoinDate顯示 namevalue存此欄位1：星期一2：星期二3：星期三4：星期四5：星期五6：星期六7：星期日
     * @param {string} [joinInPersonTime2] 志願序2 實體 時間type&#x3D;JoinTime顯示 namevalue存此欄位1：上午2：下午
     * @param {string} [joinInPersonLocation2] 志願序2 實體 時間type&#x3D;JoinLocation顯示 namevalue存此欄位1：堂點
     * @param {string} [joinInPersonDate3] 志願序3 實體 星期對應SystemConfigtype&#x3D;JoinDate顯示 namevalue存此欄位1：星期一2：星期二3：星期三4：星期四5：星期五6：星期六7：星期日
     * @param {string} [joinInPersonTime3] 志願序3實體 時間type&#x3D;JoinTime顯示 namevalue存此欄位1：上午2：下午
     * @param {string} [joinInPersonLocation3] 志願序3 實體 時間type&#x3D;JoinLocation顯示 namevalue存此欄位1：堂點
     * @param {string} [joinOnlineDate1] 志願序1 線上 星期對應SystemConfigtype&#x3D;JoinDate顯示 namevalue存此欄位1：星期一2：星期二3：星期三4：星期四5：星期五6：星期六7：星期日
     * @param {string} [joinOnlineTime1] 志願序1 線上 時間type&#x3D;JoinTime顯示 namevalue存此欄位1：上午2：下午
     * @param {string} [joinOnlineDate2] 志願序2 線上 星期對應SystemConfigtype&#x3D;JoinDate顯示 namevalue存此欄位1：星期一2：星期二3：星期三4：星期四5：星期五6：星期六7：星期日
     * @param {string} [joinOnlineTime2] 志願序2 線上 時間type&#x3D;JoinTime顯示 namevalue存此欄位1：上午2：下午
     * @param {string} [joinOnlineDate3] 志願序3 線上 星期對應SystemConfigtype&#x3D;JoinDate顯示 namevalue存此欄位1：星期一2：星期二3：星期三4：星期四5：星期五6：星期六7：星期日
     * @param {string} [joinOnlineTime3] 志願序3 線上 時間type&#x3D;JoinTime顯示 namevalue存此欄位1：上午2：下午
     * @param {string} [memberType] 會員類別type&#x3D;MemberType顯示 namevalue存此欄位0：一般會員1：會友 2：講師
     * @param {string} [eduType] 教育程度type&#x3D;EduType顯示 namevalue存此欄位0：小學1：國中…..
     * @param {string} [professionType] 職業type&#x3D;EduType顯示 namevalue存此欄位0：老師1：家管…..
     * @param {string} [isMarried] 是否結婚對應SystemConfigtype&#x3D;IsMarried顯示 namevalue存此欄位0：未婚1：已婚
     * @param {string} [parentUserId] 家長Id
     * @param {string} [countryCode] 國家代碼
     * @param {string} [isOldMember] 是否舊會員 Y是N否
     * @param {string} [password] 密碼
     * @param {string} [passwordsalt] 令牌
     * @param {boolean} [isAdult]
     * @param {string} [lowIncome] 中低收入戶 IsYN 0:否 1:是
     * @param {string} [name] 姓名
     * @param {string} [username] 帳號
     * @param {string} [userNo] 帳號
     * @param {number} [meetingPointId] 聚會點Id
     * @param {string} [remark] 備註欄位
     * @param {string} [baptizedType] 受洗 對應SystemConfig type&#x3D;BaptizedType顯示 namevalue存此欄位0：未受洗1：已受洗2：其它
     * @param {number} [organizationId] Organization.Id
     * @param {Array<SortProperty>} [sortProperties] 查詢欄位排序
     * @param {number} [page] 目前頁數
     * @param {number} [size] 每頁筆數
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    findUsers: async (
      id?: number,
      userId?: string,
      pastoralId?: number,
      phoneType?: string,
      firstName?: string,
      lastName?: string,
      genderType?: string,
      liveCountry?: string,
      birthday?: string,
      idNumber?: string,
      cellPhone?: string,
      liveCity?: string,
      liveZipCode?: string,
      liveZipArea?: string,
      liveAddress?: string,
      liveAddress2?: string,
      churchType?: string,
      anotherChurchName?: string,
      phone?: string,
      cellPhone1?: string,
      cellPhone2?: string,
      email1?: string,
      email2?: string,
      appIDType?: string,
      lineId?: string,
      instagramId?: string,
      weChatId?: string,
      otherSocialId?: string,
      isChurchGroup?: string,
      churchGroupNo?: string,
      isJoinChurchGroup?: string,
      joinInPersonDate1?: string,
      joinInPersonTime1?: string,
      joinInPersonLocation1?: string,
      joinInPersonDate2?: string,
      joinInPersonTime2?: string,
      joinInPersonLocation2?: string,
      joinInPersonDate3?: string,
      joinInPersonTime3?: string,
      joinInPersonLocation3?: string,
      joinOnlineDate1?: string,
      joinOnlineTime1?: string,
      joinOnlineDate2?: string,
      joinOnlineTime2?: string,
      joinOnlineDate3?: string,
      joinOnlineTime3?: string,
      memberType?: string,
      eduType?: string,
      professionType?: string,
      isMarried?: string,
      parentUserId?: string,
      countryCode?: string,
      isOldMember?: string,
      password?: string,
      passwordsalt?: string,
      isAdult?: boolean,
      lowIncome?: string,
      name?: string,
      username?: string,
      userNo?: string,
      meetingPointId?: number,
      remark?: string,
      baptizedType?: string,
      organizationId?: number,
      sortProperties?: Array<SortProperty>,
      page?: number,
      size?: number,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/user`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: "GET", ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication Example-id-1 required
      await setApiKeyToObject(localVarHeaderParameter, "Example-id-1", configuration);

      // authentication JWT_Authorization required
      await setApiKeyToObject(localVarHeaderParameter, "authorization", configuration);

      // authentication example-id-2 required
      await setApiKeyToObject(localVarHeaderParameter, "example-id-2", configuration);

      if (id !== undefined) {
        localVarQueryParameter["id"] = id;
      }

      if (userId !== undefined) {
        localVarQueryParameter["userId"] = userId;
      }

      if (pastoralId !== undefined) {
        localVarQueryParameter["pastoralId"] = pastoralId;
      }

      if (phoneType !== undefined) {
        localVarQueryParameter["phoneType"] = phoneType;
      }

      if (firstName !== undefined) {
        localVarQueryParameter["firstName"] = firstName;
      }

      if (lastName !== undefined) {
        localVarQueryParameter["lastName"] = lastName;
      }

      if (genderType !== undefined) {
        localVarQueryParameter["genderType"] = genderType;
      }

      if (liveCountry !== undefined) {
        localVarQueryParameter["liveCountry"] = liveCountry;
      }

      if (birthday !== undefined) {
        localVarQueryParameter["birthday"] =
          (birthday as any) instanceof Date ? (birthday as any).toISOString() : birthday;
      }

      if (idNumber !== undefined) {
        localVarQueryParameter["idNumber"] = idNumber;
      }

      if (cellPhone !== undefined) {
        localVarQueryParameter["cellPhone"] = cellPhone;
      }

      if (liveCity !== undefined) {
        localVarQueryParameter["liveCity"] = liveCity;
      }

      if (liveZipCode !== undefined) {
        localVarQueryParameter["liveZipCode"] = liveZipCode;
      }

      if (liveZipArea !== undefined) {
        localVarQueryParameter["liveZipArea"] = liveZipArea;
      }

      if (liveAddress !== undefined) {
        localVarQueryParameter["liveAddress"] = liveAddress;
      }

      if (liveAddress2 !== undefined) {
        localVarQueryParameter["liveAddress2"] = liveAddress2;
      }

      if (churchType !== undefined) {
        localVarQueryParameter["churchType"] = churchType;
      }

      if (anotherChurchName !== undefined) {
        localVarQueryParameter["anotherChurchName"] = anotherChurchName;
      }

      if (phone !== undefined) {
        localVarQueryParameter["phone"] = phone;
      }

      if (cellPhone1 !== undefined) {
        localVarQueryParameter["cellPhone1"] = cellPhone1;
      }

      if (cellPhone2 !== undefined) {
        localVarQueryParameter["cellPhone2"] = cellPhone2;
      }

      if (email1 !== undefined) {
        localVarQueryParameter["email1"] = email1;
      }

      if (email2 !== undefined) {
        localVarQueryParameter["email2"] = email2;
      }

      if (appIDType !== undefined) {
        localVarQueryParameter["appIDType"] = appIDType;
      }

      if (lineId !== undefined) {
        localVarQueryParameter["lineId"] = lineId;
      }

      if (instagramId !== undefined) {
        localVarQueryParameter["instagramId"] = instagramId;
      }

      if (weChatId !== undefined) {
        localVarQueryParameter["weChatId"] = weChatId;
      }

      if (otherSocialId !== undefined) {
        localVarQueryParameter["otherSocialId"] = otherSocialId;
      }

      if (isChurchGroup !== undefined) {
        localVarQueryParameter["isChurchGroup"] = isChurchGroup;
      }

      if (churchGroupNo !== undefined) {
        localVarQueryParameter["churchGroupNo"] = churchGroupNo;
      }

      if (isJoinChurchGroup !== undefined) {
        localVarQueryParameter["isJoinChurchGroup"] = isJoinChurchGroup;
      }

      if (joinInPersonDate1 !== undefined) {
        localVarQueryParameter["joinInPersonDate1"] = joinInPersonDate1;
      }

      if (joinInPersonTime1 !== undefined) {
        localVarQueryParameter["joinInPersonTime1"] = joinInPersonTime1;
      }

      if (joinInPersonLocation1 !== undefined) {
        localVarQueryParameter["joinInPersonLocation1"] = joinInPersonLocation1;
      }

      if (joinInPersonDate2 !== undefined) {
        localVarQueryParameter["joinInPersonDate2"] = joinInPersonDate2;
      }

      if (joinInPersonTime2 !== undefined) {
        localVarQueryParameter["joinInPersonTime2"] = joinInPersonTime2;
      }

      if (joinInPersonLocation2 !== undefined) {
        localVarQueryParameter["joinInPersonLocation2"] = joinInPersonLocation2;
      }

      if (joinInPersonDate3 !== undefined) {
        localVarQueryParameter["joinInPersonDate3"] = joinInPersonDate3;
      }

      if (joinInPersonTime3 !== undefined) {
        localVarQueryParameter["joinInPersonTime3"] = joinInPersonTime3;
      }

      if (joinInPersonLocation3 !== undefined) {
        localVarQueryParameter["joinInPersonLocation3"] = joinInPersonLocation3;
      }

      if (joinOnlineDate1 !== undefined) {
        localVarQueryParameter["joinOnlineDate1"] = joinOnlineDate1;
      }

      if (joinOnlineTime1 !== undefined) {
        localVarQueryParameter["joinOnlineTime1"] = joinOnlineTime1;
      }

      if (joinOnlineDate2 !== undefined) {
        localVarQueryParameter["joinOnlineDate2"] = joinOnlineDate2;
      }

      if (joinOnlineTime2 !== undefined) {
        localVarQueryParameter["joinOnlineTime2"] = joinOnlineTime2;
      }

      if (joinOnlineDate3 !== undefined) {
        localVarQueryParameter["joinOnlineDate3"] = joinOnlineDate3;
      }

      if (joinOnlineTime3 !== undefined) {
        localVarQueryParameter["joinOnlineTime3"] = joinOnlineTime3;
      }

      if (memberType !== undefined) {
        localVarQueryParameter["memberType"] = memberType;
      }

      if (eduType !== undefined) {
        localVarQueryParameter["eduType"] = eduType;
      }

      if (professionType !== undefined) {
        localVarQueryParameter["professionType"] = professionType;
      }

      if (isMarried !== undefined) {
        localVarQueryParameter["isMarried"] = isMarried;
      }

      if (parentUserId !== undefined) {
        localVarQueryParameter["parentUserId"] = parentUserId;
      }

      if (countryCode !== undefined) {
        localVarQueryParameter["countryCode"] = countryCode;
      }

      if (isOldMember !== undefined) {
        localVarQueryParameter["isOldMember"] = isOldMember;
      }

      if (password !== undefined) {
        localVarQueryParameter["password"] = password;
      }

      if (passwordsalt !== undefined) {
        localVarQueryParameter["passwordsalt"] = passwordsalt;
      }

      if (isAdult !== undefined) {
        localVarQueryParameter["isAdult"] = isAdult;
      }

      if (lowIncome !== undefined) {
        localVarQueryParameter["lowIncome"] = lowIncome;
      }

      if (name !== undefined) {
        localVarQueryParameter["name"] = name;
      }

      if (username !== undefined) {
        localVarQueryParameter["username"] = username;
      }

      if (userNo !== undefined) {
        localVarQueryParameter["userNo"] = userNo;
      }

      if (meetingPointId !== undefined) {
        localVarQueryParameter["meetingPointId"] = meetingPointId;
      }

      if (remark !== undefined) {
        localVarQueryParameter["remark"] = remark;
      }

      if (baptizedType !== undefined) {
        localVarQueryParameter["baptizedType"] = baptizedType;
      }

      if (organizationId !== undefined) {
        localVarQueryParameter["organizationId"] = organizationId;
      }

      if (sortProperties) {
        localVarQueryParameter["sortProperties"] = sortProperties;
      }

      if (page !== undefined) {
        localVarQueryParameter["page"] = page;
      }

      if (size !== undefined) {
        localVarQueryParameter["size"] = size;
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary 以 Id 查詢用戶資料
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getUser: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists("getUser", "id", id);
      const localVarPath = `/api/user/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(id)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: "GET", ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication Example-id-1 required
      await setApiKeyToObject(localVarHeaderParameter, "Example-id-1", configuration);

      // authentication JWT_Authorization required
      await setApiKeyToObject(localVarHeaderParameter, "authorization", configuration);

      // authentication example-id-2 required
      await setApiKeyToObject(localVarHeaderParameter, "example-id-2", configuration);

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary 取得驗證碼
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getVerificationCode: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
      const localVarPath = `/api/user/verification/code`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: "GET", ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication Example-id-1 required
      await setApiKeyToObject(localVarHeaderParameter, "Example-id-1", configuration);

      // authentication JWT_Authorization required
      await setApiKeyToObject(localVarHeaderParameter, "authorization", configuration);

      // authentication example-id-2 required
      await setApiKeyToObject(localVarHeaderParameter, "example-id-2", configuration);

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary 忘記密碼=>前端輸入Phone=>後端驗證=>發SMS給客戶  Get user/smspassword
     * @param {string} [phone] Phone
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    phonePassword: async (phone?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
      const localVarPath = `/api/user/smspassword`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: "GET", ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication Example-id-1 required
      await setApiKeyToObject(localVarHeaderParameter, "Example-id-1", configuration);

      // authentication JWT_Authorization required
      await setApiKeyToObject(localVarHeaderParameter, "authorization", configuration);

      // authentication example-id-2 required
      await setApiKeyToObject(localVarHeaderParameter, "example-id-2", configuration);

      if (phone !== undefined) {
        localVarQueryParameter["phone"] = phone;
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {QueryUserPrivilegeRequest} [queryUserPrivilegeRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    queryUserPrivilege: async (
      queryUserPrivilegeRequest?: QueryUserPrivilegeRequest,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/user/userprivilege`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: "POST", ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication Example-id-1 required
      await setApiKeyToObject(localVarHeaderParameter, "Example-id-1", configuration);

      // authentication JWT_Authorization required
      await setApiKeyToObject(localVarHeaderParameter, "authorization", configuration);

      // authentication example-id-2 required
      await setApiKeyToObject(localVarHeaderParameter, "example-id-2", configuration);

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      localVarRequestOptions.data = serializeDataIfNeeded(
        queryUserPrivilegeRequest,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary 查詢會員列表  (*dynamic sort support)
     * @param {QueryUserRequest} [queryUserRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    queryUsers: async (queryUserRequest?: QueryUserRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
      const localVarPath = `/api/user/query`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: "POST", ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication Example-id-1 required
      await setApiKeyToObject(localVarHeaderParameter, "Example-id-1", configuration);

      // authentication JWT_Authorization required
      await setApiKeyToObject(localVarHeaderParameter, "authorization", configuration);

      // authentication example-id-2 required
      await setApiKeyToObject(localVarHeaderParameter, "example-id-2", configuration);

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      localVarRequestOptions.data = serializeDataIfNeeded(queryUserRequest, localVarRequestOptions, configuration);

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary 刪除主檔
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    removeUser: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists("removeUser", "id", id);
      const localVarPath = `/api/user/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(id)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: "DELETE", ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication Example-id-1 required
      await setApiKeyToObject(localVarHeaderParameter, "Example-id-1", configuration);

      // authentication JWT_Authorization required
      await setApiKeyToObject(localVarHeaderParameter, "authorization", configuration);

      // authentication example-id-2 required
      await setApiKeyToObject(localVarHeaderParameter, "example-id-2", configuration);

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary 使用 Email or SMS 修改密碼
     * @param {ResetPasswordCommand} [resetPasswordCommand]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    resetPassword: async (
      resetPasswordCommand?: ResetPasswordCommand,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/user/password`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: "POST", ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication Example-id-1 required
      await setApiKeyToObject(localVarHeaderParameter, "Example-id-1", configuration);

      // authentication JWT_Authorization required
      await setApiKeyToObject(localVarHeaderParameter, "authorization", configuration);

      // authentication example-id-2 required
      await setApiKeyToObject(localVarHeaderParameter, "example-id-2", configuration);

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      localVarRequestOptions.data = serializeDataIfNeeded(resetPasswordCommand, localVarRequestOptions, configuration);

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary 忘記帳號=>前端輸入電話=>後端驗證=>發SMS給客戶  Get user/smsaccount
     * @param {string} [phone] Phone
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    sMSAccount: async (phone?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
      const localVarPath = `/api/user/smsaccount`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: "GET", ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication Example-id-1 required
      await setApiKeyToObject(localVarHeaderParameter, "Example-id-1", configuration);

      // authentication JWT_Authorization required
      await setApiKeyToObject(localVarHeaderParameter, "authorization", configuration);

      // authentication example-id-2 required
      await setApiKeyToObject(localVarHeaderParameter, "example-id-2", configuration);

      if (phone !== undefined) {
        localVarQueryParameter["phone"] = phone;
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary 發送 Email/SMS 驗證碼
     * @param {SendVerificationCodeRequest} [sendVerificationCodeRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    sendVerification: async (
      sendVerificationCodeRequest?: SendVerificationCodeRequest,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/user/verification/code`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: "POST", ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication Example-id-1 required
      await setApiKeyToObject(localVarHeaderParameter, "Example-id-1", configuration);

      // authentication JWT_Authorization required
      await setApiKeyToObject(localVarHeaderParameter, "authorization", configuration);

      // authentication example-id-2 required
      await setApiKeyToObject(localVarHeaderParameter, "example-id-2", configuration);

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      localVarRequestOptions.data = serializeDataIfNeeded(
        sendVerificationCodeRequest,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary 註冊
     * @param {SignUpCommand} [signUpCommand]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    signUp: async (signUpCommand?: SignUpCommand, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
      const localVarPath = `/api/user/signup`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: "POST", ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication Example-id-1 required
      await setApiKeyToObject(localVarHeaderParameter, "Example-id-1", configuration);

      // authentication JWT_Authorization required
      await setApiKeyToObject(localVarHeaderParameter, "authorization", configuration);

      // authentication example-id-2 required
      await setApiKeyToObject(localVarHeaderParameter, "example-id-2", configuration);

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      localVarRequestOptions.data = serializeDataIfNeeded(signUpCommand, localVarRequestOptions, configuration);

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary 登入
     * @param {SignInCommand} [signInCommand]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    signin: async (signInCommand?: SignInCommand, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
      const localVarPath = `/api/user/signin`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: "POST", ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication Example-id-1 required
      await setApiKeyToObject(localVarHeaderParameter, "Example-id-1", configuration);

      // authentication JWT_Authorization required
      await setApiKeyToObject(localVarHeaderParameter, "authorization", configuration);

      // authentication example-id-2 required
      await setApiKeyToObject(localVarHeaderParameter, "example-id-2", configuration);

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      localVarRequestOptions.data = serializeDataIfNeeded(signInCommand, localVarRequestOptions, configuration);

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary 舊用戶註冊
     * @param {number} id
     * @param {SignUpCommand} [signUpCommand]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateMember: async (
      id: number,
      signUpCommand?: SignUpCommand,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists("updateMember", "id", id);
      const localVarPath = `/api/user/signup/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(id)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: "POST", ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication Example-id-1 required
      await setApiKeyToObject(localVarHeaderParameter, "Example-id-1", configuration);

      // authentication JWT_Authorization required
      await setApiKeyToObject(localVarHeaderParameter, "authorization", configuration);

      // authentication example-id-2 required
      await setApiKeyToObject(localVarHeaderParameter, "example-id-2", configuration);

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      localVarRequestOptions.data = serializeDataIfNeeded(signUpCommand, localVarRequestOptions, configuration);

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary 登入後-以 id 修改密碼
     * @param {UpdatePasswordCommand} [updatePasswordCommand]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updatePassword: async (
      updatePasswordCommand?: UpdatePasswordCommand,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/user/update/password`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: "POST", ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication Example-id-1 required
      await setApiKeyToObject(localVarHeaderParameter, "Example-id-1", configuration);

      // authentication JWT_Authorization required
      await setApiKeyToObject(localVarHeaderParameter, "authorization", configuration);

      // authentication example-id-2 required
      await setApiKeyToObject(localVarHeaderParameter, "example-id-2", configuration);

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      localVarRequestOptions.data = serializeDataIfNeeded(updatePasswordCommand, localVarRequestOptions, configuration);

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * UserApi - functional programming interface
 * @export
 */
export const UserApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = UserApiAxiosParamCreator(configuration);
  return {
    /**
     *
     * @summary 查詢會員列表  (*dynamic sort support)
     * @param {QueryUserRequest} [queryUserRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async anonymousQueryUsers(
      queryUserRequest?: QueryUserRequest,
      options?: AxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<UserViewPageApiResponse>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.anonymousQueryUsers(queryUserRequest, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     *
     * @summary 忘記帳號=>前端輸入Email=>後端驗證=>發MAIL給客戶 Get user/emailaccount
     * @param {string} [email] Email
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async emailAccount(
      email?: string,
      options?: AxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<EmailAccountResponseApiResponse>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.emailAccount(email, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     *
     * @summary 忘記密碼=>前端輸入Email=>後端驗證=>發MAIL給客戶 Get user/emailpassword
     * @param {string} [email] Email
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async emailPassword(
      email?: string,
      options?: AxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<EmailPasswordResponseApiResponse>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.emailPassword(email, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     *
     * @summary 尋找帳號 輸入EMail
     * @param {string} [email] Email
     * @param {string} [mobileNo] 手機號碼
     * @param {string} [userName] aspnet_Users.UserName
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async findAccount(
      email?: string,
      mobileNo?: string,
      userName?: string,
      options?: AxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<FindAccountResponseApiResponse>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.findAccount(email, mobileNo, userName, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     *
     * @summary 查詢會員列表
     * @param {number} [id] 使用者主檔
     * @param {string} [userId] aspnet_Membership.UserId
     * @param {number} [pastoralId] 所屬牧區id &#x3D;&gt;對應牧區身分類別
     * @param {string} [phoneType] 手機類型 對應SystemConfigtype&#x3D;PhoneType顯示 namevalue存此欄位0：家長手機1：小孩手機
     * @param {string} [firstName] 姓
     * @param {string} [lastName] 名
     * @param {string} [genderType] 性別 對應SystemConfigtype&#x3D;GenderType顯示 namevalue存此欄位0：女姓1：男性
     * @param {string} [liveCountry] 居住國家
     * @param {string} [birthday] 生日
     * @param {string} [idNumber] 身分證字號
     * @param {string} [cellPhone] 手機門號
     * @param {string} [liveCity] 城市
     * @param {string} [liveZipCode] 郵遞區號
     * @param {string} [liveZipArea] 地區
     * @param {string} [liveAddress] 詳細地址
     * @param {string} [liveAddress2] 地址2
     * @param {string} [churchType] 教會類別 對SystemConfigtype&#x3D;ChurchType顯示 namevalue存此欄位0：其他1：旌旗教會
     * @param {string} [anotherChurchName] 過去在哪個教會名稱
     * @param {string} [phone] 電話(市話)
     * @param {string} [cellPhone1] 電話(手機)
     * @param {string} [cellPhone2] 電話(手機2)
     * @param {string} [email1] Email(主要)
     * @param {string} [email2] Email(次要)
     * @param {string} [appIDType] APP 對應SystemConfigtype&#x3D;AppIDType顯示 namevalue存此欄位0：無1：LINE2：Instagram3：WeChat4：其他5：無
     * @param {string} [lineId] LINEId
     * @param {string} [instagramId] InstagramId
     * @param {string} [weChatId] WeChatId
     * @param {string} [otherSocialId] 其他APPId
     * @param {string} [isChurchGroup] 是否在旌旗小組對應SystemConfigtype&#x3D;IsYN顯示 namevalue存此欄位0：N1：Y
     * @param {string} [churchGroupNo]
     * @param {string} [isJoinChurchGroup] 是否願意加入旌旗小組對應SystemConfigtype&#x3D;IsYN顯示 namevalue存此欄位0：N1：Y
     * @param {string} [joinInPersonDate1] 志願序1 實體 星期對應SystemConfigtype&#x3D;JoinDate顯示 namevalue存此欄位1：星期一2：星期二3：星期三4：星期四5：星期五6：星期六7：星期日
     * @param {string} [joinInPersonTime1] 志願序1 實體 時間type&#x3D;JoinTime顯示 namevalue存此欄位1：上午2：下午
     * @param {string} [joinInPersonLocation1] 志願序1 實體 時間type&#x3D;JoinLocation顯示 namevalue存此欄位1：堂點
     * @param {string} [joinInPersonDate2] 志願序2 實體 星期對應SystemConfigtype&#x3D;JoinDate顯示 namevalue存此欄位1：星期一2：星期二3：星期三4：星期四5：星期五6：星期六7：星期日
     * @param {string} [joinInPersonTime2] 志願序2 實體 時間type&#x3D;JoinTime顯示 namevalue存此欄位1：上午2：下午
     * @param {string} [joinInPersonLocation2] 志願序2 實體 時間type&#x3D;JoinLocation顯示 namevalue存此欄位1：堂點
     * @param {string} [joinInPersonDate3] 志願序3 實體 星期對應SystemConfigtype&#x3D;JoinDate顯示 namevalue存此欄位1：星期一2：星期二3：星期三4：星期四5：星期五6：星期六7：星期日
     * @param {string} [joinInPersonTime3] 志願序3實體 時間type&#x3D;JoinTime顯示 namevalue存此欄位1：上午2：下午
     * @param {string} [joinInPersonLocation3] 志願序3 實體 時間type&#x3D;JoinLocation顯示 namevalue存此欄位1：堂點
     * @param {string} [joinOnlineDate1] 志願序1 線上 星期對應SystemConfigtype&#x3D;JoinDate顯示 namevalue存此欄位1：星期一2：星期二3：星期三4：星期四5：星期五6：星期六7：星期日
     * @param {string} [joinOnlineTime1] 志願序1 線上 時間type&#x3D;JoinTime顯示 namevalue存此欄位1：上午2：下午
     * @param {string} [joinOnlineDate2] 志願序2 線上 星期對應SystemConfigtype&#x3D;JoinDate顯示 namevalue存此欄位1：星期一2：星期二3：星期三4：星期四5：星期五6：星期六7：星期日
     * @param {string} [joinOnlineTime2] 志願序2 線上 時間type&#x3D;JoinTime顯示 namevalue存此欄位1：上午2：下午
     * @param {string} [joinOnlineDate3] 志願序3 線上 星期對應SystemConfigtype&#x3D;JoinDate顯示 namevalue存此欄位1：星期一2：星期二3：星期三4：星期四5：星期五6：星期六7：星期日
     * @param {string} [joinOnlineTime3] 志願序3 線上 時間type&#x3D;JoinTime顯示 namevalue存此欄位1：上午2：下午
     * @param {string} [memberType] 會員類別type&#x3D;MemberType顯示 namevalue存此欄位0：一般會員1：會友 2：講師
     * @param {string} [eduType] 教育程度type&#x3D;EduType顯示 namevalue存此欄位0：小學1：國中…..
     * @param {string} [professionType] 職業type&#x3D;EduType顯示 namevalue存此欄位0：老師1：家管…..
     * @param {string} [isMarried] 是否結婚對應SystemConfigtype&#x3D;IsMarried顯示 namevalue存此欄位0：未婚1：已婚
     * @param {string} [parentUserId] 家長Id
     * @param {string} [countryCode] 國家代碼
     * @param {string} [isOldMember] 是否舊會員 Y是N否
     * @param {string} [password] 密碼
     * @param {string} [passwordsalt] 令牌
     * @param {boolean} [isAdult]
     * @param {string} [lowIncome] 中低收入戶 IsYN 0:否 1:是
     * @param {string} [name] 姓名
     * @param {string} [username] 帳號
     * @param {string} [userNo] 帳號
     * @param {number} [meetingPointId] 聚會點Id
     * @param {string} [remark] 備註欄位
     * @param {string} [baptizedType] 受洗 對應SystemConfig type&#x3D;BaptizedType顯示 namevalue存此欄位0：未受洗1：已受洗2：其它
     * @param {number} [organizationId] Organization.Id
     * @param {Array<SortProperty>} [sortProperties] 查詢欄位排序
     * @param {number} [page] 目前頁數
     * @param {number} [size] 每頁筆數
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async findUsers(
      id?: number,
      userId?: string,
      pastoralId?: number,
      phoneType?: string,
      firstName?: string,
      lastName?: string,
      genderType?: string,
      liveCountry?: string,
      birthday?: string,
      idNumber?: string,
      cellPhone?: string,
      liveCity?: string,
      liveZipCode?: string,
      liveZipArea?: string,
      liveAddress?: string,
      liveAddress2?: string,
      churchType?: string,
      anotherChurchName?: string,
      phone?: string,
      cellPhone1?: string,
      cellPhone2?: string,
      email1?: string,
      email2?: string,
      appIDType?: string,
      lineId?: string,
      instagramId?: string,
      weChatId?: string,
      otherSocialId?: string,
      isChurchGroup?: string,
      churchGroupNo?: string,
      isJoinChurchGroup?: string,
      joinInPersonDate1?: string,
      joinInPersonTime1?: string,
      joinInPersonLocation1?: string,
      joinInPersonDate2?: string,
      joinInPersonTime2?: string,
      joinInPersonLocation2?: string,
      joinInPersonDate3?: string,
      joinInPersonTime3?: string,
      joinInPersonLocation3?: string,
      joinOnlineDate1?: string,
      joinOnlineTime1?: string,
      joinOnlineDate2?: string,
      joinOnlineTime2?: string,
      joinOnlineDate3?: string,
      joinOnlineTime3?: string,
      memberType?: string,
      eduType?: string,
      professionType?: string,
      isMarried?: string,
      parentUserId?: string,
      countryCode?: string,
      isOldMember?: string,
      password?: string,
      passwordsalt?: string,
      isAdult?: boolean,
      lowIncome?: string,
      name?: string,
      username?: string,
      userNo?: string,
      meetingPointId?: number,
      remark?: string,
      baptizedType?: string,
      organizationId?: number,
      sortProperties?: Array<SortProperty>,
      page?: number,
      size?: number,
      options?: AxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<UserViewPageApiResponse>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.findUsers(
        id,
        userId,
        pastoralId,
        phoneType,
        firstName,
        lastName,
        genderType,
        liveCountry,
        birthday,
        idNumber,
        cellPhone,
        liveCity,
        liveZipCode,
        liveZipArea,
        liveAddress,
        liveAddress2,
        churchType,
        anotherChurchName,
        phone,
        cellPhone1,
        cellPhone2,
        email1,
        email2,
        appIDType,
        lineId,
        instagramId,
        weChatId,
        otherSocialId,
        isChurchGroup,
        churchGroupNo,
        isJoinChurchGroup,
        joinInPersonDate1,
        joinInPersonTime1,
        joinInPersonLocation1,
        joinInPersonDate2,
        joinInPersonTime2,
        joinInPersonLocation2,
        joinInPersonDate3,
        joinInPersonTime3,
        joinInPersonLocation3,
        joinOnlineDate1,
        joinOnlineTime1,
        joinOnlineDate2,
        joinOnlineTime2,
        joinOnlineDate3,
        joinOnlineTime3,
        memberType,
        eduType,
        professionType,
        isMarried,
        parentUserId,
        countryCode,
        isOldMember,
        password,
        passwordsalt,
        isAdult,
        lowIncome,
        name,
        username,
        userNo,
        meetingPointId,
        remark,
        baptizedType,
        organizationId,
        sortProperties,
        page,
        size,
        options
      );
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     *
     * @summary 以 Id 查詢用戶資料
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getUser(
      id: number,
      options?: AxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<UserViewApiResponse>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getUser(id, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     *
     * @summary 取得驗證碼
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getVerificationCode(
      options?: AxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<VerificationCodeResponseApiResponse>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getVerificationCode(options);
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     *
     * @summary 忘記密碼=>前端輸入Phone=>後端驗證=>發SMS給客戶  Get user/smspassword
     * @param {string} [phone] Phone
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async phonePassword(
      phone?: string,
      options?: AxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<PhonePasswordResponseApiResponse>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.phonePassword(phone, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     *
     * @param {QueryUserPrivilegeRequest} [queryUserPrivilegeRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async queryUserPrivilege(
      queryUserPrivilegeRequest?: QueryUserPrivilegeRequest,
      options?: AxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<PrivilegeViewListApiResponse>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.queryUserPrivilege(queryUserPrivilegeRequest, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     *
     * @summary 查詢會員列表  (*dynamic sort support)
     * @param {QueryUserRequest} [queryUserRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async queryUsers(
      queryUserRequest?: QueryUserRequest,
      options?: AxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<UserViewPageApiResponse>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.queryUsers(queryUserRequest, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     *
     * @summary 刪除主檔
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async removeUser(
      id: number,
      options?: AxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<Int32ApiResponse>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.removeUser(id, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     *
     * @summary 使用 Email or SMS 修改密碼
     * @param {ResetPasswordCommand} [resetPasswordCommand]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async resetPassword(
      resetPasswordCommand?: ResetPasswordCommand,
      options?: AxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<ResetPasswordCommandResponseApiResponse>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.resetPassword(resetPasswordCommand, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     *
     * @summary 忘記帳號=>前端輸入電話=>後端驗證=>發SMS給客戶  Get user/smsaccount
     * @param {string} [phone] Phone
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async sMSAccount(
      phone?: string,
      options?: AxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<PhoneAccountResponseApiResponse>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.sMSAccount(phone, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     *
     * @summary 發送 Email/SMS 驗證碼
     * @param {SendVerificationCodeRequest} [sendVerificationCodeRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async sendVerification(
      sendVerificationCodeRequest?: SendVerificationCodeRequest,
      options?: AxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<SendVerificationCodeResponseApiResponse>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.sendVerification(sendVerificationCodeRequest, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     *
     * @summary 註冊
     * @param {SignUpCommand} [signUpCommand]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async signUp(
      signUpCommand?: SignUpCommand,
      options?: AxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<SignUpCommandResponseApiResponse>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.signUp(signUpCommand, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     *
     * @summary 登入
     * @param {SignInCommand} [signInCommand]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async signin(
      signInCommand?: SignInCommand,
      options?: AxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<SignInResponseApiResponse>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.signin(signInCommand, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     *
     * @summary 舊用戶註冊
     * @param {number} id
     * @param {SignUpCommand} [signUpCommand]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async updateMember(
      id: number,
      signUpCommand?: SignUpCommand,
      options?: AxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<SignUpCommandResponseApiResponse>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.updateMember(id, signUpCommand, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     *
     * @summary 登入後-以 id 修改密碼
     * @param {UpdatePasswordCommand} [updatePasswordCommand]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async updatePassword(
      updatePasswordCommand?: UpdatePasswordCommand,
      options?: AxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<UpdatePasswordCommandResponseApiResponse>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.updatePassword(updatePasswordCommand, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
  };
};

/**
 * UserApi - factory interface
 * @export
 */
export const UserApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
  const localVarFp = UserApiFp(configuration);
  return {
    /**
     *
     * @summary 查詢會員列表  (*dynamic sort support)
     * @param {QueryUserRequest} [queryUserRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    anonymousQueryUsers(queryUserRequest?: QueryUserRequest, options?: any): Promise<UserViewPageApiResponse> {
      return localVarFp.anonymousQueryUsers(queryUserRequest, options).then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary 忘記帳號=>前端輸入Email=>後端驗證=>發MAIL給客戶 Get user/emailaccount
     * @param {string} [email] Email
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    emailAccount(email?: string, options?: any): Promise<EmailAccountResponseApiResponse> {
      return localVarFp.emailAccount(email, options).then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary 忘記密碼=>前端輸入Email=>後端驗證=>發MAIL給客戶 Get user/emailpassword
     * @param {string} [email] Email
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    emailPassword(email?: string, options?: any): Promise<EmailPasswordResponseApiResponse> {
      return localVarFp.emailPassword(email, options).then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary 尋找帳號 輸入EMail
     * @param {string} [email] Email
     * @param {string} [mobileNo] 手機號碼
     * @param {string} [userName] aspnet_Users.UserName
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    findAccount(
      email?: string,
      mobileNo?: string,
      userName?: string,
      options?: any
    ): Promise<FindAccountResponseApiResponse> {
      return localVarFp.findAccount(email, mobileNo, userName, options).then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary 查詢會員列表
     * @param {number} [id] 使用者主檔
     * @param {string} [userId] aspnet_Membership.UserId
     * @param {number} [pastoralId] 所屬牧區id &#x3D;&gt;對應牧區身分類別
     * @param {string} [phoneType] 手機類型 對應SystemConfigtype&#x3D;PhoneType顯示 namevalue存此欄位0：家長手機1：小孩手機
     * @param {string} [firstName] 姓
     * @param {string} [lastName] 名
     * @param {string} [genderType] 性別 對應SystemConfigtype&#x3D;GenderType顯示 namevalue存此欄位0：女姓1：男性
     * @param {string} [liveCountry] 居住國家
     * @param {string} [birthday] 生日
     * @param {string} [idNumber] 身分證字號
     * @param {string} [cellPhone] 手機門號
     * @param {string} [liveCity] 城市
     * @param {string} [liveZipCode] 郵遞區號
     * @param {string} [liveZipArea] 地區
     * @param {string} [liveAddress] 詳細地址
     * @param {string} [liveAddress2] 地址2
     * @param {string} [churchType] 教會類別 對SystemConfigtype&#x3D;ChurchType顯示 namevalue存此欄位0：其他1：旌旗教會
     * @param {string} [anotherChurchName] 過去在哪個教會名稱
     * @param {string} [phone] 電話(市話)
     * @param {string} [cellPhone1] 電話(手機)
     * @param {string} [cellPhone2] 電話(手機2)
     * @param {string} [email1] Email(主要)
     * @param {string} [email2] Email(次要)
     * @param {string} [appIDType] APP 對應SystemConfigtype&#x3D;AppIDType顯示 namevalue存此欄位0：無1：LINE2：Instagram3：WeChat4：其他5：無
     * @param {string} [lineId] LINEId
     * @param {string} [instagramId] InstagramId
     * @param {string} [weChatId] WeChatId
     * @param {string} [otherSocialId] 其他APPId
     * @param {string} [isChurchGroup] 是否在旌旗小組對應SystemConfigtype&#x3D;IsYN顯示 namevalue存此欄位0：N1：Y
     * @param {string} [churchGroupNo]
     * @param {string} [isJoinChurchGroup] 是否願意加入旌旗小組對應SystemConfigtype&#x3D;IsYN顯示 namevalue存此欄位0：N1：Y
     * @param {string} [joinInPersonDate1] 志願序1 實體 星期對應SystemConfigtype&#x3D;JoinDate顯示 namevalue存此欄位1：星期一2：星期二3：星期三4：星期四5：星期五6：星期六7：星期日
     * @param {string} [joinInPersonTime1] 志願序1 實體 時間type&#x3D;JoinTime顯示 namevalue存此欄位1：上午2：下午
     * @param {string} [joinInPersonLocation1] 志願序1 實體 時間type&#x3D;JoinLocation顯示 namevalue存此欄位1：堂點
     * @param {string} [joinInPersonDate2] 志願序2 實體 星期對應SystemConfigtype&#x3D;JoinDate顯示 namevalue存此欄位1：星期一2：星期二3：星期三4：星期四5：星期五6：星期六7：星期日
     * @param {string} [joinInPersonTime2] 志願序2 實體 時間type&#x3D;JoinTime顯示 namevalue存此欄位1：上午2：下午
     * @param {string} [joinInPersonLocation2] 志願序2 實體 時間type&#x3D;JoinLocation顯示 namevalue存此欄位1：堂點
     * @param {string} [joinInPersonDate3] 志願序3 實體 星期對應SystemConfigtype&#x3D;JoinDate顯示 namevalue存此欄位1：星期一2：星期二3：星期三4：星期四5：星期五6：星期六7：星期日
     * @param {string} [joinInPersonTime3] 志願序3實體 時間type&#x3D;JoinTime顯示 namevalue存此欄位1：上午2：下午
     * @param {string} [joinInPersonLocation3] 志願序3 實體 時間type&#x3D;JoinLocation顯示 namevalue存此欄位1：堂點
     * @param {string} [joinOnlineDate1] 志願序1 線上 星期對應SystemConfigtype&#x3D;JoinDate顯示 namevalue存此欄位1：星期一2：星期二3：星期三4：星期四5：星期五6：星期六7：星期日
     * @param {string} [joinOnlineTime1] 志願序1 線上 時間type&#x3D;JoinTime顯示 namevalue存此欄位1：上午2：下午
     * @param {string} [joinOnlineDate2] 志願序2 線上 星期對應SystemConfigtype&#x3D;JoinDate顯示 namevalue存此欄位1：星期一2：星期二3：星期三4：星期四5：星期五6：星期六7：星期日
     * @param {string} [joinOnlineTime2] 志願序2 線上 時間type&#x3D;JoinTime顯示 namevalue存此欄位1：上午2：下午
     * @param {string} [joinOnlineDate3] 志願序3 線上 星期對應SystemConfigtype&#x3D;JoinDate顯示 namevalue存此欄位1：星期一2：星期二3：星期三4：星期四5：星期五6：星期六7：星期日
     * @param {string} [joinOnlineTime3] 志願序3 線上 時間type&#x3D;JoinTime顯示 namevalue存此欄位1：上午2：下午
     * @param {string} [memberType] 會員類別type&#x3D;MemberType顯示 namevalue存此欄位0：一般會員1：會友 2：講師
     * @param {string} [eduType] 教育程度type&#x3D;EduType顯示 namevalue存此欄位0：小學1：國中…..
     * @param {string} [professionType] 職業type&#x3D;EduType顯示 namevalue存此欄位0：老師1：家管…..
     * @param {string} [isMarried] 是否結婚對應SystemConfigtype&#x3D;IsMarried顯示 namevalue存此欄位0：未婚1：已婚
     * @param {string} [parentUserId] 家長Id
     * @param {string} [countryCode] 國家代碼
     * @param {string} [isOldMember] 是否舊會員 Y是N否
     * @param {string} [password] 密碼
     * @param {string} [passwordsalt] 令牌
     * @param {boolean} [isAdult]
     * @param {string} [lowIncome] 中低收入戶 IsYN 0:否 1:是
     * @param {string} [name] 姓名
     * @param {string} [username] 帳號
     * @param {string} [userNo] 帳號
     * @param {number} [meetingPointId] 聚會點Id
     * @param {string} [remark] 備註欄位
     * @param {string} [baptizedType] 受洗 對應SystemConfig type&#x3D;BaptizedType顯示 namevalue存此欄位0：未受洗1：已受洗2：其它
     * @param {number} [organizationId] Organization.Id
     * @param {Array<SortProperty>} [sortProperties] 查詢欄位排序
     * @param {number} [page] 目前頁數
     * @param {number} [size] 每頁筆數
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    findUsers(
      id?: number,
      userId?: string,
      pastoralId?: number,
      phoneType?: string,
      firstName?: string,
      lastName?: string,
      genderType?: string,
      liveCountry?: string,
      birthday?: string,
      idNumber?: string,
      cellPhone?: string,
      liveCity?: string,
      liveZipCode?: string,
      liveZipArea?: string,
      liveAddress?: string,
      liveAddress2?: string,
      churchType?: string,
      anotherChurchName?: string,
      phone?: string,
      cellPhone1?: string,
      cellPhone2?: string,
      email1?: string,
      email2?: string,
      appIDType?: string,
      lineId?: string,
      instagramId?: string,
      weChatId?: string,
      otherSocialId?: string,
      isChurchGroup?: string,
      churchGroupNo?: string,
      isJoinChurchGroup?: string,
      joinInPersonDate1?: string,
      joinInPersonTime1?: string,
      joinInPersonLocation1?: string,
      joinInPersonDate2?: string,
      joinInPersonTime2?: string,
      joinInPersonLocation2?: string,
      joinInPersonDate3?: string,
      joinInPersonTime3?: string,
      joinInPersonLocation3?: string,
      joinOnlineDate1?: string,
      joinOnlineTime1?: string,
      joinOnlineDate2?: string,
      joinOnlineTime2?: string,
      joinOnlineDate3?: string,
      joinOnlineTime3?: string,
      memberType?: string,
      eduType?: string,
      professionType?: string,
      isMarried?: string,
      parentUserId?: string,
      countryCode?: string,
      isOldMember?: string,
      password?: string,
      passwordsalt?: string,
      isAdult?: boolean,
      lowIncome?: string,
      name?: string,
      username?: string,
      userNo?: string,
      meetingPointId?: number,
      remark?: string,
      baptizedType?: string,
      organizationId?: number,
      sortProperties?: Array<SortProperty>,
      page?: number,
      size?: number,
      options?: any
    ): Promise<UserViewPageApiResponse> {
      return localVarFp
        .findUsers(
          id,
          userId,
          pastoralId,
          phoneType,
          firstName,
          lastName,
          genderType,
          liveCountry,
          birthday,
          idNumber,
          cellPhone,
          liveCity,
          liveZipCode,
          liveZipArea,
          liveAddress,
          liveAddress2,
          churchType,
          anotherChurchName,
          phone,
          cellPhone1,
          cellPhone2,
          email1,
          email2,
          appIDType,
          lineId,
          instagramId,
          weChatId,
          otherSocialId,
          isChurchGroup,
          churchGroupNo,
          isJoinChurchGroup,
          joinInPersonDate1,
          joinInPersonTime1,
          joinInPersonLocation1,
          joinInPersonDate2,
          joinInPersonTime2,
          joinInPersonLocation2,
          joinInPersonDate3,
          joinInPersonTime3,
          joinInPersonLocation3,
          joinOnlineDate1,
          joinOnlineTime1,
          joinOnlineDate2,
          joinOnlineTime2,
          joinOnlineDate3,
          joinOnlineTime3,
          memberType,
          eduType,
          professionType,
          isMarried,
          parentUserId,
          countryCode,
          isOldMember,
          password,
          passwordsalt,
          isAdult,
          lowIncome,
          name,
          username,
          userNo,
          meetingPointId,
          remark,
          baptizedType,
          organizationId,
          sortProperties,
          page,
          size,
          options
        )
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary 以 Id 查詢用戶資料
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getUser(id: number, options?: any): Promise<UserViewApiResponse> {
      return localVarFp.getUser(id, options).then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary 取得驗證碼
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getVerificationCode(options?: any): Promise<VerificationCodeResponseApiResponse> {
      return localVarFp.getVerificationCode(options).then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary 忘記密碼=>前端輸入Phone=>後端驗證=>發SMS給客戶  Get user/smspassword
     * @param {string} [phone] Phone
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    phonePassword(phone?: string, options?: any): Promise<PhonePasswordResponseApiResponse> {
      return localVarFp.phonePassword(phone, options).then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {QueryUserPrivilegeRequest} [queryUserPrivilegeRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    queryUserPrivilege(
      queryUserPrivilegeRequest?: QueryUserPrivilegeRequest,
      options?: any
    ): Promise<PrivilegeViewListApiResponse> {
      return localVarFp
        .queryUserPrivilege(queryUserPrivilegeRequest, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary 查詢會員列表  (*dynamic sort support)
     * @param {QueryUserRequest} [queryUserRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    queryUsers(queryUserRequest?: QueryUserRequest, options?: any): Promise<UserViewPageApiResponse> {
      return localVarFp.queryUsers(queryUserRequest, options).then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary 刪除主檔
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    removeUser(id: number, options?: any): Promise<Int32ApiResponse> {
      return localVarFp.removeUser(id, options).then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary 使用 Email or SMS 修改密碼
     * @param {ResetPasswordCommand} [resetPasswordCommand]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    resetPassword(
      resetPasswordCommand?: ResetPasswordCommand,
      options?: any
    ): Promise<ResetPasswordCommandResponseApiResponse> {
      return localVarFp.resetPassword(resetPasswordCommand, options).then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary 忘記帳號=>前端輸入電話=>後端驗證=>發SMS給客戶  Get user/smsaccount
     * @param {string} [phone] Phone
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    sMSAccount(phone?: string, options?: any): Promise<PhoneAccountResponseApiResponse> {
      return localVarFp.sMSAccount(phone, options).then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary 發送 Email/SMS 驗證碼
     * @param {SendVerificationCodeRequest} [sendVerificationCodeRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    sendVerification(
      sendVerificationCodeRequest?: SendVerificationCodeRequest,
      options?: any
    ): Promise<SendVerificationCodeResponseApiResponse> {
      return localVarFp
        .sendVerification(sendVerificationCodeRequest, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary 註冊
     * @param {SignUpCommand} [signUpCommand]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    signUp(signUpCommand?: SignUpCommand, options?: any): Promise<SignUpCommandResponseApiResponse> {
      return localVarFp.signUp(signUpCommand, options).then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary 登入
     * @param {SignInCommand} [signInCommand]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    signin(signInCommand?: SignInCommand, options?: any): Promise<SignInResponseApiResponse> {
      return localVarFp.signin(signInCommand, options).then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary 舊用戶註冊
     * @param {number} id
     * @param {SignUpCommand} [signUpCommand]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateMember(id: number, signUpCommand?: SignUpCommand, options?: any): Promise<SignUpCommandResponseApiResponse> {
      return localVarFp.updateMember(id, signUpCommand, options).then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary 登入後-以 id 修改密碼
     * @param {UpdatePasswordCommand} [updatePasswordCommand]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updatePassword(
      updatePasswordCommand?: UpdatePasswordCommand,
      options?: any
    ): Promise<UpdatePasswordCommandResponseApiResponse> {
      return localVarFp.updatePassword(updatePasswordCommand, options).then((request) => request(axios, basePath));
    },
  };
};

/**
 * UserApi - interface
 * @export
 * @interface UserApi
 */
export interface UserApiInterface {
  /**
   *
   * @summary 查詢會員列表  (*dynamic sort support)
   * @param {QueryUserRequest} [queryUserRequest]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UserApiInterface
   */
  anonymousQueryUsers(
    queryUserRequest?: QueryUserRequest,
    options?: AxiosRequestConfig
  ): Promise<UserViewPageApiResponse>;

  /**
   *
   * @summary 忘記帳號=>前端輸入Email=>後端驗證=>發MAIL給客戶 Get user/emailaccount
   * @param {string} [email] Email
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UserApiInterface
   */
  emailAccount(email?: string, options?: AxiosRequestConfig): Promise<EmailAccountResponseApiResponse>;

  /**
   *
   * @summary 忘記密碼=>前端輸入Email=>後端驗證=>發MAIL給客戶 Get user/emailpassword
   * @param {string} [email] Email
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UserApiInterface
   */
  emailPassword(email?: string, options?: AxiosRequestConfig): Promise<EmailPasswordResponseApiResponse>;

  /**
   *
   * @summary 尋找帳號 輸入EMail
   * @param {string} [email] Email
   * @param {string} [mobileNo] 手機號碼
   * @param {string} [userName] aspnet_Users.UserName
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UserApiInterface
   */
  findAccount(
    email?: string,
    mobileNo?: string,
    userName?: string,
    options?: AxiosRequestConfig
  ): Promise<FindAccountResponseApiResponse>;

  /**
   *
   * @summary 查詢會員列表
   * @param {number} [id] 使用者主檔
   * @param {string} [userId] aspnet_Membership.UserId
   * @param {number} [pastoralId] 所屬牧區id &#x3D;&gt;對應牧區身分類別
   * @param {string} [phoneType] 手機類型 對應SystemConfigtype&#x3D;PhoneType顯示 namevalue存此欄位0：家長手機1：小孩手機
   * @param {string} [firstName] 姓
   * @param {string} [lastName] 名
   * @param {string} [genderType] 性別 對應SystemConfigtype&#x3D;GenderType顯示 namevalue存此欄位0：女姓1：男性
   * @param {string} [liveCountry] 居住國家
   * @param {string} [birthday] 生日
   * @param {string} [idNumber] 身分證字號
   * @param {string} [cellPhone] 手機門號
   * @param {string} [liveCity] 城市
   * @param {string} [liveZipCode] 郵遞區號
   * @param {string} [liveZipArea] 地區
   * @param {string} [liveAddress] 詳細地址
   * @param {string} [liveAddress2] 地址2
   * @param {string} [churchType] 教會類別 對SystemConfigtype&#x3D;ChurchType顯示 namevalue存此欄位0：其他1：旌旗教會
   * @param {string} [anotherChurchName] 過去在哪個教會名稱
   * @param {string} [phone] 電話(市話)
   * @param {string} [cellPhone1] 電話(手機)
   * @param {string} [cellPhone2] 電話(手機2)
   * @param {string} [email1] Email(主要)
   * @param {string} [email2] Email(次要)
   * @param {string} [appIDType] APP 對應SystemConfigtype&#x3D;AppIDType顯示 namevalue存此欄位0：無1：LINE2：Instagram3：WeChat4：其他5：無
   * @param {string} [lineId] LINEId
   * @param {string} [instagramId] InstagramId
   * @param {string} [weChatId] WeChatId
   * @param {string} [otherSocialId] 其他APPId
   * @param {string} [isChurchGroup] 是否在旌旗小組對應SystemConfigtype&#x3D;IsYN顯示 namevalue存此欄位0：N1：Y
   * @param {string} [churchGroupNo]
   * @param {string} [isJoinChurchGroup] 是否願意加入旌旗小組對應SystemConfigtype&#x3D;IsYN顯示 namevalue存此欄位0：N1：Y
   * @param {string} [joinInPersonDate1] 志願序1 實體 星期對應SystemConfigtype&#x3D;JoinDate顯示 namevalue存此欄位1：星期一2：星期二3：星期三4：星期四5：星期五6：星期六7：星期日
   * @param {string} [joinInPersonTime1] 志願序1 實體 時間type&#x3D;JoinTime顯示 namevalue存此欄位1：上午2：下午
   * @param {string} [joinInPersonLocation1] 志願序1 實體 時間type&#x3D;JoinLocation顯示 namevalue存此欄位1：堂點
   * @param {string} [joinInPersonDate2] 志願序2 實體 星期對應SystemConfigtype&#x3D;JoinDate顯示 namevalue存此欄位1：星期一2：星期二3：星期三4：星期四5：星期五6：星期六7：星期日
   * @param {string} [joinInPersonTime2] 志願序2 實體 時間type&#x3D;JoinTime顯示 namevalue存此欄位1：上午2：下午
   * @param {string} [joinInPersonLocation2] 志願序2 實體 時間type&#x3D;JoinLocation顯示 namevalue存此欄位1：堂點
   * @param {string} [joinInPersonDate3] 志願序3 實體 星期對應SystemConfigtype&#x3D;JoinDate顯示 namevalue存此欄位1：星期一2：星期二3：星期三4：星期四5：星期五6：星期六7：星期日
   * @param {string} [joinInPersonTime3] 志願序3實體 時間type&#x3D;JoinTime顯示 namevalue存此欄位1：上午2：下午
   * @param {string} [joinInPersonLocation3] 志願序3 實體 時間type&#x3D;JoinLocation顯示 namevalue存此欄位1：堂點
   * @param {string} [joinOnlineDate1] 志願序1 線上 星期對應SystemConfigtype&#x3D;JoinDate顯示 namevalue存此欄位1：星期一2：星期二3：星期三4：星期四5：星期五6：星期六7：星期日
   * @param {string} [joinOnlineTime1] 志願序1 線上 時間type&#x3D;JoinTime顯示 namevalue存此欄位1：上午2：下午
   * @param {string} [joinOnlineDate2] 志願序2 線上 星期對應SystemConfigtype&#x3D;JoinDate顯示 namevalue存此欄位1：星期一2：星期二3：星期三4：星期四5：星期五6：星期六7：星期日
   * @param {string} [joinOnlineTime2] 志願序2 線上 時間type&#x3D;JoinTime顯示 namevalue存此欄位1：上午2：下午
   * @param {string} [joinOnlineDate3] 志願序3 線上 星期對應SystemConfigtype&#x3D;JoinDate顯示 namevalue存此欄位1：星期一2：星期二3：星期三4：星期四5：星期五6：星期六7：星期日
   * @param {string} [joinOnlineTime3] 志願序3 線上 時間type&#x3D;JoinTime顯示 namevalue存此欄位1：上午2：下午
   * @param {string} [memberType] 會員類別type&#x3D;MemberType顯示 namevalue存此欄位0：一般會員1：會友 2：講師
   * @param {string} [eduType] 教育程度type&#x3D;EduType顯示 namevalue存此欄位0：小學1：國中…..
   * @param {string} [professionType] 職業type&#x3D;EduType顯示 namevalue存此欄位0：老師1：家管…..
   * @param {string} [isMarried] 是否結婚對應SystemConfigtype&#x3D;IsMarried顯示 namevalue存此欄位0：未婚1：已婚
   * @param {string} [parentUserId] 家長Id
   * @param {string} [countryCode] 國家代碼
   * @param {string} [isOldMember] 是否舊會員 Y是N否
   * @param {string} [password] 密碼
   * @param {string} [passwordsalt] 令牌
   * @param {boolean} [isAdult]
   * @param {string} [lowIncome] 中低收入戶 IsYN 0:否 1:是
   * @param {string} [name] 姓名
   * @param {string} [username] 帳號
   * @param {string} [userNo] 帳號
   * @param {number} [meetingPointId] 聚會點Id
   * @param {string} [remark] 備註欄位
   * @param {string} [baptizedType] 受洗 對應SystemConfig type&#x3D;BaptizedType顯示 namevalue存此欄位0：未受洗1：已受洗2：其它
   * @param {number} [organizationId] Organization.Id
   * @param {Array<SortProperty>} [sortProperties] 查詢欄位排序
   * @param {number} [page] 目前頁數
   * @param {number} [size] 每頁筆數
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UserApiInterface
   */
  findUsers(
    id?: number,
    userId?: string,
    pastoralId?: number,
    phoneType?: string,
    firstName?: string,
    lastName?: string,
    genderType?: string,
    liveCountry?: string,
    birthday?: string,
    idNumber?: string,
    cellPhone?: string,
    liveCity?: string,
    liveZipCode?: string,
    liveZipArea?: string,
    liveAddress?: string,
    liveAddress2?: string,
    churchType?: string,
    anotherChurchName?: string,
    phone?: string,
    cellPhone1?: string,
    cellPhone2?: string,
    email1?: string,
    email2?: string,
    appIDType?: string,
    lineId?: string,
    instagramId?: string,
    weChatId?: string,
    otherSocialId?: string,
    isChurchGroup?: string,
    churchGroupNo?: string,
    isJoinChurchGroup?: string,
    joinInPersonDate1?: string,
    joinInPersonTime1?: string,
    joinInPersonLocation1?: string,
    joinInPersonDate2?: string,
    joinInPersonTime2?: string,
    joinInPersonLocation2?: string,
    joinInPersonDate3?: string,
    joinInPersonTime3?: string,
    joinInPersonLocation3?: string,
    joinOnlineDate1?: string,
    joinOnlineTime1?: string,
    joinOnlineDate2?: string,
    joinOnlineTime2?: string,
    joinOnlineDate3?: string,
    joinOnlineTime3?: string,
    memberType?: string,
    eduType?: string,
    professionType?: string,
    isMarried?: string,
    parentUserId?: string,
    countryCode?: string,
    isOldMember?: string,
    password?: string,
    passwordsalt?: string,
    isAdult?: boolean,
    lowIncome?: string,
    name?: string,
    username?: string,
    userNo?: string,
    meetingPointId?: number,
    remark?: string,
    baptizedType?: string,
    organizationId?: number,
    sortProperties?: Array<SortProperty>,
    page?: number,
    size?: number,
    options?: AxiosRequestConfig
  ): Promise<UserViewPageApiResponse>;

  /**
   *
   * @summary 以 Id 查詢用戶資料
   * @param {number} id
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UserApiInterface
   */
  getUser(id: number, options?: AxiosRequestConfig): Promise<UserViewApiResponse>;

  /**
   *
   * @summary 取得驗證碼
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UserApiInterface
   */
  getVerificationCode(options?: AxiosRequestConfig): Promise<VerificationCodeResponseApiResponse>;

  /**
   *
   * @summary 忘記密碼=>前端輸入Phone=>後端驗證=>發SMS給客戶  Get user/smspassword
   * @param {string} [phone] Phone
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UserApiInterface
   */
  phonePassword(phone?: string, options?: AxiosRequestConfig): Promise<PhonePasswordResponseApiResponse>;

  /**
   *
   * @param {QueryUserPrivilegeRequest} [queryUserPrivilegeRequest]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UserApiInterface
   */
  queryUserPrivilege(
    queryUserPrivilegeRequest?: QueryUserPrivilegeRequest,
    options?: AxiosRequestConfig
  ): Promise<PrivilegeViewListApiResponse>;

  /**
   *
   * @summary 查詢會員列表  (*dynamic sort support)
   * @param {QueryUserRequest} [queryUserRequest]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UserApiInterface
   */
  queryUsers(queryUserRequest?: QueryUserRequest, options?: AxiosRequestConfig): Promise<UserViewPageApiResponse>;

  /**
   *
   * @summary 刪除主檔
   * @param {number} id
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UserApiInterface
   */
  removeUser(id: number, options?: AxiosRequestConfig): Promise<Int32ApiResponse>;

  /**
   *
   * @summary 使用 Email or SMS 修改密碼
   * @param {ResetPasswordCommand} [resetPasswordCommand]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UserApiInterface
   */
  resetPassword(
    resetPasswordCommand?: ResetPasswordCommand,
    options?: AxiosRequestConfig
  ): Promise<ResetPasswordCommandResponseApiResponse>;

  /**
   *
   * @summary 忘記帳號=>前端輸入電話=>後端驗證=>發SMS給客戶  Get user/smsaccount
   * @param {string} [phone] Phone
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UserApiInterface
   */
  sMSAccount(phone?: string, options?: AxiosRequestConfig): Promise<PhoneAccountResponseApiResponse>;

  /**
   *
   * @summary 發送 Email/SMS 驗證碼
   * @param {SendVerificationCodeRequest} [sendVerificationCodeRequest]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UserApiInterface
   */
  sendVerification(
    sendVerificationCodeRequest?: SendVerificationCodeRequest,
    options?: AxiosRequestConfig
  ): Promise<SendVerificationCodeResponseApiResponse>;

  /**
   *
   * @summary 註冊
   * @param {SignUpCommand} [signUpCommand]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UserApiInterface
   */
  signUp(signUpCommand?: SignUpCommand, options?: AxiosRequestConfig): Promise<SignUpCommandResponseApiResponse>;

  /**
   *
   * @summary 登入
   * @param {SignInCommand} [signInCommand]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UserApiInterface
   */
  signin(signInCommand?: SignInCommand, options?: AxiosRequestConfig): Promise<SignInResponseApiResponse>;

  /**
   *
   * @summary 舊用戶註冊
   * @param {number} id
   * @param {SignUpCommand} [signUpCommand]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UserApiInterface
   */
  updateMember(
    id: number,
    signUpCommand?: SignUpCommand,
    options?: AxiosRequestConfig
  ): Promise<SignUpCommandResponseApiResponse>;

  /**
   *
   * @summary 登入後-以 id 修改密碼
   * @param {UpdatePasswordCommand} [updatePasswordCommand]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UserApiInterface
   */
  updatePassword(
    updatePasswordCommand?: UpdatePasswordCommand,
    options?: AxiosRequestConfig
  ): Promise<UpdatePasswordCommandResponseApiResponse>;
}

/**
 * UserApi - object-oriented interface
 * @export
 * @class UserApi
 * @extends {BaseAPI}
 */
export class UserApi extends BaseAPI implements UserApiInterface {
  /**
   *
   * @summary 查詢會員列表  (*dynamic sort support)
   * @param {QueryUserRequest} [queryUserRequest]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UserApi
   */
  public anonymousQueryUsers(queryUserRequest?: QueryUserRequest, options?: AxiosRequestConfig) {
    return UserApiFp(this.configuration)
      .anonymousQueryUsers(queryUserRequest, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary 忘記帳號=>前端輸入Email=>後端驗證=>發MAIL給客戶 Get user/emailaccount
   * @param {string} [email] Email
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UserApi
   */
  public emailAccount(email?: string, options?: AxiosRequestConfig) {
    return UserApiFp(this.configuration)
      .emailAccount(email, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary 忘記密碼=>前端輸入Email=>後端驗證=>發MAIL給客戶 Get user/emailpassword
   * @param {string} [email] Email
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UserApi
   */
  public emailPassword(email?: string, options?: AxiosRequestConfig) {
    return UserApiFp(this.configuration)
      .emailPassword(email, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary 尋找帳號 輸入EMail
   * @param {string} [email] Email
   * @param {string} [mobileNo] 手機號碼
   * @param {string} [userName] aspnet_Users.UserName
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UserApi
   */
  public findAccount(email?: string, mobileNo?: string, userName?: string, options?: AxiosRequestConfig) {
    return UserApiFp(this.configuration)
      .findAccount(email, mobileNo, userName, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary 查詢會員列表
   * @param {number} [id] 使用者主檔
   * @param {string} [userId] aspnet_Membership.UserId
   * @param {number} [pastoralId] 所屬牧區id &#x3D;&gt;對應牧區身分類別
   * @param {string} [phoneType] 手機類型 對應SystemConfigtype&#x3D;PhoneType顯示 namevalue存此欄位0：家長手機1：小孩手機
   * @param {string} [firstName] 姓
   * @param {string} [lastName] 名
   * @param {string} [genderType] 性別 對應SystemConfigtype&#x3D;GenderType顯示 namevalue存此欄位0：女姓1：男性
   * @param {string} [liveCountry] 居住國家
   * @param {string} [birthday] 生日
   * @param {string} [idNumber] 身分證字號
   * @param {string} [cellPhone] 手機門號
   * @param {string} [liveCity] 城市
   * @param {string} [liveZipCode] 郵遞區號
   * @param {string} [liveZipArea] 地區
   * @param {string} [liveAddress] 詳細地址
   * @param {string} [liveAddress2] 地址2
   * @param {string} [churchType] 教會類別 對SystemConfigtype&#x3D;ChurchType顯示 namevalue存此欄位0：其他1：旌旗教會
   * @param {string} [anotherChurchName] 過去在哪個教會名稱
   * @param {string} [phone] 電話(市話)
   * @param {string} [cellPhone1] 電話(手機)
   * @param {string} [cellPhone2] 電話(手機2)
   * @param {string} [email1] Email(主要)
   * @param {string} [email2] Email(次要)
   * @param {string} [appIDType] APP 對應SystemConfigtype&#x3D;AppIDType顯示 namevalue存此欄位0：無1：LINE2：Instagram3：WeChat4：其他5：無
   * @param {string} [lineId] LINEId
   * @param {string} [instagramId] InstagramId
   * @param {string} [weChatId] WeChatId
   * @param {string} [otherSocialId] 其他APPId
   * @param {string} [isChurchGroup] 是否在旌旗小組對應SystemConfigtype&#x3D;IsYN顯示 namevalue存此欄位0：N1：Y
   * @param {string} [churchGroupNo]
   * @param {string} [isJoinChurchGroup] 是否願意加入旌旗小組對應SystemConfigtype&#x3D;IsYN顯示 namevalue存此欄位0：N1：Y
   * @param {string} [joinInPersonDate1] 志願序1 實體 星期對應SystemConfigtype&#x3D;JoinDate顯示 namevalue存此欄位1：星期一2：星期二3：星期三4：星期四5：星期五6：星期六7：星期日
   * @param {string} [joinInPersonTime1] 志願序1 實體 時間type&#x3D;JoinTime顯示 namevalue存此欄位1：上午2：下午
   * @param {string} [joinInPersonLocation1] 志願序1 實體 時間type&#x3D;JoinLocation顯示 namevalue存此欄位1：堂點
   * @param {string} [joinInPersonDate2] 志願序2 實體 星期對應SystemConfigtype&#x3D;JoinDate顯示 namevalue存此欄位1：星期一2：星期二3：星期三4：星期四5：星期五6：星期六7：星期日
   * @param {string} [joinInPersonTime2] 志願序2 實體 時間type&#x3D;JoinTime顯示 namevalue存此欄位1：上午2：下午
   * @param {string} [joinInPersonLocation2] 志願序2 實體 時間type&#x3D;JoinLocation顯示 namevalue存此欄位1：堂點
   * @param {string} [joinInPersonDate3] 志願序3 實體 星期對應SystemConfigtype&#x3D;JoinDate顯示 namevalue存此欄位1：星期一2：星期二3：星期三4：星期四5：星期五6：星期六7：星期日
   * @param {string} [joinInPersonTime3] 志願序3實體 時間type&#x3D;JoinTime顯示 namevalue存此欄位1：上午2：下午
   * @param {string} [joinInPersonLocation3] 志願序3 實體 時間type&#x3D;JoinLocation顯示 namevalue存此欄位1：堂點
   * @param {string} [joinOnlineDate1] 志願序1 線上 星期對應SystemConfigtype&#x3D;JoinDate顯示 namevalue存此欄位1：星期一2：星期二3：星期三4：星期四5：星期五6：星期六7：星期日
   * @param {string} [joinOnlineTime1] 志願序1 線上 時間type&#x3D;JoinTime顯示 namevalue存此欄位1：上午2：下午
   * @param {string} [joinOnlineDate2] 志願序2 線上 星期對應SystemConfigtype&#x3D;JoinDate顯示 namevalue存此欄位1：星期一2：星期二3：星期三4：星期四5：星期五6：星期六7：星期日
   * @param {string} [joinOnlineTime2] 志願序2 線上 時間type&#x3D;JoinTime顯示 namevalue存此欄位1：上午2：下午
   * @param {string} [joinOnlineDate3] 志願序3 線上 星期對應SystemConfigtype&#x3D;JoinDate顯示 namevalue存此欄位1：星期一2：星期二3：星期三4：星期四5：星期五6：星期六7：星期日
   * @param {string} [joinOnlineTime3] 志願序3 線上 時間type&#x3D;JoinTime顯示 namevalue存此欄位1：上午2：下午
   * @param {string} [memberType] 會員類別type&#x3D;MemberType顯示 namevalue存此欄位0：一般會員1：會友 2：講師
   * @param {string} [eduType] 教育程度type&#x3D;EduType顯示 namevalue存此欄位0：小學1：國中…..
   * @param {string} [professionType] 職業type&#x3D;EduType顯示 namevalue存此欄位0：老師1：家管…..
   * @param {string} [isMarried] 是否結婚對應SystemConfigtype&#x3D;IsMarried顯示 namevalue存此欄位0：未婚1：已婚
   * @param {string} [parentUserId] 家長Id
   * @param {string} [countryCode] 國家代碼
   * @param {string} [isOldMember] 是否舊會員 Y是N否
   * @param {string} [password] 密碼
   * @param {string} [passwordsalt] 令牌
   * @param {boolean} [isAdult]
   * @param {string} [lowIncome] 中低收入戶 IsYN 0:否 1:是
   * @param {string} [name] 姓名
   * @param {string} [username] 帳號
   * @param {string} [userNo] 帳號
   * @param {number} [meetingPointId] 聚會點Id
   * @param {string} [remark] 備註欄位
   * @param {string} [baptizedType] 受洗 對應SystemConfig type&#x3D;BaptizedType顯示 namevalue存此欄位0：未受洗1：已受洗2：其它
   * @param {number} [organizationId] Organization.Id
   * @param {Array<SortProperty>} [sortProperties] 查詢欄位排序
   * @param {number} [page] 目前頁數
   * @param {number} [size] 每頁筆數
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UserApi
   */
  public findUsers(
    id?: number,
    userId?: string,
    pastoralId?: number,
    phoneType?: string,
    firstName?: string,
    lastName?: string,
    genderType?: string,
    liveCountry?: string,
    birthday?: string,
    idNumber?: string,
    cellPhone?: string,
    liveCity?: string,
    liveZipCode?: string,
    liveZipArea?: string,
    liveAddress?: string,
    liveAddress2?: string,
    churchType?: string,
    anotherChurchName?: string,
    phone?: string,
    cellPhone1?: string,
    cellPhone2?: string,
    email1?: string,
    email2?: string,
    appIDType?: string,
    lineId?: string,
    instagramId?: string,
    weChatId?: string,
    otherSocialId?: string,
    isChurchGroup?: string,
    churchGroupNo?: string,
    isJoinChurchGroup?: string,
    joinInPersonDate1?: string,
    joinInPersonTime1?: string,
    joinInPersonLocation1?: string,
    joinInPersonDate2?: string,
    joinInPersonTime2?: string,
    joinInPersonLocation2?: string,
    joinInPersonDate3?: string,
    joinInPersonTime3?: string,
    joinInPersonLocation3?: string,
    joinOnlineDate1?: string,
    joinOnlineTime1?: string,
    joinOnlineDate2?: string,
    joinOnlineTime2?: string,
    joinOnlineDate3?: string,
    joinOnlineTime3?: string,
    memberType?: string,
    eduType?: string,
    professionType?: string,
    isMarried?: string,
    parentUserId?: string,
    countryCode?: string,
    isOldMember?: string,
    password?: string,
    passwordsalt?: string,
    isAdult?: boolean,
    lowIncome?: string,
    name?: string,
    username?: string,
    userNo?: string,
    meetingPointId?: number,
    remark?: string,
    baptizedType?: string,
    organizationId?: number,
    sortProperties?: Array<SortProperty>,
    page?: number,
    size?: number,
    options?: AxiosRequestConfig
  ) {
    return UserApiFp(this.configuration)
      .findUsers(
        id,
        userId,
        pastoralId,
        phoneType,
        firstName,
        lastName,
        genderType,
        liveCountry,
        birthday,
        idNumber,
        cellPhone,
        liveCity,
        liveZipCode,
        liveZipArea,
        liveAddress,
        liveAddress2,
        churchType,
        anotherChurchName,
        phone,
        cellPhone1,
        cellPhone2,
        email1,
        email2,
        appIDType,
        lineId,
        instagramId,
        weChatId,
        otherSocialId,
        isChurchGroup,
        churchGroupNo,
        isJoinChurchGroup,
        joinInPersonDate1,
        joinInPersonTime1,
        joinInPersonLocation1,
        joinInPersonDate2,
        joinInPersonTime2,
        joinInPersonLocation2,
        joinInPersonDate3,
        joinInPersonTime3,
        joinInPersonLocation3,
        joinOnlineDate1,
        joinOnlineTime1,
        joinOnlineDate2,
        joinOnlineTime2,
        joinOnlineDate3,
        joinOnlineTime3,
        memberType,
        eduType,
        professionType,
        isMarried,
        parentUserId,
        countryCode,
        isOldMember,
        password,
        passwordsalt,
        isAdult,
        lowIncome,
        name,
        username,
        userNo,
        meetingPointId,
        remark,
        baptizedType,
        organizationId,
        sortProperties,
        page,
        size,
        options
      )
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary 以 Id 查詢用戶資料
   * @param {number} id
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UserApi
   */
  public getUser(id: number, options?: AxiosRequestConfig) {
    return UserApiFp(this.configuration)
      .getUser(id, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary 取得驗證碼
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UserApi
   */
  public getVerificationCode(options?: AxiosRequestConfig) {
    return UserApiFp(this.configuration)
      .getVerificationCode(options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary 忘記密碼=>前端輸入Phone=>後端驗證=>發SMS給客戶  Get user/smspassword
   * @param {string} [phone] Phone
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UserApi
   */
  public phonePassword(phone?: string, options?: AxiosRequestConfig) {
    return UserApiFp(this.configuration)
      .phonePassword(phone, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {QueryUserPrivilegeRequest} [queryUserPrivilegeRequest]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UserApi
   */
  public queryUserPrivilege(queryUserPrivilegeRequest?: QueryUserPrivilegeRequest, options?: AxiosRequestConfig) {
    return UserApiFp(this.configuration)
      .queryUserPrivilege(queryUserPrivilegeRequest, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary 查詢會員列表  (*dynamic sort support)
   * @param {QueryUserRequest} [queryUserRequest]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UserApi
   */
  public queryUsers(queryUserRequest?: QueryUserRequest, options?: AxiosRequestConfig) {
    return UserApiFp(this.configuration)
      .queryUsers(queryUserRequest, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary 刪除主檔
   * @param {number} id
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UserApi
   */
  public removeUser(id: number, options?: AxiosRequestConfig) {
    return UserApiFp(this.configuration)
      .removeUser(id, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary 使用 Email or SMS 修改密碼
   * @param {ResetPasswordCommand} [resetPasswordCommand]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UserApi
   */
  public resetPassword(resetPasswordCommand?: ResetPasswordCommand, options?: AxiosRequestConfig) {
    return UserApiFp(this.configuration)
      .resetPassword(resetPasswordCommand, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary 忘記帳號=>前端輸入電話=>後端驗證=>發SMS給客戶  Get user/smsaccount
   * @param {string} [phone] Phone
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UserApi
   */
  public sMSAccount(phone?: string, options?: AxiosRequestConfig) {
    return UserApiFp(this.configuration)
      .sMSAccount(phone, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary 發送 Email/SMS 驗證碼
   * @param {SendVerificationCodeRequest} [sendVerificationCodeRequest]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UserApi
   */
  public sendVerification(sendVerificationCodeRequest?: SendVerificationCodeRequest, options?: AxiosRequestConfig) {
    return UserApiFp(this.configuration)
      .sendVerification(sendVerificationCodeRequest, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary 註冊
   * @param {SignUpCommand} [signUpCommand]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UserApi
   */
  public signUp(signUpCommand?: SignUpCommand, options?: AxiosRequestConfig) {
    return UserApiFp(this.configuration)
      .signUp(signUpCommand, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary 登入
   * @param {SignInCommand} [signInCommand]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UserApi
   */
  public signin(signInCommand?: SignInCommand, options?: AxiosRequestConfig) {
    return UserApiFp(this.configuration)
      .signin(signInCommand, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary 舊用戶註冊
   * @param {number} id
   * @param {SignUpCommand} [signUpCommand]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UserApi
   */
  public updateMember(id: number, signUpCommand?: SignUpCommand, options?: AxiosRequestConfig) {
    return UserApiFp(this.configuration)
      .updateMember(id, signUpCommand, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary 登入後-以 id 修改密碼
   * @param {UpdatePasswordCommand} [updatePasswordCommand]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UserApi
   */
  public updatePassword(updatePasswordCommand?: UpdatePasswordCommand, options?: AxiosRequestConfig) {
    return UserApiFp(this.configuration)
      .updatePassword(updatePasswordCommand, options)
      .then((request) => request(this.axios, this.basePath));
  }
}

/**
 * UserCourseApi - axios parameter creator
 * @export
 */
export const UserCourseApiAxiosParamCreator = function (configuration?: Configuration) {
  return {
    /**
     *
     * @summary 建立使用者工會/課程檔
     * @param {CreateUserCourseCommand} [createUserCourseCommand]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createUserCourse: async (
      createUserCourseCommand?: CreateUserCourseCommand,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/userCourse`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: "POST", ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication Example-id-1 required
      await setApiKeyToObject(localVarHeaderParameter, "Example-id-1", configuration);

      // authentication JWT_Authorization required
      await setApiKeyToObject(localVarHeaderParameter, "authorization", configuration);

      // authentication example-id-2 required
      await setApiKeyToObject(localVarHeaderParameter, "example-id-2", configuration);

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      localVarRequestOptions.data = serializeDataIfNeeded(
        createUserCourseCommand,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary 刪除課程
     * @param {DeleteUserCourseCommand} [deleteUserCourseCommand]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteUserCourse: async (
      deleteUserCourseCommand?: DeleteUserCourseCommand,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/userCourse`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: "DELETE", ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication Example-id-1 required
      await setApiKeyToObject(localVarHeaderParameter, "Example-id-1", configuration);

      // authentication JWT_Authorization required
      await setApiKeyToObject(localVarHeaderParameter, "authorization", configuration);

      // authentication example-id-2 required
      await setApiKeyToObject(localVarHeaderParameter, "example-id-2", configuration);

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      localVarRequestOptions.data = serializeDataIfNeeded(
        deleteUserCourseCommand,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary 查詢
     * @param {FetchAllUserCourseRequest} [fetchAllUserCourseRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    fetchUserCourses: async (
      fetchAllUserCourseRequest?: FetchAllUserCourseRequest,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/userCourse/fetch`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: "POST", ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication Example-id-1 required
      await setApiKeyToObject(localVarHeaderParameter, "Example-id-1", configuration);

      // authentication JWT_Authorization required
      await setApiKeyToObject(localVarHeaderParameter, "authorization", configuration);

      // authentication example-id-2 required
      await setApiKeyToObject(localVarHeaderParameter, "example-id-2", configuration);

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      localVarRequestOptions.data = serializeDataIfNeeded(
        fetchAllUserCourseRequest,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary 查詢課程
     * @param {string} [courseName] 課程名稱
     * @param {number} [organizationId] Organization.Id
     * @param {string} [organizationName] 組織名稱
     * @param {string} [pastorName] 主任牧師名稱
     * @param {string} [scheduleNo] 代號/梯次
     * @param {string} [classDay] 附件類別對應type&#x3D;ClassDay顯示 namevalue存此欄位1：一2：二….
     * @param {string} [classTimeS] 開始時間
     * @param {string} [classTimeE] 結束時間
     * @param {string} [place] 地點
     * @param {number} [courseManagementTypeId] 課程類別CourseManagementType.Id
     * @param {string} [courseManagementNo] 課程代碼
     * @param {string} [homeworkDate] 課程作業繳交日期
     * @param {string} [title] 課程標題
     * @param {string} [description] 課程內容描述
     * @param {string} [courseManagementStatus] 課程狀態對應type&#x3D;CourseManagementStatus顯示 namevalue存此欄位0：關閉1：開啟
     * @param {string} [courseManagementTypeNo] 課程類別編號
     * @param {string} [courseManagementTypeName] 課程類別名稱
     * @param {string} [courseStatus] 開課狀態 : 0 - 未開，1 - 上課中，2 - 結束
     * @param {string} [courseClassSchedule] 開課班級與時段
     * @param {string} [year] 年度 屆別
     * @param {string} [name] 名稱
     * @param {string} [classNum] 梯次
     * @param {string} [season] 季
     * @param {string} [openDateS] 開課日起
     * @param {string} [openDateE] 開課日迄
     * @param {string} [signUpDateS] 報名日期(線上)
     * @param {string} [signUpDateE] 報名截止日(線上)
     * @param {string} [counterSignUpDateS] 報名日期(臨櫃)
     * @param {string} [counterSignUpDateE] 報名截止日(臨櫃)
     * @param {number} [userId] 用戶 Id
     * @param {Array<SortProperty>} [sortProperties] 查詢欄位排序
     * @param {number} [page] 目前頁數
     * @param {number} [size] 每頁筆數
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    findUserCourse: async (
      courseName?: string,
      organizationId?: number,
      organizationName?: string,
      pastorName?: string,
      scheduleNo?: string,
      classDay?: string,
      classTimeS?: string,
      classTimeE?: string,
      place?: string,
      courseManagementTypeId?: number,
      courseManagementNo?: string,
      homeworkDate?: string,
      title?: string,
      description?: string,
      courseManagementStatus?: string,
      courseManagementTypeNo?: string,
      courseManagementTypeName?: string,
      courseStatus?: string,
      courseClassSchedule?: string,
      year?: string,
      name?: string,
      classNum?: string,
      season?: string,
      openDateS?: string,
      openDateE?: string,
      signUpDateS?: string,
      signUpDateE?: string,
      counterSignUpDateS?: string,
      counterSignUpDateE?: string,
      userId?: number,
      sortProperties?: Array<SortProperty>,
      page?: number,
      size?: number,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/userCourse`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: "GET", ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication Example-id-1 required
      await setApiKeyToObject(localVarHeaderParameter, "Example-id-1", configuration);

      // authentication JWT_Authorization required
      await setApiKeyToObject(localVarHeaderParameter, "authorization", configuration);

      // authentication example-id-2 required
      await setApiKeyToObject(localVarHeaderParameter, "example-id-2", configuration);

      if (courseName !== undefined) {
        localVarQueryParameter["courseName"] = courseName;
      }

      if (organizationId !== undefined) {
        localVarQueryParameter["organizationId"] = organizationId;
      }

      if (organizationName !== undefined) {
        localVarQueryParameter["organizationName"] = organizationName;
      }

      if (pastorName !== undefined) {
        localVarQueryParameter["pastorName"] = pastorName;
      }

      if (scheduleNo !== undefined) {
        localVarQueryParameter["scheduleNo"] = scheduleNo;
      }

      if (classDay !== undefined) {
        localVarQueryParameter["classDay"] = classDay;
      }

      if (classTimeS !== undefined) {
        localVarQueryParameter["classTimeS"] = classTimeS;
      }

      if (classTimeE !== undefined) {
        localVarQueryParameter["classTimeE"] = classTimeE;
      }

      if (place !== undefined) {
        localVarQueryParameter["place"] = place;
      }

      if (courseManagementTypeId !== undefined) {
        localVarQueryParameter["courseManagementTypeId"] = courseManagementTypeId;
      }

      if (courseManagementNo !== undefined) {
        localVarQueryParameter["courseManagementNo"] = courseManagementNo;
      }

      if (homeworkDate !== undefined) {
        localVarQueryParameter["homeworkDate"] =
          (homeworkDate as any) instanceof Date ? (homeworkDate as any).toISOString() : homeworkDate;
      }

      if (title !== undefined) {
        localVarQueryParameter["title"] = title;
      }

      if (description !== undefined) {
        localVarQueryParameter["description"] = description;
      }

      if (courseManagementStatus !== undefined) {
        localVarQueryParameter["courseManagementStatus"] = courseManagementStatus;
      }

      if (courseManagementTypeNo !== undefined) {
        localVarQueryParameter["courseManagementTypeNo"] = courseManagementTypeNo;
      }

      if (courseManagementTypeName !== undefined) {
        localVarQueryParameter["courseManagementTypeName"] = courseManagementTypeName;
      }

      if (courseStatus !== undefined) {
        localVarQueryParameter["courseStatus"] = courseStatus;
      }

      if (courseClassSchedule !== undefined) {
        localVarQueryParameter["courseClassSchedule"] = courseClassSchedule;
      }

      if (year !== undefined) {
        localVarQueryParameter["year"] = year;
      }

      if (name !== undefined) {
        localVarQueryParameter["name"] = name;
      }

      if (classNum !== undefined) {
        localVarQueryParameter["classNum"] = classNum;
      }

      if (season !== undefined) {
        localVarQueryParameter["season"] = season;
      }

      if (openDateS !== undefined) {
        localVarQueryParameter["openDateS"] =
          (openDateS as any) instanceof Date ? (openDateS as any).toISOString() : openDateS;
      }

      if (openDateE !== undefined) {
        localVarQueryParameter["openDateE"] =
          (openDateE as any) instanceof Date ? (openDateE as any).toISOString() : openDateE;
      }

      if (signUpDateS !== undefined) {
        localVarQueryParameter["signUpDateS"] =
          (signUpDateS as any) instanceof Date ? (signUpDateS as any).toISOString() : signUpDateS;
      }

      if (signUpDateE !== undefined) {
        localVarQueryParameter["signUpDateE"] =
          (signUpDateE as any) instanceof Date ? (signUpDateE as any).toISOString() : signUpDateE;
      }

      if (counterSignUpDateS !== undefined) {
        localVarQueryParameter["counterSignUpDateS"] =
          (counterSignUpDateS as any) instanceof Date ? (counterSignUpDateS as any).toISOString() : counterSignUpDateS;
      }

      if (counterSignUpDateE !== undefined) {
        localVarQueryParameter["counterSignUpDateE"] =
          (counterSignUpDateE as any) instanceof Date ? (counterSignUpDateE as any).toISOString() : counterSignUpDateE;
      }

      if (userId !== undefined) {
        localVarQueryParameter["userId"] = userId;
      }

      if (sortProperties) {
        localVarQueryParameter["sortProperties"] = sortProperties;
      }

      if (page !== undefined) {
        localVarQueryParameter["page"] = page;
      }

      if (size !== undefined) {
        localVarQueryParameter["size"] = size;
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary 以 Id 查詢課程
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getUserCourse: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists("getUserCourse", "id", id);
      const localVarPath = `/api/userCourse/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(id)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: "GET", ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication Example-id-1 required
      await setApiKeyToObject(localVarHeaderParameter, "Example-id-1", configuration);

      // authentication JWT_Authorization required
      await setApiKeyToObject(localVarHeaderParameter, "authorization", configuration);

      // authentication example-id-2 required
      await setApiKeyToObject(localVarHeaderParameter, "example-id-2", configuration);

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary 修改課程
     * @param {UpdateUserCourseCommand} [updateUserCourseCommand]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    putUserCourse: async (
      updateUserCourseCommand?: UpdateUserCourseCommand,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/userCourse`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: "PUT", ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication Example-id-1 required
      await setApiKeyToObject(localVarHeaderParameter, "Example-id-1", configuration);

      // authentication JWT_Authorization required
      await setApiKeyToObject(localVarHeaderParameter, "authorization", configuration);

      // authentication example-id-2 required
      await setApiKeyToObject(localVarHeaderParameter, "example-id-2", configuration);

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      localVarRequestOptions.data = serializeDataIfNeeded(
        updateUserCourseCommand,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary 查詢課程列表  (*dynamic sort support)
     * @param {QueryUserCourseRequest} [queryUserCourseRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    queryUserCourses: async (
      queryUserCourseRequest?: QueryUserCourseRequest,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/userCourse/query`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: "POST", ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication Example-id-1 required
      await setApiKeyToObject(localVarHeaderParameter, "Example-id-1", configuration);

      // authentication JWT_Authorization required
      await setApiKeyToObject(localVarHeaderParameter, "authorization", configuration);

      // authentication example-id-2 required
      await setApiKeyToObject(localVarHeaderParameter, "example-id-2", configuration);

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      localVarRequestOptions.data = serializeDataIfNeeded(
        queryUserCourseRequest,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary 刪除主檔
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    removeUserCourse: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists("removeUserCourse", "id", id);
      const localVarPath = `/api/userCourse/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(id)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: "DELETE", ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication Example-id-1 required
      await setApiKeyToObject(localVarHeaderParameter, "Example-id-1", configuration);

      // authentication JWT_Authorization required
      await setApiKeyToObject(localVarHeaderParameter, "authorization", configuration);

      // authentication example-id-2 required
      await setApiKeyToObject(localVarHeaderParameter, "example-id-2", configuration);

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * UserCourseApi - functional programming interface
 * @export
 */
export const UserCourseApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = UserCourseApiAxiosParamCreator(configuration);
  return {
    /**
     *
     * @summary 建立使用者工會/課程檔
     * @param {CreateUserCourseCommand} [createUserCourseCommand]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async createUserCourse(
      createUserCourseCommand?: CreateUserCourseCommand,
      options?: AxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<UserCourseViewApiResponse>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.createUserCourse(createUserCourseCommand, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     *
     * @summary 刪除課程
     * @param {DeleteUserCourseCommand} [deleteUserCourseCommand]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async deleteUserCourse(
      deleteUserCourseCommand?: DeleteUserCourseCommand,
      options?: AxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<UserCourseViewApiResponse>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.deleteUserCourse(deleteUserCourseCommand, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     *
     * @summary 查詢
     * @param {FetchAllUserCourseRequest} [fetchAllUserCourseRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async fetchUserCourses(
      fetchAllUserCourseRequest?: FetchAllUserCourseRequest,
      options?: AxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<UserCourseViewListApiResponse>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.fetchUserCourses(fetchAllUserCourseRequest, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     *
     * @summary 查詢課程
     * @param {string} [courseName] 課程名稱
     * @param {number} [organizationId] Organization.Id
     * @param {string} [organizationName] 組織名稱
     * @param {string} [pastorName] 主任牧師名稱
     * @param {string} [scheduleNo] 代號/梯次
     * @param {string} [classDay] 附件類別對應type&#x3D;ClassDay顯示 namevalue存此欄位1：一2：二….
     * @param {string} [classTimeS] 開始時間
     * @param {string} [classTimeE] 結束時間
     * @param {string} [place] 地點
     * @param {number} [courseManagementTypeId] 課程類別CourseManagementType.Id
     * @param {string} [courseManagementNo] 課程代碼
     * @param {string} [homeworkDate] 課程作業繳交日期
     * @param {string} [title] 課程標題
     * @param {string} [description] 課程內容描述
     * @param {string} [courseManagementStatus] 課程狀態對應type&#x3D;CourseManagementStatus顯示 namevalue存此欄位0：關閉1：開啟
     * @param {string} [courseManagementTypeNo] 課程類別編號
     * @param {string} [courseManagementTypeName] 課程類別名稱
     * @param {string} [courseStatus] 開課狀態 : 0 - 未開，1 - 上課中，2 - 結束
     * @param {string} [courseClassSchedule] 開課班級與時段
     * @param {string} [year] 年度 屆別
     * @param {string} [name] 名稱
     * @param {string} [classNum] 梯次
     * @param {string} [season] 季
     * @param {string} [openDateS] 開課日起
     * @param {string} [openDateE] 開課日迄
     * @param {string} [signUpDateS] 報名日期(線上)
     * @param {string} [signUpDateE] 報名截止日(線上)
     * @param {string} [counterSignUpDateS] 報名日期(臨櫃)
     * @param {string} [counterSignUpDateE] 報名截止日(臨櫃)
     * @param {number} [userId] 用戶 Id
     * @param {Array<SortProperty>} [sortProperties] 查詢欄位排序
     * @param {number} [page] 目前頁數
     * @param {number} [size] 每頁筆數
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async findUserCourse(
      courseName?: string,
      organizationId?: number,
      organizationName?: string,
      pastorName?: string,
      scheduleNo?: string,
      classDay?: string,
      classTimeS?: string,
      classTimeE?: string,
      place?: string,
      courseManagementTypeId?: number,
      courseManagementNo?: string,
      homeworkDate?: string,
      title?: string,
      description?: string,
      courseManagementStatus?: string,
      courseManagementTypeNo?: string,
      courseManagementTypeName?: string,
      courseStatus?: string,
      courseClassSchedule?: string,
      year?: string,
      name?: string,
      classNum?: string,
      season?: string,
      openDateS?: string,
      openDateE?: string,
      signUpDateS?: string,
      signUpDateE?: string,
      counterSignUpDateS?: string,
      counterSignUpDateE?: string,
      userId?: number,
      sortProperties?: Array<SortProperty>,
      page?: number,
      size?: number,
      options?: AxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<UserCourseViewPageApiResponse>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.findUserCourse(
        courseName,
        organizationId,
        organizationName,
        pastorName,
        scheduleNo,
        classDay,
        classTimeS,
        classTimeE,
        place,
        courseManagementTypeId,
        courseManagementNo,
        homeworkDate,
        title,
        description,
        courseManagementStatus,
        courseManagementTypeNo,
        courseManagementTypeName,
        courseStatus,
        courseClassSchedule,
        year,
        name,
        classNum,
        season,
        openDateS,
        openDateE,
        signUpDateS,
        signUpDateE,
        counterSignUpDateS,
        counterSignUpDateE,
        userId,
        sortProperties,
        page,
        size,
        options
      );
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     *
     * @summary 以 Id 查詢課程
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getUserCourse(
      id: number,
      options?: AxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<UserCourseViewApiResponse>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getUserCourse(id, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     *
     * @summary 修改課程
     * @param {UpdateUserCourseCommand} [updateUserCourseCommand]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async putUserCourse(
      updateUserCourseCommand?: UpdateUserCourseCommand,
      options?: AxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<UserCourseViewApiResponse>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.putUserCourse(updateUserCourseCommand, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     *
     * @summary 查詢課程列表  (*dynamic sort support)
     * @param {QueryUserCourseRequest} [queryUserCourseRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async queryUserCourses(
      queryUserCourseRequest?: QueryUserCourseRequest,
      options?: AxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<UserCourseViewPageApiResponse>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.queryUserCourses(queryUserCourseRequest, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     *
     * @summary 刪除主檔
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async removeUserCourse(
      id: number,
      options?: AxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<Int32ApiResponse>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.removeUserCourse(id, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
  };
};

/**
 * UserCourseApi - factory interface
 * @export
 */
export const UserCourseApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
  const localVarFp = UserCourseApiFp(configuration);
  return {
    /**
     *
     * @summary 建立使用者工會/課程檔
     * @param {CreateUserCourseCommand} [createUserCourseCommand]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createUserCourse(
      createUserCourseCommand?: CreateUserCourseCommand,
      options?: any
    ): Promise<UserCourseViewApiResponse> {
      return localVarFp.createUserCourse(createUserCourseCommand, options).then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary 刪除課程
     * @param {DeleteUserCourseCommand} [deleteUserCourseCommand]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteUserCourse(
      deleteUserCourseCommand?: DeleteUserCourseCommand,
      options?: any
    ): Promise<UserCourseViewApiResponse> {
      return localVarFp.deleteUserCourse(deleteUserCourseCommand, options).then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary 查詢
     * @param {FetchAllUserCourseRequest} [fetchAllUserCourseRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    fetchUserCourses(
      fetchAllUserCourseRequest?: FetchAllUserCourseRequest,
      options?: any
    ): Promise<UserCourseViewListApiResponse> {
      return localVarFp
        .fetchUserCourses(fetchAllUserCourseRequest, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary 查詢課程
     * @param {string} [courseName] 課程名稱
     * @param {number} [organizationId] Organization.Id
     * @param {string} [organizationName] 組織名稱
     * @param {string} [pastorName] 主任牧師名稱
     * @param {string} [scheduleNo] 代號/梯次
     * @param {string} [classDay] 附件類別對應type&#x3D;ClassDay顯示 namevalue存此欄位1：一2：二….
     * @param {string} [classTimeS] 開始時間
     * @param {string} [classTimeE] 結束時間
     * @param {string} [place] 地點
     * @param {number} [courseManagementTypeId] 課程類別CourseManagementType.Id
     * @param {string} [courseManagementNo] 課程代碼
     * @param {string} [homeworkDate] 課程作業繳交日期
     * @param {string} [title] 課程標題
     * @param {string} [description] 課程內容描述
     * @param {string} [courseManagementStatus] 課程狀態對應type&#x3D;CourseManagementStatus顯示 namevalue存此欄位0：關閉1：開啟
     * @param {string} [courseManagementTypeNo] 課程類別編號
     * @param {string} [courseManagementTypeName] 課程類別名稱
     * @param {string} [courseStatus] 開課狀態 : 0 - 未開，1 - 上課中，2 - 結束
     * @param {string} [courseClassSchedule] 開課班級與時段
     * @param {string} [year] 年度 屆別
     * @param {string} [name] 名稱
     * @param {string} [classNum] 梯次
     * @param {string} [season] 季
     * @param {string} [openDateS] 開課日起
     * @param {string} [openDateE] 開課日迄
     * @param {string} [signUpDateS] 報名日期(線上)
     * @param {string} [signUpDateE] 報名截止日(線上)
     * @param {string} [counterSignUpDateS] 報名日期(臨櫃)
     * @param {string} [counterSignUpDateE] 報名截止日(臨櫃)
     * @param {number} [userId] 用戶 Id
     * @param {Array<SortProperty>} [sortProperties] 查詢欄位排序
     * @param {number} [page] 目前頁數
     * @param {number} [size] 每頁筆數
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    findUserCourse(
      courseName?: string,
      organizationId?: number,
      organizationName?: string,
      pastorName?: string,
      scheduleNo?: string,
      classDay?: string,
      classTimeS?: string,
      classTimeE?: string,
      place?: string,
      courseManagementTypeId?: number,
      courseManagementNo?: string,
      homeworkDate?: string,
      title?: string,
      description?: string,
      courseManagementStatus?: string,
      courseManagementTypeNo?: string,
      courseManagementTypeName?: string,
      courseStatus?: string,
      courseClassSchedule?: string,
      year?: string,
      name?: string,
      classNum?: string,
      season?: string,
      openDateS?: string,
      openDateE?: string,
      signUpDateS?: string,
      signUpDateE?: string,
      counterSignUpDateS?: string,
      counterSignUpDateE?: string,
      userId?: number,
      sortProperties?: Array<SortProperty>,
      page?: number,
      size?: number,
      options?: any
    ): Promise<UserCourseViewPageApiResponse> {
      return localVarFp
        .findUserCourse(
          courseName,
          organizationId,
          organizationName,
          pastorName,
          scheduleNo,
          classDay,
          classTimeS,
          classTimeE,
          place,
          courseManagementTypeId,
          courseManagementNo,
          homeworkDate,
          title,
          description,
          courseManagementStatus,
          courseManagementTypeNo,
          courseManagementTypeName,
          courseStatus,
          courseClassSchedule,
          year,
          name,
          classNum,
          season,
          openDateS,
          openDateE,
          signUpDateS,
          signUpDateE,
          counterSignUpDateS,
          counterSignUpDateE,
          userId,
          sortProperties,
          page,
          size,
          options
        )
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary 以 Id 查詢課程
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getUserCourse(id: number, options?: any): Promise<UserCourseViewApiResponse> {
      return localVarFp.getUserCourse(id, options).then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary 修改課程
     * @param {UpdateUserCourseCommand} [updateUserCourseCommand]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    putUserCourse(
      updateUserCourseCommand?: UpdateUserCourseCommand,
      options?: any
    ): Promise<UserCourseViewApiResponse> {
      return localVarFp.putUserCourse(updateUserCourseCommand, options).then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary 查詢課程列表  (*dynamic sort support)
     * @param {QueryUserCourseRequest} [queryUserCourseRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    queryUserCourses(
      queryUserCourseRequest?: QueryUserCourseRequest,
      options?: any
    ): Promise<UserCourseViewPageApiResponse> {
      return localVarFp.queryUserCourses(queryUserCourseRequest, options).then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary 刪除主檔
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    removeUserCourse(id: number, options?: any): Promise<Int32ApiResponse> {
      return localVarFp.removeUserCourse(id, options).then((request) => request(axios, basePath));
    },
  };
};

/**
 * UserCourseApi - interface
 * @export
 * @interface UserCourseApi
 */
export interface UserCourseApiInterface {
  /**
   *
   * @summary 建立使用者工會/課程檔
   * @param {CreateUserCourseCommand} [createUserCourseCommand]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UserCourseApiInterface
   */
  createUserCourse(
    createUserCourseCommand?: CreateUserCourseCommand,
    options?: AxiosRequestConfig
  ): Promise<UserCourseViewApiResponse>;

  /**
   *
   * @summary 刪除課程
   * @param {DeleteUserCourseCommand} [deleteUserCourseCommand]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UserCourseApiInterface
   */
  deleteUserCourse(
    deleteUserCourseCommand?: DeleteUserCourseCommand,
    options?: AxiosRequestConfig
  ): Promise<UserCourseViewApiResponse>;

  /**
   *
   * @summary 查詢
   * @param {FetchAllUserCourseRequest} [fetchAllUserCourseRequest]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UserCourseApiInterface
   */
  fetchUserCourses(
    fetchAllUserCourseRequest?: FetchAllUserCourseRequest,
    options?: AxiosRequestConfig
  ): Promise<UserCourseViewListApiResponse>;

  /**
   *
   * @summary 查詢課程
   * @param {string} [courseName] 課程名稱
   * @param {number} [organizationId] Organization.Id
   * @param {string} [organizationName] 組織名稱
   * @param {string} [pastorName] 主任牧師名稱
   * @param {string} [scheduleNo] 代號/梯次
   * @param {string} [classDay] 附件類別對應type&#x3D;ClassDay顯示 namevalue存此欄位1：一2：二….
   * @param {string} [classTimeS] 開始時間
   * @param {string} [classTimeE] 結束時間
   * @param {string} [place] 地點
   * @param {number} [courseManagementTypeId] 課程類別CourseManagementType.Id
   * @param {string} [courseManagementNo] 課程代碼
   * @param {string} [homeworkDate] 課程作業繳交日期
   * @param {string} [title] 課程標題
   * @param {string} [description] 課程內容描述
   * @param {string} [courseManagementStatus] 課程狀態對應type&#x3D;CourseManagementStatus顯示 namevalue存此欄位0：關閉1：開啟
   * @param {string} [courseManagementTypeNo] 課程類別編號
   * @param {string} [courseManagementTypeName] 課程類別名稱
   * @param {string} [courseStatus] 開課狀態 : 0 - 未開，1 - 上課中，2 - 結束
   * @param {string} [courseClassSchedule] 開課班級與時段
   * @param {string} [year] 年度 屆別
   * @param {string} [name] 名稱
   * @param {string} [classNum] 梯次
   * @param {string} [season] 季
   * @param {string} [openDateS] 開課日起
   * @param {string} [openDateE] 開課日迄
   * @param {string} [signUpDateS] 報名日期(線上)
   * @param {string} [signUpDateE] 報名截止日(線上)
   * @param {string} [counterSignUpDateS] 報名日期(臨櫃)
   * @param {string} [counterSignUpDateE] 報名截止日(臨櫃)
   * @param {number} [userId] 用戶 Id
   * @param {Array<SortProperty>} [sortProperties] 查詢欄位排序
   * @param {number} [page] 目前頁數
   * @param {number} [size] 每頁筆數
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UserCourseApiInterface
   */
  findUserCourse(
    courseName?: string,
    organizationId?: number,
    organizationName?: string,
    pastorName?: string,
    scheduleNo?: string,
    classDay?: string,
    classTimeS?: string,
    classTimeE?: string,
    place?: string,
    courseManagementTypeId?: number,
    courseManagementNo?: string,
    homeworkDate?: string,
    title?: string,
    description?: string,
    courseManagementStatus?: string,
    courseManagementTypeNo?: string,
    courseManagementTypeName?: string,
    courseStatus?: string,
    courseClassSchedule?: string,
    year?: string,
    name?: string,
    classNum?: string,
    season?: string,
    openDateS?: string,
    openDateE?: string,
    signUpDateS?: string,
    signUpDateE?: string,
    counterSignUpDateS?: string,
    counterSignUpDateE?: string,
    userId?: number,
    sortProperties?: Array<SortProperty>,
    page?: number,
    size?: number,
    options?: AxiosRequestConfig
  ): Promise<UserCourseViewPageApiResponse>;

  /**
   *
   * @summary 以 Id 查詢課程
   * @param {number} id
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UserCourseApiInterface
   */
  getUserCourse(id: number, options?: AxiosRequestConfig): Promise<UserCourseViewApiResponse>;

  /**
   *
   * @summary 修改課程
   * @param {UpdateUserCourseCommand} [updateUserCourseCommand]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UserCourseApiInterface
   */
  putUserCourse(
    updateUserCourseCommand?: UpdateUserCourseCommand,
    options?: AxiosRequestConfig
  ): Promise<UserCourseViewApiResponse>;

  /**
   *
   * @summary 查詢課程列表  (*dynamic sort support)
   * @param {QueryUserCourseRequest} [queryUserCourseRequest]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UserCourseApiInterface
   */
  queryUserCourses(
    queryUserCourseRequest?: QueryUserCourseRequest,
    options?: AxiosRequestConfig
  ): Promise<UserCourseViewPageApiResponse>;

  /**
   *
   * @summary 刪除主檔
   * @param {number} id
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UserCourseApiInterface
   */
  removeUserCourse(id: number, options?: AxiosRequestConfig): Promise<Int32ApiResponse>;
}

/**
 * UserCourseApi - object-oriented interface
 * @export
 * @class UserCourseApi
 * @extends {BaseAPI}
 */
export class UserCourseApi extends BaseAPI implements UserCourseApiInterface {
  /**
   *
   * @summary 建立使用者工會/課程檔
   * @param {CreateUserCourseCommand} [createUserCourseCommand]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UserCourseApi
   */
  public createUserCourse(createUserCourseCommand?: CreateUserCourseCommand, options?: AxiosRequestConfig) {
    return UserCourseApiFp(this.configuration)
      .createUserCourse(createUserCourseCommand, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary 刪除課程
   * @param {DeleteUserCourseCommand} [deleteUserCourseCommand]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UserCourseApi
   */
  public deleteUserCourse(deleteUserCourseCommand?: DeleteUserCourseCommand, options?: AxiosRequestConfig) {
    return UserCourseApiFp(this.configuration)
      .deleteUserCourse(deleteUserCourseCommand, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary 查詢
   * @param {FetchAllUserCourseRequest} [fetchAllUserCourseRequest]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UserCourseApi
   */
  public fetchUserCourses(fetchAllUserCourseRequest?: FetchAllUserCourseRequest, options?: AxiosRequestConfig) {
    return UserCourseApiFp(this.configuration)
      .fetchUserCourses(fetchAllUserCourseRequest, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary 查詢課程
   * @param {string} [courseName] 課程名稱
   * @param {number} [organizationId] Organization.Id
   * @param {string} [organizationName] 組織名稱
   * @param {string} [pastorName] 主任牧師名稱
   * @param {string} [scheduleNo] 代號/梯次
   * @param {string} [classDay] 附件類別對應type&#x3D;ClassDay顯示 namevalue存此欄位1：一2：二….
   * @param {string} [classTimeS] 開始時間
   * @param {string} [classTimeE] 結束時間
   * @param {string} [place] 地點
   * @param {number} [courseManagementTypeId] 課程類別CourseManagementType.Id
   * @param {string} [courseManagementNo] 課程代碼
   * @param {string} [homeworkDate] 課程作業繳交日期
   * @param {string} [title] 課程標題
   * @param {string} [description] 課程內容描述
   * @param {string} [courseManagementStatus] 課程狀態對應type&#x3D;CourseManagementStatus顯示 namevalue存此欄位0：關閉1：開啟
   * @param {string} [courseManagementTypeNo] 課程類別編號
   * @param {string} [courseManagementTypeName] 課程類別名稱
   * @param {string} [courseStatus] 開課狀態 : 0 - 未開，1 - 上課中，2 - 結束
   * @param {string} [courseClassSchedule] 開課班級與時段
   * @param {string} [year] 年度 屆別
   * @param {string} [name] 名稱
   * @param {string} [classNum] 梯次
   * @param {string} [season] 季
   * @param {string} [openDateS] 開課日起
   * @param {string} [openDateE] 開課日迄
   * @param {string} [signUpDateS] 報名日期(線上)
   * @param {string} [signUpDateE] 報名截止日(線上)
   * @param {string} [counterSignUpDateS] 報名日期(臨櫃)
   * @param {string} [counterSignUpDateE] 報名截止日(臨櫃)
   * @param {number} [userId] 用戶 Id
   * @param {Array<SortProperty>} [sortProperties] 查詢欄位排序
   * @param {number} [page] 目前頁數
   * @param {number} [size] 每頁筆數
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UserCourseApi
   */
  public findUserCourse(
    courseName?: string,
    organizationId?: number,
    organizationName?: string,
    pastorName?: string,
    scheduleNo?: string,
    classDay?: string,
    classTimeS?: string,
    classTimeE?: string,
    place?: string,
    courseManagementTypeId?: number,
    courseManagementNo?: string,
    homeworkDate?: string,
    title?: string,
    description?: string,
    courseManagementStatus?: string,
    courseManagementTypeNo?: string,
    courseManagementTypeName?: string,
    courseStatus?: string,
    courseClassSchedule?: string,
    year?: string,
    name?: string,
    classNum?: string,
    season?: string,
    openDateS?: string,
    openDateE?: string,
    signUpDateS?: string,
    signUpDateE?: string,
    counterSignUpDateS?: string,
    counterSignUpDateE?: string,
    userId?: number,
    sortProperties?: Array<SortProperty>,
    page?: number,
    size?: number,
    options?: AxiosRequestConfig
  ) {
    return UserCourseApiFp(this.configuration)
      .findUserCourse(
        courseName,
        organizationId,
        organizationName,
        pastorName,
        scheduleNo,
        classDay,
        classTimeS,
        classTimeE,
        place,
        courseManagementTypeId,
        courseManagementNo,
        homeworkDate,
        title,
        description,
        courseManagementStatus,
        courseManagementTypeNo,
        courseManagementTypeName,
        courseStatus,
        courseClassSchedule,
        year,
        name,
        classNum,
        season,
        openDateS,
        openDateE,
        signUpDateS,
        signUpDateE,
        counterSignUpDateS,
        counterSignUpDateE,
        userId,
        sortProperties,
        page,
        size,
        options
      )
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary 以 Id 查詢課程
   * @param {number} id
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UserCourseApi
   */
  public getUserCourse(id: number, options?: AxiosRequestConfig) {
    return UserCourseApiFp(this.configuration)
      .getUserCourse(id, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary 修改課程
   * @param {UpdateUserCourseCommand} [updateUserCourseCommand]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UserCourseApi
   */
  public putUserCourse(updateUserCourseCommand?: UpdateUserCourseCommand, options?: AxiosRequestConfig) {
    return UserCourseApiFp(this.configuration)
      .putUserCourse(updateUserCourseCommand, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary 查詢課程列表  (*dynamic sort support)
   * @param {QueryUserCourseRequest} [queryUserCourseRequest]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UserCourseApi
   */
  public queryUserCourses(queryUserCourseRequest?: QueryUserCourseRequest, options?: AxiosRequestConfig) {
    return UserCourseApiFp(this.configuration)
      .queryUserCourses(queryUserCourseRequest, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary 刪除主檔
   * @param {number} id
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UserCourseApi
   */
  public removeUserCourse(id: number, options?: AxiosRequestConfig) {
    return UserCourseApiFp(this.configuration)
      .removeUserCourse(id, options)
      .then((request) => request(this.axios, this.basePath));
  }
}

/**
 * UserFamilyApi - axios parameter creator
 * @export
 */
export const UserFamilyApiAxiosParamCreator = function (configuration?: Configuration) {
  return {
    /**
     *
     * @summary 建立使用者家庭連絡檔
     * @param {CreateUserFamilyCommand} [createUserFamilyCommand]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createUserFamily: async (
      createUserFamilyCommand?: CreateUserFamilyCommand,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/userFamily`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: "POST", ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication Example-id-1 required
      await setApiKeyToObject(localVarHeaderParameter, "Example-id-1", configuration);

      // authentication JWT_Authorization required
      await setApiKeyToObject(localVarHeaderParameter, "authorization", configuration);

      // authentication example-id-2 required
      await setApiKeyToObject(localVarHeaderParameter, "example-id-2", configuration);

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      localVarRequestOptions.data = serializeDataIfNeeded(
        createUserFamilyCommand,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary 刪除使用者家庭連絡
     * @param {DeleteUserFamilyCommand} [deleteUserFamilyCommand]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteUserFamily: async (
      deleteUserFamilyCommand?: DeleteUserFamilyCommand,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/userFamily`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: "DELETE", ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication Example-id-1 required
      await setApiKeyToObject(localVarHeaderParameter, "Example-id-1", configuration);

      // authentication JWT_Authorization required
      await setApiKeyToObject(localVarHeaderParameter, "authorization", configuration);

      // authentication example-id-2 required
      await setApiKeyToObject(localVarHeaderParameter, "example-id-2", configuration);

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      localVarRequestOptions.data = serializeDataIfNeeded(
        deleteUserFamilyCommand,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary 查詢使用者家庭連絡
     * @param {FetchAllUserFamilyRequest} [fetchAllUserFamilyRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    fetchUserFamilies: async (
      fetchAllUserFamilyRequest?: FetchAllUserFamilyRequest,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/userFamily/fetch`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: "POST", ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication Example-id-1 required
      await setApiKeyToObject(localVarHeaderParameter, "Example-id-1", configuration);

      // authentication JWT_Authorization required
      await setApiKeyToObject(localVarHeaderParameter, "authorization", configuration);

      // authentication example-id-2 required
      await setApiKeyToObject(localVarHeaderParameter, "example-id-2", configuration);

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      localVarRequestOptions.data = serializeDataIfNeeded(
        fetchAllUserFamilyRequest,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary 查詢使用者家庭連絡
     * @param {number} [id] Id
     * @param {number} [userId] 建立時間 User.Id
     * @param {string} [relativeType] 關係類別 對應SystemConfig        type&#x3D;RelativeType       顯示 name       value存此欄位0：配偶1：父母2：子女
     * @param {string} [name] 姓名
     * @param {Array<SortProperty>} [sortProperties] 查詢欄位排序
     * @param {number} [page] 目前頁數
     * @param {number} [size] 每頁筆數
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    findUserFamily: async (
      id?: number,
      userId?: number,
      relativeType?: string,
      name?: string,
      sortProperties?: Array<SortProperty>,
      page?: number,
      size?: number,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/userFamily`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: "GET", ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication Example-id-1 required
      await setApiKeyToObject(localVarHeaderParameter, "Example-id-1", configuration);

      // authentication JWT_Authorization required
      await setApiKeyToObject(localVarHeaderParameter, "authorization", configuration);

      // authentication example-id-2 required
      await setApiKeyToObject(localVarHeaderParameter, "example-id-2", configuration);

      if (id !== undefined) {
        localVarQueryParameter["id"] = id;
      }

      if (userId !== undefined) {
        localVarQueryParameter["userId"] = userId;
      }

      if (relativeType !== undefined) {
        localVarQueryParameter["relativeType"] = relativeType;
      }

      if (name !== undefined) {
        localVarQueryParameter["name"] = name;
      }

      if (sortProperties) {
        localVarQueryParameter["sortProperties"] = sortProperties;
      }

      if (page !== undefined) {
        localVarQueryParameter["page"] = page;
      }

      if (size !== undefined) {
        localVarQueryParameter["size"] = size;
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary 以 Id 查詢家庭連絡
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getUserFamily: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists("getUserFamily", "id", id);
      const localVarPath = `/api/userFamily/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(id)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: "GET", ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication Example-id-1 required
      await setApiKeyToObject(localVarHeaderParameter, "Example-id-1", configuration);

      // authentication JWT_Authorization required
      await setApiKeyToObject(localVarHeaderParameter, "authorization", configuration);

      // authentication example-id-2 required
      await setApiKeyToObject(localVarHeaderParameter, "example-id-2", configuration);

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary 修改使用者家庭連絡
     * @param {UpdateUserFamilyCommand} [updateUserFamilyCommand]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    putUserFamily: async (
      updateUserFamilyCommand?: UpdateUserFamilyCommand,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/userFamily`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: "PUT", ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication Example-id-1 required
      await setApiKeyToObject(localVarHeaderParameter, "Example-id-1", configuration);

      // authentication JWT_Authorization required
      await setApiKeyToObject(localVarHeaderParameter, "authorization", configuration);

      // authentication example-id-2 required
      await setApiKeyToObject(localVarHeaderParameter, "example-id-2", configuration);

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      localVarRequestOptions.data = serializeDataIfNeeded(
        updateUserFamilyCommand,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary 查詢家庭連絡列表  (*dynamic sort support)
     * @param {QueryUserFamilyRequest} [queryUserFamilyRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    queryUserFamilies: async (
      queryUserFamilyRequest?: QueryUserFamilyRequest,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/userFamily/query`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: "POST", ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication Example-id-1 required
      await setApiKeyToObject(localVarHeaderParameter, "Example-id-1", configuration);

      // authentication JWT_Authorization required
      await setApiKeyToObject(localVarHeaderParameter, "authorization", configuration);

      // authentication example-id-2 required
      await setApiKeyToObject(localVarHeaderParameter, "example-id-2", configuration);

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      localVarRequestOptions.data = serializeDataIfNeeded(
        queryUserFamilyRequest,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary 刪除主檔
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    removeUserFamily: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists("removeUserFamily", "id", id);
      const localVarPath = `/api/userFamily/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(id)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: "DELETE", ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication Example-id-1 required
      await setApiKeyToObject(localVarHeaderParameter, "Example-id-1", configuration);

      // authentication JWT_Authorization required
      await setApiKeyToObject(localVarHeaderParameter, "authorization", configuration);

      // authentication example-id-2 required
      await setApiKeyToObject(localVarHeaderParameter, "example-id-2", configuration);

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * UserFamilyApi - functional programming interface
 * @export
 */
export const UserFamilyApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = UserFamilyApiAxiosParamCreator(configuration);
  return {
    /**
     *
     * @summary 建立使用者家庭連絡檔
     * @param {CreateUserFamilyCommand} [createUserFamilyCommand]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async createUserFamily(
      createUserFamilyCommand?: CreateUserFamilyCommand,
      options?: AxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<UserFamilyViewApiResponse>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.createUserFamily(createUserFamilyCommand, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     *
     * @summary 刪除使用者家庭連絡
     * @param {DeleteUserFamilyCommand} [deleteUserFamilyCommand]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async deleteUserFamily(
      deleteUserFamilyCommand?: DeleteUserFamilyCommand,
      options?: AxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<UserFamilyViewApiResponse>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.deleteUserFamily(deleteUserFamilyCommand, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     *
     * @summary 查詢使用者家庭連絡
     * @param {FetchAllUserFamilyRequest} [fetchAllUserFamilyRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async fetchUserFamilies(
      fetchAllUserFamilyRequest?: FetchAllUserFamilyRequest,
      options?: AxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<UserFamilyViewListApiResponse>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.fetchUserFamilies(fetchAllUserFamilyRequest, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     *
     * @summary 查詢使用者家庭連絡
     * @param {number} [id] Id
     * @param {number} [userId] 建立時間 User.Id
     * @param {string} [relativeType] 關係類別 對應SystemConfig        type&#x3D;RelativeType       顯示 name       value存此欄位0：配偶1：父母2：子女
     * @param {string} [name] 姓名
     * @param {Array<SortProperty>} [sortProperties] 查詢欄位排序
     * @param {number} [page] 目前頁數
     * @param {number} [size] 每頁筆數
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async findUserFamily(
      id?: number,
      userId?: number,
      relativeType?: string,
      name?: string,
      sortProperties?: Array<SortProperty>,
      page?: number,
      size?: number,
      options?: AxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<UserFamilyViewPageApiResponse>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.findUserFamily(
        id,
        userId,
        relativeType,
        name,
        sortProperties,
        page,
        size,
        options
      );
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     *
     * @summary 以 Id 查詢家庭連絡
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getUserFamily(
      id: number,
      options?: AxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<UserFamilyViewApiResponse>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getUserFamily(id, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     *
     * @summary 修改使用者家庭連絡
     * @param {UpdateUserFamilyCommand} [updateUserFamilyCommand]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async putUserFamily(
      updateUserFamilyCommand?: UpdateUserFamilyCommand,
      options?: AxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<UserFamilyViewApiResponse>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.putUserFamily(updateUserFamilyCommand, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     *
     * @summary 查詢家庭連絡列表  (*dynamic sort support)
     * @param {QueryUserFamilyRequest} [queryUserFamilyRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async queryUserFamilies(
      queryUserFamilyRequest?: QueryUserFamilyRequest,
      options?: AxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<UserFamilyViewPageApiResponse>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.queryUserFamilies(queryUserFamilyRequest, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     *
     * @summary 刪除主檔
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async removeUserFamily(
      id: number,
      options?: AxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<Int32ApiResponse>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.removeUserFamily(id, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
  };
};

/**
 * UserFamilyApi - factory interface
 * @export
 */
export const UserFamilyApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
  const localVarFp = UserFamilyApiFp(configuration);
  return {
    /**
     *
     * @summary 建立使用者家庭連絡檔
     * @param {CreateUserFamilyCommand} [createUserFamilyCommand]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createUserFamily(
      createUserFamilyCommand?: CreateUserFamilyCommand,
      options?: any
    ): Promise<UserFamilyViewApiResponse> {
      return localVarFp.createUserFamily(createUserFamilyCommand, options).then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary 刪除使用者家庭連絡
     * @param {DeleteUserFamilyCommand} [deleteUserFamilyCommand]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteUserFamily(
      deleteUserFamilyCommand?: DeleteUserFamilyCommand,
      options?: any
    ): Promise<UserFamilyViewApiResponse> {
      return localVarFp.deleteUserFamily(deleteUserFamilyCommand, options).then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary 查詢使用者家庭連絡
     * @param {FetchAllUserFamilyRequest} [fetchAllUserFamilyRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    fetchUserFamilies(
      fetchAllUserFamilyRequest?: FetchAllUserFamilyRequest,
      options?: any
    ): Promise<UserFamilyViewListApiResponse> {
      return localVarFp
        .fetchUserFamilies(fetchAllUserFamilyRequest, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary 查詢使用者家庭連絡
     * @param {number} [id] Id
     * @param {number} [userId] 建立時間 User.Id
     * @param {string} [relativeType] 關係類別 對應SystemConfig        type&#x3D;RelativeType       顯示 name       value存此欄位0：配偶1：父母2：子女
     * @param {string} [name] 姓名
     * @param {Array<SortProperty>} [sortProperties] 查詢欄位排序
     * @param {number} [page] 目前頁數
     * @param {number} [size] 每頁筆數
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    findUserFamily(
      id?: number,
      userId?: number,
      relativeType?: string,
      name?: string,
      sortProperties?: Array<SortProperty>,
      page?: number,
      size?: number,
      options?: any
    ): Promise<UserFamilyViewPageApiResponse> {
      return localVarFp
        .findUserFamily(id, userId, relativeType, name, sortProperties, page, size, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary 以 Id 查詢家庭連絡
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getUserFamily(id: number, options?: any): Promise<UserFamilyViewApiResponse> {
      return localVarFp.getUserFamily(id, options).then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary 修改使用者家庭連絡
     * @param {UpdateUserFamilyCommand} [updateUserFamilyCommand]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    putUserFamily(
      updateUserFamilyCommand?: UpdateUserFamilyCommand,
      options?: any
    ): Promise<UserFamilyViewApiResponse> {
      return localVarFp.putUserFamily(updateUserFamilyCommand, options).then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary 查詢家庭連絡列表  (*dynamic sort support)
     * @param {QueryUserFamilyRequest} [queryUserFamilyRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    queryUserFamilies(
      queryUserFamilyRequest?: QueryUserFamilyRequest,
      options?: any
    ): Promise<UserFamilyViewPageApiResponse> {
      return localVarFp.queryUserFamilies(queryUserFamilyRequest, options).then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary 刪除主檔
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    removeUserFamily(id: number, options?: any): Promise<Int32ApiResponse> {
      return localVarFp.removeUserFamily(id, options).then((request) => request(axios, basePath));
    },
  };
};

/**
 * UserFamilyApi - interface
 * @export
 * @interface UserFamilyApi
 */
export interface UserFamilyApiInterface {
  /**
   *
   * @summary 建立使用者家庭連絡檔
   * @param {CreateUserFamilyCommand} [createUserFamilyCommand]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UserFamilyApiInterface
   */
  createUserFamily(
    createUserFamilyCommand?: CreateUserFamilyCommand,
    options?: AxiosRequestConfig
  ): Promise<UserFamilyViewApiResponse>;

  /**
   *
   * @summary 刪除使用者家庭連絡
   * @param {DeleteUserFamilyCommand} [deleteUserFamilyCommand]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UserFamilyApiInterface
   */
  deleteUserFamily(
    deleteUserFamilyCommand?: DeleteUserFamilyCommand,
    options?: AxiosRequestConfig
  ): Promise<UserFamilyViewApiResponse>;

  /**
   *
   * @summary 查詢使用者家庭連絡
   * @param {FetchAllUserFamilyRequest} [fetchAllUserFamilyRequest]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UserFamilyApiInterface
   */
  fetchUserFamilies(
    fetchAllUserFamilyRequest?: FetchAllUserFamilyRequest,
    options?: AxiosRequestConfig
  ): Promise<UserFamilyViewListApiResponse>;

  /**
   *
   * @summary 查詢使用者家庭連絡
   * @param {number} [id] Id
   * @param {number} [userId] 建立時間 User.Id
   * @param {string} [relativeType] 關係類別 對應SystemConfig        type&#x3D;RelativeType       顯示 name       value存此欄位0：配偶1：父母2：子女
   * @param {string} [name] 姓名
   * @param {Array<SortProperty>} [sortProperties] 查詢欄位排序
   * @param {number} [page] 目前頁數
   * @param {number} [size] 每頁筆數
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UserFamilyApiInterface
   */
  findUserFamily(
    id?: number,
    userId?: number,
    relativeType?: string,
    name?: string,
    sortProperties?: Array<SortProperty>,
    page?: number,
    size?: number,
    options?: AxiosRequestConfig
  ): Promise<UserFamilyViewPageApiResponse>;

  /**
   *
   * @summary 以 Id 查詢家庭連絡
   * @param {number} id
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UserFamilyApiInterface
   */
  getUserFamily(id: number, options?: AxiosRequestConfig): Promise<UserFamilyViewApiResponse>;

  /**
   *
   * @summary 修改使用者家庭連絡
   * @param {UpdateUserFamilyCommand} [updateUserFamilyCommand]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UserFamilyApiInterface
   */
  putUserFamily(
    updateUserFamilyCommand?: UpdateUserFamilyCommand,
    options?: AxiosRequestConfig
  ): Promise<UserFamilyViewApiResponse>;

  /**
   *
   * @summary 查詢家庭連絡列表  (*dynamic sort support)
   * @param {QueryUserFamilyRequest} [queryUserFamilyRequest]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UserFamilyApiInterface
   */
  queryUserFamilies(
    queryUserFamilyRequest?: QueryUserFamilyRequest,
    options?: AxiosRequestConfig
  ): Promise<UserFamilyViewPageApiResponse>;

  /**
   *
   * @summary 刪除主檔
   * @param {number} id
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UserFamilyApiInterface
   */
  removeUserFamily(id: number, options?: AxiosRequestConfig): Promise<Int32ApiResponse>;
}

/**
 * UserFamilyApi - object-oriented interface
 * @export
 * @class UserFamilyApi
 * @extends {BaseAPI}
 */
export class UserFamilyApi extends BaseAPI implements UserFamilyApiInterface {
  /**
   *
   * @summary 建立使用者家庭連絡檔
   * @param {CreateUserFamilyCommand} [createUserFamilyCommand]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UserFamilyApi
   */
  public createUserFamily(createUserFamilyCommand?: CreateUserFamilyCommand, options?: AxiosRequestConfig) {
    return UserFamilyApiFp(this.configuration)
      .createUserFamily(createUserFamilyCommand, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary 刪除使用者家庭連絡
   * @param {DeleteUserFamilyCommand} [deleteUserFamilyCommand]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UserFamilyApi
   */
  public deleteUserFamily(deleteUserFamilyCommand?: DeleteUserFamilyCommand, options?: AxiosRequestConfig) {
    return UserFamilyApiFp(this.configuration)
      .deleteUserFamily(deleteUserFamilyCommand, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary 查詢使用者家庭連絡
   * @param {FetchAllUserFamilyRequest} [fetchAllUserFamilyRequest]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UserFamilyApi
   */
  public fetchUserFamilies(fetchAllUserFamilyRequest?: FetchAllUserFamilyRequest, options?: AxiosRequestConfig) {
    return UserFamilyApiFp(this.configuration)
      .fetchUserFamilies(fetchAllUserFamilyRequest, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary 查詢使用者家庭連絡
   * @param {number} [id] Id
   * @param {number} [userId] 建立時間 User.Id
   * @param {string} [relativeType] 關係類別 對應SystemConfig        type&#x3D;RelativeType       顯示 name       value存此欄位0：配偶1：父母2：子女
   * @param {string} [name] 姓名
   * @param {Array<SortProperty>} [sortProperties] 查詢欄位排序
   * @param {number} [page] 目前頁數
   * @param {number} [size] 每頁筆數
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UserFamilyApi
   */
  public findUserFamily(
    id?: number,
    userId?: number,
    relativeType?: string,
    name?: string,
    sortProperties?: Array<SortProperty>,
    page?: number,
    size?: number,
    options?: AxiosRequestConfig
  ) {
    return UserFamilyApiFp(this.configuration)
      .findUserFamily(id, userId, relativeType, name, sortProperties, page, size, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary 以 Id 查詢家庭連絡
   * @param {number} id
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UserFamilyApi
   */
  public getUserFamily(id: number, options?: AxiosRequestConfig) {
    return UserFamilyApiFp(this.configuration)
      .getUserFamily(id, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary 修改使用者家庭連絡
   * @param {UpdateUserFamilyCommand} [updateUserFamilyCommand]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UserFamilyApi
   */
  public putUserFamily(updateUserFamilyCommand?: UpdateUserFamilyCommand, options?: AxiosRequestConfig) {
    return UserFamilyApiFp(this.configuration)
      .putUserFamily(updateUserFamilyCommand, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary 查詢家庭連絡列表  (*dynamic sort support)
   * @param {QueryUserFamilyRequest} [queryUserFamilyRequest]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UserFamilyApi
   */
  public queryUserFamilies(queryUserFamilyRequest?: QueryUserFamilyRequest, options?: AxiosRequestConfig) {
    return UserFamilyApiFp(this.configuration)
      .queryUserFamilies(queryUserFamilyRequest, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary 刪除主檔
   * @param {number} id
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UserFamilyApi
   */
  public removeUserFamily(id: number, options?: AxiosRequestConfig) {
    return UserFamilyApiFp(this.configuration)
      .removeUserFamily(id, options)
      .then((request) => request(this.axios, this.basePath));
  }
}

/**
 * UserPastoralCareApi - axios parameter creator
 * @export
 */
export const UserPastoralCareApiAxiosParamCreator = function (configuration?: Configuration) {
  return {
    /**
     *
     * @summary 建立使用者牧養歷程檔
     * @param {CreateUserPastoralCareCommand} [createUserPastoralCareCommand]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createUserPastoralCare: async (
      createUserPastoralCareCommand?: CreateUserPastoralCareCommand,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/userPastoralCare`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: "POST", ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication Example-id-1 required
      await setApiKeyToObject(localVarHeaderParameter, "Example-id-1", configuration);

      // authentication JWT_Authorization required
      await setApiKeyToObject(localVarHeaderParameter, "authorization", configuration);

      // authentication example-id-2 required
      await setApiKeyToObject(localVarHeaderParameter, "example-id-2", configuration);

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      localVarRequestOptions.data = serializeDataIfNeeded(
        createUserPastoralCareCommand,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary 刪除使用者牧養歷程
     * @param {DeleteUserPastoralCareCommand} [deleteUserPastoralCareCommand]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteUserPastoralCare: async (
      deleteUserPastoralCareCommand?: DeleteUserPastoralCareCommand,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/userPastoralCare`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: "DELETE", ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication Example-id-1 required
      await setApiKeyToObject(localVarHeaderParameter, "Example-id-1", configuration);

      // authentication JWT_Authorization required
      await setApiKeyToObject(localVarHeaderParameter, "authorization", configuration);

      // authentication example-id-2 required
      await setApiKeyToObject(localVarHeaderParameter, "example-id-2", configuration);

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      localVarRequestOptions.data = serializeDataIfNeeded(
        deleteUserPastoralCareCommand,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary 查詢使用者牧養歷程
     * @param {FetchAllUserPastoralCareRequest} [fetchAllUserPastoralCareRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    fetchUserPastoralCares: async (
      fetchAllUserPastoralCareRequest?: FetchAllUserPastoralCareRequest,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/userPastoralCare/fetch`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: "POST", ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication Example-id-1 required
      await setApiKeyToObject(localVarHeaderParameter, "Example-id-1", configuration);

      // authentication JWT_Authorization required
      await setApiKeyToObject(localVarHeaderParameter, "authorization", configuration);

      // authentication example-id-2 required
      await setApiKeyToObject(localVarHeaderParameter, "example-id-2", configuration);

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      localVarRequestOptions.data = serializeDataIfNeeded(
        fetchAllUserPastoralCareRequest,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary 查詢使用者牧養歷程
     * @param {number} [id] Id
     * @param {number} [userId] User.Id
     * @param {string} [careType] 牧養類型 對應SystemConfig        type&#x3D;CareType        顯示 name        value存此欄位 0：新進會員 1：移動 2：身分變更
     * @param {string} [pastoralTitle]
     * @param {string} [newArea] 新區域
     * @param {string} [oldArea] 舊區域
     * @param {string} [careDate] 日期
     * @param {string} [startDate] 異動日期啟日
     * @param {string} [endDate] 異動日期迄日
     * @param {Array<SortProperty>} [sortProperties] 查詢欄位排序
     * @param {number} [page] 目前頁數
     * @param {number} [size] 每頁筆數
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    findUserPastoralCare: async (
      id?: number,
      userId?: number,
      careType?: string,
      pastoralTitle?: string,
      newArea?: string,
      oldArea?: string,
      careDate?: string,
      startDate?: string,
      endDate?: string,
      sortProperties?: Array<SortProperty>,
      page?: number,
      size?: number,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/userPastoralCare`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: "GET", ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication Example-id-1 required
      await setApiKeyToObject(localVarHeaderParameter, "Example-id-1", configuration);

      // authentication JWT_Authorization required
      await setApiKeyToObject(localVarHeaderParameter, "authorization", configuration);

      // authentication example-id-2 required
      await setApiKeyToObject(localVarHeaderParameter, "example-id-2", configuration);

      if (id !== undefined) {
        localVarQueryParameter["id"] = id;
      }

      if (userId !== undefined) {
        localVarQueryParameter["userId"] = userId;
      }

      if (careType !== undefined) {
        localVarQueryParameter["careType"] = careType;
      }

      if (pastoralTitle !== undefined) {
        localVarQueryParameter["pastoralTitle"] = pastoralTitle;
      }

      if (newArea !== undefined) {
        localVarQueryParameter["newArea"] = newArea;
      }

      if (oldArea !== undefined) {
        localVarQueryParameter["oldArea"] = oldArea;
      }

      if (careDate !== undefined) {
        localVarQueryParameter["careDate"] =
          (careDate as any) instanceof Date ? (careDate as any).toISOString() : careDate;
      }

      if (startDate !== undefined) {
        localVarQueryParameter["startDate"] =
          (startDate as any) instanceof Date ? (startDate as any).toISOString() : startDate;
      }

      if (endDate !== undefined) {
        localVarQueryParameter["endDate"] = (endDate as any) instanceof Date ? (endDate as any).toISOString() : endDate;
      }

      if (sortProperties) {
        localVarQueryParameter["sortProperties"] = sortProperties;
      }

      if (page !== undefined) {
        localVarQueryParameter["page"] = page;
      }

      if (size !== undefined) {
        localVarQueryParameter["size"] = size;
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary 以 Id 查詢會員
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getUserPastoralCare: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists("getUserPastoralCare", "id", id);
      const localVarPath = `/api/userPastoralCare/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(id)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: "GET", ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication Example-id-1 required
      await setApiKeyToObject(localVarHeaderParameter, "Example-id-1", configuration);

      // authentication JWT_Authorization required
      await setApiKeyToObject(localVarHeaderParameter, "authorization", configuration);

      // authentication example-id-2 required
      await setApiKeyToObject(localVarHeaderParameter, "example-id-2", configuration);

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary 修改使用者牧養歷程
     * @param {UpdateUserPastoralCareCommand} [updateUserPastoralCareCommand]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    putUserPastoralCare: async (
      updateUserPastoralCareCommand?: UpdateUserPastoralCareCommand,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/userPastoralCare`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: "PUT", ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication Example-id-1 required
      await setApiKeyToObject(localVarHeaderParameter, "Example-id-1", configuration);

      // authentication JWT_Authorization required
      await setApiKeyToObject(localVarHeaderParameter, "authorization", configuration);

      // authentication example-id-2 required
      await setApiKeyToObject(localVarHeaderParameter, "example-id-2", configuration);

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      localVarRequestOptions.data = serializeDataIfNeeded(
        updateUserPastoralCareCommand,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary 查詢會員列表  (*dynamic sort support)
     * @param {QueryUserPastoralCareRequest} [queryUserPastoralCareRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    queryUserPastoralCares: async (
      queryUserPastoralCareRequest?: QueryUserPastoralCareRequest,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/userPastoralCare/query`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: "POST", ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication Example-id-1 required
      await setApiKeyToObject(localVarHeaderParameter, "Example-id-1", configuration);

      // authentication JWT_Authorization required
      await setApiKeyToObject(localVarHeaderParameter, "authorization", configuration);

      // authentication example-id-2 required
      await setApiKeyToObject(localVarHeaderParameter, "example-id-2", configuration);

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      localVarRequestOptions.data = serializeDataIfNeeded(
        queryUserPastoralCareRequest,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary 刪除主檔
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    removeUserPastoralCare: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists("removeUserPastoralCare", "id", id);
      const localVarPath = `/api/userPastoralCare/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(id)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: "DELETE", ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication Example-id-1 required
      await setApiKeyToObject(localVarHeaderParameter, "Example-id-1", configuration);

      // authentication JWT_Authorization required
      await setApiKeyToObject(localVarHeaderParameter, "authorization", configuration);

      // authentication example-id-2 required
      await setApiKeyToObject(localVarHeaderParameter, "example-id-2", configuration);

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * UserPastoralCareApi - functional programming interface
 * @export
 */
export const UserPastoralCareApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = UserPastoralCareApiAxiosParamCreator(configuration);
  return {
    /**
     *
     * @summary 建立使用者牧養歷程檔
     * @param {CreateUserPastoralCareCommand} [createUserPastoralCareCommand]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async createUserPastoralCare(
      createUserPastoralCareCommand?: CreateUserPastoralCareCommand,
      options?: AxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<UserPastoralCareViewApiResponse>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.createUserPastoralCare(
        createUserPastoralCareCommand,
        options
      );
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     *
     * @summary 刪除使用者牧養歷程
     * @param {DeleteUserPastoralCareCommand} [deleteUserPastoralCareCommand]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async deleteUserPastoralCare(
      deleteUserPastoralCareCommand?: DeleteUserPastoralCareCommand,
      options?: AxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<UserPastoralCareViewApiResponse>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.deleteUserPastoralCare(
        deleteUserPastoralCareCommand,
        options
      );
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     *
     * @summary 查詢使用者牧養歷程
     * @param {FetchAllUserPastoralCareRequest} [fetchAllUserPastoralCareRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async fetchUserPastoralCares(
      fetchAllUserPastoralCareRequest?: FetchAllUserPastoralCareRequest,
      options?: AxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<UserPastoralCareViewListApiResponse>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.fetchUserPastoralCares(
        fetchAllUserPastoralCareRequest,
        options
      );
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     *
     * @summary 查詢使用者牧養歷程
     * @param {number} [id] Id
     * @param {number} [userId] User.Id
     * @param {string} [careType] 牧養類型 對應SystemConfig        type&#x3D;CareType        顯示 name        value存此欄位 0：新進會員 1：移動 2：身分變更
     * @param {string} [pastoralTitle]
     * @param {string} [newArea] 新區域
     * @param {string} [oldArea] 舊區域
     * @param {string} [careDate] 日期
     * @param {string} [startDate] 異動日期啟日
     * @param {string} [endDate] 異動日期迄日
     * @param {Array<SortProperty>} [sortProperties] 查詢欄位排序
     * @param {number} [page] 目前頁數
     * @param {number} [size] 每頁筆數
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async findUserPastoralCare(
      id?: number,
      userId?: number,
      careType?: string,
      pastoralTitle?: string,
      newArea?: string,
      oldArea?: string,
      careDate?: string,
      startDate?: string,
      endDate?: string,
      sortProperties?: Array<SortProperty>,
      page?: number,
      size?: number,
      options?: AxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<UserPastoralCareViewPageApiResponse>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.findUserPastoralCare(
        id,
        userId,
        careType,
        pastoralTitle,
        newArea,
        oldArea,
        careDate,
        startDate,
        endDate,
        sortProperties,
        page,
        size,
        options
      );
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     *
     * @summary 以 Id 查詢會員
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getUserPastoralCare(
      id: number,
      options?: AxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<UserPastoralCareViewApiResponse>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getUserPastoralCare(id, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     *
     * @summary 修改使用者牧養歷程
     * @param {UpdateUserPastoralCareCommand} [updateUserPastoralCareCommand]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async putUserPastoralCare(
      updateUserPastoralCareCommand?: UpdateUserPastoralCareCommand,
      options?: AxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<UserPastoralCareViewApiResponse>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.putUserPastoralCare(
        updateUserPastoralCareCommand,
        options
      );
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     *
     * @summary 查詢會員列表  (*dynamic sort support)
     * @param {QueryUserPastoralCareRequest} [queryUserPastoralCareRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async queryUserPastoralCares(
      queryUserPastoralCareRequest?: QueryUserPastoralCareRequest,
      options?: AxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<UserPastoralCareViewPageApiResponse>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.queryUserPastoralCares(
        queryUserPastoralCareRequest,
        options
      );
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     *
     * @summary 刪除主檔
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async removeUserPastoralCare(
      id: number,
      options?: AxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<Int32ApiResponse>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.removeUserPastoralCare(id, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
  };
};

/**
 * UserPastoralCareApi - factory interface
 * @export
 */
export const UserPastoralCareApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance
) {
  const localVarFp = UserPastoralCareApiFp(configuration);
  return {
    /**
     *
     * @summary 建立使用者牧養歷程檔
     * @param {CreateUserPastoralCareCommand} [createUserPastoralCareCommand]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createUserPastoralCare(
      createUserPastoralCareCommand?: CreateUserPastoralCareCommand,
      options?: any
    ): Promise<UserPastoralCareViewApiResponse> {
      return localVarFp
        .createUserPastoralCare(createUserPastoralCareCommand, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary 刪除使用者牧養歷程
     * @param {DeleteUserPastoralCareCommand} [deleteUserPastoralCareCommand]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteUserPastoralCare(
      deleteUserPastoralCareCommand?: DeleteUserPastoralCareCommand,
      options?: any
    ): Promise<UserPastoralCareViewApiResponse> {
      return localVarFp
        .deleteUserPastoralCare(deleteUserPastoralCareCommand, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary 查詢使用者牧養歷程
     * @param {FetchAllUserPastoralCareRequest} [fetchAllUserPastoralCareRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    fetchUserPastoralCares(
      fetchAllUserPastoralCareRequest?: FetchAllUserPastoralCareRequest,
      options?: any
    ): Promise<UserPastoralCareViewListApiResponse> {
      return localVarFp
        .fetchUserPastoralCares(fetchAllUserPastoralCareRequest, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary 查詢使用者牧養歷程
     * @param {number} [id] Id
     * @param {number} [userId] User.Id
     * @param {string} [careType] 牧養類型 對應SystemConfig        type&#x3D;CareType        顯示 name        value存此欄位 0：新進會員 1：移動 2：身分變更
     * @param {string} [pastoralTitle]
     * @param {string} [newArea] 新區域
     * @param {string} [oldArea] 舊區域
     * @param {string} [careDate] 日期
     * @param {string} [startDate] 異動日期啟日
     * @param {string} [endDate] 異動日期迄日
     * @param {Array<SortProperty>} [sortProperties] 查詢欄位排序
     * @param {number} [page] 目前頁數
     * @param {number} [size] 每頁筆數
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    findUserPastoralCare(
      id?: number,
      userId?: number,
      careType?: string,
      pastoralTitle?: string,
      newArea?: string,
      oldArea?: string,
      careDate?: string,
      startDate?: string,
      endDate?: string,
      sortProperties?: Array<SortProperty>,
      page?: number,
      size?: number,
      options?: any
    ): Promise<UserPastoralCareViewPageApiResponse> {
      return localVarFp
        .findUserPastoralCare(
          id,
          userId,
          careType,
          pastoralTitle,
          newArea,
          oldArea,
          careDate,
          startDate,
          endDate,
          sortProperties,
          page,
          size,
          options
        )
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary 以 Id 查詢會員
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getUserPastoralCare(id: number, options?: any): Promise<UserPastoralCareViewApiResponse> {
      return localVarFp.getUserPastoralCare(id, options).then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary 修改使用者牧養歷程
     * @param {UpdateUserPastoralCareCommand} [updateUserPastoralCareCommand]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    putUserPastoralCare(
      updateUserPastoralCareCommand?: UpdateUserPastoralCareCommand,
      options?: any
    ): Promise<UserPastoralCareViewApiResponse> {
      return localVarFp
        .putUserPastoralCare(updateUserPastoralCareCommand, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary 查詢會員列表  (*dynamic sort support)
     * @param {QueryUserPastoralCareRequest} [queryUserPastoralCareRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    queryUserPastoralCares(
      queryUserPastoralCareRequest?: QueryUserPastoralCareRequest,
      options?: any
    ): Promise<UserPastoralCareViewPageApiResponse> {
      return localVarFp
        .queryUserPastoralCares(queryUserPastoralCareRequest, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary 刪除主檔
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    removeUserPastoralCare(id: number, options?: any): Promise<Int32ApiResponse> {
      return localVarFp.removeUserPastoralCare(id, options).then((request) => request(axios, basePath));
    },
  };
};

/**
 * UserPastoralCareApi - interface
 * @export
 * @interface UserPastoralCareApi
 */
export interface UserPastoralCareApiInterface {
  /**
   *
   * @summary 建立使用者牧養歷程檔
   * @param {CreateUserPastoralCareCommand} [createUserPastoralCareCommand]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UserPastoralCareApiInterface
   */
  createUserPastoralCare(
    createUserPastoralCareCommand?: CreateUserPastoralCareCommand,
    options?: AxiosRequestConfig
  ): Promise<UserPastoralCareViewApiResponse>;

  /**
   *
   * @summary 刪除使用者牧養歷程
   * @param {DeleteUserPastoralCareCommand} [deleteUserPastoralCareCommand]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UserPastoralCareApiInterface
   */
  deleteUserPastoralCare(
    deleteUserPastoralCareCommand?: DeleteUserPastoralCareCommand,
    options?: AxiosRequestConfig
  ): Promise<UserPastoralCareViewApiResponse>;

  /**
   *
   * @summary 查詢使用者牧養歷程
   * @param {FetchAllUserPastoralCareRequest} [fetchAllUserPastoralCareRequest]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UserPastoralCareApiInterface
   */
  fetchUserPastoralCares(
    fetchAllUserPastoralCareRequest?: FetchAllUserPastoralCareRequest,
    options?: AxiosRequestConfig
  ): Promise<UserPastoralCareViewListApiResponse>;

  /**
   *
   * @summary 查詢使用者牧養歷程
   * @param {number} [id] Id
   * @param {number} [userId] User.Id
   * @param {string} [careType] 牧養類型 對應SystemConfig        type&#x3D;CareType        顯示 name        value存此欄位 0：新進會員 1：移動 2：身分變更
   * @param {string} [pastoralTitle]
   * @param {string} [newArea] 新區域
   * @param {string} [oldArea] 舊區域
   * @param {string} [careDate] 日期
   * @param {string} [startDate] 異動日期啟日
   * @param {string} [endDate] 異動日期迄日
   * @param {Array<SortProperty>} [sortProperties] 查詢欄位排序
   * @param {number} [page] 目前頁數
   * @param {number} [size] 每頁筆數
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UserPastoralCareApiInterface
   */
  findUserPastoralCare(
    id?: number,
    userId?: number,
    careType?: string,
    pastoralTitle?: string,
    newArea?: string,
    oldArea?: string,
    careDate?: string,
    startDate?: string,
    endDate?: string,
    sortProperties?: Array<SortProperty>,
    page?: number,
    size?: number,
    options?: AxiosRequestConfig
  ): Promise<UserPastoralCareViewPageApiResponse>;

  /**
   *
   * @summary 以 Id 查詢會員
   * @param {number} id
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UserPastoralCareApiInterface
   */
  getUserPastoralCare(id: number, options?: AxiosRequestConfig): Promise<UserPastoralCareViewApiResponse>;

  /**
   *
   * @summary 修改使用者牧養歷程
   * @param {UpdateUserPastoralCareCommand} [updateUserPastoralCareCommand]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UserPastoralCareApiInterface
   */
  putUserPastoralCare(
    updateUserPastoralCareCommand?: UpdateUserPastoralCareCommand,
    options?: AxiosRequestConfig
  ): Promise<UserPastoralCareViewApiResponse>;

  /**
   *
   * @summary 查詢會員列表  (*dynamic sort support)
   * @param {QueryUserPastoralCareRequest} [queryUserPastoralCareRequest]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UserPastoralCareApiInterface
   */
  queryUserPastoralCares(
    queryUserPastoralCareRequest?: QueryUserPastoralCareRequest,
    options?: AxiosRequestConfig
  ): Promise<UserPastoralCareViewPageApiResponse>;

  /**
   *
   * @summary 刪除主檔
   * @param {number} id
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UserPastoralCareApiInterface
   */
  removeUserPastoralCare(id: number, options?: AxiosRequestConfig): Promise<Int32ApiResponse>;
}

/**
 * UserPastoralCareApi - object-oriented interface
 * @export
 * @class UserPastoralCareApi
 * @extends {BaseAPI}
 */
export class UserPastoralCareApi extends BaseAPI implements UserPastoralCareApiInterface {
  /**
   *
   * @summary 建立使用者牧養歷程檔
   * @param {CreateUserPastoralCareCommand} [createUserPastoralCareCommand]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UserPastoralCareApi
   */
  public createUserPastoralCare(
    createUserPastoralCareCommand?: CreateUserPastoralCareCommand,
    options?: AxiosRequestConfig
  ) {
    return UserPastoralCareApiFp(this.configuration)
      .createUserPastoralCare(createUserPastoralCareCommand, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary 刪除使用者牧養歷程
   * @param {DeleteUserPastoralCareCommand} [deleteUserPastoralCareCommand]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UserPastoralCareApi
   */
  public deleteUserPastoralCare(
    deleteUserPastoralCareCommand?: DeleteUserPastoralCareCommand,
    options?: AxiosRequestConfig
  ) {
    return UserPastoralCareApiFp(this.configuration)
      .deleteUserPastoralCare(deleteUserPastoralCareCommand, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary 查詢使用者牧養歷程
   * @param {FetchAllUserPastoralCareRequest} [fetchAllUserPastoralCareRequest]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UserPastoralCareApi
   */
  public fetchUserPastoralCares(
    fetchAllUserPastoralCareRequest?: FetchAllUserPastoralCareRequest,
    options?: AxiosRequestConfig
  ) {
    return UserPastoralCareApiFp(this.configuration)
      .fetchUserPastoralCares(fetchAllUserPastoralCareRequest, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary 查詢使用者牧養歷程
   * @param {number} [id] Id
   * @param {number} [userId] User.Id
   * @param {string} [careType] 牧養類型 對應SystemConfig        type&#x3D;CareType        顯示 name        value存此欄位 0：新進會員 1：移動 2：身分變更
   * @param {string} [pastoralTitle]
   * @param {string} [newArea] 新區域
   * @param {string} [oldArea] 舊區域
   * @param {string} [careDate] 日期
   * @param {string} [startDate] 異動日期啟日
   * @param {string} [endDate] 異動日期迄日
   * @param {Array<SortProperty>} [sortProperties] 查詢欄位排序
   * @param {number} [page] 目前頁數
   * @param {number} [size] 每頁筆數
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UserPastoralCareApi
   */
  public findUserPastoralCare(
    id?: number,
    userId?: number,
    careType?: string,
    pastoralTitle?: string,
    newArea?: string,
    oldArea?: string,
    careDate?: string,
    startDate?: string,
    endDate?: string,
    sortProperties?: Array<SortProperty>,
    page?: number,
    size?: number,
    options?: AxiosRequestConfig
  ) {
    return UserPastoralCareApiFp(this.configuration)
      .findUserPastoralCare(
        id,
        userId,
        careType,
        pastoralTitle,
        newArea,
        oldArea,
        careDate,
        startDate,
        endDate,
        sortProperties,
        page,
        size,
        options
      )
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary 以 Id 查詢會員
   * @param {number} id
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UserPastoralCareApi
   */
  public getUserPastoralCare(id: number, options?: AxiosRequestConfig) {
    return UserPastoralCareApiFp(this.configuration)
      .getUserPastoralCare(id, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary 修改使用者牧養歷程
   * @param {UpdateUserPastoralCareCommand} [updateUserPastoralCareCommand]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UserPastoralCareApi
   */
  public putUserPastoralCare(
    updateUserPastoralCareCommand?: UpdateUserPastoralCareCommand,
    options?: AxiosRequestConfig
  ) {
    return UserPastoralCareApiFp(this.configuration)
      .putUserPastoralCare(updateUserPastoralCareCommand, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary 查詢會員列表  (*dynamic sort support)
   * @param {QueryUserPastoralCareRequest} [queryUserPastoralCareRequest]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UserPastoralCareApi
   */
  public queryUserPastoralCares(
    queryUserPastoralCareRequest?: QueryUserPastoralCareRequest,
    options?: AxiosRequestConfig
  ) {
    return UserPastoralCareApiFp(this.configuration)
      .queryUserPastoralCares(queryUserPastoralCareRequest, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary 刪除主檔
   * @param {number} id
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UserPastoralCareApi
   */
  public removeUserPastoralCare(id: number, options?: AxiosRequestConfig) {
    return UserPastoralCareApiFp(this.configuration)
      .removeUserPastoralCare(id, options)
      .then((request) => request(this.axios, this.basePath));
  }
}

/**
 * UserQuestionnaireApi - axios parameter creator
 * @export
 */
export const UserQuestionnaireApiAxiosParamCreator = function (configuration?: Configuration) {
  return {
    /**
     *
     * @summary 建立問卷主檔
     * @param {CreateUserQuestionnaireCommand} [createUserQuestionnaireCommand]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createUserQuestionnaire: async (
      createUserQuestionnaireCommand?: CreateUserQuestionnaireCommand,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/userQuestionnaire`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: "POST", ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication Example-id-1 required
      await setApiKeyToObject(localVarHeaderParameter, "Example-id-1", configuration);

      // authentication JWT_Authorization required
      await setApiKeyToObject(localVarHeaderParameter, "authorization", configuration);

      // authentication example-id-2 required
      await setApiKeyToObject(localVarHeaderParameter, "example-id-2", configuration);

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      localVarRequestOptions.data = serializeDataIfNeeded(
        createUserQuestionnaireCommand,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary 刪除問卷
     * @param {DeleteUserQuestionnaireCommand} [deleteUserQuestionnaireCommand]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteUserQuestionnaire: async (
      deleteUserQuestionnaireCommand?: DeleteUserQuestionnaireCommand,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/userQuestionnaire`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: "DELETE", ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication Example-id-1 required
      await setApiKeyToObject(localVarHeaderParameter, "Example-id-1", configuration);

      // authentication JWT_Authorization required
      await setApiKeyToObject(localVarHeaderParameter, "authorization", configuration);

      // authentication example-id-2 required
      await setApiKeyToObject(localVarHeaderParameter, "example-id-2", configuration);

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      localVarRequestOptions.data = serializeDataIfNeeded(
        deleteUserQuestionnaireCommand,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary 查詢問卷
     * @param {FetchAllUserQuestionnaireRequest} [fetchAllUserQuestionnaireRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    fetchUserQuestionnaires: async (
      fetchAllUserQuestionnaireRequest?: FetchAllUserQuestionnaireRequest,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/userQuestionnaire/fetch`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: "POST", ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication Example-id-1 required
      await setApiKeyToObject(localVarHeaderParameter, "Example-id-1", configuration);

      // authentication JWT_Authorization required
      await setApiKeyToObject(localVarHeaderParameter, "authorization", configuration);

      // authentication example-id-2 required
      await setApiKeyToObject(localVarHeaderParameter, "example-id-2", configuration);

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      localVarRequestOptions.data = serializeDataIfNeeded(
        fetchAllUserQuestionnaireRequest,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary 查詢問卷
     * @param {number} [id] 會員填寫問卷.id
     * @param {number} [questionnaireId] 問卷.id
     * @param {number} [userId] User.id
     * @param {string} [questionnaireWriteType] 問卷產生預設0  問卷類型  type&#x3D;QuestionnaireWriteType  顯示 name  value存此欄位  0：未填寫  1：已填寫
     * @param {string} [questionnaireGoArea] 居住區域  type&#x3D;QuestionnaireGoArea  顯示 name  value存此欄位  0：台中  1：台北  2：高雄
     * @param {string} [satisfaction] 滿意度  type&#x3D;Satisfaction  顯示 name  value存此欄位  1：1  2：2  3：3  4：4  5：5
     * @param {string} [evaluation] 評價  type&#x3D;Satisfaction  顯示 name  value存此欄位  1：1  2：2  3：3  4：4  5：5
     * @param {string} [writeQuestionnaireDate] 填寫問卷日期
     * @param {string} [questionnaireType] 問卷類型type&#x3D;QuestionnaireType顯示 namevalue存此欄位0：課程問卷 1:服事徵召 2:一般問卷
     * @param {Array<SortProperty>} [sortProperties] 查詢欄位排序
     * @param {number} [page] 目前頁數
     * @param {number} [size] 每頁筆數
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    findUserQuestionnaire: async (
      id?: number,
      questionnaireId?: number,
      userId?: number,
      questionnaireWriteType?: string,
      questionnaireGoArea?: string,
      satisfaction?: string,
      evaluation?: string,
      writeQuestionnaireDate?: string,
      questionnaireType?: string,
      sortProperties?: Array<SortProperty>,
      page?: number,
      size?: number,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/userQuestionnaire`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: "GET", ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication Example-id-1 required
      await setApiKeyToObject(localVarHeaderParameter, "Example-id-1", configuration);

      // authentication JWT_Authorization required
      await setApiKeyToObject(localVarHeaderParameter, "authorization", configuration);

      // authentication example-id-2 required
      await setApiKeyToObject(localVarHeaderParameter, "example-id-2", configuration);

      if (id !== undefined) {
        localVarQueryParameter["id"] = id;
      }

      if (questionnaireId !== undefined) {
        localVarQueryParameter["questionnaireId"] = questionnaireId;
      }

      if (userId !== undefined) {
        localVarQueryParameter["userId"] = userId;
      }

      if (questionnaireWriteType !== undefined) {
        localVarQueryParameter["questionnaireWriteType"] = questionnaireWriteType;
      }

      if (questionnaireGoArea !== undefined) {
        localVarQueryParameter["questionnaireGoArea"] = questionnaireGoArea;
      }

      if (satisfaction !== undefined) {
        localVarQueryParameter["satisfaction"] = satisfaction;
      }

      if (evaluation !== undefined) {
        localVarQueryParameter["evaluation"] = evaluation;
      }

      if (writeQuestionnaireDate !== undefined) {
        localVarQueryParameter["writeQuestionnaireDate"] =
          (writeQuestionnaireDate as any) instanceof Date
            ? (writeQuestionnaireDate as any).toISOString()
            : writeQuestionnaireDate;
      }

      if (questionnaireType !== undefined) {
        localVarQueryParameter["questionnaireType"] = questionnaireType;
      }

      if (sortProperties) {
        localVarQueryParameter["sortProperties"] = sortProperties;
      }

      if (page !== undefined) {
        localVarQueryParameter["page"] = page;
      }

      if (size !== undefined) {
        localVarQueryParameter["size"] = size;
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary 以 Id 查詢問卷
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getUserQuestionnaire: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists("getUserQuestionnaire", "id", id);
      const localVarPath = `/api/userQuestionnaire/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(id)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: "GET", ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication Example-id-1 required
      await setApiKeyToObject(localVarHeaderParameter, "Example-id-1", configuration);

      // authentication JWT_Authorization required
      await setApiKeyToObject(localVarHeaderParameter, "authorization", configuration);

      // authentication example-id-2 required
      await setApiKeyToObject(localVarHeaderParameter, "example-id-2", configuration);

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary 修改問卷
     * @param {UpdateUserQuestionnaireCommand} [updateUserQuestionnaireCommand]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    putUserQuestionnaire: async (
      updateUserQuestionnaireCommand?: UpdateUserQuestionnaireCommand,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/userQuestionnaire`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: "PUT", ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication Example-id-1 required
      await setApiKeyToObject(localVarHeaderParameter, "Example-id-1", configuration);

      // authentication JWT_Authorization required
      await setApiKeyToObject(localVarHeaderParameter, "authorization", configuration);

      // authentication example-id-2 required
      await setApiKeyToObject(localVarHeaderParameter, "example-id-2", configuration);

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      localVarRequestOptions.data = serializeDataIfNeeded(
        updateUserQuestionnaireCommand,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary 查詢問卷列表  (*dynamic sort support)
     * @param {QueryUserQuestionnaireRequest} [queryUserQuestionnaireRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    queryUserQuestionnaires: async (
      queryUserQuestionnaireRequest?: QueryUserQuestionnaireRequest,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/userQuestionnaire/query`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: "POST", ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication Example-id-1 required
      await setApiKeyToObject(localVarHeaderParameter, "Example-id-1", configuration);

      // authentication JWT_Authorization required
      await setApiKeyToObject(localVarHeaderParameter, "authorization", configuration);

      // authentication example-id-2 required
      await setApiKeyToObject(localVarHeaderParameter, "example-id-2", configuration);

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      localVarRequestOptions.data = serializeDataIfNeeded(
        queryUserQuestionnaireRequest,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary 刪除主檔
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    removeUserQuestionnaire: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists("removeUserQuestionnaire", "id", id);
      const localVarPath = `/api/userQuestionnaire/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(id)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: "DELETE", ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication Example-id-1 required
      await setApiKeyToObject(localVarHeaderParameter, "Example-id-1", configuration);

      // authentication JWT_Authorization required
      await setApiKeyToObject(localVarHeaderParameter, "authorization", configuration);

      // authentication example-id-2 required
      await setApiKeyToObject(localVarHeaderParameter, "example-id-2", configuration);

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * UserQuestionnaireApi - functional programming interface
 * @export
 */
export const UserQuestionnaireApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = UserQuestionnaireApiAxiosParamCreator(configuration);
  return {
    /**
     *
     * @summary 建立問卷主檔
     * @param {CreateUserQuestionnaireCommand} [createUserQuestionnaireCommand]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async createUserQuestionnaire(
      createUserQuestionnaireCommand?: CreateUserQuestionnaireCommand,
      options?: AxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<UserQuestionnaireViewApiResponse>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.createUserQuestionnaire(
        createUserQuestionnaireCommand,
        options
      );
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     *
     * @summary 刪除問卷
     * @param {DeleteUserQuestionnaireCommand} [deleteUserQuestionnaireCommand]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async deleteUserQuestionnaire(
      deleteUserQuestionnaireCommand?: DeleteUserQuestionnaireCommand,
      options?: AxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<UserQuestionnaireViewApiResponse>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.deleteUserQuestionnaire(
        deleteUserQuestionnaireCommand,
        options
      );
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     *
     * @summary 查詢問卷
     * @param {FetchAllUserQuestionnaireRequest} [fetchAllUserQuestionnaireRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async fetchUserQuestionnaires(
      fetchAllUserQuestionnaireRequest?: FetchAllUserQuestionnaireRequest,
      options?: AxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<UserQuestionnaireViewListApiResponse>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.fetchUserQuestionnaires(
        fetchAllUserQuestionnaireRequest,
        options
      );
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     *
     * @summary 查詢問卷
     * @param {number} [id] 會員填寫問卷.id
     * @param {number} [questionnaireId] 問卷.id
     * @param {number} [userId] User.id
     * @param {string} [questionnaireWriteType] 問卷產生預設0  問卷類型  type&#x3D;QuestionnaireWriteType  顯示 name  value存此欄位  0：未填寫  1：已填寫
     * @param {string} [questionnaireGoArea] 居住區域  type&#x3D;QuestionnaireGoArea  顯示 name  value存此欄位  0：台中  1：台北  2：高雄
     * @param {string} [satisfaction] 滿意度  type&#x3D;Satisfaction  顯示 name  value存此欄位  1：1  2：2  3：3  4：4  5：5
     * @param {string} [evaluation] 評價  type&#x3D;Satisfaction  顯示 name  value存此欄位  1：1  2：2  3：3  4：4  5：5
     * @param {string} [writeQuestionnaireDate] 填寫問卷日期
     * @param {string} [questionnaireType] 問卷類型type&#x3D;QuestionnaireType顯示 namevalue存此欄位0：課程問卷 1:服事徵召 2:一般問卷
     * @param {Array<SortProperty>} [sortProperties] 查詢欄位排序
     * @param {number} [page] 目前頁數
     * @param {number} [size] 每頁筆數
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async findUserQuestionnaire(
      id?: number,
      questionnaireId?: number,
      userId?: number,
      questionnaireWriteType?: string,
      questionnaireGoArea?: string,
      satisfaction?: string,
      evaluation?: string,
      writeQuestionnaireDate?: string,
      questionnaireType?: string,
      sortProperties?: Array<SortProperty>,
      page?: number,
      size?: number,
      options?: AxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<UserQuestionnaireViewPageApiResponse>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.findUserQuestionnaire(
        id,
        questionnaireId,
        userId,
        questionnaireWriteType,
        questionnaireGoArea,
        satisfaction,
        evaluation,
        writeQuestionnaireDate,
        questionnaireType,
        sortProperties,
        page,
        size,
        options
      );
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     *
     * @summary 以 Id 查詢問卷
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getUserQuestionnaire(
      id: number,
      options?: AxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<UserQuestionnaireViewApiResponse>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getUserQuestionnaire(id, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     *
     * @summary 修改問卷
     * @param {UpdateUserQuestionnaireCommand} [updateUserQuestionnaireCommand]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async putUserQuestionnaire(
      updateUserQuestionnaireCommand?: UpdateUserQuestionnaireCommand,
      options?: AxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<UserQuestionnaireViewApiResponse>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.putUserQuestionnaire(
        updateUserQuestionnaireCommand,
        options
      );
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     *
     * @summary 查詢問卷列表  (*dynamic sort support)
     * @param {QueryUserQuestionnaireRequest} [queryUserQuestionnaireRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async queryUserQuestionnaires(
      queryUserQuestionnaireRequest?: QueryUserQuestionnaireRequest,
      options?: AxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<UserQuestionnaireViewPageApiResponse>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.queryUserQuestionnaires(
        queryUserQuestionnaireRequest,
        options
      );
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     *
     * @summary 刪除主檔
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async removeUserQuestionnaire(
      id: number,
      options?: AxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<Int32ApiResponse>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.removeUserQuestionnaire(id, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
  };
};

/**
 * UserQuestionnaireApi - factory interface
 * @export
 */
export const UserQuestionnaireApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance
) {
  const localVarFp = UserQuestionnaireApiFp(configuration);
  return {
    /**
     *
     * @summary 建立問卷主檔
     * @param {CreateUserQuestionnaireCommand} [createUserQuestionnaireCommand]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createUserQuestionnaire(
      createUserQuestionnaireCommand?: CreateUserQuestionnaireCommand,
      options?: any
    ): Promise<UserQuestionnaireViewApiResponse> {
      return localVarFp
        .createUserQuestionnaire(createUserQuestionnaireCommand, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary 刪除問卷
     * @param {DeleteUserQuestionnaireCommand} [deleteUserQuestionnaireCommand]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteUserQuestionnaire(
      deleteUserQuestionnaireCommand?: DeleteUserQuestionnaireCommand,
      options?: any
    ): Promise<UserQuestionnaireViewApiResponse> {
      return localVarFp
        .deleteUserQuestionnaire(deleteUserQuestionnaireCommand, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary 查詢問卷
     * @param {FetchAllUserQuestionnaireRequest} [fetchAllUserQuestionnaireRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    fetchUserQuestionnaires(
      fetchAllUserQuestionnaireRequest?: FetchAllUserQuestionnaireRequest,
      options?: any
    ): Promise<UserQuestionnaireViewListApiResponse> {
      return localVarFp
        .fetchUserQuestionnaires(fetchAllUserQuestionnaireRequest, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary 查詢問卷
     * @param {number} [id] 會員填寫問卷.id
     * @param {number} [questionnaireId] 問卷.id
     * @param {number} [userId] User.id
     * @param {string} [questionnaireWriteType] 問卷產生預設0  問卷類型  type&#x3D;QuestionnaireWriteType  顯示 name  value存此欄位  0：未填寫  1：已填寫
     * @param {string} [questionnaireGoArea] 居住區域  type&#x3D;QuestionnaireGoArea  顯示 name  value存此欄位  0：台中  1：台北  2：高雄
     * @param {string} [satisfaction] 滿意度  type&#x3D;Satisfaction  顯示 name  value存此欄位  1：1  2：2  3：3  4：4  5：5
     * @param {string} [evaluation] 評價  type&#x3D;Satisfaction  顯示 name  value存此欄位  1：1  2：2  3：3  4：4  5：5
     * @param {string} [writeQuestionnaireDate] 填寫問卷日期
     * @param {string} [questionnaireType] 問卷類型type&#x3D;QuestionnaireType顯示 namevalue存此欄位0：課程問卷 1:服事徵召 2:一般問卷
     * @param {Array<SortProperty>} [sortProperties] 查詢欄位排序
     * @param {number} [page] 目前頁數
     * @param {number} [size] 每頁筆數
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    findUserQuestionnaire(
      id?: number,
      questionnaireId?: number,
      userId?: number,
      questionnaireWriteType?: string,
      questionnaireGoArea?: string,
      satisfaction?: string,
      evaluation?: string,
      writeQuestionnaireDate?: string,
      questionnaireType?: string,
      sortProperties?: Array<SortProperty>,
      page?: number,
      size?: number,
      options?: any
    ): Promise<UserQuestionnaireViewPageApiResponse> {
      return localVarFp
        .findUserQuestionnaire(
          id,
          questionnaireId,
          userId,
          questionnaireWriteType,
          questionnaireGoArea,
          satisfaction,
          evaluation,
          writeQuestionnaireDate,
          questionnaireType,
          sortProperties,
          page,
          size,
          options
        )
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary 以 Id 查詢問卷
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getUserQuestionnaire(id: number, options?: any): Promise<UserQuestionnaireViewApiResponse> {
      return localVarFp.getUserQuestionnaire(id, options).then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary 修改問卷
     * @param {UpdateUserQuestionnaireCommand} [updateUserQuestionnaireCommand]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    putUserQuestionnaire(
      updateUserQuestionnaireCommand?: UpdateUserQuestionnaireCommand,
      options?: any
    ): Promise<UserQuestionnaireViewApiResponse> {
      return localVarFp
        .putUserQuestionnaire(updateUserQuestionnaireCommand, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary 查詢問卷列表  (*dynamic sort support)
     * @param {QueryUserQuestionnaireRequest} [queryUserQuestionnaireRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    queryUserQuestionnaires(
      queryUserQuestionnaireRequest?: QueryUserQuestionnaireRequest,
      options?: any
    ): Promise<UserQuestionnaireViewPageApiResponse> {
      return localVarFp
        .queryUserQuestionnaires(queryUserQuestionnaireRequest, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary 刪除主檔
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    removeUserQuestionnaire(id: number, options?: any): Promise<Int32ApiResponse> {
      return localVarFp.removeUserQuestionnaire(id, options).then((request) => request(axios, basePath));
    },
  };
};

/**
 * UserQuestionnaireApi - interface
 * @export
 * @interface UserQuestionnaireApi
 */
export interface UserQuestionnaireApiInterface {
  /**
   *
   * @summary 建立問卷主檔
   * @param {CreateUserQuestionnaireCommand} [createUserQuestionnaireCommand]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UserQuestionnaireApiInterface
   */
  createUserQuestionnaire(
    createUserQuestionnaireCommand?: CreateUserQuestionnaireCommand,
    options?: AxiosRequestConfig
  ): Promise<UserQuestionnaireViewApiResponse>;

  /**
   *
   * @summary 刪除問卷
   * @param {DeleteUserQuestionnaireCommand} [deleteUserQuestionnaireCommand]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UserQuestionnaireApiInterface
   */
  deleteUserQuestionnaire(
    deleteUserQuestionnaireCommand?: DeleteUserQuestionnaireCommand,
    options?: AxiosRequestConfig
  ): Promise<UserQuestionnaireViewApiResponse>;

  /**
   *
   * @summary 查詢問卷
   * @param {FetchAllUserQuestionnaireRequest} [fetchAllUserQuestionnaireRequest]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UserQuestionnaireApiInterface
   */
  fetchUserQuestionnaires(
    fetchAllUserQuestionnaireRequest?: FetchAllUserQuestionnaireRequest,
    options?: AxiosRequestConfig
  ): Promise<UserQuestionnaireViewListApiResponse>;

  /**
   *
   * @summary 查詢問卷
   * @param {number} [id] 會員填寫問卷.id
   * @param {number} [questionnaireId] 問卷.id
   * @param {number} [userId] User.id
   * @param {string} [questionnaireWriteType] 問卷產生預設0  問卷類型  type&#x3D;QuestionnaireWriteType  顯示 name  value存此欄位  0：未填寫  1：已填寫
   * @param {string} [questionnaireGoArea] 居住區域  type&#x3D;QuestionnaireGoArea  顯示 name  value存此欄位  0：台中  1：台北  2：高雄
   * @param {string} [satisfaction] 滿意度  type&#x3D;Satisfaction  顯示 name  value存此欄位  1：1  2：2  3：3  4：4  5：5
   * @param {string} [evaluation] 評價  type&#x3D;Satisfaction  顯示 name  value存此欄位  1：1  2：2  3：3  4：4  5：5
   * @param {string} [writeQuestionnaireDate] 填寫問卷日期
   * @param {string} [questionnaireType] 問卷類型type&#x3D;QuestionnaireType顯示 namevalue存此欄位0：課程問卷 1:服事徵召 2:一般問卷
   * @param {Array<SortProperty>} [sortProperties] 查詢欄位排序
   * @param {number} [page] 目前頁數
   * @param {number} [size] 每頁筆數
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UserQuestionnaireApiInterface
   */
  findUserQuestionnaire(
    id?: number,
    questionnaireId?: number,
    userId?: number,
    questionnaireWriteType?: string,
    questionnaireGoArea?: string,
    satisfaction?: string,
    evaluation?: string,
    writeQuestionnaireDate?: string,
    questionnaireType?: string,
    sortProperties?: Array<SortProperty>,
    page?: number,
    size?: number,
    options?: AxiosRequestConfig
  ): Promise<UserQuestionnaireViewPageApiResponse>;

  /**
   *
   * @summary 以 Id 查詢問卷
   * @param {number} id
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UserQuestionnaireApiInterface
   */
  getUserQuestionnaire(id: number, options?: AxiosRequestConfig): Promise<UserQuestionnaireViewApiResponse>;

  /**
   *
   * @summary 修改問卷
   * @param {UpdateUserQuestionnaireCommand} [updateUserQuestionnaireCommand]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UserQuestionnaireApiInterface
   */
  putUserQuestionnaire(
    updateUserQuestionnaireCommand?: UpdateUserQuestionnaireCommand,
    options?: AxiosRequestConfig
  ): Promise<UserQuestionnaireViewApiResponse>;

  /**
   *
   * @summary 查詢問卷列表  (*dynamic sort support)
   * @param {QueryUserQuestionnaireRequest} [queryUserQuestionnaireRequest]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UserQuestionnaireApiInterface
   */
  queryUserQuestionnaires(
    queryUserQuestionnaireRequest?: QueryUserQuestionnaireRequest,
    options?: AxiosRequestConfig
  ): Promise<UserQuestionnaireViewPageApiResponse>;

  /**
   *
   * @summary 刪除主檔
   * @param {number} id
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UserQuestionnaireApiInterface
   */
  removeUserQuestionnaire(id: number, options?: AxiosRequestConfig): Promise<Int32ApiResponse>;
}

/**
 * UserQuestionnaireApi - object-oriented interface
 * @export
 * @class UserQuestionnaireApi
 * @extends {BaseAPI}
 */
export class UserQuestionnaireApi extends BaseAPI implements UserQuestionnaireApiInterface {
  /**
   *
   * @summary 建立問卷主檔
   * @param {CreateUserQuestionnaireCommand} [createUserQuestionnaireCommand]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UserQuestionnaireApi
   */
  public createUserQuestionnaire(
    createUserQuestionnaireCommand?: CreateUserQuestionnaireCommand,
    options?: AxiosRequestConfig
  ) {
    return UserQuestionnaireApiFp(this.configuration)
      .createUserQuestionnaire(createUserQuestionnaireCommand, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary 刪除問卷
   * @param {DeleteUserQuestionnaireCommand} [deleteUserQuestionnaireCommand]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UserQuestionnaireApi
   */
  public deleteUserQuestionnaire(
    deleteUserQuestionnaireCommand?: DeleteUserQuestionnaireCommand,
    options?: AxiosRequestConfig
  ) {
    return UserQuestionnaireApiFp(this.configuration)
      .deleteUserQuestionnaire(deleteUserQuestionnaireCommand, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary 查詢問卷
   * @param {FetchAllUserQuestionnaireRequest} [fetchAllUserQuestionnaireRequest]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UserQuestionnaireApi
   */
  public fetchUserQuestionnaires(
    fetchAllUserQuestionnaireRequest?: FetchAllUserQuestionnaireRequest,
    options?: AxiosRequestConfig
  ) {
    return UserQuestionnaireApiFp(this.configuration)
      .fetchUserQuestionnaires(fetchAllUserQuestionnaireRequest, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary 查詢問卷
   * @param {number} [id] 會員填寫問卷.id
   * @param {number} [questionnaireId] 問卷.id
   * @param {number} [userId] User.id
   * @param {string} [questionnaireWriteType] 問卷產生預設0  問卷類型  type&#x3D;QuestionnaireWriteType  顯示 name  value存此欄位  0：未填寫  1：已填寫
   * @param {string} [questionnaireGoArea] 居住區域  type&#x3D;QuestionnaireGoArea  顯示 name  value存此欄位  0：台中  1：台北  2：高雄
   * @param {string} [satisfaction] 滿意度  type&#x3D;Satisfaction  顯示 name  value存此欄位  1：1  2：2  3：3  4：4  5：5
   * @param {string} [evaluation] 評價  type&#x3D;Satisfaction  顯示 name  value存此欄位  1：1  2：2  3：3  4：4  5：5
   * @param {string} [writeQuestionnaireDate] 填寫問卷日期
   * @param {string} [questionnaireType] 問卷類型type&#x3D;QuestionnaireType顯示 namevalue存此欄位0：課程問卷 1:服事徵召 2:一般問卷
   * @param {Array<SortProperty>} [sortProperties] 查詢欄位排序
   * @param {number} [page] 目前頁數
   * @param {number} [size] 每頁筆數
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UserQuestionnaireApi
   */
  public findUserQuestionnaire(
    id?: number,
    questionnaireId?: number,
    userId?: number,
    questionnaireWriteType?: string,
    questionnaireGoArea?: string,
    satisfaction?: string,
    evaluation?: string,
    writeQuestionnaireDate?: string,
    questionnaireType?: string,
    sortProperties?: Array<SortProperty>,
    page?: number,
    size?: number,
    options?: AxiosRequestConfig
  ) {
    return UserQuestionnaireApiFp(this.configuration)
      .findUserQuestionnaire(
        id,
        questionnaireId,
        userId,
        questionnaireWriteType,
        questionnaireGoArea,
        satisfaction,
        evaluation,
        writeQuestionnaireDate,
        questionnaireType,
        sortProperties,
        page,
        size,
        options
      )
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary 以 Id 查詢問卷
   * @param {number} id
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UserQuestionnaireApi
   */
  public getUserQuestionnaire(id: number, options?: AxiosRequestConfig) {
    return UserQuestionnaireApiFp(this.configuration)
      .getUserQuestionnaire(id, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary 修改問卷
   * @param {UpdateUserQuestionnaireCommand} [updateUserQuestionnaireCommand]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UserQuestionnaireApi
   */
  public putUserQuestionnaire(
    updateUserQuestionnaireCommand?: UpdateUserQuestionnaireCommand,
    options?: AxiosRequestConfig
  ) {
    return UserQuestionnaireApiFp(this.configuration)
      .putUserQuestionnaire(updateUserQuestionnaireCommand, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary 查詢問卷列表  (*dynamic sort support)
   * @param {QueryUserQuestionnaireRequest} [queryUserQuestionnaireRequest]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UserQuestionnaireApi
   */
  public queryUserQuestionnaires(
    queryUserQuestionnaireRequest?: QueryUserQuestionnaireRequest,
    options?: AxiosRequestConfig
  ) {
    return UserQuestionnaireApiFp(this.configuration)
      .queryUserQuestionnaires(queryUserQuestionnaireRequest, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary 刪除主檔
   * @param {number} id
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UserQuestionnaireApi
   */
  public removeUserQuestionnaire(id: number, options?: AxiosRequestConfig) {
    return UserQuestionnaireApiFp(this.configuration)
      .removeUserQuestionnaire(id, options)
      .then((request) => request(this.axios, this.basePath));
  }
}

/**
 * UserSocietyApi - axios parameter creator
 * @export
 */
export const UserSocietyApiAxiosParamCreator = function (configuration?: Configuration) {
  return {
    /**
     *
     * @summary 建立使用者工會/社團檔
     * @param {CreateUserSocietyCommand} [createUserSocietyCommand]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createUserSociety: async (
      createUserSocietyCommand?: CreateUserSocietyCommand,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/userSociety`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: "POST", ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication Example-id-1 required
      await setApiKeyToObject(localVarHeaderParameter, "Example-id-1", configuration);

      // authentication JWT_Authorization required
      await setApiKeyToObject(localVarHeaderParameter, "authorization", configuration);

      // authentication example-id-2 required
      await setApiKeyToObject(localVarHeaderParameter, "example-id-2", configuration);

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      localVarRequestOptions.data = serializeDataIfNeeded(
        createUserSocietyCommand,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary 刪除社團
     * @param {DeleteUserSocietyCommand} [deleteUserSocietyCommand]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteUserSociety: async (
      deleteUserSocietyCommand?: DeleteUserSocietyCommand,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/userSociety`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: "DELETE", ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication Example-id-1 required
      await setApiKeyToObject(localVarHeaderParameter, "Example-id-1", configuration);

      // authentication JWT_Authorization required
      await setApiKeyToObject(localVarHeaderParameter, "authorization", configuration);

      // authentication example-id-2 required
      await setApiKeyToObject(localVarHeaderParameter, "example-id-2", configuration);

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      localVarRequestOptions.data = serializeDataIfNeeded(
        deleteUserSocietyCommand,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary 查詢社團
     * @param {FetchAllUserSocietyRequest} [fetchAllUserSocietyRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    fetchUserSocietys: async (
      fetchAllUserSocietyRequest?: FetchAllUserSocietyRequest,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/userSociety/fetch`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: "POST", ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication Example-id-1 required
      await setApiKeyToObject(localVarHeaderParameter, "Example-id-1", configuration);

      // authentication JWT_Authorization required
      await setApiKeyToObject(localVarHeaderParameter, "authorization", configuration);

      // authentication example-id-2 required
      await setApiKeyToObject(localVarHeaderParameter, "example-id-2", configuration);

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      localVarRequestOptions.data = serializeDataIfNeeded(
        fetchAllUserSocietyRequest,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary 查詢社團
     * @param {number} [id] Key
     * @param {number} [userId] User.Id
     * @param {string} [name] User.Name
     * @param {Array<SortProperty>} [sortProperties] 查詢欄位排序
     * @param {number} [page] 目前頁數
     * @param {number} [size] 每頁筆數
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    findUserSociety: async (
      id?: number,
      userId?: number,
      name?: string,
      sortProperties?: Array<SortProperty>,
      page?: number,
      size?: number,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/userSociety`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: "GET", ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication Example-id-1 required
      await setApiKeyToObject(localVarHeaderParameter, "Example-id-1", configuration);

      // authentication JWT_Authorization required
      await setApiKeyToObject(localVarHeaderParameter, "authorization", configuration);

      // authentication example-id-2 required
      await setApiKeyToObject(localVarHeaderParameter, "example-id-2", configuration);

      if (id !== undefined) {
        localVarQueryParameter["id"] = id;
      }

      if (userId !== undefined) {
        localVarQueryParameter["userId"] = userId;
      }

      if (name !== undefined) {
        localVarQueryParameter["name"] = name;
      }

      if (sortProperties) {
        localVarQueryParameter["sortProperties"] = sortProperties;
      }

      if (page !== undefined) {
        localVarQueryParameter["page"] = page;
      }

      if (size !== undefined) {
        localVarQueryParameter["size"] = size;
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary 以 Id 查詢社團
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getUserSociety: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists("getUserSociety", "id", id);
      const localVarPath = `/api/userSociety/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(id)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: "GET", ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication Example-id-1 required
      await setApiKeyToObject(localVarHeaderParameter, "Example-id-1", configuration);

      // authentication JWT_Authorization required
      await setApiKeyToObject(localVarHeaderParameter, "authorization", configuration);

      // authentication example-id-2 required
      await setApiKeyToObject(localVarHeaderParameter, "example-id-2", configuration);

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary 修改社團
     * @param {UpdateUserSocietyCommand} [updateUserSocietyCommand]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    putUserSociety: async (
      updateUserSocietyCommand?: UpdateUserSocietyCommand,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/userSociety`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: "PUT", ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication Example-id-1 required
      await setApiKeyToObject(localVarHeaderParameter, "Example-id-1", configuration);

      // authentication JWT_Authorization required
      await setApiKeyToObject(localVarHeaderParameter, "authorization", configuration);

      // authentication example-id-2 required
      await setApiKeyToObject(localVarHeaderParameter, "example-id-2", configuration);

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      localVarRequestOptions.data = serializeDataIfNeeded(
        updateUserSocietyCommand,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary 查詢社團列表  (*dynamic sort support)
     * @param {QueryUserSocietyRequest} [queryUserSocietyRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    queryUserSocietys: async (
      queryUserSocietyRequest?: QueryUserSocietyRequest,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/userSociety/query`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: "POST", ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication Example-id-1 required
      await setApiKeyToObject(localVarHeaderParameter, "Example-id-1", configuration);

      // authentication JWT_Authorization required
      await setApiKeyToObject(localVarHeaderParameter, "authorization", configuration);

      // authentication example-id-2 required
      await setApiKeyToObject(localVarHeaderParameter, "example-id-2", configuration);

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      localVarRequestOptions.data = serializeDataIfNeeded(
        queryUserSocietyRequest,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary 刪除主檔
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    removeUserSociety: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists("removeUserSociety", "id", id);
      const localVarPath = `/api/userSociety/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(id)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: "DELETE", ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication Example-id-1 required
      await setApiKeyToObject(localVarHeaderParameter, "Example-id-1", configuration);

      // authentication JWT_Authorization required
      await setApiKeyToObject(localVarHeaderParameter, "authorization", configuration);

      // authentication example-id-2 required
      await setApiKeyToObject(localVarHeaderParameter, "example-id-2", configuration);

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * UserSocietyApi - functional programming interface
 * @export
 */
export const UserSocietyApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = UserSocietyApiAxiosParamCreator(configuration);
  return {
    /**
     *
     * @summary 建立使用者工會/社團檔
     * @param {CreateUserSocietyCommand} [createUserSocietyCommand]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async createUserSociety(
      createUserSocietyCommand?: CreateUserSocietyCommand,
      options?: AxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<UserSocietyViewApiResponse>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.createUserSociety(createUserSocietyCommand, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     *
     * @summary 刪除社團
     * @param {DeleteUserSocietyCommand} [deleteUserSocietyCommand]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async deleteUserSociety(
      deleteUserSocietyCommand?: DeleteUserSocietyCommand,
      options?: AxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<UserSocietyViewApiResponse>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.deleteUserSociety(deleteUserSocietyCommand, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     *
     * @summary 查詢社團
     * @param {FetchAllUserSocietyRequest} [fetchAllUserSocietyRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async fetchUserSocietys(
      fetchAllUserSocietyRequest?: FetchAllUserSocietyRequest,
      options?: AxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<UserSocietyViewListApiResponse>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.fetchUserSocietys(fetchAllUserSocietyRequest, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     *
     * @summary 查詢社團
     * @param {number} [id] Key
     * @param {number} [userId] User.Id
     * @param {string} [name] User.Name
     * @param {Array<SortProperty>} [sortProperties] 查詢欄位排序
     * @param {number} [page] 目前頁數
     * @param {number} [size] 每頁筆數
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async findUserSociety(
      id?: number,
      userId?: number,
      name?: string,
      sortProperties?: Array<SortProperty>,
      page?: number,
      size?: number,
      options?: AxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<UserSocietyViewPageApiResponse>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.findUserSociety(
        id,
        userId,
        name,
        sortProperties,
        page,
        size,
        options
      );
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     *
     * @summary 以 Id 查詢社團
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getUserSociety(
      id: number,
      options?: AxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<UserSocietyViewApiResponse>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getUserSociety(id, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     *
     * @summary 修改社團
     * @param {UpdateUserSocietyCommand} [updateUserSocietyCommand]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async putUserSociety(
      updateUserSocietyCommand?: UpdateUserSocietyCommand,
      options?: AxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<UserSocietyViewApiResponse>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.putUserSociety(updateUserSocietyCommand, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     *
     * @summary 查詢社團列表  (*dynamic sort support)
     * @param {QueryUserSocietyRequest} [queryUserSocietyRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async queryUserSocietys(
      queryUserSocietyRequest?: QueryUserSocietyRequest,
      options?: AxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<UserSocietyViewPageApiResponse>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.queryUserSocietys(queryUserSocietyRequest, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     *
     * @summary 刪除主檔
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async removeUserSociety(
      id: number,
      options?: AxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<Int32ApiResponse>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.removeUserSociety(id, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
  };
};

/**
 * UserSocietyApi - factory interface
 * @export
 */
export const UserSocietyApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance
) {
  const localVarFp = UserSocietyApiFp(configuration);
  return {
    /**
     *
     * @summary 建立使用者工會/社團檔
     * @param {CreateUserSocietyCommand} [createUserSocietyCommand]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createUserSociety(
      createUserSocietyCommand?: CreateUserSocietyCommand,
      options?: any
    ): Promise<UserSocietyViewApiResponse> {
      return localVarFp
        .createUserSociety(createUserSocietyCommand, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary 刪除社團
     * @param {DeleteUserSocietyCommand} [deleteUserSocietyCommand]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteUserSociety(
      deleteUserSocietyCommand?: DeleteUserSocietyCommand,
      options?: any
    ): Promise<UserSocietyViewApiResponse> {
      return localVarFp
        .deleteUserSociety(deleteUserSocietyCommand, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary 查詢社團
     * @param {FetchAllUserSocietyRequest} [fetchAllUserSocietyRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    fetchUserSocietys(
      fetchAllUserSocietyRequest?: FetchAllUserSocietyRequest,
      options?: any
    ): Promise<UserSocietyViewListApiResponse> {
      return localVarFp
        .fetchUserSocietys(fetchAllUserSocietyRequest, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary 查詢社團
     * @param {number} [id] Key
     * @param {number} [userId] User.Id
     * @param {string} [name] User.Name
     * @param {Array<SortProperty>} [sortProperties] 查詢欄位排序
     * @param {number} [page] 目前頁數
     * @param {number} [size] 每頁筆數
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    findUserSociety(
      id?: number,
      userId?: number,
      name?: string,
      sortProperties?: Array<SortProperty>,
      page?: number,
      size?: number,
      options?: any
    ): Promise<UserSocietyViewPageApiResponse> {
      return localVarFp
        .findUserSociety(id, userId, name, sortProperties, page, size, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary 以 Id 查詢社團
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getUserSociety(id: number, options?: any): Promise<UserSocietyViewApiResponse> {
      return localVarFp.getUserSociety(id, options).then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary 修改社團
     * @param {UpdateUserSocietyCommand} [updateUserSocietyCommand]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    putUserSociety(
      updateUserSocietyCommand?: UpdateUserSocietyCommand,
      options?: any
    ): Promise<UserSocietyViewApiResponse> {
      return localVarFp.putUserSociety(updateUserSocietyCommand, options).then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary 查詢社團列表  (*dynamic sort support)
     * @param {QueryUserSocietyRequest} [queryUserSocietyRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    queryUserSocietys(
      queryUserSocietyRequest?: QueryUserSocietyRequest,
      options?: any
    ): Promise<UserSocietyViewPageApiResponse> {
      return localVarFp.queryUserSocietys(queryUserSocietyRequest, options).then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary 刪除主檔
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    removeUserSociety(id: number, options?: any): Promise<Int32ApiResponse> {
      return localVarFp.removeUserSociety(id, options).then((request) => request(axios, basePath));
    },
  };
};

/**
 * UserSocietyApi - interface
 * @export
 * @interface UserSocietyApi
 */
export interface UserSocietyApiInterface {
  /**
   *
   * @summary 建立使用者工會/社團檔
   * @param {CreateUserSocietyCommand} [createUserSocietyCommand]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UserSocietyApiInterface
   */
  createUserSociety(
    createUserSocietyCommand?: CreateUserSocietyCommand,
    options?: AxiosRequestConfig
  ): Promise<UserSocietyViewApiResponse>;

  /**
   *
   * @summary 刪除社團
   * @param {DeleteUserSocietyCommand} [deleteUserSocietyCommand]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UserSocietyApiInterface
   */
  deleteUserSociety(
    deleteUserSocietyCommand?: DeleteUserSocietyCommand,
    options?: AxiosRequestConfig
  ): Promise<UserSocietyViewApiResponse>;

  /**
   *
   * @summary 查詢社團
   * @param {FetchAllUserSocietyRequest} [fetchAllUserSocietyRequest]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UserSocietyApiInterface
   */
  fetchUserSocietys(
    fetchAllUserSocietyRequest?: FetchAllUserSocietyRequest,
    options?: AxiosRequestConfig
  ): Promise<UserSocietyViewListApiResponse>;

  /**
   *
   * @summary 查詢社團
   * @param {number} [id] Key
   * @param {number} [userId] User.Id
   * @param {string} [name] User.Name
   * @param {Array<SortProperty>} [sortProperties] 查詢欄位排序
   * @param {number} [page] 目前頁數
   * @param {number} [size] 每頁筆數
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UserSocietyApiInterface
   */
  findUserSociety(
    id?: number,
    userId?: number,
    name?: string,
    sortProperties?: Array<SortProperty>,
    page?: number,
    size?: number,
    options?: AxiosRequestConfig
  ): Promise<UserSocietyViewPageApiResponse>;

  /**
   *
   * @summary 以 Id 查詢社團
   * @param {number} id
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UserSocietyApiInterface
   */
  getUserSociety(id: number, options?: AxiosRequestConfig): Promise<UserSocietyViewApiResponse>;

  /**
   *
   * @summary 修改社團
   * @param {UpdateUserSocietyCommand} [updateUserSocietyCommand]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UserSocietyApiInterface
   */
  putUserSociety(
    updateUserSocietyCommand?: UpdateUserSocietyCommand,
    options?: AxiosRequestConfig
  ): Promise<UserSocietyViewApiResponse>;

  /**
   *
   * @summary 查詢社團列表  (*dynamic sort support)
   * @param {QueryUserSocietyRequest} [queryUserSocietyRequest]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UserSocietyApiInterface
   */
  queryUserSocietys(
    queryUserSocietyRequest?: QueryUserSocietyRequest,
    options?: AxiosRequestConfig
  ): Promise<UserSocietyViewPageApiResponse>;

  /**
   *
   * @summary 刪除主檔
   * @param {number} id
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UserSocietyApiInterface
   */
  removeUserSociety(id: number, options?: AxiosRequestConfig): Promise<Int32ApiResponse>;
}

/**
 * UserSocietyApi - object-oriented interface
 * @export
 * @class UserSocietyApi
 * @extends {BaseAPI}
 */
export class UserSocietyApi extends BaseAPI implements UserSocietyApiInterface {
  /**
   *
   * @summary 建立使用者工會/社團檔
   * @param {CreateUserSocietyCommand} [createUserSocietyCommand]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UserSocietyApi
   */
  public createUserSociety(createUserSocietyCommand?: CreateUserSocietyCommand, options?: AxiosRequestConfig) {
    return UserSocietyApiFp(this.configuration)
      .createUserSociety(createUserSocietyCommand, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary 刪除社團
   * @param {DeleteUserSocietyCommand} [deleteUserSocietyCommand]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UserSocietyApi
   */
  public deleteUserSociety(deleteUserSocietyCommand?: DeleteUserSocietyCommand, options?: AxiosRequestConfig) {
    return UserSocietyApiFp(this.configuration)
      .deleteUserSociety(deleteUserSocietyCommand, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary 查詢社團
   * @param {FetchAllUserSocietyRequest} [fetchAllUserSocietyRequest]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UserSocietyApi
   */
  public fetchUserSocietys(fetchAllUserSocietyRequest?: FetchAllUserSocietyRequest, options?: AxiosRequestConfig) {
    return UserSocietyApiFp(this.configuration)
      .fetchUserSocietys(fetchAllUserSocietyRequest, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary 查詢社團
   * @param {number} [id] Key
   * @param {number} [userId] User.Id
   * @param {string} [name] User.Name
   * @param {Array<SortProperty>} [sortProperties] 查詢欄位排序
   * @param {number} [page] 目前頁數
   * @param {number} [size] 每頁筆數
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UserSocietyApi
   */
  public findUserSociety(
    id?: number,
    userId?: number,
    name?: string,
    sortProperties?: Array<SortProperty>,
    page?: number,
    size?: number,
    options?: AxiosRequestConfig
  ) {
    return UserSocietyApiFp(this.configuration)
      .findUserSociety(id, userId, name, sortProperties, page, size, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary 以 Id 查詢社團
   * @param {number} id
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UserSocietyApi
   */
  public getUserSociety(id: number, options?: AxiosRequestConfig) {
    return UserSocietyApiFp(this.configuration)
      .getUserSociety(id, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary 修改社團
   * @param {UpdateUserSocietyCommand} [updateUserSocietyCommand]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UserSocietyApi
   */
  public putUserSociety(updateUserSocietyCommand?: UpdateUserSocietyCommand, options?: AxiosRequestConfig) {
    return UserSocietyApiFp(this.configuration)
      .putUserSociety(updateUserSocietyCommand, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary 查詢社團列表  (*dynamic sort support)
   * @param {QueryUserSocietyRequest} [queryUserSocietyRequest]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UserSocietyApi
   */
  public queryUserSocietys(queryUserSocietyRequest?: QueryUserSocietyRequest, options?: AxiosRequestConfig) {
    return UserSocietyApiFp(this.configuration)
      .queryUserSocietys(queryUserSocietyRequest, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary 刪除主檔
   * @param {number} id
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UserSocietyApi
   */
  public removeUserSociety(id: number, options?: AxiosRequestConfig) {
    return UserSocietyApiFp(this.configuration)
      .removeUserSociety(id, options)
      .then((request) => request(this.axios, this.basePath));
  }
}
